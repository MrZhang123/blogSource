{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/bem.png","path":"img/bem.png","modified":0,"renderable":0},{"_id":"source/img/canshu.PNG","path":"img/canshu.PNG","modified":0,"renderable":0},{"_id":"source/img/result.jpg","path":"img/result.jpg","modified":0,"renderable":0},{"_id":"source/img/text-algin-last.png","path":"img/text-algin-last.png","modified":0,"renderable":0},{"_id":"source/img/vue2.jpg","path":"img/vue2.jpg","modified":0,"renderable":0},{"_id":"source/img/string&Array.png","path":"img/string&Array.png","modified":0,"renderable":0},{"_id":"source/img/webpack2.jpg","path":"img/webpack2.jpg","modified":0,"renderable":0},{"_id":"source/img/2017newyear.jpg","path":"img/2017newyear.jpg","modified":0,"renderable":0},{"_id":"source/img/conclusion/ultra6.jpeg","path":"img/conclusion/ultra6.jpeg","modified":0,"renderable":0},{"_id":"source/img/js-position/client.PNG","path":"img/js-position/client.PNG","modified":0,"renderable":0},{"_id":"source/img/js-position/client_table.PNG","path":"img/js-position/client_table.PNG","modified":0,"renderable":0},{"_id":"source/img/js-position/offset.PNG","path":"img/js-position/offset.PNG","modified":0,"renderable":0},{"_id":"source/img/js-position/offset_table.PNG","path":"img/js-position/offset_table.PNG","modified":0,"renderable":0},{"_id":"source/img/js-position/scroll.PNG","path":"img/js-position/scroll.PNG","modified":0,"renderable":0},{"_id":"source/img/js-position/scroll_table.PNG","path":"img/js-position/scroll_table.PNG","modified":0,"renderable":0},{"_id":"source/img/promise/promise-states.png","path":"img/promise/promise-states.png","modified":0,"renderable":0},{"_id":"source/img/promise/then_catch.png","path":"img/promise/then_catch.png","modified":0,"renderable":0},{"_id":"source/img/vertical-align/2.png","path":"img/vertical-align/2.png","modified":0,"renderable":0},{"_id":"source/img/vertical-align/center.png","path":"img/vertical-align/center.png","modified":0,"renderable":0},{"_id":"source/img/vertical-align/5.png","path":"img/vertical-align/5.png","modified":0,"renderable":0},{"_id":"source/img/conclusion/raver.jpeg","path":"img/conclusion/raver.jpeg","modified":0,"renderable":0},{"_id":"source/img/conclusion/ultra2.jpeg","path":"img/conclusion/ultra2.jpeg","modified":0,"renderable":0},{"_id":"source/img/conclusion/ultra3.jpeg","path":"img/conclusion/ultra3.jpeg","modified":0,"renderable":0},{"_id":"source/img/git&github/1.png","path":"img/git&github/1.png","modified":0,"renderable":0},{"_id":"source/img/fight.jpg","path":"img/fight.jpg","modified":0,"renderable":0},{"_id":"source/img/react/react_redux.jpg","path":"img/react/react_redux.jpg","modified":0,"renderable":0},{"_id":"source/img/vertical-align/1.png","path":"img/vertical-align/1.png","modified":0,"renderable":0},{"_id":"source/img/vertical-align/4.png","path":"img/vertical-align/4.png","modified":0,"renderable":0},{"_id":"source/img/vertical-align/3.png","path":"img/vertical-align/3.png","modified":0,"renderable":0},{"_id":"source/img/conclusion/ultra1.jpeg","path":"img/conclusion/ultra1.jpeg","modified":0,"renderable":0},{"_id":"source/img/webpack/what-is-webpack.jpg","path":"img/webpack/what-is-webpack.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-SpecLumn/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"source/img/conclusion/ultra5.jpeg","path":"img/conclusion/ultra5.jpeg","modified":0,"renderable":0},{"_id":"source/img/conclusion/ultra4.jpeg","path":"img/conclusion/ultra4.jpeg","modified":0,"renderable":0},{"_id":"source/img/rn/debug.jpeg","path":"img/rn/debug.jpeg","modified":0,"renderable":0},{"_id":"source/img/rn/webview_debug.jpg","path":"img/rn/webview_debug.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-SpecLumn/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-SpecLumn/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-SpecLumn/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"source/img/macbook.jpg","path":"img/macbook.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"b2494ed771658f8261763d54fe8fabcce2a5091b","modified":1513771578000},{"_id":"themes/hexo-theme-SpecLumn/.DS_Store","hash":"eb10a4684935c70521ebfae173a3913549c21d03","modified":1491449358000},{"_id":"themes/hexo-theme-SpecLumn/README.md","hash":"fd16b22f76064601aed6a48ed1e7cf16f75c6618","modified":1491373050000},{"_id":"themes/hexo-theme-SpecLumn/.gitignore","hash":"20cc6c7d26d514bb99e06702d8c694e35491c1d5","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/_config.yml","hash":"955e02f89906fab8f80ce09b53a5a7d422bc7c95","modified":1491449384000},{"_id":"themes/hexo-theme-SpecLumn/example.md","hash":"defb1f667677e1fd13b3a4799a6c70eae621f796","modified":1491366610000},{"_id":"themes/hexo-theme-SpecLumn/package.json","hash":"cb6cea7b3d205a8792e0d2d6b38ffd90c36224c9","modified":1491034338000},{"_id":"source/_posts/BEM.md","hash":"22f7767fc87173fe8edd6c68db7bb423829d8037","modified":1508320102000},{"_id":"source/_posts/FlipCards.md","hash":"ff763fcebf17684b4cd0c0532e0831303eafa001","modified":1471419558000},{"_id":"source/_posts/JSdecode.md","hash":"8d2a4b3473c3d90fe7eebf922fc92c0b727fe31e","modified":1513768989000},{"_id":"source/_posts/RN-list.md","hash":"30c353e68595aa416308a7c6eda17dedbfa28c48","modified":1513769088000},{"_id":"source/_posts/activeElement.md","hash":"7af7c0bc481cfe8d253b39a333512ac82e8ff7ba","modified":1470127120000},{"_id":"source/_posts/H5File.md","hash":"5eabb180f2d1118435d1532aeefa41f46e5ebd82","modified":1470127084000},{"_id":"source/_posts/article-1.md","hash":"53211b8384b652d90a823daa5e65783398ae9659","modified":1468436746000},{"_id":"source/_posts/article-2.md","hash":"10c0bcfb4ce1f6353baa843acb7fe2b2db192bca","modified":1468436702000},{"_id":"source/_posts/es6-Practice.md","hash":"6f63c5012488c44777b0f24f77dd654930655ae2","modified":1470127056000},{"_id":"source/_posts/file-rem.md","hash":"79f64798429da2b7c9607220d233ab3da7ac6233","modified":1470127020000},{"_id":"source/_posts/fileupload2.md","hash":"e2be3df738465c4f259fcf4e33c2e6676b6df734","modified":1470127036000},{"_id":"source/_posts/git-commint-norm.md","hash":"972b3342d218106852f6e98b4b8855a8446d15ef","modified":1508322268000},{"_id":"source/_posts/gitandgithub.md","hash":"e361eb952996d81541737b4f5bc6923599af2ed5","modified":1478977976000},{"_id":"source/_posts/gitreset-md.md","hash":"1d28fda611cbf4a6148a53bdaaf928819c926088","modified":1488632582000},{"_id":"source/_posts/google-map.md","hash":"f3f3a3825dd1a0fc8c7484a8fad916c22b826815","modified":1508320197000},{"_id":"source/_posts/gulp-broserSync.md","hash":"4928f1bdbc4da034f1e68475540cd569ddc50266","modified":1470126972000},{"_id":"source/_posts/hello-2017.md","hash":"53646a972d7ad2b0557e98c98770e36bed29aae6","modified":1523587891000},{"_id":"source/_posts/gulpUse.md","hash":"c771ce801fe7790703272dc8393702a555f3ddac","modified":1473235568000},{"_id":"source/_posts/hexo-theme.md","hash":"dcb786e0a936fb262465dcbdcbfa4442ee3062c0","modified":1508320087000},{"_id":"source/_posts/iframe-POST.md","hash":"35ede60f6d57a7de23222e2183e46015aee8a0ea","modified":1483715536000},{"_id":"source/_posts/js-Array.md","hash":"f28537fcbe283abcf06de5fd3b399994e89e2450","modified":1470126952000},{"_id":"source/_posts/js-String.md","hash":"d9c5f85ce63ec1170ae087aa69ac8630002aa3ac","modified":1471135870000},{"_id":"source/_posts/js-position.md","hash":"70cff444407f95dda302625d6bfce2c4fdc41a18","modified":1470126940000},{"_id":"source/_posts/linux-study.md","hash":"4a4105f71883be3c2933560e8f99f035925aa37d","modified":1475907998000},{"_id":"source/_posts/maf.md","hash":"b0d9da639b3d3a759c81ebb6ff9f0743a2dec3dd","modified":1523587891000},{"_id":"source/_posts/hello-2018.md","hash":"d5a0249d2f267f06f37612538e5f87a8a62a8e97","modified":1523587891000},{"_id":"source/_posts/node-npm-package.md","hash":"42fee9d80396955162749962cadd634c5ccc4e29","modified":1480314578000},{"_id":"source/_posts/page.md","hash":"da69bb74c89e4ebb259385befa5c23d23dc20099","modified":1508320111000},{"_id":"source/_posts/promise.md","hash":"a91627ae0dcb97f2eb24fa102c26598c294337c4","modified":1482645456000},{"_id":"source/_posts/reactDOM.md","hash":"5e57341b76fc145792b9d630fc9cb2d03e87cc79","modified":1509079062000},{"_id":"source/_posts/react-css-modules.md","hash":"4921235299b429ee5dfd917610b4186bfff1c421","modified":1523601254000},{"_id":"source/_posts/reactsum.md","hash":"2f95816f412e207e6fe55528ea86e29fe0486737","modified":1508320211000},{"_id":"source/_posts/rn-webview.md","hash":"cf94c2256ea0659a41725830aad6fc2095c8b727","modified":1513771245000},{"_id":"source/_posts/summarize-June.md","hash":"1b970d6a2a4ca8061d8dd6606d2df36387b0b944","modified":1468437502000},{"_id":"source/_posts/summarize-vue.md","hash":"a1dff7e7cacd111e4304160b176d4988dd200b7a","modified":1468440050000},{"_id":"source/_posts/tec-1.md","hash":"659748ea7a0e6166d6f529c0382d1a3d17631cc6","modified":1470127184000},{"_id":"source/_posts/tec-2.md","hash":"0c229d43576f4b18e856352a7511c0c5b195860e","modified":1470127158000},{"_id":"source/_posts/text-algin.md","hash":"3a67afdf11d59a8a65aacfd29988248ccbaa69dd","modified":1470126996000},{"_id":"source/_posts/thoughts.md","hash":"7bb9907ff2be78195e91728e698e3b0059d8663b","modified":1475346104000},{"_id":"source/_posts/vertical-align-1.md","hash":"5d0aeabe283540880fe090226924b93574e216d7","modified":1470126892000},{"_id":"source/_posts/vim-base.md","hash":"1daf84ddcf53a4d3f226197b3c5d79c1ba0aa679","modified":1510654544000},{"_id":"source/_posts/vue-demo-1.md","hash":"dd68c3a76b979ff7814101f729dd17be1387fd8b","modified":1468440442000},{"_id":"source/_posts/webpack-1.md","hash":"16d5eded1d79d57817183afb9eb80d7a0b59a714","modified":1465291022000},{"_id":"source/_posts/vue2.md","hash":"684c7225a4545dbe90ab83e08c7c403e6dc79142","modified":1486477030000},{"_id":"source/_posts/webpack-vue-2.md","hash":"ff99e0236ccee2b2b01caaf300dd742a5053392a","modified":1468440402000},{"_id":"source/_posts/webpack-vue-3.md","hash":"93a6f10f9cca402017c65230594aa82c91bbb7fd","modified":1468440416000},{"_id":"source/_posts/webpack2.md","hash":"e6ca36c036d5aa85d819e5a1fbd69bf4109cde65","modified":1488627674000},{"_id":"source/categories/index.md","hash":"5c2f92af432f7cbdd0740737d53995a717bcdc97","modified":1458897212000},{"_id":"source/about/index.md","hash":"e5395ebf9e7cb1356246d593e4a4a3c1a9b8802f","modified":1478981344000},{"_id":"source/img/.DS_Store","hash":"a42cbbe61e558d9850cdea987811571f963556b0","modified":1513771583000},{"_id":"source/img/bem.png","hash":"d42198453a7eaf8baade812f7b82f06451c4fefb","modified":1508319796000},{"_id":"source/img/canshu.PNG","hash":"d8f76576d3f889699468d3a4e61217614732266b","modified":1508319796000},{"_id":"source/img/result.jpg","hash":"926fbd0d8d3500143ff5f7936701048c7172e8fd","modified":1508319796000},{"_id":"source/img/text-algin-last.png","hash":"7cfef7c436d94926cd86b925c3195c7fbf27101a","modified":1508319796000},{"_id":"source/img/vue2.jpg","hash":"874c2f21f408f0e89ee567906af85e5a02d418a9","modified":1508319796000},{"_id":"themes/hexo-theme-SpecLumn/.git/COMMIT_EDITMSG","hash":"7cf75004d82170041072b8b78bfb3c46062fbf68","modified":1491449413000},{"_id":"themes/hexo-theme-SpecLumn/.git/FETCH_HEAD","hash":"8e0f815f094734313a804086768fd0cdc4c537c7","modified":1491565112000},{"_id":"themes/hexo-theme-SpecLumn/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1491372540000},{"_id":"themes/hexo-theme-SpecLumn/.git/ORIG_HEAD","hash":"ab5b57f3edb5aa78a42d6be4c999e290437bd9f5","modified":1491372542000},{"_id":"themes/hexo-theme-SpecLumn/.git/config","hash":"5bf3bb700d7c46a8e43161ff434ccb552711d273","modified":1491034592000},{"_id":"themes/hexo-theme-SpecLumn/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/index","hash":"d92e884062dbc7494c99dd8e3e9829a20d52af8d","modified":1508320939000},{"_id":"themes/hexo-theme-SpecLumn/.git/packed-refs","hash":"6a3e50a675a2375976d8e0dc098a89d5f905ad41","modified":1491034338000},{"_id":"source/img/string&Array.png","hash":"0abf7f6c381f1c9930a699f955671624ff193475","modified":1508319796000},{"_id":"source/img/webpack2.jpg","hash":"44a17377a09362a9ee3645e0b9dd2915942080cd","modified":1508319796000},{"_id":"source/img/2017newyear.jpg","hash":"31ea88cf7172ee61580875ca1de8199e1d976ba4","modified":1508319796000},{"_id":"source/img/conclusion/ultra6.jpeg","hash":"739c39d3d2e27cdd1cd59300ce01ff687d6db318","modified":1523587891000},{"_id":"source/img/js-position/client.PNG","hash":"8fb6351d0a5016fa7bde3870cbb96e252d136376","modified":1508319796000},{"_id":"source/img/js-position/client_table.PNG","hash":"a733c09e90c1ed6b49be1a271d19f1d44ac20324","modified":1508319796000},{"_id":"source/img/js-position/offset.PNG","hash":"3f65d869874d170c808459a68e096a947f8447a8","modified":1508319796000},{"_id":"source/img/js-position/offset_table.PNG","hash":"85125bf81e70483dfa791486ac84bc536a07e6a4","modified":1508319796000},{"_id":"source/img/js-position/scroll.PNG","hash":"481d900d9a2e994ec70189a6b21c43df941bbc64","modified":1508319796000},{"_id":"source/img/js-position/scroll_table.PNG","hash":"beec38e8e75ce86cf6945a7371f7950cb87ff9ad","modified":1508319796000},{"_id":"source/img/promise/promise-states.png","hash":"8efd063e9da449722fdba426e6e24ebadc034978","modified":1508319796000},{"_id":"source/img/promise/then_catch.png","hash":"301beafc2dd5b8ab9c87fb1664e36740cd92d678","modified":1508319796000},{"_id":"source/img/react/.DS_Store","hash":"6354403f966f4b24de1ad951a65e3a737fc44e72","modified":1508320000000},{"_id":"source/img/rn/.DS_Store","hash":"87e490c49a88f495672a141e5237370899dde810","modified":1513771241000},{"_id":"source/img/vertical-align/2.png","hash":"83da526195bb3cd816483997329ccf66a04970a3","modified":1508319796000},{"_id":"source/img/vertical-align/center.png","hash":"5b7baa87dfda843386e9db4d8cb839320ed38029","modified":1508319796000},{"_id":"source/img/vertical-align/5.png","hash":"f987a5717152ef7473a128fa2963969f4ffc558e","modified":1508319796000},{"_id":"themes/hexo-theme-SpecLumn/source/.DS_Store","hash":"463f0867f37556b23df16357df2bff560a931e65","modified":1491039593000},{"_id":"themes/hexo-theme-SpecLumn/layout/index.ejs","hash":"2ca3fcb01cc4bdfcbe0600d500f7a064232ac514","modified":1491120480000},{"_id":"themes/hexo-theme-SpecLumn/layout/layout.ejs","hash":"1a1aef56e5a63f809c4a97e18d58858eb2bea798","modified":1491120480000},{"_id":"themes/hexo-theme-SpecLumn/layout/page.ejs","hash":"dd06bb6790e8f64c4d0b0b7ec1119840e7545d40","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/layout/post.ejs","hash":"dd06bb6790e8f64c4d0b0b7ec1119840e7545d40","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1491034334000},{"_id":"themes/hexo-theme-SpecLumn/.git/logs/HEAD","hash":"9ccaaec5158966ab888303c034aed973e74c81fb","modified":1491449413000},{"_id":"themes/hexo-theme-SpecLumn/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1491034334000},{"_id":"source/img/conclusion/raver.jpeg","hash":"73fd5819fb2b5505b467c36a204347a33cbc652f","modified":1523587891000},{"_id":"source/img/conclusion/ultra2.jpeg","hash":"1a21b1ff6b08aeb109397098476432ba6ba77646","modified":1523587891000},{"_id":"source/img/conclusion/ultra3.jpeg","hash":"5f3f20456c074c19b24ef5bc1cd5cd8f4dadec1a","modified":1523587891000},{"_id":"source/img/git&github/1.png","hash":"ba8e2da70b3c30aad649f7ffe2f0217a5ff7654d","modified":1508319796000},{"_id":"source/img/fight.jpg","hash":"6a45e48b32c5415a38745b4834c94988fd895f57","modified":1508319796000},{"_id":"source/img/react/react_redux.jpg","hash":"7b064fe5c85f7a5066eb202f51b7ac7deab6b51a","modified":1508319796000},{"_id":"source/img/vertical-align/1.png","hash":"a48923ce7ee2ef53137031ddd3da68e09218130f","modified":1508319796000},{"_id":"source/img/vertical-align/4.png","hash":"01e01238bcdf0218bacbd62167c79ee2e3348aab","modified":1508319796000},{"_id":"source/img/vertical-align/3.png","hash":"b5e9a58bd4c8d47adfc7ce574b09d21d3f04a643","modified":1508319796000},{"_id":"source/img/conclusion/ultra1.jpeg","hash":"c752e7aa257ad9138e78a55a5eee01e0e112f899","modified":1523587891000},{"_id":"source/img/webpack/what-is-webpack.jpg","hash":"5223ec078c8bee3ca3b6428e9198c290b165763a","modified":1508319796000},{"_id":"themes/hexo-theme-SpecLumn/layout/common/article.ejs","hash":"9ca074c68ffa8e65bc05b1a3101a0f70616ac91c","modified":1491120480000},{"_id":"themes/hexo-theme-SpecLumn/layout/common/foot.ejs","hash":"fe46a51f667724cfcba25d4ea66c311339a8ac9d","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/layout/common/footer.ejs","hash":"08f9f636b11a92e05178960ec4b068579c9bc117","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/layout/common/header.ejs","hash":"c9b6c9ebdf9ed937d80113a847ff9f23d102f2ed","modified":1491119614000},{"_id":"themes/hexo-theme-SpecLumn/layout/common/head.ejs","hash":"fa934e14db49a1122b570071186b3aefd0c5e2d8","modified":1491125161000},{"_id":"themes/hexo-theme-SpecLumn/layout/common/profile.ejs","hash":"696177b3bc13a5f31d4eed39cfb1cfab099338d5","modified":1491545153000},{"_id":"themes/hexo-theme-SpecLumn/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1491366610000},{"_id":"themes/hexo-theme-SpecLumn/layout/comment/duoshuo.ejs","hash":"08db676090905ea35586193d6a60d57c84943e10","modified":1491034598000},{"_id":"themes/hexo-theme-SpecLumn/layout/comment/index.ejs","hash":"382e2cdfd0b761fca58ce2744bfff6527e3c9cf2","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/layout/comment/livere.ejs","hash":"e96e5ea8f01dc0277ddfd5a118eb7814a27f690f","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/layout/comment/script.ejs","hash":"44cec4984706afb2e9127c121046b21b0525a2b0","modified":1491366610000},{"_id":"themes/hexo-theme-SpecLumn/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1491366610000},{"_id":"themes/hexo-theme-SpecLumn/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/layout/plugin/scripts.ejs","hash":"385efc59a5af3bfc261659724c0b92e2b8c455a8","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/source/css/.DS_Store","hash":"54045e94ad9f7fe8cad102bb24ca42e51388bbcb","modified":1491039597000},{"_id":"themes/hexo-theme-SpecLumn/source/css/_variables.styl","hash":"4a9ebd9ec47fb2c5d6ce6cd021d254c59c501a32","modified":1491125303000},{"_id":"themes/hexo-theme-SpecLumn/source/css/style.styl","hash":"836b1f08b0c9e4ec1c3be28e7a5ba2713c176067","modified":1491126884000},{"_id":"source/img/conclusion/ultra5.jpeg","hash":"2a4796a8fcdc1eb055e20e16e365b477b0878367","modified":1523587891000},{"_id":"source/img/conclusion/ultra4.jpeg","hash":"f5e4bf2d020df11f95a62abf5ce1fe257054de2b","modified":1523587891000},{"_id":"source/img/rn/debug.jpeg","hash":"e6492d195492b9037234b4ee394d5397750db3c3","modified":1513770836000},{"_id":"source/img/rn/webview_debug.jpg","hash":"fc88ceb8e82574fd8f510326e88f3fd229637400","modified":1513771229000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/00/3b4b0793618f99d371c5e86983f911c399d8ce","hash":"4f6bdd95932d80a9e828619d84ab9784ee2d2873","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/02/2acc183ea22d160423ba35ed35c13776f0ad24","hash":"a2bf90a2c05482a04b5be089f7408aaf9de560d4","modified":1491034575000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/02/7f14b7c117e745252345325c200f00709ebd3c","hash":"c37b460b025d830ab0140356ae70aceeeb2695c7","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/05/e85179ac5a37e08e9d0fddeb264239028f89af","hash":"4546c5596cf26e157badaaf5a3dbe048d99fb520","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/06/fd0f3f3c2b2509d68a42f6c81550b848f40ed7","hash":"d16cd02922ce0fe99498e0457d11324c0b518976","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/07/6ff323ee68733d009bb283ad6ec916b353b29d","hash":"b87280d0cf1c4cea01d6d9a290e71674003332db","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/09/b6db2e88d229fa567493dce28dc0c6eae1ecb8","hash":"b072727ba7a10ecc914a8a5b52fa63e8b3089b09","modified":1491040798000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/0b/c073ffd6effdc0a427ba318d63b9de91a82192","hash":"935bd312a8adc7aaa03ae057b8074c912b9e9aa9","modified":1491126868000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/0c/7cd196b030684ec13692ded55693000f5fd69b","hash":"624d658f535c71a25c6c3440b0185718917e6917","modified":1491125285000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/04/a1018902870309e74dcd38e7357e11a70b1e20","hash":"d3c8b24697e7933537c6e4ae8d36fbb50041d77d","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/0f/815e9f67080acfe3bb23126f654acd334f44fb","hash":"5695e6dfe8a9661b5b377816b973d3527823f933","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/0f/8759c65e5bf481ec0ce9c43340a5c0819fcff6","hash":"fc1dd4ff960c7c92466c31cdc06ec2ceb5f1ae7c","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/1f/eecfb11ae9fed74a565be56bba0520a1f789af","hash":"cd9a47f0411fda89015cd7a454cd52b1dea242a3","modified":1491449413000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/16/d036d16f2534f6935795340f8b64c78d38bfc4","hash":"ab9b6d4de57bc58897523c1250ff2c88736fd444","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/18/3a8afe6b5b69325d2ba66ca6f94a29ca3ac7a2","hash":"6afeac8188391a79f3cd90a88a700f1b71c56563","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/20/aa531396fc0fbf008b876fc0b37f8422ca8bb7","hash":"15b0d9d3e6dac21d232df06bd11b20d2c162ba66","modified":1491366586000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/23/3eb9cff4befbd435aaf3496947691902f5618d","hash":"65fc3b9de5297ed1dc48185773e15cd66e4103b8","modified":1491034575000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/23/641887923b01e4849770ccc5fed54f8da388e3","hash":"fecd64d1b0da2313cc8ebd0991b85f9c58992dec","modified":1491372763000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/26/148aa9cecd64d1e0931723c42b7e59fe6c14b6","hash":"44140f8d448b1814b0b661343bc0d14164934c60","modified":1491126868000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/26/373743d40a5d9916d8a17e8cf47ef557f52263","hash":"b29ac1530a8d2f0c2ff79c0b7091e93d2f22f6e5","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/2a/46591735624a47124e263d7146ea5f0bce43f2","hash":"18f17036bad12a7024d4f20972df50f2c101bc32","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/28/0e55866144e16a079580649878ab47cf0ee520","hash":"6aff70a505f0f03d7fbf6b2225cdb111c0b83144","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/2b/211da9d8c73fb76a84740edb9d9b20ad723464","hash":"189e87d698cdc66490895292090fb3943d095d17","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/2c/2c5096043f4ad2380b00e46cbfaaf3f82fc7a3","hash":"709b557d4fd0c34b7c7b82f37e0fffa87da90825","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/30/74ed6b3218365d720b0138365c53899c081811","hash":"0a0d274f3fe57fd156cca65f249f88e9b427b1fb","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/34/6dddb59bb702ef3e78c71ec593f30e8c0cdc3b","hash":"004155231b75eced6e55aa216f2868bde57d51f0","modified":1491042418000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/39/12a29ce48481588a3336d94b8925b7d4091170","hash":"5e1c565cb1f1203ff74495772ec7f99f925c9ca9","modified":1491125285000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/40/4d0f05537ed40ea4194cfba40f05aae95216cd","hash":"b9877d62bbf0955cad18f3b8d331fb9bfb7da206","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/42/228019cee7e2cc883dedf62cadbfeb0a12b52e","hash":"da7897f099fca6b35b010a20dca5b210cfd6f84e","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/4b/9cae9f4adb56d6e029bc9df074187a0ca3ba51","hash":"523607264ecb4a2a1692b2a0cab154082fd2a040","modified":1491040798000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/43/1b09718fad534178f45f040496bf1449395185","hash":"bf54ab1e80ec36ac68933cbda6742696d612e9b8","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/43/782c4964e70f72d48d38df9f0eaa9791878a0f","hash":"f4676f7d40fa568e159b48d3afcdead1e35112f8","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/43/fddd75145d39af97eede238dbaa355b909eee7","hash":"3954e9a7729d9da2f44fc7c32db4288b2c4d711e","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/49/cb1ecffef9a5c8dd4b2bb8e5f7838f7e47929c","hash":"6b83ca0d424c9efa4f651821e87dfb5708cb7f0e","modified":1491040792000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/4e/b3fad58cd3211657c16a269bca2d60d1182572","hash":"a91d17861dbd5c4b12a97674ab010ee0670fbec7","modified":1491126868000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/53/7a2ea5af5fa5d4bdc56f54d6efa4a90f7a2e9d","hash":"eea3f4ec5a864d4356084f7c0093ded6144cf7a7","modified":1491034575000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/54/46f353700fce8c2183cab45ab0ca1795a9a28b","hash":"50ab9bc950f70af3d33e3bd46e82db391fdbe89e","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/55/51fe1039490df7382517ca2fd8529173756152","hash":"ca7cb4399d1bb3fd9f18b70aca0dc254bf5133d6","modified":1491366586000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/55/72727e06546ee385ce6929962a968ddaf4e972","hash":"7bab77c3dc6f0488d5c203b77fc8ff0df7f2eaaa","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/55/76045e186942e04cc6409f0c9b0eeec509bfea","hash":"425d10746276821098d14a1ff10f036a59d8f786","modified":1491034575000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/57/da038a1742af5ac8a1369495c2deac99d7a3ee","hash":"9e7436c1f3d134208e3f4bfc947e1587b93604dc","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/58/88902e81bdc6c5b6a1b18bd2c9b4f41fa44553","hash":"cfe14b5a561660c86b90813cdda9811e453fdf32","modified":1491034575000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/5b/2e82d20ff45b650e9686d73a0b8d0f8de7a270","hash":"ce9bab07ca852e874f0e65b32a815419363eb223","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/58/bf74d083944c47926264b7f44e769e9e6e3c8d","hash":"2a9168e7c2ea49af792e7416f00ab6cd603ba472","modified":1491040792000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/5b/44f1885007ee7d8789fcc393268c41457bce22","hash":"45f5921d903bb855611ffa69d9581555b954cf73","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/5c/20501d5b81eee0e173d2d37bb0898d5e6122fa","hash":"c88f019ddae3579d8ca999d0cbe2697e9b0c3c9a","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/5c/f93621c1f88a57fe9279645c6a5e04d19e14ef","hash":"aa096cc74b7a1e65a5700630ad5ab8130c3b6177","modified":1491040798000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/5d/2cdf074b2d0b19cb82981074f98a1752066810","hash":"adf94f3aae01311f38027e6aee28885f45763b7a","modified":1491366586000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/67/293309b78d93e5c6d6c65012a1de5450628f63","hash":"d5dbe724e3f73adf5b4c480aadf65c739e71978f","modified":1491126868000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/61/e77d65f2704076227450e7f35bcd573222ddfe","hash":"7ad76275bebe35b06f44915b488e8c1b857bbf7f","modified":1491449413000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/72/fab8e0f74430d7e12ffca79b60276403344c4e","hash":"8d7b6836b6b320b89aaf67e2d1dd52fda137b7e7","modified":1491125585000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/73/a6e2679c985cdbd405152230c9c09b9fa5e8d1","hash":"31f344b267bab6a3f4a09211056d837315001309","modified":1491125285000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/75/11d36cbbaaf07a733d2d7276cfb8c8c04cde7a","hash":"67b5eb2d446bf09607f5a4bc8809d9fef9b2837b","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/75/7c21b6d5bebe425e4e9bd9e733e041aff60d8c","hash":"6e377addc0e614dfd71c207c00b83f17065f675d","modified":1491042418000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/76/34e0043dd30a71204f20066846c8d09a4e1eeb","hash":"b46bcec8b0aa7b33e7d21069f1a305a449c62f95","modified":1491126868000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/77/2e559f67fb2baeb6ff3f6fd23c6e14ccce61f6","hash":"b2978eb1a77e9cc1c3c19401026d33a377a8b231","modified":1491366586000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/77/540bd2a24a7325a0635aa0737063741aa8a851","hash":"28471685eb882faae2eb3d32b84c17a256178c1a","modified":1491366586000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/77/c4f82eb163dffd98c7144846817030373d4fa8","hash":"dcd70f59eb0cc9f6c2346d998c76c5a65d6a57d2","modified":1491125585000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/79/27260445a83e7b47f9afc1114889b0ea64c175","hash":"403cd6072cf299f8c1b54fcf787aecbafcdc1802","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/79/4d94f7ccaa72a1d9a8ae9be973bed2a1d26256","hash":"a563bb2d1d80b5232f682ff2b8abe83ff89a5b70","modified":1491366586000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/79/c9f622f2f1fedf95966f2a268993821bc3209c","hash":"4af94ec3c74b69cf3a42dcc82a11a1455965e061","modified":1491040792000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/79/f6d093460f8f0492bd16d285b24b6c0c7132e5","hash":"2f38f2920beb3f681dadca6f5c4977b2079b9af6","modified":1491040798000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/7a/87f1f1eb95f5c46d6bf733c8385b1edc67261e","hash":"8c1dcd1224378355b44e449cc37530acdda743ea","modified":1491366586000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/85/b24d64565748d91e29e4c441d418fcf657aa97","hash":"b58e826d33dfb56f612552a5b18d9c42d935a530","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/86/7bdc7b34edf7e27821a2251aadea279a77ea7f","hash":"0d129f209628597a75bdf2b339391e0583a3a74a","modified":1491372763000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/86/dcb737ab460b6831ddf2d15c719f5ca307d940","hash":"22a07593577123b62c4a27d75c8eed389e4f1fc6","modified":1491373063000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/83/1475aa0a964e480da4ede4fc2c139c4f91c306","hash":"571c27ffaba4b3dc304c3ad6f4fd626623275dec","modified":1491040798000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/83/d6ad006a1fcfe24061904cc6df91c434ad643b","hash":"9814c5be0d2ebad3c10b28f6649a988caaca92c7","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/8d/95b2d4cef4f34e612ee0e9634460062c4cb4b5","hash":"fd9f7f7aa3df3d3d452b43bcfbb0f3b33c44f01a","modified":1491364711000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/8d/fbf98a9401941a5d1d2ea5661230d1c7caed22","hash":"6a8128a82b831334efda7fdb9d0822fb40e0b8ff","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/96/51a59a861370a155c83ff554fec7e784e06278","hash":"ec70b4b472ed9ae325bd537c29583421a888b9c6","modified":1491125285000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/9a/c7ece42ae04e53d0221b76dbc6cb452e2d9d0f","hash":"a1ce0cd8eae5a8b5f46f113af05d177a7283d561","modified":1491042418000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/97/5d6db30d1258fda634f4d9d207658c78278759","hash":"8a85685418685286e61efbcf43dbf4555ba311ae","modified":1491373063000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/9d/326e643150174444cd68deb5b132db422a76a9","hash":"96442fa430f637d7ce51ab8b5d147463d6f1f685","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/9d/e18992e4f20573cd69fc87ba7e51258890ae4e","hash":"bea1861c7638d490bea93c7b1afb9ecc4d5a982f","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/9e/f713cca29a48836cd14644d167773d56ceb20f","hash":"9343f4c67998c9649212b1fc06cfe093f756f7c1","modified":1491449413000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/9f/b41b83cce7bbe6ff9a865bcc75e7c34dc55fb8","hash":"9500154d9856f0182f0a90ae3472483c1d9ef377","modified":1491366586000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/a0/c486760255ce492cb89f31e5c4b89cd5820898","hash":"0dac71e4a2a216d3148ce4fe603d8ecb2b4b442e","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/a1/dada9d86ee53da4a95ace4da2b8f43915e3c52","hash":"46fa710d001a64efd7ea20b5243eb8e7631c6cf9","modified":1491034712000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/a3/d3c867c27474e06a0f0a593ccdd102c01ae565","hash":"68876b3c314cb80453e736692556d3e4aa53f7e0","modified":1491372525000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/a5/00795beb038fc2b8323083e0cd43353ec6e28e","hash":"f90ea80ac058530efa645fbf0a669f0705c0bd26","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/a5/a755ee3cd7d183bb405a0ba6f579d03d631e91","hash":"8571eb04c42a152ac3bb5c9cc124cd340015bb28","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/a7/32c64cc7709bb7760fa4c85c51ecf751b57d98","hash":"8d828407105e7bccc3ed7b0299d703e1054356cf","modified":1491042418000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/a6/20fbb0f0d946776f37c8333ee5b82816e50903","hash":"57b8d4dbad7088efef40a4bcf37e461f42fed400","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/a9/871701e79c62c50bc38e18d66f2dbe4975a0fa","hash":"a6c3aa3316b20a19c3a2df21b3dee1b57124c3ea","modified":1491125585000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/ac/23b3fb452b56ba5ef893d105bdcba112c427d7","hash":"3733cf992ea9ab6d7cd93de671683354e7ac2e47","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/ac/2d8a8dc2a17f6e070faa5459526c9b02cfca5c","hash":"77794450ab044c46d543e71a11f80cf089ad5ad3","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/af/18bf592d9068fc7115ed9e08b827c87b3fc8a3","hash":"02898e86cc234cfd3482020c37c5510480451caa","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/b3/e0f2ccebf62a8890201dfa5c4dc86a8b791116","hash":"014def5cfd574428af117cd3537fe0fa096e20d1","modified":1491034712000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/b5/3310c2c16cee3a6c3926b4b46c047dd1de5103","hash":"877d5ba8f38141b821c13c71aa9faee355482413","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/b5/4727b327876f4f2036884ba62e46361cecfcd6","hash":"0f2e2389e4f545926544d23f740a0e493a127ddf","modified":1491040798000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/ad/1b395175b976430969127f2c0182f68e26ec9f","hash":"bb76e2004a76ba9b0976a9f52b19c257875bf2d5","modified":1491125285000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/b8/f7d688e45d6ac7eae25732af3bdfaf427ae2b1","hash":"b4975b441c15db326e35fdcca5055bc50507b6eb","modified":1491042414000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/ba/4a56616baa1b1acaa15ebd138647ca7c7c615f","hash":"fdb7cc7d54443b8be1c9bbd7207eb6a88f4f32bf","modified":1491366586000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/bc/0a7342854db8a06e6c69b7ed87eb9ee176d0d4","hash":"773015cbfa8b943729b112f13302d6ec9d2c2593","modified":1491125585000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/bd/f2137820ba5e24507163874133b5ba63090db4","hash":"f920d7d9fb29fbaa33231293dc97fc8ac0899731","modified":1491040798000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/bf/53ca3861c085ec5d7215df3c87c802f6e2a55e","hash":"9778a1ab04f9bf3d8500c2f0a8b5323e89217518","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/c0/d07e7ac7510bae70238435e1a5c16d9955b028","hash":"a547186201d09281747ba81a8eb60e0717b2c892","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/c0/f1bb8c8f19ef390166161d419ffdbc93cb24af","hash":"6d761e8beebeade94623c5e7226b2b564f2dbadf","modified":1491034575000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/c1/86ab152e76139d89af2cbedd09956d516ac54b","hash":"2e0f928e8744a6927d1a26551c6f95dc54a9ca80","modified":1491372763000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/c2/683e3f1b8b2a12e4b908de23514504243952a8","hash":"7b65e192078c34e0a340f5ac05383df5d42acfe2","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/c4/8c06273ecd67ba7b31b95fc5ebd57c57f7f7d1","hash":"5bd4a8236ba982b8e6cb79b9838158fc6c3c9d7f","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/c4/d9109f997ae9cfde164d28ac2f8a16acaf0816","hash":"54e907d78637c1d0489f777efab65ddf7759a7e4","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/c5/72d6f8d63b9bc48b1f1539b29b103f670ec38f","hash":"a1cf5c0384405a09941d40e0aa00401894ddf7a4","modified":1491120417000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/c9/7729408406c9bdd64d1fd6bc74c35c0f94e1cb","hash":"7437cf2a89e6f8ee3ca9e76ca32e3b238181be5a","modified":1491126868000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/c9/807ce4bfc3b176dc9dd98040ce570df76d20f6","hash":"17f2d77f5756b205f21a9a8989b709c84dc522bd","modified":1491364701000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/ce/53777d1e44a103d057e6682f2af17cbb6d9c0a","hash":"5c73fa7837a97a6ffaaa9878a96f41cf5b895ee0","modified":1491372517000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/ce/f67b8e175bc0dd014657423cb26a37355c2d7f","hash":"3b4738d32a640336e186431d20db048a02925131","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/d1/513dded5e4d8e3c9a8a056295e1c3bd948f985","hash":"36cb292a67a07be9e92deb2d7c2c1b48f44fa235","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/d1/b1f18d92efdea9981878c61175f6f00c72815d","hash":"7522a424ee5fd03fd5062a11b39f23edbb83e089","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/d2/e852fb074d5d8bc17c78bc24a57e7b85bc6078","hash":"457e3ff4acc017426b195df822622cc1cf426986","modified":1491125585000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/d3/aa4cf54abee04c19abe3f60b0c006499cdd8bd","hash":"2df9e3fa557417c322ece520cce2de10505de8ff","modified":1491040792000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/d4/1ea29733e0fbae6b49a4b094749accdb106a08","hash":"862021ac8ac2c28bec4c1f8b5a964143cfd4fca9","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/d4/5ed2f50dafccf793c10998e7518ed4a4e48d3b","hash":"56c39e67b7b033e2601bbe8a795acfa85b9c2ab6","modified":1491366586000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/d4/be675187fcf4bc917d0df28422af7ee85c3823","hash":"27936ede9122daa8bc3546646b5608a950ee8b42","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/d5/524473cf2c89d8eb9097a98dd5cbf015ec888b","hash":"1ed2e227d94ec40cb5c3e8c3794ab252993238df","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/dc/7260f06a245f9e1cc8d0cc67783c871312b1e5","hash":"47e2284cdda097f2772cec020c07ca5609b02c53","modified":1491364711000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/d8/7ecd877de1be6d893ff3ff633529c682b2558a","hash":"cbbe48494c9cb95a16ba022a251ce5756277153a","modified":1491372525000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/df/fd3863cf772667ce3be3a0633c700bae292cec","hash":"adbe6a0b68629ec5f05b2a38219aa6ea289aa3cf","modified":1491040798000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/e0/9af0f6f9914857cdadf9b0fbe2d1864bb5c211","hash":"bd8933154076e5f4e761f6ef0fd8de6e3ebb4d45","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/e0/e29e2c59b1a00b955c896be5ef45478e333d68","hash":"56fa7191e382a1472476d6adce69bac0d7849d85","modified":1491034575000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/e2/6d8713239e99a6e7fdaf4b5ec1ffca7754079d","hash":"e45233599614bac554b96c96b8af753ba3aa2263","modified":1491040798000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/e8/955ea568c5270dddcb508832e7f9b620c6abbd","hash":"6121030e1af1929ac8919eab9915145879021da4","modified":1491125144000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/e9/0252dc84b86a5c48258f27561e22b85e5bd251","hash":"ae6d1c82b4c85a15dbabb53e758b45f1634004a3","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/ee/7cc6cb1629bd71580e85788723eb2670600cce","hash":"21eeb574d0e7d3a07c1ee9aa1fd6a6695ba2fe21","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/f1/14bf4bcf4ac2084abff3ad0ddd2a3e7fc90868","hash":"50ca6979f39ab195738bf2729d020beabc4baeb3","modified":1491126868000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/f4/37dbada53b74c17a98f21a88d5386b6ad7cea9","hash":"8f3091ea528077365f21a4f0fa38180ae260652d","modified":1491103143000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/f8/7636b73117e7e9af070c692c368ec1d08068fd","hash":"6282c8ce52ba5f9d67aba0c6dc05e87cf61fb14c","modified":1491034575000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/fa/265102929f1b22150af1d3fe66f111b6dac248","hash":"c37d83bcc11c06eedc00619954083862c9d9dc6d","modified":1491373063000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/pack/pack-2c97e7d466b727f592a32ce2d7ff0b8479ffefe9.idx","hash":"5aacaa209053aca56a98a9c10cc5f543bf026a07","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/.git/refs/heads/dev","hash":"1970f39d130f6366bfcb3720c84782131df8d52e","modified":1491372525000},{"_id":"themes/hexo-theme-SpecLumn/.git/refs/heads/master","hash":"d9f475a9cc96b3a3b5f4360258a26b82a8c39b7e","modified":1491449413000},{"_id":"themes/hexo-theme-SpecLumn/layout/common/post/date.ejs","hash":"2243045ae5c6df80d2c8baeedd8ea690ef7f7df6","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/layout/common/post/gallery.ejs","hash":"acd85f811b0a7da8b7adcb1d0e85501646771a6e","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/.git/logs/refs/heads/dev","hash":"8f7092c65d24c0752226be39698d7237af35d944","modified":1491372525000},{"_id":"themes/hexo-theme-SpecLumn/.git/logs/refs/heads/master","hash":"b3684686dd306e4d7b38848fb6abef9fdfccc04b","modified":1491449413000},{"_id":"themes/hexo-theme-SpecLumn/source/css/_highlight/monokai.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1491125161000},{"_id":"themes/hexo-theme-SpecLumn/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1491125161000},{"_id":"themes/hexo-theme-SpecLumn/source/css/_markdown/markdown.styl","hash":"086ccd89fd7d49c1d0f18e6b663a6cd085820346","modified":1491126884000},{"_id":"themes/hexo-theme-SpecLumn/source/css/_util/common.styl","hash":"73f4fd7f2f6f4363b696de924ba6ee557ebbef25","modified":1491125161000},{"_id":"themes/hexo-theme-SpecLumn/source/css/_util/function.styl","hash":"136c7d09693fcdd1d8b59ac4279d5684a66f96fb","modified":1491125161000},{"_id":"themes/hexo-theme-SpecLumn/source/css/_util/iconfont.styl","hash":"8ff8502996a07fea020817972337e48a0d11e38c","modified":1491125161000},{"_id":"themes/hexo-theme-SpecLumn/source/css/_util/reset.styl","hash":"d9dd34b5db19decbb293b3a932845f1ac5037b94","modified":1491125161000},{"_id":"themes/hexo-theme-SpecLumn/source/css/images/.DS_Store","hash":"04d6f4889ff6db384d2d016a39137be9b2300be5","modified":1491040611000},{"_id":"themes/hexo-theme-SpecLumn/source/css/images/avatar.jpg","hash":"ec182eefc0d1026f3654417f109cf52a767a2e90","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/source/css/images/favicon.ico","hash":"85248b67f35deab37c12370560396e29edf5ad9b","modified":1491119614000},{"_id":"themes/hexo-theme-SpecLumn/source/css/images/logo.png","hash":"608ed8e3a4ccf3950a9ffb40c858e13ee3653d51","modified":1491125161000},{"_id":"themes/hexo-theme-SpecLumn/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/.git/refs/remotes/origin/dev","hash":"1970f39d130f6366bfcb3720c84782131df8d52e","modified":1491372534000},{"_id":"themes/hexo-theme-SpecLumn/.git/refs/remotes/origin/master","hash":"d9f475a9cc96b3a3b5f4360258a26b82a8c39b7e","modified":1491449422000},{"_id":"themes/hexo-theme-SpecLumn/.git/logs/refs/remotes/origin/HEAD","hash":"7cd7ea7ef9d9ae2fcd3758495d399c3aff03b243","modified":1491034338000},{"_id":"themes/hexo-theme-SpecLumn/.git/logs/refs/remotes/origin/dev","hash":"85ff45c749462a8fcacb4d1090ec4e0d5985ffe2","modified":1491372534000},{"_id":"themes/hexo-theme-SpecLumn/.git/logs/refs/remotes/origin/master","hash":"6b77a626e2ac5db30397c8e14d641b2a70cb4a62","modified":1491449422000},{"_id":"themes/hexo-theme-SpecLumn/.git/objects/pack/pack-2c97e7d466b727f592a32ce2d7ff0b8479ffefe9.pack","hash":"72716f7f8ea40dcfbe7cd0507b313a56ddc86905","modified":1491034575000},{"_id":"source/img/macbook.jpg","hash":"f6ad349d0feb10462f4c5644a298897dafe4a3d4","modified":1508319796000}],"Category":[{"name":"CSS","_id":"cjfxktoai0004zrv4huelzu1r"},{"name":"Javascript","_id":"cjfxktoas000ezrv4t99m0xcp"},{"name":"React Native","_id":"cjfxktoax000lzrv4zco1skmv"},{"name":"HTML","_id":"cjfxktob0000szrv46y9fz271"},{"name":"生活","_id":"cjfxktob70017zrv4tpfbgkej"},{"name":"git&github","_id":"cjfxktobe001mzrv4w31ey8fi"},{"name":"Git","_id":"cjfxktobl0021zrv4tdh7sygm"},{"name":"前端工具","_id":"cjfxktobo0029zrv4gl2dqwvq"},{"name":"总结","_id":"cjfxktobr002hzrv4nkmucs3k"},{"name":"Javascript Gulp Nodejs","_id":"cjfxktobv002qzrv4srbx0lux"},{"name":"hexo","_id":"cjfxktobz002yzrv4ctbwurpi"},{"name":"linux","_id":"cjfxktoc20036zrv4j0bluaz9"},{"name":"Node","_id":"cjfxktocb003uzrv4mm2dtg23"},{"name":"React","_id":"cjfxktocf0044zrv4tcvmnk85"},{"name":"Vue","_id":"cjfxktock004fzrv4mnpwcttf"},{"name":"jQuery","_id":"cjfxktocl004kzrv4qioovmxd"},{"name":"感想","_id":"cjfxktocm004ozrv4mn8lr5nb"},{"name":"vim","_id":"cjfxktocn004szrv4hlai2yv8"},{"name":"webpack","_id":"cjfxktocs005fzrv4ciat4a74"}],"Data":[],"Page":[{"title":"categories","date":"2016-03-25T15:19:18.000Z","comments":0,"type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-03-25 23:19:18\ncomments: false\ntype: \"categories\"\n---\n","updated":"2016-03-25T09:13:32.000Z","path":"categories/index.html","layout":"page","_id":"cjfxktoaf0001zrv4rhm1xuf5","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"我是张毅，1991年生于山西，毕业于山西大学计算机科学与技术专业。目前就职于北京小米科技有限公司，擅长前端，是个技术控，关注科技类的东西。\n喜欢尝试一些新的东西，希望可以成为一个文艺的程序员。\n喜欢自己折腾一些东西，软件硬件都可以，喜欢动手做一些有趣的东西。","source":"about/index.md","raw":"我是张毅，1991年生于山西，毕业于山西大学计算机科学与技术专业。目前就职于北京小米科技有限公司，擅长前端，是个技术控，关注科技类的东西。\n喜欢尝试一些新的东西，希望可以成为一个文艺的程序员。\n喜欢自己折腾一些东西，软件硬件都可以，喜欢动手做一些有趣的东西。","date":"2017-10-18T09:57:08.000Z","updated":"2016-11-12T20:09:04.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjfxktoah0003zrv4fuchbis1","content":"<p>我是张毅，1991年生于山西，毕业于山西大学计算机科学与技术专业。目前就职于北京小米科技有限公司，擅长前端，是个技术控，关注科技类的东西。<br>喜欢尝试一些新的东西，希望可以成为一个文艺的程序员。<br>喜欢自己折腾一些东西，软件硬件都可以，喜欢动手做一些有趣的东西。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我是张毅，1991年生于山西，毕业于山西大学计算机科学与技术专业。目前就职于北京小米科技有限公司，擅长前端，是个技术控，关注科技类的东西。<br>喜欢尝试一些新的东西，希望可以成为一个文艺的程序员。<br>喜欢自己折腾一些东西，软件硬件都可以，喜欢动手做一些有趣的东西。</p>\n"}],"Post":[{"title":"理解CSS命名规范--BEM","date":"2017-04-05T12:57:48.000Z","comments":1,"_content":"\n>最近在写博客主题的时候发现一个很严重的问题，由于css的命名并不是很规范，导致自己在后期修改的时候很是头疼，有些样式需要在浏览器中打开开发者工具去找，很是无奈。所以决定在写完主题之后学习下CSS命名规范中大名鼎鼎的BEM命名规范。\n\n<!--more-->\n\n### 什么是BEM\n\nBEM其实是块（block）、元素（element）、修饰符（modifier）的缩写，利用不同的区块，功能以及样式来给元素命名。这三个部分使用`__`与`--`连接（这里用两个而不是一个是为了留下用于块儿的命名）。命名约定的模式如下：\n\n```css\n.block{}\n.block__element{}\n.block--modifier{}\n```\n\n- `block` 代表了更高级别的抽象或组件\n- `block__element` 代表 `block` 的后代，用于形成一个完整的 `block` 的整体\n- `block--modifier`代表 `block` 的不同状态或不同版本\n\n\n![bem](/img/bem.jpg)\n\n\n上图很直观的反映出BEM的含义，block代表一个组，而element代表组里面的成员，而modifier，虽然在上图没有画出，但是可以知道这个则是用于描述每一个元素的具体的属性。可以看出范围在一步步缩小，使命名更加具体。\n\n### BEM的优势\n\nBEM的关键是光凭class名字就可以让其他开发者知道某个标记用来做什么的，明白各个模块之间的关系，例如如下的命名：\n\n```css\n.nav{}\n.nav__item{}\n.nav--blue{}\n.nav--item__hand{}\n```\n\n这几个class名很明显能看出各个块儿的作用，顶级快儿是`nav`，它有一些元素比如`item`，`item`又有一些属性，例如`blue`，但是如果写成常规的css就会很难看得出它们的关系：\n\n```css\n.nav{}\n.item{}\n.blue{}\n```\n\n虽然看每一个class名知道它们代表什么，但是却看不出它们之间的关系，这样对比，很明显能看出BEM命名的优势。\n\n再看一个更具体的例子，如果写一个搜索模块，按照常规，我们会写出如下代码：\n\n```html\n<form class=\"site-search  full\">\n  <input type=\"text\" class=\"field\">\n  <input type=\"Submit\" value =\"Search\" class=\"button\">\n</form>\t\n```\n\n但是如果时用BEM规范去写，代码如下：\n\n```html\n<form class=\"site-search  site-search--full\">\n  <input type=\"text\" class=\"site-search__field\">\n  <input type=\"Submit\" value =\"Search\" class=\"site-search__button\">\n</form>\t\n```\n\n对比一下不难发现使用BEM可以使我们的代码可读性更高。\n\n### BEM与SCSS\n\n现在的开发很多时候都会用到SCSS，那么如果使用SCSS的嵌套写BEM规范呢，在SCSS中可以使用`@at-root`：\n\n```scss\n.block {\n  @at-root #{&}__element {\n  }\n  @at-root #{&}--modifier {\n  }\n}\n```\n\n```css\n/*生成的css*/\n.block {\n}\n.block__element {\n}\n.block--modifier {\n}\n```\n\n非常的方便。\n\n### 最后\n\n在自己的博客主题项目中，因为命名的随意导致后来再看样式的时候都需要通过开发者工具去看具体这部分是做什么的，非常难受，所以想到应该用一套规范约束一下命名，而BEM最为一个非常有用，强大的命名规范可以让我们的代码更容易阅读和理解，也更容易控制，虽然这种命名方式看起来有点儿奇怪，但是却非常有用，非常值得学习。","source":"_posts/BEM.md","raw":"---\ntitle: 理解CSS命名规范--BEM\ndate: 2017-04-05 20:57:48\ntags: CSS\ncomments: true\ncategories: \"CSS\"\n---\n\n>最近在写博客主题的时候发现一个很严重的问题，由于css的命名并不是很规范，导致自己在后期修改的时候很是头疼，有些样式需要在浏览器中打开开发者工具去找，很是无奈。所以决定在写完主题之后学习下CSS命名规范中大名鼎鼎的BEM命名规范。\n\n<!--more-->\n\n### 什么是BEM\n\nBEM其实是块（block）、元素（element）、修饰符（modifier）的缩写，利用不同的区块，功能以及样式来给元素命名。这三个部分使用`__`与`--`连接（这里用两个而不是一个是为了留下用于块儿的命名）。命名约定的模式如下：\n\n```css\n.block{}\n.block__element{}\n.block--modifier{}\n```\n\n- `block` 代表了更高级别的抽象或组件\n- `block__element` 代表 `block` 的后代，用于形成一个完整的 `block` 的整体\n- `block--modifier`代表 `block` 的不同状态或不同版本\n\n\n![bem](/img/bem.jpg)\n\n\n上图很直观的反映出BEM的含义，block代表一个组，而element代表组里面的成员，而modifier，虽然在上图没有画出，但是可以知道这个则是用于描述每一个元素的具体的属性。可以看出范围在一步步缩小，使命名更加具体。\n\n### BEM的优势\n\nBEM的关键是光凭class名字就可以让其他开发者知道某个标记用来做什么的，明白各个模块之间的关系，例如如下的命名：\n\n```css\n.nav{}\n.nav__item{}\n.nav--blue{}\n.nav--item__hand{}\n```\n\n这几个class名很明显能看出各个块儿的作用，顶级快儿是`nav`，它有一些元素比如`item`，`item`又有一些属性，例如`blue`，但是如果写成常规的css就会很难看得出它们的关系：\n\n```css\n.nav{}\n.item{}\n.blue{}\n```\n\n虽然看每一个class名知道它们代表什么，但是却看不出它们之间的关系，这样对比，很明显能看出BEM命名的优势。\n\n再看一个更具体的例子，如果写一个搜索模块，按照常规，我们会写出如下代码：\n\n```html\n<form class=\"site-search  full\">\n  <input type=\"text\" class=\"field\">\n  <input type=\"Submit\" value =\"Search\" class=\"button\">\n</form>\t\n```\n\n但是如果时用BEM规范去写，代码如下：\n\n```html\n<form class=\"site-search  site-search--full\">\n  <input type=\"text\" class=\"site-search__field\">\n  <input type=\"Submit\" value =\"Search\" class=\"site-search__button\">\n</form>\t\n```\n\n对比一下不难发现使用BEM可以使我们的代码可读性更高。\n\n### BEM与SCSS\n\n现在的开发很多时候都会用到SCSS，那么如果使用SCSS的嵌套写BEM规范呢，在SCSS中可以使用`@at-root`：\n\n```scss\n.block {\n  @at-root #{&}__element {\n  }\n  @at-root #{&}--modifier {\n  }\n}\n```\n\n```css\n/*生成的css*/\n.block {\n}\n.block__element {\n}\n.block--modifier {\n}\n```\n\n非常的方便。\n\n### 最后\n\n在自己的博客主题项目中，因为命名的随意导致后来再看样式的时候都需要通过开发者工具去看具体这部分是做什么的，非常难受，所以想到应该用一套规范约束一下命名，而BEM最为一个非常有用，强大的命名规范可以让我们的代码更容易阅读和理解，也更容易控制，虽然这种命名方式看起来有点儿奇怪，但是却非常有用，非常值得学习。","slug":"BEM","published":1,"updated":"2017-10-18T09:48:22.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoab0000zrv4s7asthwd","content":"<blockquote>\n<p>最近在写博客主题的时候发现一个很严重的问题，由于css的命名并不是很规范，导致自己在后期修改的时候很是头疼，有些样式需要在浏览器中打开开发者工具去找，很是无奈。所以决定在写完主题之后学习下CSS命名规范中大名鼎鼎的BEM命名规范。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"什么是BEM\"><a href=\"#什么是BEM\" class=\"headerlink\" title=\"什么是BEM\"></a>什么是BEM</h3><p>BEM其实是块（block）、元素（element）、修饰符（modifier）的缩写，利用不同的区块，功能以及样式来给元素命名。这三个部分使用<code>__</code>与<code>--</code>连接（这里用两个而不是一个是为了留下用于块儿的命名）。命名约定的模式如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block__element</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block--modifier</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>block</code> 代表了更高级别的抽象或组件</li>\n<li><code>block__element</code> 代表 <code>block</code> 的后代，用于形成一个完整的 <code>block</code> 的整体</li>\n<li><code>block--modifier</code>代表 <code>block</code> 的不同状态或不同版本</li>\n</ul>\n<p><img src=\"/img/bem.jpg\" alt=\"bem\"></p>\n<p>上图很直观的反映出BEM的含义，block代表一个组，而element代表组里面的成员，而modifier，虽然在上图没有画出，但是可以知道这个则是用于描述每一个元素的具体的属性。可以看出范围在一步步缩小，使命名更加具体。</p>\n<h3 id=\"BEM的优势\"><a href=\"#BEM的优势\" class=\"headerlink\" title=\"BEM的优势\"></a>BEM的优势</h3><p>BEM的关键是光凭class名字就可以让其他开发者知道某个标记用来做什么的，明白各个模块之间的关系，例如如下的命名：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.nav</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav__item</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav--blue</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav--item__hand</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这几个class名很明显能看出各个块儿的作用，顶级快儿是<code>nav</code>，它有一些元素比如<code>item</code>，<code>item</code>又有一些属性，例如<code>blue</code>，但是如果写成常规的css就会很难看得出它们的关系：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.nav</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.blue</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然看每一个class名知道它们代表什么，但是却看不出它们之间的关系，这样对比，很明显能看出BEM命名的优势。</p>\n<p>再看一个更具体的例子，如果写一个搜索模块，按照常规，我们会写出如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"site-search  full\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"field\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Submit\"</span> <span class=\"attr\">value</span> =<span class=\"string\">\"Search\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是如果时用BEM规范去写，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"site-search  site-search--full\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"site-search__field\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Submit\"</span> <span class=\"attr\">value</span> =<span class=\"string\">\"Search\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"site-search__button\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对比一下不难发现使用BEM可以使我们的代码可读性更高。</p>\n<h3 id=\"BEM与SCSS\"><a href=\"#BEM与SCSS\" class=\"headerlink\" title=\"BEM与SCSS\"></a>BEM与SCSS</h3><p>现在的开发很多时候都会用到SCSS，那么如果使用SCSS的嵌套写BEM规范呢，在SCSS中可以使用<code>@at-root</code>：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  @at-root #&#123;&amp;&#125;__element &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @at-root #&#123;&amp;&#125;--modifier &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*生成的css*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block__element</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block--modifier</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>非常的方便。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>在自己的博客主题项目中，因为命名的随意导致后来再看样式的时候都需要通过开发者工具去看具体这部分是做什么的，非常难受，所以想到应该用一套规范约束一下命名，而BEM最为一个非常有用，强大的命名规范可以让我们的代码更容易阅读和理解，也更容易控制，虽然这种命名方式看起来有点儿奇怪，但是却非常有用，非常值得学习。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近在写博客主题的时候发现一个很严重的问题，由于css的命名并不是很规范，导致自己在后期修改的时候很是头疼，有些样式需要在浏览器中打开开发者工具去找，很是无奈。所以决定在写完主题之后学习下CSS命名规范中大名鼎鼎的BEM命名规范。</p>\n</blockquote>","more":"<h3 id=\"什么是BEM\"><a href=\"#什么是BEM\" class=\"headerlink\" title=\"什么是BEM\"></a>什么是BEM</h3><p>BEM其实是块（block）、元素（element）、修饰符（modifier）的缩写，利用不同的区块，功能以及样式来给元素命名。这三个部分使用<code>__</code>与<code>--</code>连接（这里用两个而不是一个是为了留下用于块儿的命名）。命名约定的模式如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block__element</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block--modifier</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>block</code> 代表了更高级别的抽象或组件</li>\n<li><code>block__element</code> 代表 <code>block</code> 的后代，用于形成一个完整的 <code>block</code> 的整体</li>\n<li><code>block--modifier</code>代表 <code>block</code> 的不同状态或不同版本</li>\n</ul>\n<p><img src=\"/img/bem.jpg\" alt=\"bem\"></p>\n<p>上图很直观的反映出BEM的含义，block代表一个组，而element代表组里面的成员，而modifier，虽然在上图没有画出，但是可以知道这个则是用于描述每一个元素的具体的属性。可以看出范围在一步步缩小，使命名更加具体。</p>\n<h3 id=\"BEM的优势\"><a href=\"#BEM的优势\" class=\"headerlink\" title=\"BEM的优势\"></a>BEM的优势</h3><p>BEM的关键是光凭class名字就可以让其他开发者知道某个标记用来做什么的，明白各个模块之间的关系，例如如下的命名：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.nav</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav__item</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav--blue</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav--item__hand</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这几个class名很明显能看出各个块儿的作用，顶级快儿是<code>nav</code>，它有一些元素比如<code>item</code>，<code>item</code>又有一些属性，例如<code>blue</code>，但是如果写成常规的css就会很难看得出它们的关系：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.nav</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.blue</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然看每一个class名知道它们代表什么，但是却看不出它们之间的关系，这样对比，很明显能看出BEM命名的优势。</p>\n<p>再看一个更具体的例子，如果写一个搜索模块，按照常规，我们会写出如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"site-search  full\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"field\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Submit\"</span> <span class=\"attr\">value</span> =<span class=\"string\">\"Search\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是如果时用BEM规范去写，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"site-search  site-search--full\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"site-search__field\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Submit\"</span> <span class=\"attr\">value</span> =<span class=\"string\">\"Search\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"site-search__button\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对比一下不难发现使用BEM可以使我们的代码可读性更高。</p>\n<h3 id=\"BEM与SCSS\"><a href=\"#BEM与SCSS\" class=\"headerlink\" title=\"BEM与SCSS\"></a>BEM与SCSS</h3><p>现在的开发很多时候都会用到SCSS，那么如果使用SCSS的嵌套写BEM规范呢，在SCSS中可以使用<code>@at-root</code>：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  @at-root #&#123;&amp;&#125;__element &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @at-root #&#123;&amp;&#125;--modifier &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*生成的css*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block__element</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.block--modifier</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>非常的方便。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>在自己的博客主题项目中，因为命名的随意导致后来再看样式的时候都需要通过开发者工具去看具体这部分是做什么的，非常难受，所以想到应该用一套规范约束一下命名，而BEM最为一个非常有用，强大的命名规范可以让我们的代码更容易阅读和理解，也更容易控制，虽然这种命名方式看起来有点儿奇怪，但是却非常有用，非常值得学习。</p>"},{"title":"CSS3实现翻转卡牌效果","date":"2016-08-17T15:35:52.000Z","comments":1,"_content":"> 今天在工作中遇到需求，需要用CSS3写一个卡片翻转效果，这个效果看起来简单，但是还是涉及到一些不常用的CSS3中的3D转换的属性以及实现该效果的思路，所以这里总结一下。\n\n项目地址：[https://github.com/MrZhang123/Practice/tree/master/FlipCards](https://github.com/MrZhang123/Practice/tree/master/FlipCards)\n<!--more-->\n## 需要的CSS3属性\n\n### perspective\n\n**目前浏览器都不支持`perspective`属性**\n\n在chrome和Safari中需要使用`-webkit-perspective`，而在Firefox中需要使用`-moz-perspective`来定义。\n\n#### 定义和用法\n\n`perspective`属性定义3D元素距视图的距离，以像素计。该属性允许改变查看3D元素的视图。当为元素定义\n\n`perspective`属时，其子元素会获得透视效果，而不是元素本身。换句话说，设置这个元素是为了给该元素的子元素用。\n\n#### 值\n\nnumber：元素距离视图的距离，以像素计\n\nnone：**默认值**，与0相同。不设置透视\n\n### transform-style\n\nFirefox支持`transfrom-style`属性。\n\nChrome、Safari和Opera支持代替的`-webkit-transform-style`属性。\n\n#### 定义和用法\n\n`transform-style`属性固定如何在3D空间中呈现被嵌套的元素。一般给父元素设置让其所有子元素跟着父元素一起位置移动，一般会设置。\n\n#### 值\n\nflat：子元素将不保留其3D位置（默认值）\n\nperserve-3d：子元素将保留其3D位置\n\n### transition\n\nIE10+、Firefox、Opera、Chrome均支持`transition`属性。Safari支持替代的`-webkit-transition`属性。但是IE9-不支持该属性。\n\n#### 定义和用法\n\n`transition`属性是一个简写属性，用于设置四个过渡属性：\n\n- transiton-property：规定设置过渡效果的CSS属性的名称\n- transiton-duration：规定完成过渡效果需要多少秒或毫秒\n- transiton-timing-funciton：规定速度效果的速度曲线\n- transition-delay：规定过渡效果何时开始\n\n**`transiton-duration`必须设置，否则时长为0 ，不会有过渡效果**\n\n### backface-visibility\n\n只有IE10+和Firefox支持`backface-visibility`，Opera15+、Safari和Chrome支持替代的`-webkit-backface-visibility`\n\n#### 定义和用法\n\n`backface-visibility`属性定义当前元素不面向屏幕时是否可见，如果元素在旋转后不希望看到背面，则可以使用。\n\nvisible：背面是可见的（默认值）\n\nhidden：背面是不可见的\n\n## 实现的思路\n\n要实现类似的翻牌效果，首先我们需要有一张可以翻的牌，这张牌由两个元素重叠组成，位于上层正面我们看到，而位于下层的背面我们看不到并且本身是绕Y轴旋转过的，这样，当鼠标移动上去后，同时让正面和背面执行旋转就可以实现翻牌效果。\n\n## 实现\n\n基本结构代码如下：\n\n```html\n<div id=\"content\">\n    <ul>\n        <li>\n            <a href=\"#\" >\n                <div>\n                    <h3>测试正面1</h3>\n                    <p>文字文字文字文字文字文字文字文字文字文字文字</p>\n                </div>\n                <div>\n                    <h3>测试背面1</h3>\n                    <p>文字文字文字文字文字文字文字文字文字文字文字</p>\n                </div>\n            </a>\n        </li>        \n    </ul>\n</div>\n```\n\n```css\nul,li {\n    margin:0;\n    padding:0;\n    list-style:none;\n}\n#content ul li{\n    width: 225px;\n    height: 180px;\n}\n#content ul li a{\n    position: relative;\n    display: block;\n    width: 100%;\n    height: 100%;\n}\n#content ul li a > div{\n    position: absolute;\n    left: 0;\n    height: 0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n}\n#content ul li a div:first-child{\n    background-color: rgb(255, 64, 129);\n    z-index:2;\n}\n#content ul li a div:last-child{\n    background:rgb(0, 188, 212);\n    z-index:1;\n}\n#content ul li a div h3{\n    margin: 0 auto 15px;\n    padding: 15px 0;\n    width: 200px;\n    height: 16px;\n    line-height: 16px;\n    font-size: 14px;\n    text-align: center;\n    border-bottom: 1px #fff dashed;\n}\n\n#content ul li a div p{\n    padding: 0 10px;\n    font-size: 12px;\n    text-indent: 2em;\n    line-height: 18px;\n}\n```\n\n这样就让两个div叠在一起了，但是如果要进行翻转的话，首先是需要将背面本身就翻过去，当鼠标放上去之后翻转过来，让我们看到，所以我们需要给背面添加翻转180°的属性，鼠标放上去之后让它翻转到0°，同时为保证每个浏览器渲染统一，给正面加一个翻转0°，鼠标移动上去之后翻转-180°，并且是一个动画，所以要添加过渡。所以给正面背面添加CSS如下： \n\n```css\n#content ul li a > div{\n    -webkit-transition:.8s ease-in-out;\n    -moz-transition:.8s ease-in-out;\n}\n#content ul li a div:first-child{\n    -webkit-transform:rotateY(0);\n    -moz-transform:rotateY(0);\n}\n#content ul li a div:last-child{\n    -webkit-transform:rotateY(180deg);\n    -moz-transform:rotateY(180deg);\n}\n#content ul li a:hover div:first-child{\n    -webkit-transform:rotateY(-180deg);\n    -moz-transform:rotateY(-180deg);\n}\n#content ul li a:hover div:last-child{\n    -webkit-transform:rotateY(0);\n    -moz-transform:rotateY(0);\n}\n```\n\n在添加这些CSS3属性后，可以实现翻转，但是发现只看到正面，没有看到背面，这又是为什么呢，前面提到有一个属性`backface-visibility`，这个属性用于控制在翻转后，元素的背面是否可见，默认是可见的，所以就会挡着背面那个元素，我们需要手动设置元素翻转后背面不可见，所以需要设置：\n\n```css\n#content ul li a > div{\n     -webkit-backface-visibility: hidden;\n     -moz-backface-visibility: hidden;\n}\n```\n\n这样设置之后，由于正面的元素在翻转后背面不可见，我们就可以看到背面的元素了。\n\n但是，仔细观察会发现这个翻转似乎并不是那么立体，似乎在两条平行线之间实现了翻转，所以我们需要设置一个观察点距离视图的距离，这时候就需要给父元素添加`perspective`属性，这个属性的值一般为800px ~ 1000px，这个范围内的值会看上去合理。所以给父元素添加：\n\n```css\n#content ul li a{\n    -webkit-perspective: 800px;\n    -moz-perspective: 800px;\n}\n```\n\n至此，就实现了一个翻转卡牌的效果，但是这里需要解决一个问题，因为`perspective`属性不被IE支持（Microsoft Edge支持），所以需要进行降级，我的做法是直接显示隐藏。那么如何识别IE9+浏览器呢？在[stackoverflow](http://stackoverflow.com/)中我找到了答案：\n\n## 附：CSS中识别各类IE的方法\n\n## IE6\n\n```css\n* html .ie6{\n    property:value;\n}\n```\nor\n\n```css\nhtml .ie6{\n    _property:value;\n}\n```\n## IE7\n\n```css\n*+html .ie7{\n    property:value;\n}\n```\n\nor\n\n```css\n*:first-child+html ie7{\n    property:value;\n}\n```\n\n## IE6 and IE7\n\n```css\n@media screen\\9{\n    ie67{property:value;}\n}\n```\n\nor\n\n```css\n.ie67{ *property:value;}\n```\nor\n\n```css\n.ie67{ #property:value;}\n```\n\n## IE6,7 and 8\n\n```css\n@media \\0screen\\,screen\\9{\n    ie678{property:value;}\n}\n```\n\n## IE8\n\n```css\nhtml>/**/body .ie8{property:value;}\n```\n\nor\n\n```css\n@media \\0screen{\n    ie8{property:value;}\n}\n```\n\n## 只在IE8标准模式\n\n```css\n.ie8{property/*\\**/:value\\9;}\n```\n\n## IE8,9 and 10\n\n```css\n@media screen\\0{\n    ie8910{property:value;}\n}\n```\n\n## IE9 only\n\n```css\n@media screen and (min-width:0\\0) and (min-resolution: .001dpcm){\n    /*IE9 CSS*/\n    .ie9{property:value;}\n}\n```\n\n## IE9+\n\n```css\n@media screen and (min-width:0\\0) and (min-resolution: +72dpi){\n    /*IE9+ CSS*/\n    .ie9up{property:value;}\n}\n```\n\n## IE9 and 10\n\n```css\n@media screen and (min-width:0){\n    .ie910{property:value;}\n}\n```\n\n## IE10 only\n\n```css\n_:-ms-lang(x), ie10 {property:value;}\n```\n\n## IE10+\n\n```css\n_:-ms-lang(x), ie10up{property:value;}\n```\n\nor\n\n```css\n@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){\n    .ie10up{property:value;}\n}\n```\n\n## IE11+\n\n```css\n_:-ms-fullscreen, :root .ie11up{property:value;}\n```","source":"_posts/FlipCards.md","raw":"---\ntitle: CSS3实现翻转卡牌效果\ndate: 2016-08-17 23:35:52\ntags: CSS\ncomments: true\ncategories: \"CSS\"\n---\n> 今天在工作中遇到需求，需要用CSS3写一个卡片翻转效果，这个效果看起来简单，但是还是涉及到一些不常用的CSS3中的3D转换的属性以及实现该效果的思路，所以这里总结一下。\n\n项目地址：[https://github.com/MrZhang123/Practice/tree/master/FlipCards](https://github.com/MrZhang123/Practice/tree/master/FlipCards)\n<!--more-->\n## 需要的CSS3属性\n\n### perspective\n\n**目前浏览器都不支持`perspective`属性**\n\n在chrome和Safari中需要使用`-webkit-perspective`，而在Firefox中需要使用`-moz-perspective`来定义。\n\n#### 定义和用法\n\n`perspective`属性定义3D元素距视图的距离，以像素计。该属性允许改变查看3D元素的视图。当为元素定义\n\n`perspective`属时，其子元素会获得透视效果，而不是元素本身。换句话说，设置这个元素是为了给该元素的子元素用。\n\n#### 值\n\nnumber：元素距离视图的距离，以像素计\n\nnone：**默认值**，与0相同。不设置透视\n\n### transform-style\n\nFirefox支持`transfrom-style`属性。\n\nChrome、Safari和Opera支持代替的`-webkit-transform-style`属性。\n\n#### 定义和用法\n\n`transform-style`属性固定如何在3D空间中呈现被嵌套的元素。一般给父元素设置让其所有子元素跟着父元素一起位置移动，一般会设置。\n\n#### 值\n\nflat：子元素将不保留其3D位置（默认值）\n\nperserve-3d：子元素将保留其3D位置\n\n### transition\n\nIE10+、Firefox、Opera、Chrome均支持`transition`属性。Safari支持替代的`-webkit-transition`属性。但是IE9-不支持该属性。\n\n#### 定义和用法\n\n`transition`属性是一个简写属性，用于设置四个过渡属性：\n\n- transiton-property：规定设置过渡效果的CSS属性的名称\n- transiton-duration：规定完成过渡效果需要多少秒或毫秒\n- transiton-timing-funciton：规定速度效果的速度曲线\n- transition-delay：规定过渡效果何时开始\n\n**`transiton-duration`必须设置，否则时长为0 ，不会有过渡效果**\n\n### backface-visibility\n\n只有IE10+和Firefox支持`backface-visibility`，Opera15+、Safari和Chrome支持替代的`-webkit-backface-visibility`\n\n#### 定义和用法\n\n`backface-visibility`属性定义当前元素不面向屏幕时是否可见，如果元素在旋转后不希望看到背面，则可以使用。\n\nvisible：背面是可见的（默认值）\n\nhidden：背面是不可见的\n\n## 实现的思路\n\n要实现类似的翻牌效果，首先我们需要有一张可以翻的牌，这张牌由两个元素重叠组成，位于上层正面我们看到，而位于下层的背面我们看不到并且本身是绕Y轴旋转过的，这样，当鼠标移动上去后，同时让正面和背面执行旋转就可以实现翻牌效果。\n\n## 实现\n\n基本结构代码如下：\n\n```html\n<div id=\"content\">\n    <ul>\n        <li>\n            <a href=\"#\" >\n                <div>\n                    <h3>测试正面1</h3>\n                    <p>文字文字文字文字文字文字文字文字文字文字文字</p>\n                </div>\n                <div>\n                    <h3>测试背面1</h3>\n                    <p>文字文字文字文字文字文字文字文字文字文字文字</p>\n                </div>\n            </a>\n        </li>        \n    </ul>\n</div>\n```\n\n```css\nul,li {\n    margin:0;\n    padding:0;\n    list-style:none;\n}\n#content ul li{\n    width: 225px;\n    height: 180px;\n}\n#content ul li a{\n    position: relative;\n    display: block;\n    width: 100%;\n    height: 100%;\n}\n#content ul li a > div{\n    position: absolute;\n    left: 0;\n    height: 0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n}\n#content ul li a div:first-child{\n    background-color: rgb(255, 64, 129);\n    z-index:2;\n}\n#content ul li a div:last-child{\n    background:rgb(0, 188, 212);\n    z-index:1;\n}\n#content ul li a div h3{\n    margin: 0 auto 15px;\n    padding: 15px 0;\n    width: 200px;\n    height: 16px;\n    line-height: 16px;\n    font-size: 14px;\n    text-align: center;\n    border-bottom: 1px #fff dashed;\n}\n\n#content ul li a div p{\n    padding: 0 10px;\n    font-size: 12px;\n    text-indent: 2em;\n    line-height: 18px;\n}\n```\n\n这样就让两个div叠在一起了，但是如果要进行翻转的话，首先是需要将背面本身就翻过去，当鼠标放上去之后翻转过来，让我们看到，所以我们需要给背面添加翻转180°的属性，鼠标放上去之后让它翻转到0°，同时为保证每个浏览器渲染统一，给正面加一个翻转0°，鼠标移动上去之后翻转-180°，并且是一个动画，所以要添加过渡。所以给正面背面添加CSS如下： \n\n```css\n#content ul li a > div{\n    -webkit-transition:.8s ease-in-out;\n    -moz-transition:.8s ease-in-out;\n}\n#content ul li a div:first-child{\n    -webkit-transform:rotateY(0);\n    -moz-transform:rotateY(0);\n}\n#content ul li a div:last-child{\n    -webkit-transform:rotateY(180deg);\n    -moz-transform:rotateY(180deg);\n}\n#content ul li a:hover div:first-child{\n    -webkit-transform:rotateY(-180deg);\n    -moz-transform:rotateY(-180deg);\n}\n#content ul li a:hover div:last-child{\n    -webkit-transform:rotateY(0);\n    -moz-transform:rotateY(0);\n}\n```\n\n在添加这些CSS3属性后，可以实现翻转，但是发现只看到正面，没有看到背面，这又是为什么呢，前面提到有一个属性`backface-visibility`，这个属性用于控制在翻转后，元素的背面是否可见，默认是可见的，所以就会挡着背面那个元素，我们需要手动设置元素翻转后背面不可见，所以需要设置：\n\n```css\n#content ul li a > div{\n     -webkit-backface-visibility: hidden;\n     -moz-backface-visibility: hidden;\n}\n```\n\n这样设置之后，由于正面的元素在翻转后背面不可见，我们就可以看到背面的元素了。\n\n但是，仔细观察会发现这个翻转似乎并不是那么立体，似乎在两条平行线之间实现了翻转，所以我们需要设置一个观察点距离视图的距离，这时候就需要给父元素添加`perspective`属性，这个属性的值一般为800px ~ 1000px，这个范围内的值会看上去合理。所以给父元素添加：\n\n```css\n#content ul li a{\n    -webkit-perspective: 800px;\n    -moz-perspective: 800px;\n}\n```\n\n至此，就实现了一个翻转卡牌的效果，但是这里需要解决一个问题，因为`perspective`属性不被IE支持（Microsoft Edge支持），所以需要进行降级，我的做法是直接显示隐藏。那么如何识别IE9+浏览器呢？在[stackoverflow](http://stackoverflow.com/)中我找到了答案：\n\n## 附：CSS中识别各类IE的方法\n\n## IE6\n\n```css\n* html .ie6{\n    property:value;\n}\n```\nor\n\n```css\nhtml .ie6{\n    _property:value;\n}\n```\n## IE7\n\n```css\n*+html .ie7{\n    property:value;\n}\n```\n\nor\n\n```css\n*:first-child+html ie7{\n    property:value;\n}\n```\n\n## IE6 and IE7\n\n```css\n@media screen\\9{\n    ie67{property:value;}\n}\n```\n\nor\n\n```css\n.ie67{ *property:value;}\n```\nor\n\n```css\n.ie67{ #property:value;}\n```\n\n## IE6,7 and 8\n\n```css\n@media \\0screen\\,screen\\9{\n    ie678{property:value;}\n}\n```\n\n## IE8\n\n```css\nhtml>/**/body .ie8{property:value;}\n```\n\nor\n\n```css\n@media \\0screen{\n    ie8{property:value;}\n}\n```\n\n## 只在IE8标准模式\n\n```css\n.ie8{property/*\\**/:value\\9;}\n```\n\n## IE8,9 and 10\n\n```css\n@media screen\\0{\n    ie8910{property:value;}\n}\n```\n\n## IE9 only\n\n```css\n@media screen and (min-width:0\\0) and (min-resolution: .001dpcm){\n    /*IE9 CSS*/\n    .ie9{property:value;}\n}\n```\n\n## IE9+\n\n```css\n@media screen and (min-width:0\\0) and (min-resolution: +72dpi){\n    /*IE9+ CSS*/\n    .ie9up{property:value;}\n}\n```\n\n## IE9 and 10\n\n```css\n@media screen and (min-width:0){\n    .ie910{property:value;}\n}\n```\n\n## IE10 only\n\n```css\n_:-ms-lang(x), ie10 {property:value;}\n```\n\n## IE10+\n\n```css\n_:-ms-lang(x), ie10up{property:value;}\n```\n\nor\n\n```css\n@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){\n    .ie10up{property:value;}\n}\n```\n\n## IE11+\n\n```css\n_:-ms-fullscreen, :root .ie11up{property:value;}\n```","slug":"FlipCards","published":1,"updated":"2016-08-17T07:39:18.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoag0002zrv4lizn9yzm","content":"<blockquote>\n<p>今天在工作中遇到需求，需要用CSS3写一个卡片翻转效果，这个效果看起来简单，但是还是涉及到一些不常用的CSS3中的3D转换的属性以及实现该效果的思路，所以这里总结一下。</p>\n</blockquote>\n<p>项目地址：<a href=\"https://github.com/MrZhang123/Practice/tree/master/FlipCards\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/Practice/tree/master/FlipCards</a><br><a id=\"more\"></a></p>\n<h2 id=\"需要的CSS3属性\"><a href=\"#需要的CSS3属性\" class=\"headerlink\" title=\"需要的CSS3属性\"></a>需要的CSS3属性</h2><h3 id=\"perspective\"><a href=\"#perspective\" class=\"headerlink\" title=\"perspective\"></a>perspective</h3><p><strong>目前浏览器都不支持<code>perspective</code>属性</strong></p>\n<p>在chrome和Safari中需要使用<code>-webkit-perspective</code>，而在Firefox中需要使用<code>-moz-perspective</code>来定义。</p>\n<h4 id=\"定义和用法\"><a href=\"#定义和用法\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h4><p><code>perspective</code>属性定义3D元素距视图的距离，以像素计。该属性允许改变查看3D元素的视图。当为元素定义</p>\n<p><code>perspective</code>属时，其子元素会获得透视效果，而不是元素本身。换句话说，设置这个元素是为了给该元素的子元素用。</p>\n<h4 id=\"值\"><a href=\"#值\" class=\"headerlink\" title=\"值\"></a>值</h4><p>number：元素距离视图的距离，以像素计</p>\n<p>none：<strong>默认值</strong>，与0相同。不设置透视</p>\n<h3 id=\"transform-style\"><a href=\"#transform-style\" class=\"headerlink\" title=\"transform-style\"></a>transform-style</h3><p>Firefox支持<code>transfrom-style</code>属性。</p>\n<p>Chrome、Safari和Opera支持代替的<code>-webkit-transform-style</code>属性。</p>\n<h4 id=\"定义和用法-1\"><a href=\"#定义和用法-1\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h4><p><code>transform-style</code>属性固定如何在3D空间中呈现被嵌套的元素。一般给父元素设置让其所有子元素跟着父元素一起位置移动，一般会设置。</p>\n<h4 id=\"值-1\"><a href=\"#值-1\" class=\"headerlink\" title=\"值\"></a>值</h4><p>flat：子元素将不保留其3D位置（默认值）</p>\n<p>perserve-3d：子元素将保留其3D位置</p>\n<h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3><p>IE10+、Firefox、Opera、Chrome均支持<code>transition</code>属性。Safari支持替代的<code>-webkit-transition</code>属性。但是IE9-不支持该属性。</p>\n<h4 id=\"定义和用法-2\"><a href=\"#定义和用法-2\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h4><p><code>transition</code>属性是一个简写属性，用于设置四个过渡属性：</p>\n<ul>\n<li>transiton-property：规定设置过渡效果的CSS属性的名称</li>\n<li>transiton-duration：规定完成过渡效果需要多少秒或毫秒</li>\n<li>transiton-timing-funciton：规定速度效果的速度曲线</li>\n<li>transition-delay：规定过渡效果何时开始</li>\n</ul>\n<p><strong><code>transiton-duration</code>必须设置，否则时长为0 ，不会有过渡效果</strong></p>\n<h3 id=\"backface-visibility\"><a href=\"#backface-visibility\" class=\"headerlink\" title=\"backface-visibility\"></a>backface-visibility</h3><p>只有IE10+和Firefox支持<code>backface-visibility</code>，Opera15+、Safari和Chrome支持替代的<code>-webkit-backface-visibility</code></p>\n<h4 id=\"定义和用法-3\"><a href=\"#定义和用法-3\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h4><p><code>backface-visibility</code>属性定义当前元素不面向屏幕时是否可见，如果元素在旋转后不希望看到背面，则可以使用。</p>\n<p>visible：背面是可见的（默认值）</p>\n<p>hidden：背面是不可见的</p>\n<h2 id=\"实现的思路\"><a href=\"#实现的思路\" class=\"headerlink\" title=\"实现的思路\"></a>实现的思路</h2><p>要实现类似的翻牌效果，首先我们需要有一张可以翻的牌，这张牌由两个元素重叠组成，位于上层正面我们看到，而位于下层的背面我们看不到并且本身是绕Y轴旋转过的，这样，当鼠标移动上去后，同时让正面和背面执行旋转就可以实现翻牌效果。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>基本结构代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> &gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>测试正面1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文字文字文字文字文字文字文字文字文字文字文字<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>测试背面1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文字文字文字文字文字文字文字文字文字文字文字<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">225px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">180px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &gt; <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(255, 64, 129);</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>:<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:last-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">rgb</span>(0, 188, 212);</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span> <span class=\"selector-tag\">h3</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> <span class=\"number\">#fff</span> dashed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就让两个div叠在一起了，但是如果要进行翻转的话，首先是需要将背面本身就翻过去，当鼠标放上去之后翻转过来，让我们看到，所以我们需要给背面添加翻转180°的属性，鼠标放上去之后让它翻转到0°，同时为保证每个浏览器渲染统一，给正面加一个翻转0°，鼠标移动上去之后翻转-180°，并且是一个动画，所以要添加过渡。所以给正面背面添加CSS如下： </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &gt; <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transition</span>:.<span class=\"number\">8s</span> ease-in-out;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transition</span>:.<span class=\"number\">8s</span> ease-in-out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>:<span class=\"built_in\">rotateY</span>(0);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>:<span class=\"built_in\">rotateY</span>(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:last-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>:<span class=\"built_in\">rotateY</span>(180deg);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>:<span class=\"built_in\">rotateY</span>(180deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>:<span class=\"built_in\">rotateY</span>(-180deg);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>:<span class=\"built_in\">rotateY</span>(-180deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:last-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>:<span class=\"built_in\">rotateY</span>(0);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>:<span class=\"built_in\">rotateY</span>(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在添加这些CSS3属性后，可以实现翻转，但是发现只看到正面，没有看到背面，这又是为什么呢，前面提到有一个属性<code>backface-visibility</code>，这个属性用于控制在翻转后，元素的背面是否可见，默认是可见的，所以就会挡着背面那个元素，我们需要手动设置元素翻转后背面不可见，所以需要设置：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &gt; <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">-webkit-backface-visibility</span>: hidden;</span><br><span class=\"line\">     <span class=\"attribute\">-moz-backface-visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样设置之后，由于正面的元素在翻转后背面不可见，我们就可以看到背面的元素了。</p>\n<p>但是，仔细观察会发现这个翻转似乎并不是那么立体，似乎在两条平行线之间实现了翻转，所以我们需要设置一个观察点距离视图的距离，这时候就需要给父元素添加<code>perspective</code>属性，这个属性的值一般为800px ~ 1000px，这个范围内的值会看上去合理。所以给父元素添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-perspective</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-perspective</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，就实现了一个翻转卡牌的效果，但是这里需要解决一个问题，因为<code>perspective</code>属性不被IE支持（Microsoft Edge支持），所以需要进行降级，我的做法是直接显示隐藏。那么如何识别IE9+浏览器呢？在<a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>中我找到了答案：</p>\n<h2 id=\"附：CSS中识别各类IE的方法\"><a href=\"#附：CSS中识别各类IE的方法\" class=\"headerlink\" title=\"附：CSS中识别各类IE的方法\"></a>附：CSS中识别各类IE的方法</h2><h2 id=\"IE6\"><a href=\"#IE6\" class=\"headerlink\" title=\"IE6\"></a>IE6</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.ie6</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">property</span>:value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> <span class=\"selector-class\">.ie6</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">_property</span>:value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE7\"><a href=\"#IE7\" class=\"headerlink\" title=\"IE7\"></a>IE7</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*+<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.ie7</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">property</span>:value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"selector-pseudo\">:first-child+html</span> <span class=\"selector-tag\">ie7</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">property</span>:value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE6-and-IE7\"><a href=\"#IE6-and-IE7\" class=\"headerlink\" title=\"IE6 and IE7\"></a>IE6 and IE7</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen\\<span class=\"number\">9</span>&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">ie67</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.ie67&#123; *property:value;&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.ie67&#123; #property:value;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE6-7-and-8\"><a href=\"#IE6-7-and-8\" class=\"headerlink\" title=\"IE6,7 and 8\"></a>IE6,7 and 8</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> \\<span class=\"number\">0s</span>creen\\,screen\\<span class=\"number\">9</span>&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">ie678</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE8\"><a href=\"#IE8\" class=\"headerlink\" title=\"IE8\"></a>IE8</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>&gt;<span class=\"comment\">/**/</span><span class=\"selector-tag\">body</span> <span class=\"selector-class\">.ie8</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> \\<span class=\"number\">0s</span>creen&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">ie8</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"只在IE8标准模式\"><a href=\"#只在IE8标准模式\" class=\"headerlink\" title=\"只在IE8标准模式\"></a>只在IE8标准模式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.ie8&#123;property/*\\**/:value\\9;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE8-9-and-10\"><a href=\"#IE8-9-and-10\" class=\"headerlink\" title=\"IE8,9 and 10\"></a>IE8,9 and 10</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen\\<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">ie8910</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE9-only\"><a href=\"#IE9-only\" class=\"headerlink\" title=\"IE9 only\"></a>IE9 only</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">0</span>\\<span class=\"number\">0</span>) and (min-resolution: .<span class=\"number\">001dpcm</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*IE9 CSS*/</span></span><br><span class=\"line\">    <span class=\"selector-class\">.ie9</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE9\"><a href=\"#IE9\" class=\"headerlink\" title=\"IE9+\"></a>IE9+</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">0</span>\\<span class=\"number\">0</span>) and (min-resolution: +<span class=\"number\">72dpi</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*IE9+ CSS*/</span></span><br><span class=\"line\">    <span class=\"selector-class\">.ie9up</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE9-and-10\"><a href=\"#IE9-and-10\" class=\"headerlink\" title=\"IE9 and 10\"></a>IE9 and 10</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.ie910</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE10-only\"><a href=\"#IE10-only\" class=\"headerlink\" title=\"IE10 only\"></a>IE10 only</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"selector-pseudo\">:-ms-lang(x)</span>, <span class=\"selector-tag\">ie10</span> &#123;<span class=\"attribute\">property</span>:value;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE10\"><a href=\"#IE10\" class=\"headerlink\" title=\"IE10+\"></a>IE10+</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"selector-pseudo\">:-ms-lang(x)</span>, <span class=\"selector-tag\">ie10up</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> all and (-ms-high-contrast:none),(-ms-high-contrast:active)&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.ie10up</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE11\"><a href=\"#IE11\" class=\"headerlink\" title=\"IE11+\"></a>IE11+</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"selector-pseudo\">:-ms-fullscreen</span>, <span class=\"selector-pseudo\">:root</span> <span class=\"selector-class\">.ie11up</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>今天在工作中遇到需求，需要用CSS3写一个卡片翻转效果，这个效果看起来简单，但是还是涉及到一些不常用的CSS3中的3D转换的属性以及实现该效果的思路，所以这里总结一下。</p>\n</blockquote>\n<p>项目地址：<a href=\"https://github.com/MrZhang123/Practice/tree/master/FlipCards\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/Practice/tree/master/FlipCards</a><br>","more":"</p>\n<h2 id=\"需要的CSS3属性\"><a href=\"#需要的CSS3属性\" class=\"headerlink\" title=\"需要的CSS3属性\"></a>需要的CSS3属性</h2><h3 id=\"perspective\"><a href=\"#perspective\" class=\"headerlink\" title=\"perspective\"></a>perspective</h3><p><strong>目前浏览器都不支持<code>perspective</code>属性</strong></p>\n<p>在chrome和Safari中需要使用<code>-webkit-perspective</code>，而在Firefox中需要使用<code>-moz-perspective</code>来定义。</p>\n<h4 id=\"定义和用法\"><a href=\"#定义和用法\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h4><p><code>perspective</code>属性定义3D元素距视图的距离，以像素计。该属性允许改变查看3D元素的视图。当为元素定义</p>\n<p><code>perspective</code>属时，其子元素会获得透视效果，而不是元素本身。换句话说，设置这个元素是为了给该元素的子元素用。</p>\n<h4 id=\"值\"><a href=\"#值\" class=\"headerlink\" title=\"值\"></a>值</h4><p>number：元素距离视图的距离，以像素计</p>\n<p>none：<strong>默认值</strong>，与0相同。不设置透视</p>\n<h3 id=\"transform-style\"><a href=\"#transform-style\" class=\"headerlink\" title=\"transform-style\"></a>transform-style</h3><p>Firefox支持<code>transfrom-style</code>属性。</p>\n<p>Chrome、Safari和Opera支持代替的<code>-webkit-transform-style</code>属性。</p>\n<h4 id=\"定义和用法-1\"><a href=\"#定义和用法-1\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h4><p><code>transform-style</code>属性固定如何在3D空间中呈现被嵌套的元素。一般给父元素设置让其所有子元素跟着父元素一起位置移动，一般会设置。</p>\n<h4 id=\"值-1\"><a href=\"#值-1\" class=\"headerlink\" title=\"值\"></a>值</h4><p>flat：子元素将不保留其3D位置（默认值）</p>\n<p>perserve-3d：子元素将保留其3D位置</p>\n<h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3><p>IE10+、Firefox、Opera、Chrome均支持<code>transition</code>属性。Safari支持替代的<code>-webkit-transition</code>属性。但是IE9-不支持该属性。</p>\n<h4 id=\"定义和用法-2\"><a href=\"#定义和用法-2\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h4><p><code>transition</code>属性是一个简写属性，用于设置四个过渡属性：</p>\n<ul>\n<li>transiton-property：规定设置过渡效果的CSS属性的名称</li>\n<li>transiton-duration：规定完成过渡效果需要多少秒或毫秒</li>\n<li>transiton-timing-funciton：规定速度效果的速度曲线</li>\n<li>transition-delay：规定过渡效果何时开始</li>\n</ul>\n<p><strong><code>transiton-duration</code>必须设置，否则时长为0 ，不会有过渡效果</strong></p>\n<h3 id=\"backface-visibility\"><a href=\"#backface-visibility\" class=\"headerlink\" title=\"backface-visibility\"></a>backface-visibility</h3><p>只有IE10+和Firefox支持<code>backface-visibility</code>，Opera15+、Safari和Chrome支持替代的<code>-webkit-backface-visibility</code></p>\n<h4 id=\"定义和用法-3\"><a href=\"#定义和用法-3\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h4><p><code>backface-visibility</code>属性定义当前元素不面向屏幕时是否可见，如果元素在旋转后不希望看到背面，则可以使用。</p>\n<p>visible：背面是可见的（默认值）</p>\n<p>hidden：背面是不可见的</p>\n<h2 id=\"实现的思路\"><a href=\"#实现的思路\" class=\"headerlink\" title=\"实现的思路\"></a>实现的思路</h2><p>要实现类似的翻牌效果，首先我们需要有一张可以翻的牌，这张牌由两个元素重叠组成，位于上层正面我们看到，而位于下层的背面我们看不到并且本身是绕Y轴旋转过的，这样，当鼠标移动上去后，同时让正面和背面执行旋转就可以实现翻牌效果。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>基本结构代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> &gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>测试正面1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文字文字文字文字文字文字文字文字文字文字文字<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>测试背面1<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>文字文字文字文字文字文字文字文字文字文字文字<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">225px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">180px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &gt; <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(255, 64, 129);</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>:<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:last-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">rgb</span>(0, 188, 212);</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span> <span class=\"selector-tag\">h3</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> <span class=\"number\">#fff</span> dashed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-indent</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就让两个div叠在一起了，但是如果要进行翻转的话，首先是需要将背面本身就翻过去，当鼠标放上去之后翻转过来，让我们看到，所以我们需要给背面添加翻转180°的属性，鼠标放上去之后让它翻转到0°，同时为保证每个浏览器渲染统一，给正面加一个翻转0°，鼠标移动上去之后翻转-180°，并且是一个动画，所以要添加过渡。所以给正面背面添加CSS如下： </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &gt; <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transition</span>:.<span class=\"number\">8s</span> ease-in-out;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transition</span>:.<span class=\"number\">8s</span> ease-in-out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>:<span class=\"built_in\">rotateY</span>(0);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>:<span class=\"built_in\">rotateY</span>(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:last-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>:<span class=\"built_in\">rotateY</span>(180deg);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>:<span class=\"built_in\">rotateY</span>(180deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>:<span class=\"built_in\">rotateY</span>(-180deg);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>:<span class=\"built_in\">rotateY</span>(-180deg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:last-child</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>:<span class=\"built_in\">rotateY</span>(0);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>:<span class=\"built_in\">rotateY</span>(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在添加这些CSS3属性后，可以实现翻转，但是发现只看到正面，没有看到背面，这又是为什么呢，前面提到有一个属性<code>backface-visibility</code>，这个属性用于控制在翻转后，元素的背面是否可见，默认是可见的，所以就会挡着背面那个元素，我们需要手动设置元素翻转后背面不可见，所以需要设置：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &gt; <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">-webkit-backface-visibility</span>: hidden;</span><br><span class=\"line\">     <span class=\"attribute\">-moz-backface-visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样设置之后，由于正面的元素在翻转后背面不可见，我们就可以看到背面的元素了。</p>\n<p>但是，仔细观察会发现这个翻转似乎并不是那么立体，似乎在两条平行线之间实现了翻转，所以我们需要设置一个观察点距离视图的距离，这时候就需要给父元素添加<code>perspective</code>属性，这个属性的值一般为800px ~ 1000px，这个范围内的值会看上去合理。所以给父元素添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#content</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-perspective</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-perspective</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，就实现了一个翻转卡牌的效果，但是这里需要解决一个问题，因为<code>perspective</code>属性不被IE支持（Microsoft Edge支持），所以需要进行降级，我的做法是直接显示隐藏。那么如何识别IE9+浏览器呢？在<a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>中我找到了答案：</p>\n<h2 id=\"附：CSS中识别各类IE的方法\"><a href=\"#附：CSS中识别各类IE的方法\" class=\"headerlink\" title=\"附：CSS中识别各类IE的方法\"></a>附：CSS中识别各类IE的方法</h2><h2 id=\"IE6\"><a href=\"#IE6\" class=\"headerlink\" title=\"IE6\"></a>IE6</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"selector-tag\">html</span> <span class=\"selector-class\">.ie6</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">property</span>:value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> <span class=\"selector-class\">.ie6</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">_property</span>:value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE7\"><a href=\"#IE7\" class=\"headerlink\" title=\"IE7\"></a>IE7</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*+<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.ie7</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">property</span>:value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"selector-pseudo\">:first-child+html</span> <span class=\"selector-tag\">ie7</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">property</span>:value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE6-and-IE7\"><a href=\"#IE6-and-IE7\" class=\"headerlink\" title=\"IE6 and IE7\"></a>IE6 and IE7</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen\\<span class=\"number\">9</span>&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">ie67</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.ie67&#123; *property:value;&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.ie67&#123; #property:value;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE6-7-and-8\"><a href=\"#IE6-7-and-8\" class=\"headerlink\" title=\"IE6,7 and 8\"></a>IE6,7 and 8</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> \\<span class=\"number\">0s</span>creen\\,screen\\<span class=\"number\">9</span>&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">ie678</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE8\"><a href=\"#IE8\" class=\"headerlink\" title=\"IE8\"></a>IE8</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>&gt;<span class=\"comment\">/**/</span><span class=\"selector-tag\">body</span> <span class=\"selector-class\">.ie8</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> \\<span class=\"number\">0s</span>creen&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">ie8</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"只在IE8标准模式\"><a href=\"#只在IE8标准模式\" class=\"headerlink\" title=\"只在IE8标准模式\"></a>只在IE8标准模式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.ie8&#123;property/*\\**/:value\\9;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE8-9-and-10\"><a href=\"#IE8-9-and-10\" class=\"headerlink\" title=\"IE8,9 and 10\"></a>IE8,9 and 10</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen\\<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">ie8910</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE9-only\"><a href=\"#IE9-only\" class=\"headerlink\" title=\"IE9 only\"></a>IE9 only</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">0</span>\\<span class=\"number\">0</span>) and (min-resolution: .<span class=\"number\">001dpcm</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*IE9 CSS*/</span></span><br><span class=\"line\">    <span class=\"selector-class\">.ie9</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE9\"><a href=\"#IE9\" class=\"headerlink\" title=\"IE9+\"></a>IE9+</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">0</span>\\<span class=\"number\">0</span>) and (min-resolution: +<span class=\"number\">72dpi</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*IE9+ CSS*/</span></span><br><span class=\"line\">    <span class=\"selector-class\">.ie9up</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE9-and-10\"><a href=\"#IE9-and-10\" class=\"headerlink\" title=\"IE9 and 10\"></a>IE9 and 10</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.ie910</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE10-only\"><a href=\"#IE10-only\" class=\"headerlink\" title=\"IE10 only\"></a>IE10 only</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"selector-pseudo\">:-ms-lang(x)</span>, <span class=\"selector-tag\">ie10</span> &#123;<span class=\"attribute\">property</span>:value;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE10\"><a href=\"#IE10\" class=\"headerlink\" title=\"IE10+\"></a>IE10+</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"selector-pseudo\">:-ms-lang(x)</span>, <span class=\"selector-tag\">ie10up</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> all and (-ms-high-contrast:none),(-ms-high-contrast:active)&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.ie10up</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE11\"><a href=\"#IE11\" class=\"headerlink\" title=\"IE11+\"></a>IE11+</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"selector-pseudo\">:-ms-fullscreen</span>, <span class=\"selector-pseudo\">:root</span> <span class=\"selector-class\">.ie11up</span>&#123;<span class=\"attribute\">property</span>:value;&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JS转换转义字符","date":"2017-11-25T15:03:40.000Z","comments":1,"_content":">这周在开发后端系统的时候，遇到了需要将后端传过来的转义字符进行转义然后再渲染到html中，因为之前也没有遇到过，所以研究了研究，记录一下。\n\n<!--more-->\n\n记得上大学时候学习C语言就有提到过转义字符，比如`\\n`表示回车，`\\t`表示水平制表符等等。其实所有编程语言都有转移字符，转移字符出现的原因基本上就两点：\n\n1. 使用转义字符来表示字符集中定义的字符，比如ASCll里面的控制字符及回车换行等字符，这些字符都没有现成的文字代号。所以只能用转义字符来表示\n2. 某一些特定的字符在编辑语言中被定义为特殊用途的字符。这些字符由于被定义为特殊用途，它们失去了原有的意义。例如在html中，`<`被HTML定义为标签的开始，所以当我们转入`<`时，HTML就会把它当作为开始，而不是当作一个`<`来看待\n\n由于不同的语言关键字不同，例如在一般的编程语言中，`\"`会被当作代码的一部分，但是在html中它会被直接渲染，再如常见的编程语言中`\\n`表示回车，但是在html中`<br>`表示回车\n\n这就导致了如果后端返回的是想要在前端展示的一段代码，则必然会包含转移字符，而这些转义字符html是无法识别的\n\n## 解决——js转换转义字符\n\n由于html与js所用的转义字符不同所以导致了无法正常渲染，所以需要在js中先将转义字符转换，然后在渲染到html中，在js中转换转义字符常用的有两种方法：\n\n* eval()\n* JSON.parse()\n\n`eval()`函数会将传入的字符串当做JavaScript代码进行执行。这个函数一般是不推荐使用的，因为他执行的代码拥有着执行者的权利。如果用eval()运行的字符串代码被恶意方操控修改,可能会利用最终在用户机器上运行恶意方部署的恶意代码，并导致失去对网页或者扩展程序的权限。所以这种方法是不推荐的\n\n`JSON.parse()`方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象，经过这个转换，由于代码的执行，转义字符会被自动转义，从而拿到我们想要的效果，但是使用这个方法解析的时候**需要注意一点**：必须组合成JSON字符串，所以我们需要将拿到的数据进行包装：\n\n```js\ndecodeValueFun(value) {\n    const decodeValue = JSON.parse(`{\"key\":${value}}`);\n    return decodeValue.key;\n},\n```\n\n这样返回的数据就是经过转义的数据了\n\n## 疑问🤔️\n\n在实际测试的时候发现，如果将后端返回的数据直接贴入前端js代码中然后去直接展示到页面中，转义字符会被自动识别，但是如果将后端返回的字符串直接渲染到html页面中，则字符串中的转义字符直接被当作字符串处理，这说明在js使用字符串的时候已经将转义符自动转义，不知道这个是什么原因。\n\n## 附：\n\n#### 常见的HTML转义字符\n\n| 字符     | 十进制 | 转义字符 |\n| -------- | ----- | ----     |\n|    \"     | `&#34;` | `&quot;`   |\n| & | `&#38;` | `&amp;` |\n| < | `&#60;` | `&lt;` |\n| > | `&#62;` | `&gt;` |\n| 不断开空格(non-breaking space) | `&#160;` | `&nbsp;` |\n\n更多html转义字符见链接：http://tool.oschina.net/commons?type=2\n\n#### 常见的编程语言的字符表\n\n| 转义字符 |  意义                | ASCII码值（十进制）|\n| -------- | -----                         | ----  |\n|  `\\a`      | 响铃(BEL)                      |  007  |\n|  `\\b`      | 退格(BS) ，将当前位置移到前一列  |  008  |\n|  `\\f`      | 换页(FF)，将当前位置移到下页开头 |  012  | \n|  `\\n`      | 换行(LF) ，将当前位置移到下一行开头 |  010  |\n|   `\\r`     |   回车(CR) ，将当前位置移到本行开头 |  013  |\n|   `\\t`     |   水平制表(HT) （跳到下一个TAB位置）|   009 |\n|   `\\v`     |   垂直制表(VT)                     | 011   |\n|   `\\\\`     |    代表一个反斜线字符''\\'           |  092  |\n|   `\\'`     |    代表一个单引号（撇号）字符        |  039  |\n|   `\\\"`     |    代表一个双引号字符               |   034 | \n|   `\\?`\t   |    代表一个问号\t                   |   063  |\n|    `\\0`    |      空字符(NULL)                   |     000 |      \n|  `\\ooo`    |  1到3位八进制数所代表的任意字符       |三位八进制 |\n|  `\\xff`    |   1到2位十六进制所代表的任意字符      |二位十六进制|","source":"_posts/JSdecode.md","raw":"---\ntitle: JS转换转义字符\ndate: 2017-11-25 23:03:40\ntags: Javascript\ncomments: true\ncategories: \"Javascript\"\n---\n>这周在开发后端系统的时候，遇到了需要将后端传过来的转义字符进行转义然后再渲染到html中，因为之前也没有遇到过，所以研究了研究，记录一下。\n\n<!--more-->\n\n记得上大学时候学习C语言就有提到过转义字符，比如`\\n`表示回车，`\\t`表示水平制表符等等。其实所有编程语言都有转移字符，转移字符出现的原因基本上就两点：\n\n1. 使用转义字符来表示字符集中定义的字符，比如ASCll里面的控制字符及回车换行等字符，这些字符都没有现成的文字代号。所以只能用转义字符来表示\n2. 某一些特定的字符在编辑语言中被定义为特殊用途的字符。这些字符由于被定义为特殊用途，它们失去了原有的意义。例如在html中，`<`被HTML定义为标签的开始，所以当我们转入`<`时，HTML就会把它当作为开始，而不是当作一个`<`来看待\n\n由于不同的语言关键字不同，例如在一般的编程语言中，`\"`会被当作代码的一部分，但是在html中它会被直接渲染，再如常见的编程语言中`\\n`表示回车，但是在html中`<br>`表示回车\n\n这就导致了如果后端返回的是想要在前端展示的一段代码，则必然会包含转移字符，而这些转义字符html是无法识别的\n\n## 解决——js转换转义字符\n\n由于html与js所用的转义字符不同所以导致了无法正常渲染，所以需要在js中先将转义字符转换，然后在渲染到html中，在js中转换转义字符常用的有两种方法：\n\n* eval()\n* JSON.parse()\n\n`eval()`函数会将传入的字符串当做JavaScript代码进行执行。这个函数一般是不推荐使用的，因为他执行的代码拥有着执行者的权利。如果用eval()运行的字符串代码被恶意方操控修改,可能会利用最终在用户机器上运行恶意方部署的恶意代码，并导致失去对网页或者扩展程序的权限。所以这种方法是不推荐的\n\n`JSON.parse()`方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象，经过这个转换，由于代码的执行，转义字符会被自动转义，从而拿到我们想要的效果，但是使用这个方法解析的时候**需要注意一点**：必须组合成JSON字符串，所以我们需要将拿到的数据进行包装：\n\n```js\ndecodeValueFun(value) {\n    const decodeValue = JSON.parse(`{\"key\":${value}}`);\n    return decodeValue.key;\n},\n```\n\n这样返回的数据就是经过转义的数据了\n\n## 疑问🤔️\n\n在实际测试的时候发现，如果将后端返回的数据直接贴入前端js代码中然后去直接展示到页面中，转义字符会被自动识别，但是如果将后端返回的字符串直接渲染到html页面中，则字符串中的转义字符直接被当作字符串处理，这说明在js使用字符串的时候已经将转义符自动转义，不知道这个是什么原因。\n\n## 附：\n\n#### 常见的HTML转义字符\n\n| 字符     | 十进制 | 转义字符 |\n| -------- | ----- | ----     |\n|    \"     | `&#34;` | `&quot;`   |\n| & | `&#38;` | `&amp;` |\n| < | `&#60;` | `&lt;` |\n| > | `&#62;` | `&gt;` |\n| 不断开空格(non-breaking space) | `&#160;` | `&nbsp;` |\n\n更多html转义字符见链接：http://tool.oschina.net/commons?type=2\n\n#### 常见的编程语言的字符表\n\n| 转义字符 |  意义                | ASCII码值（十进制）|\n| -------- | -----                         | ----  |\n|  `\\a`      | 响铃(BEL)                      |  007  |\n|  `\\b`      | 退格(BS) ，将当前位置移到前一列  |  008  |\n|  `\\f`      | 换页(FF)，将当前位置移到下页开头 |  012  | \n|  `\\n`      | 换行(LF) ，将当前位置移到下一行开头 |  010  |\n|   `\\r`     |   回车(CR) ，将当前位置移到本行开头 |  013  |\n|   `\\t`     |   水平制表(HT) （跳到下一个TAB位置）|   009 |\n|   `\\v`     |   垂直制表(VT)                     | 011   |\n|   `\\\\`     |    代表一个反斜线字符''\\'           |  092  |\n|   `\\'`     |    代表一个单引号（撇号）字符        |  039  |\n|   `\\\"`     |    代表一个双引号字符               |   034 | \n|   `\\?`\t   |    代表一个问号\t                   |   063  |\n|    `\\0`    |      空字符(NULL)                   |     000 |      \n|  `\\ooo`    |  1到3位八进制数所代表的任意字符       |三位八进制 |\n|  `\\xff`    |   1到2位十六进制所代表的任意字符      |二位十六进制|","slug":"JSdecode","published":1,"updated":"2017-12-20T11:23:09.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoak0006zrv43tcxysd4","content":"<blockquote>\n<p>这周在开发后端系统的时候，遇到了需要将后端传过来的转义字符进行转义然后再渲染到html中，因为之前也没有遇到过，所以研究了研究，记录一下。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>记得上大学时候学习C语言就有提到过转义字符，比如<code>\\n</code>表示回车，<code>\\t</code>表示水平制表符等等。其实所有编程语言都有转移字符，转移字符出现的原因基本上就两点：</p>\n<ol>\n<li>使用转义字符来表示字符集中定义的字符，比如ASCll里面的控制字符及回车换行等字符，这些字符都没有现成的文字代号。所以只能用转义字符来表示</li>\n<li>某一些特定的字符在编辑语言中被定义为特殊用途的字符。这些字符由于被定义为特殊用途，它们失去了原有的意义。例如在html中，<code>&lt;</code>被HTML定义为标签的开始，所以当我们转入<code>&lt;</code>时，HTML就会把它当作为开始，而不是当作一个<code>&lt;</code>来看待</li>\n</ol>\n<p>由于不同的语言关键字不同，例如在一般的编程语言中，<code>&quot;</code>会被当作代码的一部分，但是在html中它会被直接渲染，再如常见的编程语言中<code>\\n</code>表示回车，但是在html中<code>&lt;br&gt;</code>表示回车</p>\n<p>这就导致了如果后端返回的是想要在前端展示的一段代码，则必然会包含转移字符，而这些转义字符html是无法识别的</p>\n<h2 id=\"解决——js转换转义字符\"><a href=\"#解决——js转换转义字符\" class=\"headerlink\" title=\"解决——js转换转义字符\"></a>解决——js转换转义字符</h2><p>由于html与js所用的转义字符不同所以导致了无法正常渲染，所以需要在js中先将转义字符转换，然后在渲染到html中，在js中转换转义字符常用的有两种方法：</p>\n<ul>\n<li>eval()</li>\n<li>JSON.parse()</li>\n</ul>\n<p><code>eval()</code>函数会将传入的字符串当做JavaScript代码进行执行。这个函数一般是不推荐使用的，因为他执行的代码拥有着执行者的权利。如果用eval()运行的字符串代码被恶意方操控修改,可能会利用最终在用户机器上运行恶意方部署的恶意代码，并导致失去对网页或者扩展程序的权限。所以这种方法是不推荐的</p>\n<p><code>JSON.parse()</code>方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象，经过这个转换，由于代码的执行，转义字符会被自动转义，从而拿到我们想要的效果，但是使用这个方法解析的时候<strong>需要注意一点</strong>：必须组合成JSON字符串，所以我们需要将拿到的数据进行包装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decodeValueFun(value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> decodeValue = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">`&#123;\"key\":<span class=\"subst\">$&#123;value&#125;</span>&#125;`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decodeValue.key;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这样返回的数据就是经过转义的数据了</p>\n<h2 id=\"疑问🤔️\"><a href=\"#疑问🤔️\" class=\"headerlink\" title=\"疑问🤔️\"></a>疑问🤔️</h2><p>在实际测试的时候发现，如果将后端返回的数据直接贴入前端js代码中然后去直接展示到页面中，转义字符会被自动识别，但是如果将后端返回的字符串直接渲染到html页面中，则字符串中的转义字符直接被当作字符串处理，这说明在js使用字符串的时候已经将转义符自动转义，不知道这个是什么原因。</p>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><h4 id=\"常见的HTML转义字符\"><a href=\"#常见的HTML转义字符\" class=\"headerlink\" title=\"常见的HTML转义字符\"></a>常见的HTML转义字符</h4><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>十进制</th>\n<th>转义字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“</td>\n<td><code>&amp;#34;</code></td>\n<td><code>&amp;quot;</code></td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td><code>&amp;#38;</code></td>\n<td><code>&amp;amp;</code></td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td><code>&amp;#60;</code></td>\n<td><code>&amp;lt;</code></td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td><code>&amp;#62;</code></td>\n<td><code>&amp;gt;</code></td>\n</tr>\n<tr>\n<td>不断开空格(non-breaking space)</td>\n<td><code>&amp;#160;</code></td>\n<td><code>&amp;nbsp;</code></td>\n</tr>\n</tbody>\n</table>\n<p>更多html转义字符见链接：<a href=\"http://tool.oschina.net/commons?type=2\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=2</a></p>\n<h4 id=\"常见的编程语言的字符表\"><a href=\"#常见的编程语言的字符表\" class=\"headerlink\" title=\"常见的编程语言的字符表\"></a>常见的编程语言的字符表</h4><table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>意义</th>\n<th>ASCII码值（十进制）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\a</code></td>\n<td>响铃(BEL)</td>\n<td>007</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>退格(BS) ，将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>换页(FF)，将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行(LF) ，将当前位置移到下一行开头</td>\n<td>010</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车(CR) ，将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>水平制表(HT) （跳到下一个TAB位置）</td>\n<td>009</td>\n</tr>\n<tr>\n<td><code>\\v</code></td>\n<td>垂直制表(VT)</td>\n<td>011</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>代表一个反斜线字符’’\\’</td>\n<td>092</td>\n</tr>\n<tr>\n<td><code>\\&#39;</code></td>\n<td>代表一个单引号（撇号）字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td><code>\\?</code></td>\n<td>代表一个问号</td>\n<td>063</td>\n</tr>\n<tr>\n<td><code>\\0</code></td>\n<td>空字符(NULL)</td>\n<td>000</td>\n</tr>\n<tr>\n<td><code>\\ooo</code></td>\n<td>1到3位八进制数所代表的任意字符</td>\n<td>三位八进制</td>\n</tr>\n<tr>\n<td><code>\\xff</code></td>\n<td>1到2位十六进制所代表的任意字符</td>\n<td>二位十六进制</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这周在开发后端系统的时候，遇到了需要将后端传过来的转义字符进行转义然后再渲染到html中，因为之前也没有遇到过，所以研究了研究，记录一下。</p>\n</blockquote>","more":"<p>记得上大学时候学习C语言就有提到过转义字符，比如<code>\\n</code>表示回车，<code>\\t</code>表示水平制表符等等。其实所有编程语言都有转移字符，转移字符出现的原因基本上就两点：</p>\n<ol>\n<li>使用转义字符来表示字符集中定义的字符，比如ASCll里面的控制字符及回车换行等字符，这些字符都没有现成的文字代号。所以只能用转义字符来表示</li>\n<li>某一些特定的字符在编辑语言中被定义为特殊用途的字符。这些字符由于被定义为特殊用途，它们失去了原有的意义。例如在html中，<code>&lt;</code>被HTML定义为标签的开始，所以当我们转入<code>&lt;</code>时，HTML就会把它当作为开始，而不是当作一个<code>&lt;</code>来看待</li>\n</ol>\n<p>由于不同的语言关键字不同，例如在一般的编程语言中，<code>&quot;</code>会被当作代码的一部分，但是在html中它会被直接渲染，再如常见的编程语言中<code>\\n</code>表示回车，但是在html中<code>&lt;br&gt;</code>表示回车</p>\n<p>这就导致了如果后端返回的是想要在前端展示的一段代码，则必然会包含转移字符，而这些转义字符html是无法识别的</p>\n<h2 id=\"解决——js转换转义字符\"><a href=\"#解决——js转换转义字符\" class=\"headerlink\" title=\"解决——js转换转义字符\"></a>解决——js转换转义字符</h2><p>由于html与js所用的转义字符不同所以导致了无法正常渲染，所以需要在js中先将转义字符转换，然后在渲染到html中，在js中转换转义字符常用的有两种方法：</p>\n<ul>\n<li>eval()</li>\n<li>JSON.parse()</li>\n</ul>\n<p><code>eval()</code>函数会将传入的字符串当做JavaScript代码进行执行。这个函数一般是不推荐使用的，因为他执行的代码拥有着执行者的权利。如果用eval()运行的字符串代码被恶意方操控修改,可能会利用最终在用户机器上运行恶意方部署的恶意代码，并导致失去对网页或者扩展程序的权限。所以这种方法是不推荐的</p>\n<p><code>JSON.parse()</code>方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象，经过这个转换，由于代码的执行，转义字符会被自动转义，从而拿到我们想要的效果，但是使用这个方法解析的时候<strong>需要注意一点</strong>：必须组合成JSON字符串，所以我们需要将拿到的数据进行包装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decodeValueFun(value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> decodeValue = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">`&#123;\"key\":<span class=\"subst\">$&#123;value&#125;</span>&#125;`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decodeValue.key;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这样返回的数据就是经过转义的数据了</p>\n<h2 id=\"疑问🤔️\"><a href=\"#疑问🤔️\" class=\"headerlink\" title=\"疑问🤔️\"></a>疑问🤔️</h2><p>在实际测试的时候发现，如果将后端返回的数据直接贴入前端js代码中然后去直接展示到页面中，转义字符会被自动识别，但是如果将后端返回的字符串直接渲染到html页面中，则字符串中的转义字符直接被当作字符串处理，这说明在js使用字符串的时候已经将转义符自动转义，不知道这个是什么原因。</p>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><h4 id=\"常见的HTML转义字符\"><a href=\"#常见的HTML转义字符\" class=\"headerlink\" title=\"常见的HTML转义字符\"></a>常见的HTML转义字符</h4><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>十进制</th>\n<th>转义字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“</td>\n<td><code>&amp;#34;</code></td>\n<td><code>&amp;quot;</code></td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td><code>&amp;#38;</code></td>\n<td><code>&amp;amp;</code></td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td><code>&amp;#60;</code></td>\n<td><code>&amp;lt;</code></td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td><code>&amp;#62;</code></td>\n<td><code>&amp;gt;</code></td>\n</tr>\n<tr>\n<td>不断开空格(non-breaking space)</td>\n<td><code>&amp;#160;</code></td>\n<td><code>&amp;nbsp;</code></td>\n</tr>\n</tbody>\n</table>\n<p>更多html转义字符见链接：<a href=\"http://tool.oschina.net/commons?type=2\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons?type=2</a></p>\n<h4 id=\"常见的编程语言的字符表\"><a href=\"#常见的编程语言的字符表\" class=\"headerlink\" title=\"常见的编程语言的字符表\"></a>常见的编程语言的字符表</h4><table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>意义</th>\n<th>ASCII码值（十进制）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\a</code></td>\n<td>响铃(BEL)</td>\n<td>007</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>退格(BS) ，将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>换页(FF)，将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行(LF) ，将当前位置移到下一行开头</td>\n<td>010</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车(CR) ，将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>水平制表(HT) （跳到下一个TAB位置）</td>\n<td>009</td>\n</tr>\n<tr>\n<td><code>\\v</code></td>\n<td>垂直制表(VT)</td>\n<td>011</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>代表一个反斜线字符’’\\’</td>\n<td>092</td>\n</tr>\n<tr>\n<td><code>\\&#39;</code></td>\n<td>代表一个单引号（撇号）字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td><code>\\?</code></td>\n<td>代表一个问号</td>\n<td>063</td>\n</tr>\n<tr>\n<td><code>\\0</code></td>\n<td>空字符(NULL)</td>\n<td>000</td>\n</tr>\n<tr>\n<td><code>\\ooo</code></td>\n<td>1到3位八进制数所代表的任意字符</td>\n<td>三位八进制</td>\n</tr>\n<tr>\n<td><code>\\xff</code></td>\n<td>1到2位十六进制所代表的任意字符</td>\n<td>二位十六进制</td>\n</tr>\n</tbody>\n</table>"},{"title":"RN长列表--ListView && SectionList","date":"2017-06-10T16:10:54.000Z","comments":1,"_content":"\n突然发现自己的博客已经从原来的几天更新一次变成了如今的一个月更新一次[捂脸]，最近这一个月实在是太忙了，上个月月初的时候，接了一个RN的项目，做一个app，那时候老大问谁感兴趣，我直接说我。其实自己对RN一直很有兴趣，但是那时候由于在看Vue，所以并没有去搞，现在刚好有个项目，正好我可以去了解一下RN。说实话，这一答应不要紧，差点儿被RN气死，以前觉得RN应该比较成熟了，经过这段时间做项目，发现RN的坑还是很多的。\n\n<!--more-->\n\n在项目中我用到的比较多的是长列表，所以这篇文章主要是记一下对RN的`ListView`和`SectionList`的一些总结。我项目中使用的RN是0.44，关于为什么不用性能更好的`FlatList`而使用老的`ListView`，是因为自己本身第一次接触RN，所以担心用不好`FlatList`而且担心会有什么bug，毕竟这个是在0.43版本才添加的。\n\n## ListView\n\n对于`ListView`最重要的两个属性，一个是数据源（dataSource），再一个就是列表项渲染（renderRow）。`ListView`可以根据不同的数据结构对应的生成普通长列表和分组长列表。\n\n### 普通长列表\n\n普通长列表使用`cloneWithRows(dataBlob, rowIdentities)`创建datasource，在项目中`dataBlob`的数据结构如下：\n\n```js\n[\n    {id:1},\n    {name:'Mark'},\n    ...\n]\n```\n\n在使用`renderRow(rowData, sectionID, rowID, highlightRow)`渲染列表项的时候，`rowData`就是数组中每一个对象。\n\n### 分组长列表\n\n在项目中，遇到分组长列表，由于RN版本为0.44，所以有`ListView`和`SectionList`两种选择方案，最终我选择了`SectionList`，因为我发现`ListView`的`section`只能是一个简单的字符串，不能是一个对象（这里说实话我也不知道对不对，若不对，请指正并说明如何使用`ListView`实现`section`是一个对象）。\n\n这里我要吐槽一下RN的文档，真的是有些地方写的太简单，比如在`ListView`这里写到使用`cloneWithRowsAndSections`的使用，只是简单的说跟`cloneWithRows`差不多，而接受的数据结构也就简单的说明有三种：\n\n```js\n{ sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n//or\n{ sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n//or\n[ [ <rowData1>, <rowData2>, ... ], ... ]\n```\n\n但是具体这里的是些什么，我觉得没有说清楚。所以我在项目中试了下用`ListView`的`cloneWithRowsAndSections`实现带有粘性标题的列表，发现前两种`sectionID`只能是一个简单的字符串或者数字，不能是一个对象，数据结构如下：\n\n```js\nconst dataSource1 = [\n    ['row1','row2'],\n    ['row3','row4'],\n    ['row5','row6'],\n];\n\nconst dataSoure2 = {\n    'id1':['row1','row2'],\n    'id2':['row3','row4'],\n    'id3':['row5','row6'],\n}\n\nconst dataSoure3 = {\n    'id1':{'row1','row2'},\n    'id2':{'row3','row4'},\n    'id3':{'row5','row6'},\n}\ncloneWithRowsAndSections(dataSource);\n```\n\ndataSoure1生成的sectionHeader是数组的下标，而第二个第三个分别是对应的`key`，在项目中我的sectionHeader是一个对象，类似于`{headerName:'',headerContent:''}`，所以无法使用。\n\n## SectionList分组长列表\n\n`SectionList`和`FlatList`一样是新增的高性能长列表，在文档中关于`SectionList`接受的数据结构描述如下：\n\n```js\n<SectionList\n  renderItem={({item}) => <ListItem title={item.title} />}\n  renderSectionHeader={({section}) => <H1 title={section.title} />}\n  sections={[ // homogenous rendering between sections\n    {data: [...], title: ...},\n    {data: [...], title: ...},\n    {data: [...], title: ...},\n  ]}\n/>\n\n<SectionList\n  sections={[ // heterogeneous rendering between sections\n    {data: [...], title: ..., renderItem: ...},\n    {data: [...], title: ..., renderItem: ...},\n    {data: [...], title: ..., renderItem: ...},\n  ]}\n/>\n```\n\n说实话我第一次看到这个描述的时候很懵逼，这好像并没说明data里具体的数据结构是什么样子的，`renderSectionHeader`中的数据又该如何取，在网上看了一个简单的讲解才大概知道`sections`里的数据应该怎么写，代码如下：\n\n```js\nimport React , {Component} from 'react';\nimport {\n    AppRegistry,\n    StyleSheet,\n    Text,\n    View,\n    SectionList\n} from 'react-native';\n\nconst dataSource = [\n    {data:[{name:'nader'},{name:'chris'}],key:'A'},\n    {data:[{name:'nick'},{name:'amanda'}],key:'B'}\n];\n\nexport default class SectionListExample extends Component {\n    renderItem = (item) => {\n        return <Text style={styles.text}>{item.item.name}</Text>\n    }\n\n    renderHeader = (headerItem) => {\n        return <Text style={styles.header}>{headerItem.section.key}</Text>\n    }\n\n    render(){\n        return(\n            <View style={styles.container}>\n                <SectionList\n                    renderItem={this.renderItem}\n                    renderSectionHeader={this.renderHeader}\n                    sections={dataSource}\n                    keyExtractor={(item)=>item.name}\n                />\n            </View>\n        )\n    }\n}\n```\n\n这里需要注意一点就是`renderItem`所用的数据`key`必须是`data`，而且`key`必须是唯一的，然后其余的数据用在`headerItem`中，这样就非常容易在`sectionHeader`中渲染出多个后台给定的数据。\n\n#### `SectionList`和`FlatList`需要注意几点：\n\n* 文档中提到<span style='color:red'>为了优化内存占用同时保持滑动的流畅，列表内容会在屏幕外异步绘制。这意味着如果用户滑动的速度超过渲染的速度，则会先看到空白的内容。这是为了优化不得不作出的妥协，而我们也在设法持续改进。</span>所以如果不想在滑动过快导致白屏出现，就只能使用`ListView`。\n\n* 在我的项目中设置`stickySectionHeadersEnabled={true}`的时候，粘性标题在往下滑动一会儿再滑动回去的时候，标题会消失，这不知道是我代码有问题还是本身`SectionList`的粘性标题在安卓下就有问题，不过在官方文档中写到`Only enabled by default on iOS because that is the platform standard there.`所以可能是`SectionList`粘性标题在安卓下就有问题。\n\n* `SectionList`和`FlatList`提供了一个叫`legacyImplementation`的属性，该属性如果设置为`true`则使用旧的`ListView`实现。在上述提到的两个问题中，如果将`SectionList`的`legacyImplementation`设置为`true`，则两个问题均解决。个人觉得这是官方提供的一个降级的办法，所以其实我们可以抛弃`ListView`转而使用`FlatList`和`SectionList`，如果有什么问题，让它们用旧的`ListView`实现。\n\n\n## 最后\n\n最后列几个长列表（`ListView`，`SectionList`，`FlatList`）的常用属性\n\n`onEndReached`（function）：当列表到达底部时候触发的事件，关于这个事件需要注意一点，<span style='color:red'>当第一次渲染时，如果数据不足一屏（比如初始值是空的），这个事件也会被触发，需要自行过滤</span>\n\n`onEndReachedThreshold`（number）：距离最后一个列表元素多少像素时候触发`onEndReached`事件\n\n`initialListSize`（number）：初始化时候渲染多少条数据，如果不写择时逐条渲染\n\n`showsVerticalScrollIndicator`（bool）：默认情况下，ListView有滚动条，当设置为false的时候不显示该滚动条（继承自ScrollView）\n\n`pageSize`（number，仅`ListView`有）：每次事件循环（每帧）渲染的行数，常用于分页，数据请求回来后渲染多少条，不设置则逐条渲染。","source":"_posts/RN-list.md","raw":"---\ntitle: RN长列表--ListView && SectionList\ndate: 2017-06-11 00:10:54\ntags: React Native\ncomments: true\ncategories: \"React Native\"\n---\n\n突然发现自己的博客已经从原来的几天更新一次变成了如今的一个月更新一次[捂脸]，最近这一个月实在是太忙了，上个月月初的时候，接了一个RN的项目，做一个app，那时候老大问谁感兴趣，我直接说我。其实自己对RN一直很有兴趣，但是那时候由于在看Vue，所以并没有去搞，现在刚好有个项目，正好我可以去了解一下RN。说实话，这一答应不要紧，差点儿被RN气死，以前觉得RN应该比较成熟了，经过这段时间做项目，发现RN的坑还是很多的。\n\n<!--more-->\n\n在项目中我用到的比较多的是长列表，所以这篇文章主要是记一下对RN的`ListView`和`SectionList`的一些总结。我项目中使用的RN是0.44，关于为什么不用性能更好的`FlatList`而使用老的`ListView`，是因为自己本身第一次接触RN，所以担心用不好`FlatList`而且担心会有什么bug，毕竟这个是在0.43版本才添加的。\n\n## ListView\n\n对于`ListView`最重要的两个属性，一个是数据源（dataSource），再一个就是列表项渲染（renderRow）。`ListView`可以根据不同的数据结构对应的生成普通长列表和分组长列表。\n\n### 普通长列表\n\n普通长列表使用`cloneWithRows(dataBlob, rowIdentities)`创建datasource，在项目中`dataBlob`的数据结构如下：\n\n```js\n[\n    {id:1},\n    {name:'Mark'},\n    ...\n]\n```\n\n在使用`renderRow(rowData, sectionID, rowID, highlightRow)`渲染列表项的时候，`rowData`就是数组中每一个对象。\n\n### 分组长列表\n\n在项目中，遇到分组长列表，由于RN版本为0.44，所以有`ListView`和`SectionList`两种选择方案，最终我选择了`SectionList`，因为我发现`ListView`的`section`只能是一个简单的字符串，不能是一个对象（这里说实话我也不知道对不对，若不对，请指正并说明如何使用`ListView`实现`section`是一个对象）。\n\n这里我要吐槽一下RN的文档，真的是有些地方写的太简单，比如在`ListView`这里写到使用`cloneWithRowsAndSections`的使用，只是简单的说跟`cloneWithRows`差不多，而接受的数据结构也就简单的说明有三种：\n\n```js\n{ sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n//or\n{ sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n//or\n[ [ <rowData1>, <rowData2>, ... ], ... ]\n```\n\n但是具体这里的是些什么，我觉得没有说清楚。所以我在项目中试了下用`ListView`的`cloneWithRowsAndSections`实现带有粘性标题的列表，发现前两种`sectionID`只能是一个简单的字符串或者数字，不能是一个对象，数据结构如下：\n\n```js\nconst dataSource1 = [\n    ['row1','row2'],\n    ['row3','row4'],\n    ['row5','row6'],\n];\n\nconst dataSoure2 = {\n    'id1':['row1','row2'],\n    'id2':['row3','row4'],\n    'id3':['row5','row6'],\n}\n\nconst dataSoure3 = {\n    'id1':{'row1','row2'},\n    'id2':{'row3','row4'},\n    'id3':{'row5','row6'},\n}\ncloneWithRowsAndSections(dataSource);\n```\n\ndataSoure1生成的sectionHeader是数组的下标，而第二个第三个分别是对应的`key`，在项目中我的sectionHeader是一个对象，类似于`{headerName:'',headerContent:''}`，所以无法使用。\n\n## SectionList分组长列表\n\n`SectionList`和`FlatList`一样是新增的高性能长列表，在文档中关于`SectionList`接受的数据结构描述如下：\n\n```js\n<SectionList\n  renderItem={({item}) => <ListItem title={item.title} />}\n  renderSectionHeader={({section}) => <H1 title={section.title} />}\n  sections={[ // homogenous rendering between sections\n    {data: [...], title: ...},\n    {data: [...], title: ...},\n    {data: [...], title: ...},\n  ]}\n/>\n\n<SectionList\n  sections={[ // heterogeneous rendering between sections\n    {data: [...], title: ..., renderItem: ...},\n    {data: [...], title: ..., renderItem: ...},\n    {data: [...], title: ..., renderItem: ...},\n  ]}\n/>\n```\n\n说实话我第一次看到这个描述的时候很懵逼，这好像并没说明data里具体的数据结构是什么样子的，`renderSectionHeader`中的数据又该如何取，在网上看了一个简单的讲解才大概知道`sections`里的数据应该怎么写，代码如下：\n\n```js\nimport React , {Component} from 'react';\nimport {\n    AppRegistry,\n    StyleSheet,\n    Text,\n    View,\n    SectionList\n} from 'react-native';\n\nconst dataSource = [\n    {data:[{name:'nader'},{name:'chris'}],key:'A'},\n    {data:[{name:'nick'},{name:'amanda'}],key:'B'}\n];\n\nexport default class SectionListExample extends Component {\n    renderItem = (item) => {\n        return <Text style={styles.text}>{item.item.name}</Text>\n    }\n\n    renderHeader = (headerItem) => {\n        return <Text style={styles.header}>{headerItem.section.key}</Text>\n    }\n\n    render(){\n        return(\n            <View style={styles.container}>\n                <SectionList\n                    renderItem={this.renderItem}\n                    renderSectionHeader={this.renderHeader}\n                    sections={dataSource}\n                    keyExtractor={(item)=>item.name}\n                />\n            </View>\n        )\n    }\n}\n```\n\n这里需要注意一点就是`renderItem`所用的数据`key`必须是`data`，而且`key`必须是唯一的，然后其余的数据用在`headerItem`中，这样就非常容易在`sectionHeader`中渲染出多个后台给定的数据。\n\n#### `SectionList`和`FlatList`需要注意几点：\n\n* 文档中提到<span style='color:red'>为了优化内存占用同时保持滑动的流畅，列表内容会在屏幕外异步绘制。这意味着如果用户滑动的速度超过渲染的速度，则会先看到空白的内容。这是为了优化不得不作出的妥协，而我们也在设法持续改进。</span>所以如果不想在滑动过快导致白屏出现，就只能使用`ListView`。\n\n* 在我的项目中设置`stickySectionHeadersEnabled={true}`的时候，粘性标题在往下滑动一会儿再滑动回去的时候，标题会消失，这不知道是我代码有问题还是本身`SectionList`的粘性标题在安卓下就有问题，不过在官方文档中写到`Only enabled by default on iOS because that is the platform standard there.`所以可能是`SectionList`粘性标题在安卓下就有问题。\n\n* `SectionList`和`FlatList`提供了一个叫`legacyImplementation`的属性，该属性如果设置为`true`则使用旧的`ListView`实现。在上述提到的两个问题中，如果将`SectionList`的`legacyImplementation`设置为`true`，则两个问题均解决。个人觉得这是官方提供的一个降级的办法，所以其实我们可以抛弃`ListView`转而使用`FlatList`和`SectionList`，如果有什么问题，让它们用旧的`ListView`实现。\n\n\n## 最后\n\n最后列几个长列表（`ListView`，`SectionList`，`FlatList`）的常用属性\n\n`onEndReached`（function）：当列表到达底部时候触发的事件，关于这个事件需要注意一点，<span style='color:red'>当第一次渲染时，如果数据不足一屏（比如初始值是空的），这个事件也会被触发，需要自行过滤</span>\n\n`onEndReachedThreshold`（number）：距离最后一个列表元素多少像素时候触发`onEndReached`事件\n\n`initialListSize`（number）：初始化时候渲染多少条数据，如果不写择时逐条渲染\n\n`showsVerticalScrollIndicator`（bool）：默认情况下，ListView有滚动条，当设置为false的时候不显示该滚动条（继承自ScrollView）\n\n`pageSize`（number，仅`ListView`有）：每次事件循环（每帧）渲染的行数，常用于分页，数据请求回来后渲染多少条，不设置则逐条渲染。","slug":"RN-list","published":1,"updated":"2017-12-20T11:24:48.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoam0007zrv4bok3ijnv","content":"<p>突然发现自己的博客已经从原来的几天更新一次变成了如今的一个月更新一次[捂脸]，最近这一个月实在是太忙了，上个月月初的时候，接了一个RN的项目，做一个app，那时候老大问谁感兴趣，我直接说我。其实自己对RN一直很有兴趣，但是那时候由于在看Vue，所以并没有去搞，现在刚好有个项目，正好我可以去了解一下RN。说实话，这一答应不要紧，差点儿被RN气死，以前觉得RN应该比较成熟了，经过这段时间做项目，发现RN的坑还是很多的。</p>\n<a id=\"more\"></a>\n<p>在项目中我用到的比较多的是长列表，所以这篇文章主要是记一下对RN的<code>ListView</code>和<code>SectionList</code>的一些总结。我项目中使用的RN是0.44，关于为什么不用性能更好的<code>FlatList</code>而使用老的<code>ListView</code>，是因为自己本身第一次接触RN，所以担心用不好<code>FlatList</code>而且担心会有什么bug，毕竟这个是在0.43版本才添加的。</p>\n<h2 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h2><p>对于<code>ListView</code>最重要的两个属性，一个是数据源（dataSource），再一个就是列表项渲染（renderRow）。<code>ListView</code>可以根据不同的数据结构对应的生成普通长列表和分组长列表。</p>\n<h3 id=\"普通长列表\"><a href=\"#普通长列表\" class=\"headerlink\" title=\"普通长列表\"></a>普通长列表</h3><p>普通长列表使用<code>cloneWithRows(dataBlob, rowIdentities)</code>创建datasource，在项目中<code>dataBlob</code>的数据结构如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;<span class=\"attr\">id</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'Mark'</span>&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>在使用<code>renderRow(rowData, sectionID, rowID, highlightRow)</code>渲染列表项的时候，<code>rowData</code>就是数组中每一个对象。</p>\n<h3 id=\"分组长列表\"><a href=\"#分组长列表\" class=\"headerlink\" title=\"分组长列表\"></a>分组长列表</h3><p>在项目中，遇到分组长列表，由于RN版本为0.44，所以有<code>ListView</code>和<code>SectionList</code>两种选择方案，最终我选择了<code>SectionList</code>，因为我发现<code>ListView</code>的<code>section</code>只能是一个简单的字符串，不能是一个对象（这里说实话我也不知道对不对，若不对，请指正并说明如何使用<code>ListView</code>实现<code>section</code>是一个对象）。</p>\n<p>这里我要吐槽一下RN的文档，真的是有些地方写的太简单，比如在<code>ListView</code>这里写到使用<code>cloneWithRowsAndSections</code>的使用，只是简单的说跟<code>cloneWithRows</code>差不多，而接受的数据结构也就简单的说明有三种：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">sectionID_1</span>: &#123; <span class=\"attr\">rowID_1</span>: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">rowData1</span>&gt;</span>, ... &#125;, ... &#125;</span></span><br><span class=\"line\"><span class=\"xml\">//or</span></span><br><span class=\"line\">&#123; sectionID_1: [ &lt;rowData1&gt;, &lt;rowData2&gt;, ... ], ... &#125;</span><br><span class=\"line\">//or</span><br><span class=\"line\">[ [ &lt;rowData1&gt;, &lt;rowData2&gt;, ... ], ... ]</span><br></pre></td></tr></table></figure>\n<p>但是具体这里的是些什么，我觉得没有说清楚。所以我在项目中试了下用<code>ListView</code>的<code>cloneWithRowsAndSections</code>实现带有粘性标题的列表，发现前两种<code>sectionID</code>只能是一个简单的字符串或者数字，不能是一个对象，数据结构如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dataSource1 = [</span><br><span class=\"line\">    [<span class=\"string\">'row1'</span>,<span class=\"string\">'row2'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'row3'</span>,<span class=\"string\">'row4'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'row5'</span>,<span class=\"string\">'row6'</span>],</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataSoure2 = &#123;</span><br><span class=\"line\">    <span class=\"string\">'id1'</span>:[<span class=\"string\">'row1'</span>,<span class=\"string\">'row2'</span>],</span><br><span class=\"line\">    <span class=\"string\">'id2'</span>:[<span class=\"string\">'row3'</span>,<span class=\"string\">'row4'</span>],</span><br><span class=\"line\">    <span class=\"string\">'id3'</span>:[<span class=\"string\">'row5'</span>,<span class=\"string\">'row6'</span>],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataSoure3 = &#123;</span><br><span class=\"line\">    <span class=\"string\">'id1'</span>:&#123;<span class=\"string\">'row1'</span>,<span class=\"string\">'row2'</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'id2'</span>:&#123;<span class=\"string\">'row3'</span>,<span class=\"string\">'row4'</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'id3'</span>:&#123;<span class=\"string\">'row5'</span>,<span class=\"string\">'row6'</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cloneWithRowsAndSections(dataSource);</span><br></pre></td></tr></table></figure>\n<p>dataSoure1生成的sectionHeader是数组的下标，而第二个第三个分别是对应的<code>key</code>，在项目中我的sectionHeader是一个对象，类似于<code>{headerName:&#39;&#39;,headerContent:&#39;&#39;}</code>，所以无法使用。</p>\n<h2 id=\"SectionList分组长列表\"><a href=\"#SectionList分组长列表\" class=\"headerlink\" title=\"SectionList分组长列表\"></a>SectionList分组长列表</h2><p><code>SectionList</code>和<code>FlatList</code>一样是新增的高性能长列表，在文档中关于<code>SectionList</code>接受的数据结构描述如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SectionList</span><br><span class=\"line\">  renderItem=&#123;(&#123;item&#125;) =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">title</span>=<span class=\"string\">&#123;item.title&#125;</span> /&gt;</span>&#125;</span></span><br><span class=\"line\">  renderSectionHeader=&#123;(&#123;section&#125;) =&gt; &lt;H1 title=&#123;section.title&#125; /&gt;&#125;</span><br><span class=\"line\">  sections=&#123;[ // homogenous rendering between sections</span><br><span class=\"line\">    &#123;data: [...], title: ...&#125;,</span><br><span class=\"line\">    &#123;data: [...], title: ...&#125;,</span><br><span class=\"line\">    &#123;data: [...], title: ...&#125;,</span><br><span class=\"line\">  ]&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;SectionList</span><br><span class=\"line\">  sections=&#123;[ // heterogeneous rendering between sections</span><br><span class=\"line\">    &#123;data: [...], title: ..., renderItem: ...&#125;,</span><br><span class=\"line\">    &#123;data: [...], title: ..., renderItem: ...&#125;,</span><br><span class=\"line\">    &#123;data: [...], title: ..., renderItem: ...&#125;,</span><br><span class=\"line\">  ]&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>说实话我第一次看到这个描述的时候很懵逼，这好像并没说明data里具体的数据结构是什么样子的，<code>renderSectionHeader</code>中的数据又该如何取，在网上看了一个简单的讲解才大概知道<code>sections</code>里的数据应该怎么写，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React , &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    AppRegistry,</span><br><span class=\"line\">    StyleSheet,</span><br><span class=\"line\">    Text,</span><br><span class=\"line\">    View,</span><br><span class=\"line\">    SectionList</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataSource = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">data</span>:[&#123;<span class=\"attr\">name</span>:<span class=\"string\">'nader'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chris'</span>&#125;],<span class=\"attr\">key</span>:<span class=\"string\">'A'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">data</span>:[&#123;<span class=\"attr\">name</span>:<span class=\"string\">'nick'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'amanda'</span>&#125;],<span class=\"attr\">key</span>:<span class=\"string\">'B'</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SectionListExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    renderItem = <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.text&#125;</span>&gt;</span>&#123;item.item.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    renderHeader = <span class=\"function\">(<span class=\"params\">headerItem</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.header&#125;</span>&gt;</span>&#123;headerItem.section.key&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">                &lt;SectionList</span><br><span class=\"line\">                    renderItem=&#123;<span class=\"keyword\">this</span>.renderItem&#125;</span><br><span class=\"line\">                    renderSectionHeader=&#123;<span class=\"keyword\">this</span>.renderHeader&#125;</span><br><span class=\"line\">                    sections=&#123;dataSource&#125;</span><br><span class=\"line\">                    keyExtractor=&#123;(item)=&gt;item.name&#125;</span><br><span class=\"line\">                /&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这里需要注意一点就是<code>renderItem</code>所用的数据<code>key</code>必须是<code>data</code>，而且<code>key</code>必须是唯一的，然后其余的数据用在<code>headerItem</code>中，这样就非常容易在<code>sectionHeader</code>中渲染出多个后台给定的数据。</p>\n<h4 id=\"SectionList和FlatList需要注意几点：\"><a href=\"#SectionList和FlatList需要注意几点：\" class=\"headerlink\" title=\"SectionList和FlatList需要注意几点：\"></a><code>SectionList</code>和<code>FlatList</code>需要注意几点：</h4><ul>\n<li><p>文档中提到<span style=\"color:red\">为了优化内存占用同时保持滑动的流畅，列表内容会在屏幕外异步绘制。这意味着如果用户滑动的速度超过渲染的速度，则会先看到空白的内容。这是为了优化不得不作出的妥协，而我们也在设法持续改进。</span>所以如果不想在滑动过快导致白屏出现，就只能使用<code>ListView</code>。</p>\n</li>\n<li><p>在我的项目中设置<code>stickySectionHeadersEnabled={true}</code>的时候，粘性标题在往下滑动一会儿再滑动回去的时候，标题会消失，这不知道是我代码有问题还是本身<code>SectionList</code>的粘性标题在安卓下就有问题，不过在官方文档中写到<code>Only enabled by default on iOS because that is the platform standard there.</code>所以可能是<code>SectionList</code>粘性标题在安卓下就有问题。</p>\n</li>\n<li><p><code>SectionList</code>和<code>FlatList</code>提供了一个叫<code>legacyImplementation</code>的属性，该属性如果设置为<code>true</code>则使用旧的<code>ListView</code>实现。在上述提到的两个问题中，如果将<code>SectionList</code>的<code>legacyImplementation</code>设置为<code>true</code>，则两个问题均解决。个人觉得这是官方提供的一个降级的办法，所以其实我们可以抛弃<code>ListView</code>转而使用<code>FlatList</code>和<code>SectionList</code>，如果有什么问题，让它们用旧的<code>ListView</code>实现。</p>\n</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>最后列几个长列表（<code>ListView</code>，<code>SectionList</code>，<code>FlatList</code>）的常用属性</p>\n<p><code>onEndReached</code>（function）：当列表到达底部时候触发的事件，关于这个事件需要注意一点，<span style=\"color:red\">当第一次渲染时，如果数据不足一屏（比如初始值是空的），这个事件也会被触发，需要自行过滤</span></p>\n<p><code>onEndReachedThreshold</code>（number）：距离最后一个列表元素多少像素时候触发<code>onEndReached</code>事件</p>\n<p><code>initialListSize</code>（number）：初始化时候渲染多少条数据，如果不写择时逐条渲染</p>\n<p><code>showsVerticalScrollIndicator</code>（bool）：默认情况下，ListView有滚动条，当设置为false的时候不显示该滚动条（继承自ScrollView）</p>\n<p><code>pageSize</code>（number，仅<code>ListView</code>有）：每次事件循环（每帧）渲染的行数，常用于分页，数据请求回来后渲染多少条，不设置则逐条渲染。</p>\n","site":{"data":{}},"excerpt":"<p>突然发现自己的博客已经从原来的几天更新一次变成了如今的一个月更新一次[捂脸]，最近这一个月实在是太忙了，上个月月初的时候，接了一个RN的项目，做一个app，那时候老大问谁感兴趣，我直接说我。其实自己对RN一直很有兴趣，但是那时候由于在看Vue，所以并没有去搞，现在刚好有个项目，正好我可以去了解一下RN。说实话，这一答应不要紧，差点儿被RN气死，以前觉得RN应该比较成熟了，经过这段时间做项目，发现RN的坑还是很多的。</p>","more":"<p>在项目中我用到的比较多的是长列表，所以这篇文章主要是记一下对RN的<code>ListView</code>和<code>SectionList</code>的一些总结。我项目中使用的RN是0.44，关于为什么不用性能更好的<code>FlatList</code>而使用老的<code>ListView</code>，是因为自己本身第一次接触RN，所以担心用不好<code>FlatList</code>而且担心会有什么bug，毕竟这个是在0.43版本才添加的。</p>\n<h2 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h2><p>对于<code>ListView</code>最重要的两个属性，一个是数据源（dataSource），再一个就是列表项渲染（renderRow）。<code>ListView</code>可以根据不同的数据结构对应的生成普通长列表和分组长列表。</p>\n<h3 id=\"普通长列表\"><a href=\"#普通长列表\" class=\"headerlink\" title=\"普通长列表\"></a>普通长列表</h3><p>普通长列表使用<code>cloneWithRows(dataBlob, rowIdentities)</code>创建datasource，在项目中<code>dataBlob</code>的数据结构如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;<span class=\"attr\">id</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'Mark'</span>&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>在使用<code>renderRow(rowData, sectionID, rowID, highlightRow)</code>渲染列表项的时候，<code>rowData</code>就是数组中每一个对象。</p>\n<h3 id=\"分组长列表\"><a href=\"#分组长列表\" class=\"headerlink\" title=\"分组长列表\"></a>分组长列表</h3><p>在项目中，遇到分组长列表，由于RN版本为0.44，所以有<code>ListView</code>和<code>SectionList</code>两种选择方案，最终我选择了<code>SectionList</code>，因为我发现<code>ListView</code>的<code>section</code>只能是一个简单的字符串，不能是一个对象（这里说实话我也不知道对不对，若不对，请指正并说明如何使用<code>ListView</code>实现<code>section</code>是一个对象）。</p>\n<p>这里我要吐槽一下RN的文档，真的是有些地方写的太简单，比如在<code>ListView</code>这里写到使用<code>cloneWithRowsAndSections</code>的使用，只是简单的说跟<code>cloneWithRows</code>差不多，而接受的数据结构也就简单的说明有三种：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">sectionID_1</span>: &#123; <span class=\"attr\">rowID_1</span>: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">rowData1</span>&gt;</span>, ... &#125;, ... &#125;</span></span><br><span class=\"line\"><span class=\"xml\">//or</span></span><br><span class=\"line\">&#123; sectionID_1: [ &lt;rowData1&gt;, &lt;rowData2&gt;, ... ], ... &#125;</span><br><span class=\"line\">//or</span><br><span class=\"line\">[ [ &lt;rowData1&gt;, &lt;rowData2&gt;, ... ], ... ]</span><br></pre></td></tr></table></figure>\n<p>但是具体这里的是些什么，我觉得没有说清楚。所以我在项目中试了下用<code>ListView</code>的<code>cloneWithRowsAndSections</code>实现带有粘性标题的列表，发现前两种<code>sectionID</code>只能是一个简单的字符串或者数字，不能是一个对象，数据结构如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dataSource1 = [</span><br><span class=\"line\">    [<span class=\"string\">'row1'</span>,<span class=\"string\">'row2'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'row3'</span>,<span class=\"string\">'row4'</span>],</span><br><span class=\"line\">    [<span class=\"string\">'row5'</span>,<span class=\"string\">'row6'</span>],</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataSoure2 = &#123;</span><br><span class=\"line\">    <span class=\"string\">'id1'</span>:[<span class=\"string\">'row1'</span>,<span class=\"string\">'row2'</span>],</span><br><span class=\"line\">    <span class=\"string\">'id2'</span>:[<span class=\"string\">'row3'</span>,<span class=\"string\">'row4'</span>],</span><br><span class=\"line\">    <span class=\"string\">'id3'</span>:[<span class=\"string\">'row5'</span>,<span class=\"string\">'row6'</span>],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataSoure3 = &#123;</span><br><span class=\"line\">    <span class=\"string\">'id1'</span>:&#123;<span class=\"string\">'row1'</span>,<span class=\"string\">'row2'</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'id2'</span>:&#123;<span class=\"string\">'row3'</span>,<span class=\"string\">'row4'</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'id3'</span>:&#123;<span class=\"string\">'row5'</span>,<span class=\"string\">'row6'</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cloneWithRowsAndSections(dataSource);</span><br></pre></td></tr></table></figure>\n<p>dataSoure1生成的sectionHeader是数组的下标，而第二个第三个分别是对应的<code>key</code>，在项目中我的sectionHeader是一个对象，类似于<code>{headerName:&#39;&#39;,headerContent:&#39;&#39;}</code>，所以无法使用。</p>\n<h2 id=\"SectionList分组长列表\"><a href=\"#SectionList分组长列表\" class=\"headerlink\" title=\"SectionList分组长列表\"></a>SectionList分组长列表</h2><p><code>SectionList</code>和<code>FlatList</code>一样是新增的高性能长列表，在文档中关于<code>SectionList</code>接受的数据结构描述如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;SectionList</span><br><span class=\"line\">  renderItem=&#123;(&#123;item&#125;) =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ListItem</span> <span class=\"attr\">title</span>=<span class=\"string\">&#123;item.title&#125;</span> /&gt;</span>&#125;</span></span><br><span class=\"line\">  renderSectionHeader=&#123;(&#123;section&#125;) =&gt; &lt;H1 title=&#123;section.title&#125; /&gt;&#125;</span><br><span class=\"line\">  sections=&#123;[ // homogenous rendering between sections</span><br><span class=\"line\">    &#123;data: [...], title: ...&#125;,</span><br><span class=\"line\">    &#123;data: [...], title: ...&#125;,</span><br><span class=\"line\">    &#123;data: [...], title: ...&#125;,</span><br><span class=\"line\">  ]&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;SectionList</span><br><span class=\"line\">  sections=&#123;[ // heterogeneous rendering between sections</span><br><span class=\"line\">    &#123;data: [...], title: ..., renderItem: ...&#125;,</span><br><span class=\"line\">    &#123;data: [...], title: ..., renderItem: ...&#125;,</span><br><span class=\"line\">    &#123;data: [...], title: ..., renderItem: ...&#125;,</span><br><span class=\"line\">  ]&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>说实话我第一次看到这个描述的时候很懵逼，这好像并没说明data里具体的数据结构是什么样子的，<code>renderSectionHeader</code>中的数据又该如何取，在网上看了一个简单的讲解才大概知道<code>sections</code>里的数据应该怎么写，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React , &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    AppRegistry,</span><br><span class=\"line\">    StyleSheet,</span><br><span class=\"line\">    Text,</span><br><span class=\"line\">    View,</span><br><span class=\"line\">    SectionList</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataSource = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">data</span>:[&#123;<span class=\"attr\">name</span>:<span class=\"string\">'nader'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'chris'</span>&#125;],<span class=\"attr\">key</span>:<span class=\"string\">'A'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">data</span>:[&#123;<span class=\"attr\">name</span>:<span class=\"string\">'nick'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'amanda'</span>&#125;],<span class=\"attr\">key</span>:<span class=\"string\">'B'</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SectionListExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    renderItem = <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.text&#125;</span>&gt;</span>&#123;item.item.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    renderHeader = <span class=\"function\">(<span class=\"params\">headerItem</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.header&#125;</span>&gt;</span>&#123;headerItem.section.key&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">                &lt;SectionList</span><br><span class=\"line\">                    renderItem=&#123;<span class=\"keyword\">this</span>.renderItem&#125;</span><br><span class=\"line\">                    renderSectionHeader=&#123;<span class=\"keyword\">this</span>.renderHeader&#125;</span><br><span class=\"line\">                    sections=&#123;dataSource&#125;</span><br><span class=\"line\">                    keyExtractor=&#123;(item)=&gt;item.name&#125;</span><br><span class=\"line\">                /&gt;</span><br><span class=\"line\">            &lt;<span class=\"regexp\">/View&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        )</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这里需要注意一点就是<code>renderItem</code>所用的数据<code>key</code>必须是<code>data</code>，而且<code>key</code>必须是唯一的，然后其余的数据用在<code>headerItem</code>中，这样就非常容易在<code>sectionHeader</code>中渲染出多个后台给定的数据。</p>\n<h4 id=\"SectionList和FlatList需要注意几点：\"><a href=\"#SectionList和FlatList需要注意几点：\" class=\"headerlink\" title=\"SectionList和FlatList需要注意几点：\"></a><code>SectionList</code>和<code>FlatList</code>需要注意几点：</h4><ul>\n<li><p>文档中提到<span style=\"color:red\">为了优化内存占用同时保持滑动的流畅，列表内容会在屏幕外异步绘制。这意味着如果用户滑动的速度超过渲染的速度，则会先看到空白的内容。这是为了优化不得不作出的妥协，而我们也在设法持续改进。</span>所以如果不想在滑动过快导致白屏出现，就只能使用<code>ListView</code>。</p>\n</li>\n<li><p>在我的项目中设置<code>stickySectionHeadersEnabled={true}</code>的时候，粘性标题在往下滑动一会儿再滑动回去的时候，标题会消失，这不知道是我代码有问题还是本身<code>SectionList</code>的粘性标题在安卓下就有问题，不过在官方文档中写到<code>Only enabled by default on iOS because that is the platform standard there.</code>所以可能是<code>SectionList</code>粘性标题在安卓下就有问题。</p>\n</li>\n<li><p><code>SectionList</code>和<code>FlatList</code>提供了一个叫<code>legacyImplementation</code>的属性，该属性如果设置为<code>true</code>则使用旧的<code>ListView</code>实现。在上述提到的两个问题中，如果将<code>SectionList</code>的<code>legacyImplementation</code>设置为<code>true</code>，则两个问题均解决。个人觉得这是官方提供的一个降级的办法，所以其实我们可以抛弃<code>ListView</code>转而使用<code>FlatList</code>和<code>SectionList</code>，如果有什么问题，让它们用旧的<code>ListView</code>实现。</p>\n</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>最后列几个长列表（<code>ListView</code>，<code>SectionList</code>，<code>FlatList</code>）的常用属性</p>\n<p><code>onEndReached</code>（function）：当列表到达底部时候触发的事件，关于这个事件需要注意一点，<span style=\"color:red\">当第一次渲染时，如果数据不足一屏（比如初始值是空的），这个事件也会被触发，需要自行过滤</span></p>\n<p><code>onEndReachedThreshold</code>（number）：距离最后一个列表元素多少像素时候触发<code>onEndReached</code>事件</p>\n<p><code>initialListSize</code>（number）：初始化时候渲染多少条数据，如果不写择时逐条渲染</p>\n<p><code>showsVerticalScrollIndicator</code>（bool）：默认情况下，ListView有滚动条，当设置为false的时候不显示该滚动条（继承自ScrollView）</p>\n<p><code>pageSize</code>（number，仅<code>ListView</code>有）：每次事件循环（每帧）渲染的行数，常用于分页，数据请求回来后渲染多少条，不设置则逐条渲染。</p>"},{"title":"H5焦点管理---tabindex与document.activeElement","date":"2016-03-26T02:20:56.000Z","comments":1,"_content":"&emsp;&emsp;周四下午测试人员提出BUG，说我写的那个类支付宝密码框在按下Tab键时候无法像原生的form表单中的input那样被激活，当时的第一反应是，我的密码框原本就是用div模拟的，怎么可能想form表单一样在Tab键时候激活呢。但是当我打开支付宝官网，按下tab键后，密码框可以被激活，这激起了我的好奇心，也就有了后来对tabindex和document.activeElement的发现。废话不多说，进入正题。\n### HTML tabindex属\n#### tabindex的设置\n&emsp;&emsp;当Tab键用于导航时，tabindex属性规定元素的tab键控制次序，其中tabindex的值为阿拉伯数字，默认情况下越靠前的元素该值越小，所以我们可以通过人为改变tabindex的值来改变按下Tab键后可以被激活元素的激活顺序，只需要做如下设置：\n```HTML\n<input type=\"text\" tabindex=\"1\">\n<input type=\"text\" tabindex=\"2\">\n<input type=\"text\" tabindex=\"4\">\n<input type=\"text\" tabindex=\"3\">\n```\n<!--more-->\n&emsp;&emsp;以上代码在浏览器中按下Tab键激活顺序就是它们在HTML代码中的顺序，但是我在这里设置第三个input的tabindex比第四个的大，所以按下Tab键后，第四个input框的激活在第三个之前。\n#### <font color=red>注意</font>\n&emsp;&emsp;1.前面说过tabindex的值越小，越被早激活，但是tabIndex的值要0~32767之间。\n&emsp;&emsp;2.如果把tabindex值设置为负值（比如设置为tabindex=-1），则按下Tab键不会激活该元素，但是该元素的focus和blur事件仍然启动。\n&emsp;&emsp;3.如果把tabindex设置为0，则带0值tabIndex的元素根据源代码（或默认页面行为）进行排序。\n&emsp;&emsp;4.如果页面中出现多个tabindex值相同的元素，则浏览器会把这些元素的tabindex值看做0。\n#### 为div与span设置tabindex\n&emsp;&emsp;默认情况下按下Tab键可以被选中或者激活的有a,area,button,input,object,select,textarea，但是在现代浏览器和IE9+中给div和span设置tabindex属性也可以被选中，在chrome中，被选中的元素会出现淡蓝色的边框。\n### H5焦点管理document.activeElement\n&emsp;&emsp;H5添加了辅助管理DOM焦点的document.activeElemnt属性，这个属性始终会引用DOM中当前获得了焦点的元素。元素获取焦点的方式有页面加载，用户输入（通常是通过按Tab键）和代码中调用focus()方法。\n&emsp;&emsp;默认情况下，文档刚刚加载完，document.activeElement中保存的是document.body元素的引用。文档加载期间，document.activeElement的值为null。另外顺带提一句，判断是否获得焦点可以使用hasFocus()。\n&emsp;&emsp;利用该属性，就可以知道当前哪个元素被Tab键激活，进而就可以获取到被激活元素的各类属性，比如可以在按下Tab键时候去输出当前被激活元素的class属性。代码如下：\n```javascript\n$(function(){\n    var $input=$('input');\n    $input.on('keydown',function(e){\n        var event=e||window.event;\n        if(event.keyCode==9){\n            console.log(document.activeElement.attr('class'));\n        }\n    });\n});\n```\n### 总结\n&emsp;&emsp;基于以上两点，通过判断当前被激活的元素的class，就实现了让模拟的密码输入框有和原生的input一样在按下Tab键被激活。\n","source":"_posts/activeElement.md","raw":"---\ntitle: H5焦点管理---tabindex与document.activeElement\ndate: 2016-03-26 10:20:56\ntags: HTML5\ncomments: true\ncategories: \"HTML\"\n---\n&emsp;&emsp;周四下午测试人员提出BUG，说我写的那个类支付宝密码框在按下Tab键时候无法像原生的form表单中的input那样被激活，当时的第一反应是，我的密码框原本就是用div模拟的，怎么可能想form表单一样在Tab键时候激活呢。但是当我打开支付宝官网，按下tab键后，密码框可以被激活，这激起了我的好奇心，也就有了后来对tabindex和document.activeElement的发现。废话不多说，进入正题。\n### HTML tabindex属\n#### tabindex的设置\n&emsp;&emsp;当Tab键用于导航时，tabindex属性规定元素的tab键控制次序，其中tabindex的值为阿拉伯数字，默认情况下越靠前的元素该值越小，所以我们可以通过人为改变tabindex的值来改变按下Tab键后可以被激活元素的激活顺序，只需要做如下设置：\n```HTML\n<input type=\"text\" tabindex=\"1\">\n<input type=\"text\" tabindex=\"2\">\n<input type=\"text\" tabindex=\"4\">\n<input type=\"text\" tabindex=\"3\">\n```\n<!--more-->\n&emsp;&emsp;以上代码在浏览器中按下Tab键激活顺序就是它们在HTML代码中的顺序，但是我在这里设置第三个input的tabindex比第四个的大，所以按下Tab键后，第四个input框的激活在第三个之前。\n#### <font color=red>注意</font>\n&emsp;&emsp;1.前面说过tabindex的值越小，越被早激活，但是tabIndex的值要0~32767之间。\n&emsp;&emsp;2.如果把tabindex值设置为负值（比如设置为tabindex=-1），则按下Tab键不会激活该元素，但是该元素的focus和blur事件仍然启动。\n&emsp;&emsp;3.如果把tabindex设置为0，则带0值tabIndex的元素根据源代码（或默认页面行为）进行排序。\n&emsp;&emsp;4.如果页面中出现多个tabindex值相同的元素，则浏览器会把这些元素的tabindex值看做0。\n#### 为div与span设置tabindex\n&emsp;&emsp;默认情况下按下Tab键可以被选中或者激活的有a,area,button,input,object,select,textarea，但是在现代浏览器和IE9+中给div和span设置tabindex属性也可以被选中，在chrome中，被选中的元素会出现淡蓝色的边框。\n### H5焦点管理document.activeElement\n&emsp;&emsp;H5添加了辅助管理DOM焦点的document.activeElemnt属性，这个属性始终会引用DOM中当前获得了焦点的元素。元素获取焦点的方式有页面加载，用户输入（通常是通过按Tab键）和代码中调用focus()方法。\n&emsp;&emsp;默认情况下，文档刚刚加载完，document.activeElement中保存的是document.body元素的引用。文档加载期间，document.activeElement的值为null。另外顺带提一句，判断是否获得焦点可以使用hasFocus()。\n&emsp;&emsp;利用该属性，就可以知道当前哪个元素被Tab键激活，进而就可以获取到被激活元素的各类属性，比如可以在按下Tab键时候去输出当前被激活元素的class属性。代码如下：\n```javascript\n$(function(){\n    var $input=$('input');\n    $input.on('keydown',function(e){\n        var event=e||window.event;\n        if(event.keyCode==9){\n            console.log(document.activeElement.attr('class'));\n        }\n    });\n});\n```\n### 总结\n&emsp;&emsp;基于以上两点，通过判断当前被激活的元素的class，就实现了让模拟的密码输入框有和原生的input一样在按下Tab键被激活。\n","slug":"activeElement","published":1,"updated":"2016-08-02T08:38:40.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoan0008zrv4te37exsp","content":"<p>&emsp;&emsp;周四下午测试人员提出BUG，说我写的那个类支付宝密码框在按下Tab键时候无法像原生的form表单中的input那样被激活，当时的第一反应是，我的密码框原本就是用div模拟的，怎么可能想form表单一样在Tab键时候激活呢。但是当我打开支付宝官网，按下tab键后，密码框可以被激活，这激起了我的好奇心，也就有了后来对tabindex和document.activeElement的发现。废话不多说，进入正题。</p>\n<h3 id=\"HTML-tabindex属\"><a href=\"#HTML-tabindex属\" class=\"headerlink\" title=\"HTML tabindex属\"></a>HTML tabindex属</h3><h4 id=\"tabindex的设置\"><a href=\"#tabindex的设置\" class=\"headerlink\" title=\"tabindex的设置\"></a>tabindex的设置</h4><p>&emsp;&emsp;当Tab键用于导航时，tabindex属性规定元素的tab键控制次序，其中tabindex的值为阿拉伯数字，默认情况下越靠前的元素该值越小，所以我们可以通过人为改变tabindex的值来改变按下Tab键后可以被激活元素的激活顺序，只需要做如下设置：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"4\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"3\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;以上代码在浏览器中按下Tab键激活顺序就是它们在HTML代码中的顺序，但是我在这里设置第三个input的tabindex比第四个的大，所以按下Tab键后，第四个input框的激活在第三个之前。</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a><font color=\"red\">注意</font></h4><p>&emsp;&emsp;1.前面说过tabindex的值越小，越被早激活，但是tabIndex的值要0~32767之间。<br>&emsp;&emsp;2.如果把tabindex值设置为负值（比如设置为tabindex=-1），则按下Tab键不会激活该元素，但是该元素的focus和blur事件仍然启动。<br>&emsp;&emsp;3.如果把tabindex设置为0，则带0值tabIndex的元素根据源代码（或默认页面行为）进行排序。<br>&emsp;&emsp;4.如果页面中出现多个tabindex值相同的元素，则浏览器会把这些元素的tabindex值看做0。</p>\n<h4 id=\"为div与span设置tabindex\"><a href=\"#为div与span设置tabindex\" class=\"headerlink\" title=\"为div与span设置tabindex\"></a>为div与span设置tabindex</h4><p>&emsp;&emsp;默认情况下按下Tab键可以被选中或者激活的有a,area,button,input,object,select,textarea，但是在现代浏览器和IE9+中给div和span设置tabindex属性也可以被选中，在chrome中，被选中的元素会出现淡蓝色的边框。</p>\n<h3 id=\"H5焦点管理document-activeElement\"><a href=\"#H5焦点管理document-activeElement\" class=\"headerlink\" title=\"H5焦点管理document.activeElement\"></a>H5焦点管理document.activeElement</h3><p>&emsp;&emsp;H5添加了辅助管理DOM焦点的document.activeElemnt属性，这个属性始终会引用DOM中当前获得了焦点的元素。元素获取焦点的方式有页面加载，用户输入（通常是通过按Tab键）和代码中调用focus()方法。<br>&emsp;&emsp;默认情况下，文档刚刚加载完，document.activeElement中保存的是document.body元素的引用。文档加载期间，document.activeElement的值为null。另外顺带提一句，判断是否获得焦点可以使用hasFocus()。<br>&emsp;&emsp;利用该属性，就可以知道当前哪个元素被Tab键激活，进而就可以获取到被激活元素的各类属性，比如可以在按下Tab键时候去输出当前被激活元素的class属性。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $input=$(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">    $input.on(<span class=\"string\">'keydown'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> event=e||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(event.keyCode==<span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.activeElement.attr(<span class=\"string\">'class'</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>&emsp;&emsp;基于以上两点，通过判断当前被激活的元素的class，就实现了让模拟的密码输入框有和原生的input一样在按下Tab键被激活。</p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;周四下午测试人员提出BUG，说我写的那个类支付宝密码框在按下Tab键时候无法像原生的form表单中的input那样被激活，当时的第一反应是，我的密码框原本就是用div模拟的，怎么可能想form表单一样在Tab键时候激活呢。但是当我打开支付宝官网，按下tab键后，密码框可以被激活，这激起了我的好奇心，也就有了后来对tabindex和document.activeElement的发现。废话不多说，进入正题。</p>\n<h3 id=\"HTML-tabindex属\"><a href=\"#HTML-tabindex属\" class=\"headerlink\" title=\"HTML tabindex属\"></a>HTML tabindex属</h3><h4 id=\"tabindex的设置\"><a href=\"#tabindex的设置\" class=\"headerlink\" title=\"tabindex的设置\"></a>tabindex的设置</h4><p>&emsp;&emsp;当Tab键用于导航时，tabindex属性规定元素的tab键控制次序，其中tabindex的值为阿拉伯数字，默认情况下越靠前的元素该值越小，所以我们可以通过人为改变tabindex的值来改变按下Tab键后可以被激活元素的激活顺序，只需要做如下设置：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"4\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"3\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>","more":"<p>&emsp;&emsp;以上代码在浏览器中按下Tab键激活顺序就是它们在HTML代码中的顺序，但是我在这里设置第三个input的tabindex比第四个的大，所以按下Tab键后，第四个input框的激活在第三个之前。</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a><font color=\"red\">注意</font></h4><p>&emsp;&emsp;1.前面说过tabindex的值越小，越被早激活，但是tabIndex的值要0~32767之间。<br>&emsp;&emsp;2.如果把tabindex值设置为负值（比如设置为tabindex=-1），则按下Tab键不会激活该元素，但是该元素的focus和blur事件仍然启动。<br>&emsp;&emsp;3.如果把tabindex设置为0，则带0值tabIndex的元素根据源代码（或默认页面行为）进行排序。<br>&emsp;&emsp;4.如果页面中出现多个tabindex值相同的元素，则浏览器会把这些元素的tabindex值看做0。</p>\n<h4 id=\"为div与span设置tabindex\"><a href=\"#为div与span设置tabindex\" class=\"headerlink\" title=\"为div与span设置tabindex\"></a>为div与span设置tabindex</h4><p>&emsp;&emsp;默认情况下按下Tab键可以被选中或者激活的有a,area,button,input,object,select,textarea，但是在现代浏览器和IE9+中给div和span设置tabindex属性也可以被选中，在chrome中，被选中的元素会出现淡蓝色的边框。</p>\n<h3 id=\"H5焦点管理document-activeElement\"><a href=\"#H5焦点管理document-activeElement\" class=\"headerlink\" title=\"H5焦点管理document.activeElement\"></a>H5焦点管理document.activeElement</h3><p>&emsp;&emsp;H5添加了辅助管理DOM焦点的document.activeElemnt属性，这个属性始终会引用DOM中当前获得了焦点的元素。元素获取焦点的方式有页面加载，用户输入（通常是通过按Tab键）和代码中调用focus()方法。<br>&emsp;&emsp;默认情况下，文档刚刚加载完，document.activeElement中保存的是document.body元素的引用。文档加载期间，document.activeElement的值为null。另外顺带提一句，判断是否获得焦点可以使用hasFocus()。<br>&emsp;&emsp;利用该属性，就可以知道当前哪个元素被Tab键激活，进而就可以获取到被激活元素的各类属性，比如可以在按下Tab键时候去输出当前被激活元素的class属性。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $input=$(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">    $input.on(<span class=\"string\">'keydown'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> event=e||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(event.keyCode==<span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.activeElement.attr(<span class=\"string\">'class'</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>&emsp;&emsp;基于以上两点，通过判断当前被激活的元素的class，就实现了让模拟的密码输入框有和原生的input一样在按下Tab键被激活。</p>"},{"title":"文件上传（一）---H5 file API，canvas","date":"2016-03-31T15:35:12.000Z","comments":1,"_content":"&emsp;&emsp;最近公司让调研关于webUploader的图片上传中能否压缩，能否实现图片的格式转换，如果能如何实现，经过调研，这个插件可以实现文件的压缩，但是不能实现图片的格式转换，同时在调研过程中，知道了很多新的东西，H5 file API，canvas，等等，所以有了自己写一个文件上传来熟悉这些东西，所以有了本篇文章。\n## 一.做好HTML，CSS样式\n这里很简单，就是写一个HTML+CSS的文件，让我们的上传看起来像那么回事儿，这里不细说，代码如下：\n### html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>fileUploader</title>\n    <link rel=\"stylesheet\" href=\"./index.css\">\n</head>\n<body>\n    <div class=\"upbox\">\n        <h1>测试</h1>\n        <input id=\"uploader\" type=\"file\" multiple=\"multiple\" name=\"file\" accept=\"image/*\">\n    </div>    \n    <a id=\"test\" href=\"\">点击选择上传图片</a>\n    <button type=\"button\" id=\"button\">上传</button>\n    <script src=\"./index.js\"></script>\n</body>\n</html>\n```\n### index.css\n```css\n.upbox{width: 100%;height: 500px;border: 3px dashed #000;position: relative;}\n#uploader{display: block;width: 100%;height: 100%;opacity: 0;position: absolute;left: 0;top: 0;cursor: pointer;}\nh1{position: absolute;left: 45%;top: 40%;}\nbutton{width: 100px;height: 50px;float: right;}\n.img-content{width: 120px;height: 120px;border: 1px solid #000;margin: 20px;float: left;position: relative; z-index: 5;}\n.img-box{width: 100%;height: 100%;}\n.img-box img{display: block; width: 100%;height: 100%;}\n```\n<!--more-->\n## 二.用户多选文件并读取用户选择的文件\n### 1.让input实现多文件选择\n用户在点击input区域后，可以选择文件，H5支持多文件选择，只需要像下面这样写就可以：\n```html\n<input id=\"uploader\" type=\"file\" multiple=\"multiple\" name=\"file\" accept=\"image/*\">\n```\n在上面代码中，设置multiple可以让input实现文件多选，accept则是允许用户选择什么文件，这里我们要写图片上传，所以接受所有的图片的类型，也为后文的转换上传图片的文件格式奠定基础。\n### 2.利用FileReader对象读取源文件\nH5的File接口提供了文件的信息以及文件内容的存取的方法。File对象是用户在input元素上选择文件后返回的FileList对象，所以，通过File对象可以获得用户选择的文件。代码如下：\n```javascript\nvar uploader=document.querySelectorAll('#uploader')[0];\nuploader.addEventListener('change',function (event) {\n    var e=event||window.event;\n    var target=e.target;\n    var files=target.files;\n});\n```\n这里可以获得用户选择的文件，但是因为我们要利用用户选择的源文件生成缩略图，所以需要需要读取的是用户在计算机上存储的源文件，H5提供了FileReader对象，该对象允许web应用程序异步读取存储在用户计算机上的文件（或者元素数据缓冲）内容。\n#### FileReader对象提供了readAsDataURL()方法：\n#### readAsDataURL()\n开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,readyState属性的值会成为DONE,如果设置了onloadend事件处理程序,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容.参数file为将要读取的Blob对象或者File对象.\n所以拿到用户选择的源文件的代码如下：\n```javascript\nvar filesLen;\nvar uploader=document.querySelectorAll('#uploader')[0];\nuploader.addEventListener('change',function (event) {\n    var e=event||window.event;\n    var target=e.target;\n    var files=target.files;\n    filesLen=files.length;\n    for(let i=0;i<filesLen;i++){\n        var reader=new FileReader();\n        //文件读取结束后要做的事\n        reader.onload=function (event) {\n            //读取用户选择的文件\n            var fileURL=event.target.result;\n        }\n        reader.readAsDataURL(files[i]);\n    }\n});\n\n```\n因为是读取多个文件，所以需要使用for循环去读取每一个文件（这意味着FileReader一次只读取一个文件，异步读取），这样就拿到了用户选择的图片的源文件，该源文件被读取为base64编码，这位下一步，生成缩略图做了基础。\n## 三.利用canvas生成缩略图\nH5的canvas提供了drawImage和toDataURL两个方法\n### 1.drawImage()\ndrawImage()方法在画布上绘制图像，画布或视频，同时也能绘制图像的某个部分或者增加减少图像的尺寸。在javascript中有三种语法，分别如下：\n#### 在画布上定位图像\n```javascript\ncontext.drawImage(img,x,y);\n```\n#### 在画布上定位图像并规定图像的宽度和高度\n```javascript\ncontext.drawImage(img,x,y,width,height);\n```\n正是这一点儿让利用canvas压缩图片成为可能（本身生成缩略图也是在更改图片大小）\n#### 剪切图像并在画布上定位被剪切部分\n```javascript\ncontext.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);\n```\n以上参数值对应如下：\n![mahua](/img/canshu.PNG)\n### 2.toDataURL()\ntoDataURL()方法回传含有图像和参数设置特定格式的dataURLs，回传的图像解析度为96dpi。同样通过toDataURL()可以方便的将图片转换为base64编码，但是这里需要注意两点：\n- 如果canvas的高度或者宽度为0，则回传的字符串为\"data:,\"。\n- 如果要求图像类型并非image/png，但是回传的类型却是data:image/png，表示要求的图像类型并不支持。\n表达式如下：\n```javascript\ncanvas.toDataURL(type,encoderOptions);\n```\ntype：图片的格式，预设为image/png\nencoderOptions：生成的图片的品质，为0~1之间的数字，如果只不在该范围内，则使用默认值，其他会忽略\n### 生成缩略图代码实现\n基于以上两个canvas方法，可以写出生成缩略图的方法，代码如下：\n```javascript\n//创建缩略图样式\nfunction createThumbnailFromUrl(context,fileURL) {\n     //创建元素\n     var img=document.createElement('img'),\n         imgBox=document.createElement('div'),\n         imgContent=document.createElement('div');\n     //添加Class    \n     imgBox.classList.add('img-box');\n     imgContent.classList.add('img-content');\n     //动态插入创建的元素 \n     context.appendChild(imgContent);\n     imgContent.appendChild(imgBox);\n     imgBox.appendChild(img);\n     \n     //创建canvas重绘缩略图    \n     var canvas=document.createElement('canvas');\n     var context=canvas.getContext('2d'); \n     // 创建image图片对象\n     var image=new Image();\n     image.src=fileURL;\n     image.onload=function () {\n        canvas.width=120;\n        canvas.height=120*(image.height/image.width);\n        context.drawImage(image,0,0,canvas.width,canvas.height);\n        img.src=canvas.toDataURL('image/png',0.5);  \n     }  \n}\n```\n这里，为了拿到图片对象，也就是拿到要转换的图片，我们新建一个图片对象，<font color=\"red\">然后将图片对象的src赋值为FileReader拿到的FileURL，这样就拿到了用户选择上传的图片，这就将用户选择的文件与canvas联系起来</font>，接下来就进行处理，等图片读取完成后，进行cnavas操作，最后把生成的base64图片编码直接赋值给动态创建的缩略图img，这样就实现了用户在选择完要上传的图片后生成缩略图。\n## 四.将要上传的图片利用canvas进行压缩，改变格式---遇到js中的异步执行\ncanvas压缩，更改图片格式的实现就是上面生成缩略图的方法，但是我在写这里的时候遇到了一个问题，就是javascript中异步执行机制。\n我在javascript中写了一个函数，代码如下：\n```javascript\nfunction changeImg(fileURL) {\n     //创建canvas重绘缩略图    \n     var canvas=document.createElement('canvas');\n     var context=canvas.getContext('2d'); \n     // 创建image对象\n     var image=new Image();\n     //这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高\n     image.src=fileURL;\n     image.onload=function () {\n        canvas.width=image.width;\n        canvas.height=image.height;\n        context.drawImage(image,0,0,canvas.width,canvas.height);\n        newFile=canvas.toDataURL('image/png',0.5);\n        //这里的return就是问题的所在\n        return newFile\n     }\n}\n```\n本来我的想法是通过写一个changeImg函数，在文件读取完成后，进行图片压缩，然后再将转换后的图片利用return返回回来，然后继续操作。但是在执行的时候，发现浏览器一直报错，var newFile=changeImg(newFile)返回的是undefined的。经过询问高手，得知这里遇到了js中异步执行索带来的结果。关于js异步执行机制，我会在接下来做细致研究，并记录，现在说一下通过这个问题知道的一些东西。\n### 什么时候就会出现异步执行机制\n当在js中出现回调，ajax，FileReader(暂时知道这三个)的时候，就会出现异步执行机制，简单举例：\n```javascript\nvar a;\na=ajax();//这里代表经过ajax执行后返回的值给a\nconsole.log(a);//undefined\n```\n以上代码运行结果并不是ajax返回的值，而是undefined。ajax是 JavaScript和XML，这里我对异步的简单理解就是在代码执行的同时，ajax执行，可以想象，在浏览器中js代码执行的速度与通过ajax返回服务器回传的数据的速度，当ajax返回数据时，浏览器中代码早已执行完成console，所以输入的是undefined，同时这也解释了为什么ajax会存在当ajax调用成功后，再执行一个XXX。\n所以在这里不能写return newFile，因为image.onload=function(){}也是异步的，我这里想到的办法就是在文件读取完成后，继续创建canvas，转换压缩图片（我感觉这个方法一点儿不好，暂时这么写）。\n所以正确的代码如下：\n```javascript\n//input选框change事件，取得文件，创建缩略图\nuploader.addEventListener('change',function (event) {\n    var e=event||window.event;\n    var target=e.target;\n    files=target.files;\n    filesLen=files.length;\n    for(let i=0;i<filesLen;i++){\n        var reader=new FileReader();\n        //文件读取结束后要做的事\n        reader.onload=function (event) {\n            //读取用户选择的文件\n            var fileURL=event.target.result;\n            //根据读取的文件创建缩略图\n            createThumbnailFromUrl(upbox,fileURL); \n            //上传前改变图片的格式\n            //创建canvas重绘缩略图    \n            var canvas=document.createElement('canvas');\n            var context=canvas.getContext('2d'); \n            // 创建image对象\n            var image=new Image();\n            //这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高\n            image.src=fileURL;\n            image.onload=function () {\n                canvas.width=image.width/2;\n                canvas.height=image.width/2*(image.height/image.width);\n                context.drawImage(image,0,0,canvas.width,canvas.height);\n                newURL=canvas.toDataURL('image/jpeg',0.5);\n                var base=newURL.substr(23); \n                newFile=atob(base);\n            } \n        }\n        reader.readAsDataURL(files[i]);\n        filesArray.push(newURL);\n    }\n},false);\n```\n上面的代码实现了将经过转换的图片的base64编码放入一个数组中，将这些代码传给后台。\n这里有一点，本身base64可以利用javascript的window.atob()实现base64的转码，但是简单利用该函数进行转码不能转回图片，还需要blob对象中的一些东西，关于这个对象我并没有深入研究，只是知道，对于该对象的研究我会在接下来继续研究。后台可以解析base64，所以直接把base64传给后台也可以，关于base64转码的实现可以参考稀土掘金中的文章[@用Canvas技术压缩要上传的图片](http://gold.xitu.io/entry/560a726960b2ad8a22a538fc)。\n## 五.利用XMLHttpRequest,FormData实现文件上传\n### 1.FormData对象\n利用`FormData`对象可以创建一系列键值对来模拟一个完整的表单，然后再使用XMLHttpRequest发送这个表单，这样就不用像传统的表单那样写form。所以在新建一个FormData对象：\n```javascript\nvar data=new FormData();\n```\n然后就可以使用append()方法向该对象里添加字段，形成可以发送给后台的键值对。\n### 2.XMLHttpRequest对象\n通过XMLHttpRequest可以很容易取回URL上的数据资源，可以取回的数据不仅仅是XML，除了支持HTTP还支持file，ftp协议。\n通过下列代码可以获得一个XMLHttpRequest()实例。 然后利用open()初始化请求。\n```javascript\nvar xhr=new XMLHttpRequest();\nxhr.open('post','uploader.php',true);\nxhr.send(data);\n```\n### 3.open方法\nopen可以写入的参数如下：\n```javascript\nvoid open(\n   DOMString method,\n   DOMString url,\n   optional boolean async,\n   optional DOMString user,\n   optional DOMString password\n);\n```\n- method：请求所使用的HTTP方法：例如'GET'，'POST'，'PUT'，'DELETE'等，但是如果下个参数是非HTTP(S)的URL，则忽略该参数。\n- url：该请求所要访问的URL\n- async：一个可选的布尔值参数，默认为true,意味着是否执行异步操作，如果值为false,则send()方法不会返回任何东西，直到接受到了服务器的返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。这个值必须是true,如果multipart 属性是true，否则将会出现一个意外。\n- user：用户名,可选参数,为授权使用;默认参数为空string.\n- password：密码,可选参数,为授权使用;默认参数为空string.\n### 4.send()方法\n发送请求. 如果该请求是异步模式(默认),该方法会立刻返回. 相反,如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回.\n## 综合以上，简单的一个上传图片代码实现如下：\n```javascript\n//创建缩略图样式\nfunction createThumbnailFromUrl(context,fileURL) {\n     //创建元素\n     var img=document.createElement('img'),\n         imgBox=document.createElement('div'),\n         imgContent=document.createElement('div');\n     //添加Class    \n     imgBox.classList.add('img-box');\n     imgContent.classList.add('img-content');\n     //动态插入创建的元素 \n     context.appendChild(imgContent);\n     imgContent.appendChild(imgBox);\n     imgBox.appendChild(img);\n     //创建canvas重绘缩略图    \n     var canvas=document.createElement('canvas');\n     var context=canvas.getContext('2d'); \n     // 创建image对象\n     var image=new Image();\n     image.src=fileURL;\n     image.onload=function () {\n        canvas.width=120;\n        canvas.height=120*(image.height/image.width);\n        context.drawImage(image,0,0,canvas.width,canvas.height);\n        img.src=canvas.toDataURL('image/png',0.5);  \n     }  \n}\n\nwindow.addEventListener('load',function () {\n    var uploader=document.querySelectorAll('#uploader')[0];\n    var button=document.querySelectorAll('#button')[0];\n    var upbox=document.querySelectorAll('.upbox')[0];\n    var files,filesLen,newFileURL,newFile;\n    var filesArray=[],newURL;\n    var test=document.querySelectorAll('#test')[0];\n    //input选框change事件，取得文件，创建缩略图\n    uploader.addEventListener('change',function (event) {\n        var e=event||window.event;\n        var target=e.target;\n        files=target.files;\n        filesLen=files.length;\n        for(let i=0;i<filesLen;i++){\n            var reader=new FileReader();\n            //文件读取结束后要做的事\n            reader.onload=function (event) {\n                //读取用户选择的文件\n                var fileURL=event.target.result;\n                //根据读取的文件创建缩略图\n                createThumbnailFromUrl(upbox,fileURL);\n                //上传前改变图片的格式\n                //创建canvas重绘缩略图    \n                var canvas=document.createElement('canvas');\n                var context=canvas.getContext('2d'); \n                // 创建image对象\n                var image=new Image();//这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高\n                image.src=fileURL;\n                image.onload=function () {\n                    canvas.width=image.width/2;\n                    canvas.height=image.width/2*(image.height/image.width);\n                    context.drawImage(image,0,0,canvas.width,canvas.height);\n                    newURL=canvas.toDataURL('image/jpeg',0.5);\n                    var base=newURL.substr(23); \n                    newFile=atob(base);\n                } \n            }\n            reader.readAsDataURL(files[i]);\n            filesArray.push(newURL);\n        }\n    },false);\n    //button按钮点击上传\n    button.addEventListener('click',function () {\n        if(filesLen.length!=0){\n            var data=new FormData();\n            var i=0;\n            //将所有的经过转码后的base64组成的数组传给后台\n            while(i<filesLen){\n                data.append('file'+i,filesArray[i]);\n                i++;\n            }\n            var xhr = new XMLHttpRequest();\n            xhr.open('post','uploader.php',true);\n            xhr.onreadystatechange=function () {\n                if(xhr.readyState==4){\n                    console.log(xhr.responseText);\n                }\n            };\n            xhr.send(data);\n        }\n    })\n},false);\n```","source":"_posts/H5File.md","raw":"---\ntitle: 文件上传（一）---H5 file API，canvas\ndate: 2016-03-31 23:35:12\ntags: H5 file，canvas\ncomments: true\ncategories: \"Javascript\"\n---\n&emsp;&emsp;最近公司让调研关于webUploader的图片上传中能否压缩，能否实现图片的格式转换，如果能如何实现，经过调研，这个插件可以实现文件的压缩，但是不能实现图片的格式转换，同时在调研过程中，知道了很多新的东西，H5 file API，canvas，等等，所以有了自己写一个文件上传来熟悉这些东西，所以有了本篇文章。\n## 一.做好HTML，CSS样式\n这里很简单，就是写一个HTML+CSS的文件，让我们的上传看起来像那么回事儿，这里不细说，代码如下：\n### html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>fileUploader</title>\n    <link rel=\"stylesheet\" href=\"./index.css\">\n</head>\n<body>\n    <div class=\"upbox\">\n        <h1>测试</h1>\n        <input id=\"uploader\" type=\"file\" multiple=\"multiple\" name=\"file\" accept=\"image/*\">\n    </div>    \n    <a id=\"test\" href=\"\">点击选择上传图片</a>\n    <button type=\"button\" id=\"button\">上传</button>\n    <script src=\"./index.js\"></script>\n</body>\n</html>\n```\n### index.css\n```css\n.upbox{width: 100%;height: 500px;border: 3px dashed #000;position: relative;}\n#uploader{display: block;width: 100%;height: 100%;opacity: 0;position: absolute;left: 0;top: 0;cursor: pointer;}\nh1{position: absolute;left: 45%;top: 40%;}\nbutton{width: 100px;height: 50px;float: right;}\n.img-content{width: 120px;height: 120px;border: 1px solid #000;margin: 20px;float: left;position: relative; z-index: 5;}\n.img-box{width: 100%;height: 100%;}\n.img-box img{display: block; width: 100%;height: 100%;}\n```\n<!--more-->\n## 二.用户多选文件并读取用户选择的文件\n### 1.让input实现多文件选择\n用户在点击input区域后，可以选择文件，H5支持多文件选择，只需要像下面这样写就可以：\n```html\n<input id=\"uploader\" type=\"file\" multiple=\"multiple\" name=\"file\" accept=\"image/*\">\n```\n在上面代码中，设置multiple可以让input实现文件多选，accept则是允许用户选择什么文件，这里我们要写图片上传，所以接受所有的图片的类型，也为后文的转换上传图片的文件格式奠定基础。\n### 2.利用FileReader对象读取源文件\nH5的File接口提供了文件的信息以及文件内容的存取的方法。File对象是用户在input元素上选择文件后返回的FileList对象，所以，通过File对象可以获得用户选择的文件。代码如下：\n```javascript\nvar uploader=document.querySelectorAll('#uploader')[0];\nuploader.addEventListener('change',function (event) {\n    var e=event||window.event;\n    var target=e.target;\n    var files=target.files;\n});\n```\n这里可以获得用户选择的文件，但是因为我们要利用用户选择的源文件生成缩略图，所以需要需要读取的是用户在计算机上存储的源文件，H5提供了FileReader对象，该对象允许web应用程序异步读取存储在用户计算机上的文件（或者元素数据缓冲）内容。\n#### FileReader对象提供了readAsDataURL()方法：\n#### readAsDataURL()\n开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,readyState属性的值会成为DONE,如果设置了onloadend事件处理程序,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容.参数file为将要读取的Blob对象或者File对象.\n所以拿到用户选择的源文件的代码如下：\n```javascript\nvar filesLen;\nvar uploader=document.querySelectorAll('#uploader')[0];\nuploader.addEventListener('change',function (event) {\n    var e=event||window.event;\n    var target=e.target;\n    var files=target.files;\n    filesLen=files.length;\n    for(let i=0;i<filesLen;i++){\n        var reader=new FileReader();\n        //文件读取结束后要做的事\n        reader.onload=function (event) {\n            //读取用户选择的文件\n            var fileURL=event.target.result;\n        }\n        reader.readAsDataURL(files[i]);\n    }\n});\n\n```\n因为是读取多个文件，所以需要使用for循环去读取每一个文件（这意味着FileReader一次只读取一个文件，异步读取），这样就拿到了用户选择的图片的源文件，该源文件被读取为base64编码，这位下一步，生成缩略图做了基础。\n## 三.利用canvas生成缩略图\nH5的canvas提供了drawImage和toDataURL两个方法\n### 1.drawImage()\ndrawImage()方法在画布上绘制图像，画布或视频，同时也能绘制图像的某个部分或者增加减少图像的尺寸。在javascript中有三种语法，分别如下：\n#### 在画布上定位图像\n```javascript\ncontext.drawImage(img,x,y);\n```\n#### 在画布上定位图像并规定图像的宽度和高度\n```javascript\ncontext.drawImage(img,x,y,width,height);\n```\n正是这一点儿让利用canvas压缩图片成为可能（本身生成缩略图也是在更改图片大小）\n#### 剪切图像并在画布上定位被剪切部分\n```javascript\ncontext.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);\n```\n以上参数值对应如下：\n![mahua](/img/canshu.PNG)\n### 2.toDataURL()\ntoDataURL()方法回传含有图像和参数设置特定格式的dataURLs，回传的图像解析度为96dpi。同样通过toDataURL()可以方便的将图片转换为base64编码，但是这里需要注意两点：\n- 如果canvas的高度或者宽度为0，则回传的字符串为\"data:,\"。\n- 如果要求图像类型并非image/png，但是回传的类型却是data:image/png，表示要求的图像类型并不支持。\n表达式如下：\n```javascript\ncanvas.toDataURL(type,encoderOptions);\n```\ntype：图片的格式，预设为image/png\nencoderOptions：生成的图片的品质，为0~1之间的数字，如果只不在该范围内，则使用默认值，其他会忽略\n### 生成缩略图代码实现\n基于以上两个canvas方法，可以写出生成缩略图的方法，代码如下：\n```javascript\n//创建缩略图样式\nfunction createThumbnailFromUrl(context,fileURL) {\n     //创建元素\n     var img=document.createElement('img'),\n         imgBox=document.createElement('div'),\n         imgContent=document.createElement('div');\n     //添加Class    \n     imgBox.classList.add('img-box');\n     imgContent.classList.add('img-content');\n     //动态插入创建的元素 \n     context.appendChild(imgContent);\n     imgContent.appendChild(imgBox);\n     imgBox.appendChild(img);\n     \n     //创建canvas重绘缩略图    \n     var canvas=document.createElement('canvas');\n     var context=canvas.getContext('2d'); \n     // 创建image图片对象\n     var image=new Image();\n     image.src=fileURL;\n     image.onload=function () {\n        canvas.width=120;\n        canvas.height=120*(image.height/image.width);\n        context.drawImage(image,0,0,canvas.width,canvas.height);\n        img.src=canvas.toDataURL('image/png',0.5);  \n     }  \n}\n```\n这里，为了拿到图片对象，也就是拿到要转换的图片，我们新建一个图片对象，<font color=\"red\">然后将图片对象的src赋值为FileReader拿到的FileURL，这样就拿到了用户选择上传的图片，这就将用户选择的文件与canvas联系起来</font>，接下来就进行处理，等图片读取完成后，进行cnavas操作，最后把生成的base64图片编码直接赋值给动态创建的缩略图img，这样就实现了用户在选择完要上传的图片后生成缩略图。\n## 四.将要上传的图片利用canvas进行压缩，改变格式---遇到js中的异步执行\ncanvas压缩，更改图片格式的实现就是上面生成缩略图的方法，但是我在写这里的时候遇到了一个问题，就是javascript中异步执行机制。\n我在javascript中写了一个函数，代码如下：\n```javascript\nfunction changeImg(fileURL) {\n     //创建canvas重绘缩略图    \n     var canvas=document.createElement('canvas');\n     var context=canvas.getContext('2d'); \n     // 创建image对象\n     var image=new Image();\n     //这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高\n     image.src=fileURL;\n     image.onload=function () {\n        canvas.width=image.width;\n        canvas.height=image.height;\n        context.drawImage(image,0,0,canvas.width,canvas.height);\n        newFile=canvas.toDataURL('image/png',0.5);\n        //这里的return就是问题的所在\n        return newFile\n     }\n}\n```\n本来我的想法是通过写一个changeImg函数，在文件读取完成后，进行图片压缩，然后再将转换后的图片利用return返回回来，然后继续操作。但是在执行的时候，发现浏览器一直报错，var newFile=changeImg(newFile)返回的是undefined的。经过询问高手，得知这里遇到了js中异步执行索带来的结果。关于js异步执行机制，我会在接下来做细致研究，并记录，现在说一下通过这个问题知道的一些东西。\n### 什么时候就会出现异步执行机制\n当在js中出现回调，ajax，FileReader(暂时知道这三个)的时候，就会出现异步执行机制，简单举例：\n```javascript\nvar a;\na=ajax();//这里代表经过ajax执行后返回的值给a\nconsole.log(a);//undefined\n```\n以上代码运行结果并不是ajax返回的值，而是undefined。ajax是 JavaScript和XML，这里我对异步的简单理解就是在代码执行的同时，ajax执行，可以想象，在浏览器中js代码执行的速度与通过ajax返回服务器回传的数据的速度，当ajax返回数据时，浏览器中代码早已执行完成console，所以输入的是undefined，同时这也解释了为什么ajax会存在当ajax调用成功后，再执行一个XXX。\n所以在这里不能写return newFile，因为image.onload=function(){}也是异步的，我这里想到的办法就是在文件读取完成后，继续创建canvas，转换压缩图片（我感觉这个方法一点儿不好，暂时这么写）。\n所以正确的代码如下：\n```javascript\n//input选框change事件，取得文件，创建缩略图\nuploader.addEventListener('change',function (event) {\n    var e=event||window.event;\n    var target=e.target;\n    files=target.files;\n    filesLen=files.length;\n    for(let i=0;i<filesLen;i++){\n        var reader=new FileReader();\n        //文件读取结束后要做的事\n        reader.onload=function (event) {\n            //读取用户选择的文件\n            var fileURL=event.target.result;\n            //根据读取的文件创建缩略图\n            createThumbnailFromUrl(upbox,fileURL); \n            //上传前改变图片的格式\n            //创建canvas重绘缩略图    \n            var canvas=document.createElement('canvas');\n            var context=canvas.getContext('2d'); \n            // 创建image对象\n            var image=new Image();\n            //这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高\n            image.src=fileURL;\n            image.onload=function () {\n                canvas.width=image.width/2;\n                canvas.height=image.width/2*(image.height/image.width);\n                context.drawImage(image,0,0,canvas.width,canvas.height);\n                newURL=canvas.toDataURL('image/jpeg',0.5);\n                var base=newURL.substr(23); \n                newFile=atob(base);\n            } \n        }\n        reader.readAsDataURL(files[i]);\n        filesArray.push(newURL);\n    }\n},false);\n```\n上面的代码实现了将经过转换的图片的base64编码放入一个数组中，将这些代码传给后台。\n这里有一点，本身base64可以利用javascript的window.atob()实现base64的转码，但是简单利用该函数进行转码不能转回图片，还需要blob对象中的一些东西，关于这个对象我并没有深入研究，只是知道，对于该对象的研究我会在接下来继续研究。后台可以解析base64，所以直接把base64传给后台也可以，关于base64转码的实现可以参考稀土掘金中的文章[@用Canvas技术压缩要上传的图片](http://gold.xitu.io/entry/560a726960b2ad8a22a538fc)。\n## 五.利用XMLHttpRequest,FormData实现文件上传\n### 1.FormData对象\n利用`FormData`对象可以创建一系列键值对来模拟一个完整的表单，然后再使用XMLHttpRequest发送这个表单，这样就不用像传统的表单那样写form。所以在新建一个FormData对象：\n```javascript\nvar data=new FormData();\n```\n然后就可以使用append()方法向该对象里添加字段，形成可以发送给后台的键值对。\n### 2.XMLHttpRequest对象\n通过XMLHttpRequest可以很容易取回URL上的数据资源，可以取回的数据不仅仅是XML，除了支持HTTP还支持file，ftp协议。\n通过下列代码可以获得一个XMLHttpRequest()实例。 然后利用open()初始化请求。\n```javascript\nvar xhr=new XMLHttpRequest();\nxhr.open('post','uploader.php',true);\nxhr.send(data);\n```\n### 3.open方法\nopen可以写入的参数如下：\n```javascript\nvoid open(\n   DOMString method,\n   DOMString url,\n   optional boolean async,\n   optional DOMString user,\n   optional DOMString password\n);\n```\n- method：请求所使用的HTTP方法：例如'GET'，'POST'，'PUT'，'DELETE'等，但是如果下个参数是非HTTP(S)的URL，则忽略该参数。\n- url：该请求所要访问的URL\n- async：一个可选的布尔值参数，默认为true,意味着是否执行异步操作，如果值为false,则send()方法不会返回任何东西，直到接受到了服务器的返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。这个值必须是true,如果multipart 属性是true，否则将会出现一个意外。\n- user：用户名,可选参数,为授权使用;默认参数为空string.\n- password：密码,可选参数,为授权使用;默认参数为空string.\n### 4.send()方法\n发送请求. 如果该请求是异步模式(默认),该方法会立刻返回. 相反,如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回.\n## 综合以上，简单的一个上传图片代码实现如下：\n```javascript\n//创建缩略图样式\nfunction createThumbnailFromUrl(context,fileURL) {\n     //创建元素\n     var img=document.createElement('img'),\n         imgBox=document.createElement('div'),\n         imgContent=document.createElement('div');\n     //添加Class    \n     imgBox.classList.add('img-box');\n     imgContent.classList.add('img-content');\n     //动态插入创建的元素 \n     context.appendChild(imgContent);\n     imgContent.appendChild(imgBox);\n     imgBox.appendChild(img);\n     //创建canvas重绘缩略图    \n     var canvas=document.createElement('canvas');\n     var context=canvas.getContext('2d'); \n     // 创建image对象\n     var image=new Image();\n     image.src=fileURL;\n     image.onload=function () {\n        canvas.width=120;\n        canvas.height=120*(image.height/image.width);\n        context.drawImage(image,0,0,canvas.width,canvas.height);\n        img.src=canvas.toDataURL('image/png',0.5);  \n     }  \n}\n\nwindow.addEventListener('load',function () {\n    var uploader=document.querySelectorAll('#uploader')[0];\n    var button=document.querySelectorAll('#button')[0];\n    var upbox=document.querySelectorAll('.upbox')[0];\n    var files,filesLen,newFileURL,newFile;\n    var filesArray=[],newURL;\n    var test=document.querySelectorAll('#test')[0];\n    //input选框change事件，取得文件，创建缩略图\n    uploader.addEventListener('change',function (event) {\n        var e=event||window.event;\n        var target=e.target;\n        files=target.files;\n        filesLen=files.length;\n        for(let i=0;i<filesLen;i++){\n            var reader=new FileReader();\n            //文件读取结束后要做的事\n            reader.onload=function (event) {\n                //读取用户选择的文件\n                var fileURL=event.target.result;\n                //根据读取的文件创建缩略图\n                createThumbnailFromUrl(upbox,fileURL);\n                //上传前改变图片的格式\n                //创建canvas重绘缩略图    \n                var canvas=document.createElement('canvas');\n                var context=canvas.getContext('2d'); \n                // 创建image对象\n                var image=new Image();//这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高\n                image.src=fileURL;\n                image.onload=function () {\n                    canvas.width=image.width/2;\n                    canvas.height=image.width/2*(image.height/image.width);\n                    context.drawImage(image,0,0,canvas.width,canvas.height);\n                    newURL=canvas.toDataURL('image/jpeg',0.5);\n                    var base=newURL.substr(23); \n                    newFile=atob(base);\n                } \n            }\n            reader.readAsDataURL(files[i]);\n            filesArray.push(newURL);\n        }\n    },false);\n    //button按钮点击上传\n    button.addEventListener('click',function () {\n        if(filesLen.length!=0){\n            var data=new FormData();\n            var i=0;\n            //将所有的经过转码后的base64组成的数组传给后台\n            while(i<filesLen){\n                data.append('file'+i,filesArray[i]);\n                i++;\n            }\n            var xhr = new XMLHttpRequest();\n            xhr.open('post','uploader.php',true);\n            xhr.onreadystatechange=function () {\n                if(xhr.readyState==4){\n                    console.log(xhr.responseText);\n                }\n            };\n            xhr.send(data);\n        }\n    })\n},false);\n```","slug":"H5File","published":1,"updated":"2016-08-02T08:38:04.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoaq000czrv49i3424jo","content":"<p>&emsp;&emsp;最近公司让调研关于webUploader的图片上传中能否压缩，能否实现图片的格式转换，如果能如何实现，经过调研，这个插件可以实现文件的压缩，但是不能实现图片的格式转换，同时在调研过程中，知道了很多新的东西，H5 file API，canvas，等等，所以有了自己写一个文件上传来熟悉这些东西，所以有了本篇文章。</p>\n<h2 id=\"一-做好HTML，CSS样式\"><a href=\"#一-做好HTML，CSS样式\" class=\"headerlink\" title=\"一.做好HTML，CSS样式\"></a>一.做好HTML，CSS样式</h2><p>这里很简单，就是写一个HTML+CSS的文件，让我们的上传看起来像那么回事儿，这里不细说，代码如下：</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>fileUploader<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./index.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"upbox\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>测试<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uploader\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">multiple</span>=<span class=\"string\">\"multiple\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>点击选择上传图片<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>上传<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"index-css\"><a href=\"#index-css\" class=\"headerlink\" title=\"index.css\"></a>index.css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.upbox</span>&#123;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;<span class=\"attribute\">border</span>: <span class=\"number\">3px</span> dashed <span class=\"number\">#000</span>;<span class=\"attribute\">position</span>: relative;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#uploader</span>&#123;<span class=\"attribute\">display</span>: block;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;<span class=\"attribute\">position</span>: absolute;<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;<span class=\"attribute\">cursor</span>: pointer;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>&#123;<span class=\"attribute\">position</span>: absolute;<span class=\"attribute\">left</span>: <span class=\"number\">45%</span>;<span class=\"attribute\">top</span>: <span class=\"number\">40%</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span>&#123;<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;<span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;<span class=\"attribute\">float</span>: right;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img-content</span>&#123;<span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;<span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span>;<span class=\"attribute\">float</span>: left;<span class=\"attribute\">position</span>: relative; <span class=\"attribute\">z-index</span>: <span class=\"number\">5</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img-box</span>&#123;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img-box</span> <span class=\"selector-tag\">img</span>&#123;<span class=\"attribute\">display</span>: block; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"二-用户多选文件并读取用户选择的文件\"><a href=\"#二-用户多选文件并读取用户选择的文件\" class=\"headerlink\" title=\"二.用户多选文件并读取用户选择的文件\"></a>二.用户多选文件并读取用户选择的文件</h2><h3 id=\"1-让input实现多文件选择\"><a href=\"#1-让input实现多文件选择\" class=\"headerlink\" title=\"1.让input实现多文件选择\"></a>1.让input实现多文件选择</h3><p>用户在点击input区域后，可以选择文件，H5支持多文件选择，只需要像下面这样写就可以：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uploader\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">multiple</span>=<span class=\"string\">\"multiple\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在上面代码中，设置multiple可以让input实现文件多选，accept则是允许用户选择什么文件，这里我们要写图片上传，所以接受所有的图片的类型，也为后文的转换上传图片的文件格式奠定基础。</p>\n<h3 id=\"2-利用FileReader对象读取源文件\"><a href=\"#2-利用FileReader对象读取源文件\" class=\"headerlink\" title=\"2.利用FileReader对象读取源文件\"></a>2.利用FileReader对象读取源文件</h3><p>H5的File接口提供了文件的信息以及文件内容的存取的方法。File对象是用户在input元素上选择文件后返回的FileList对象，所以，通过File对象可以获得用户选择的文件。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> uploader=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#uploader'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">uploader.addEventListener(<span class=\"string\">'change'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target=e.target;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> files=target.files;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这里可以获得用户选择的文件，但是因为我们要利用用户选择的源文件生成缩略图，所以需要需要读取的是用户在计算机上存储的源文件，H5提供了FileReader对象，该对象允许web应用程序异步读取存储在用户计算机上的文件（或者元素数据缓冲）内容。</p>\n<h4 id=\"FileReader对象提供了readAsDataURL-方法：\"><a href=\"#FileReader对象提供了readAsDataURL-方法：\" class=\"headerlink\" title=\"FileReader对象提供了readAsDataURL()方法：\"></a>FileReader对象提供了readAsDataURL()方法：</h4><h4 id=\"readAsDataURL\"><a href=\"#readAsDataURL\" class=\"headerlink\" title=\"readAsDataURL()\"></a>readAsDataURL()</h4><p>开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,readyState属性的值会成为DONE,如果设置了onloadend事件处理程序,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容.参数file为将要读取的Blob对象或者File对象.<br>所以拿到用户选择的源文件的代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> filesLen;</span><br><span class=\"line\"><span class=\"keyword\">var</span> uploader=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#uploader'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">uploader.addEventListener(<span class=\"string\">'change'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target=e.target;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> files=target.files;</span><br><span class=\"line\">    filesLen=files.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;filesLen;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reader=<span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">        <span class=\"comment\">//文件读取结束后要做的事</span></span><br><span class=\"line\">        reader.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//读取用户选择的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> fileURL=event.target.result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reader.readAsDataURL(files[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>因为是读取多个文件，所以需要使用for循环去读取每一个文件（这意味着FileReader一次只读取一个文件，异步读取），这样就拿到了用户选择的图片的源文件，该源文件被读取为base64编码，这位下一步，生成缩略图做了基础。</p>\n<h2 id=\"三-利用canvas生成缩略图\"><a href=\"#三-利用canvas生成缩略图\" class=\"headerlink\" title=\"三.利用canvas生成缩略图\"></a>三.利用canvas生成缩略图</h2><p>H5的canvas提供了drawImage和toDataURL两个方法</p>\n<h3 id=\"1-drawImage\"><a href=\"#1-drawImage\" class=\"headerlink\" title=\"1.drawImage()\"></a>1.drawImage()</h3><p>drawImage()方法在画布上绘制图像，画布或视频，同时也能绘制图像的某个部分或者增加减少图像的尺寸。在javascript中有三种语法，分别如下：</p>\n<h4 id=\"在画布上定位图像\"><a href=\"#在画布上定位图像\" class=\"headerlink\" title=\"在画布上定位图像\"></a>在画布上定位图像</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.drawImage(img,x,y);</span><br></pre></td></tr></table></figure>\n<h4 id=\"在画布上定位图像并规定图像的宽度和高度\"><a href=\"#在画布上定位图像并规定图像的宽度和高度\" class=\"headerlink\" title=\"在画布上定位图像并规定图像的宽度和高度\"></a>在画布上定位图像并规定图像的宽度和高度</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.drawImage(img,x,y,width,height);</span><br></pre></td></tr></table></figure>\n<p>正是这一点儿让利用canvas压缩图片成为可能（本身生成缩略图也是在更改图片大小）</p>\n<h4 id=\"剪切图像并在画布上定位被剪切部分\"><a href=\"#剪切图像并在画布上定位被剪切部分\" class=\"headerlink\" title=\"剪切图像并在画布上定位被剪切部分\"></a>剪切图像并在画布上定位被剪切部分</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</span><br></pre></td></tr></table></figure>\n<p>以上参数值对应如下：<br><img src=\"/img/canshu.PNG\" alt=\"mahua\"></p>\n<h3 id=\"2-toDataURL\"><a href=\"#2-toDataURL\" class=\"headerlink\" title=\"2.toDataURL()\"></a>2.toDataURL()</h3><p>toDataURL()方法回传含有图像和参数设置特定格式的dataURLs，回传的图像解析度为96dpi。同样通过toDataURL()可以方便的将图片转换为base64编码，但是这里需要注意两点：</p>\n<ul>\n<li>如果canvas的高度或者宽度为0，则回传的字符串为”data:,”。</li>\n<li>如果要求图像类型并非image/png，但是回传的类型却是data:image/png，表示要求的图像类型并不支持。<br>表达式如下：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.toDataURL(type,encoderOptions);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>type：图片的格式，预设为image/png<br>encoderOptions：生成的图片的品质，为0~1之间的数字，如果只不在该范围内，则使用默认值，其他会忽略</p>\n<h3 id=\"生成缩略图代码实现\"><a href=\"#生成缩略图代码实现\" class=\"headerlink\" title=\"生成缩略图代码实现\"></a>生成缩略图代码实现</h3><p>基于以上两个canvas方法，可以写出生成缩略图的方法，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建缩略图样式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createThumbnailFromUrl</span>(<span class=\"params\">context,fileURL</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//创建元素</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> img=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>),</span><br><span class=\"line\">         imgBox=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</span><br><span class=\"line\">         imgContent=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">     <span class=\"comment\">//添加Class    </span></span><br><span class=\"line\">     imgBox.classList.add(<span class=\"string\">'img-box'</span>);</span><br><span class=\"line\">     imgContent.classList.add(<span class=\"string\">'img-content'</span>);</span><br><span class=\"line\">     <span class=\"comment\">//动态插入创建的元素 </span></span><br><span class=\"line\">     context.appendChild(imgContent);</span><br><span class=\"line\">     imgContent.appendChild(imgBox);</span><br><span class=\"line\">     imgBox.appendChild(img);</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"comment\">//创建canvas重绘缩略图    </span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> context=canvas.getContext(<span class=\"string\">'2d'</span>); </span><br><span class=\"line\">     <span class=\"comment\">// 创建image图片对象</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> image=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">     image.src=fileURL;</span><br><span class=\"line\">     image.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        canvas.width=<span class=\"number\">120</span>;</span><br><span class=\"line\">        canvas.height=<span class=\"number\">120</span>*(image.height/image.width);</span><br><span class=\"line\">        context.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">        img.src=canvas.toDataURL(<span class=\"string\">'image/png'</span>,<span class=\"number\">0.5</span>);  </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里，为了拿到图片对象，也就是拿到要转换的图片，我们新建一个图片对象，<font color=\"red\">然后将图片对象的src赋值为FileReader拿到的FileURL，这样就拿到了用户选择上传的图片，这就将用户选择的文件与canvas联系起来</font>，接下来就进行处理，等图片读取完成后，进行cnavas操作，最后把生成的base64图片编码直接赋值给动态创建的缩略图img，这样就实现了用户在选择完要上传的图片后生成缩略图。</p>\n<h2 id=\"四-将要上传的图片利用canvas进行压缩，改变格式—遇到js中的异步执行\"><a href=\"#四-将要上传的图片利用canvas进行压缩，改变格式—遇到js中的异步执行\" class=\"headerlink\" title=\"四.将要上传的图片利用canvas进行压缩，改变格式—遇到js中的异步执行\"></a>四.将要上传的图片利用canvas进行压缩，改变格式—遇到js中的异步执行</h2><p>canvas压缩，更改图片格式的实现就是上面生成缩略图的方法，但是我在写这里的时候遇到了一个问题，就是javascript中异步执行机制。<br>我在javascript中写了一个函数，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeImg</span>(<span class=\"params\">fileURL</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//创建canvas重绘缩略图    </span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> context=canvas.getContext(<span class=\"string\">'2d'</span>); </span><br><span class=\"line\">     <span class=\"comment\">// 创建image对象</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> image=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">     <span class=\"comment\">//这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高</span></span><br><span class=\"line\">     image.src=fileURL;</span><br><span class=\"line\">     image.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        canvas.width=image.width;</span><br><span class=\"line\">        canvas.height=image.height;</span><br><span class=\"line\">        context.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">        newFile=canvas.toDataURL(<span class=\"string\">'image/png'</span>,<span class=\"number\">0.5</span>);</span><br><span class=\"line\">        <span class=\"comment\">//这里的return就是问题的所在</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> newFile</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本来我的想法是通过写一个changeImg函数，在文件读取完成后，进行图片压缩，然后再将转换后的图片利用return返回回来，然后继续操作。但是在执行的时候，发现浏览器一直报错，var newFile=changeImg(newFile)返回的是undefined的。经过询问高手，得知这里遇到了js中异步执行索带来的结果。关于js异步执行机制，我会在接下来做细致研究，并记录，现在说一下通过这个问题知道的一些东西。</p>\n<h3 id=\"什么时候就会出现异步执行机制\"><a href=\"#什么时候就会出现异步执行机制\" class=\"headerlink\" title=\"什么时候就会出现异步执行机制\"></a>什么时候就会出现异步执行机制</h3><p>当在js中出现回调，ajax，FileReader(暂时知道这三个)的时候，就会出现异步执行机制，简单举例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a=ajax();<span class=\"comment\">//这里代表经过ajax执行后返回的值给a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行结果并不是ajax返回的值，而是undefined。ajax是 JavaScript和XML，这里我对异步的简单理解就是在代码执行的同时，ajax执行，可以想象，在浏览器中js代码执行的速度与通过ajax返回服务器回传的数据的速度，当ajax返回数据时，浏览器中代码早已执行完成console，所以输入的是undefined，同时这也解释了为什么ajax会存在当ajax调用成功后，再执行一个XXX。<br>所以在这里不能写return newFile，因为image.onload=function(){}也是异步的，我这里想到的办法就是在文件读取完成后，继续创建canvas，转换压缩图片（我感觉这个方法一点儿不好，暂时这么写）。<br>所以正确的代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//input选框change事件，取得文件，创建缩略图</span></span><br><span class=\"line\">uploader.addEventListener(<span class=\"string\">'change'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target=e.target;</span><br><span class=\"line\">    files=target.files;</span><br><span class=\"line\">    filesLen=files.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;filesLen;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reader=<span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">        <span class=\"comment\">//文件读取结束后要做的事</span></span><br><span class=\"line\">        reader.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//读取用户选择的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> fileURL=event.target.result;</span><br><span class=\"line\">            <span class=\"comment\">//根据读取的文件创建缩略图</span></span><br><span class=\"line\">            createThumbnailFromUrl(upbox,fileURL); </span><br><span class=\"line\">            <span class=\"comment\">//上传前改变图片的格式</span></span><br><span class=\"line\">            <span class=\"comment\">//创建canvas重绘缩略图    </span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> context=canvas.getContext(<span class=\"string\">'2d'</span>); </span><br><span class=\"line\">            <span class=\"comment\">// 创建image对象</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> image=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">            <span class=\"comment\">//这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高</span></span><br><span class=\"line\">            image.src=fileURL;</span><br><span class=\"line\">            image.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                canvas.width=image.width/<span class=\"number\">2</span>;</span><br><span class=\"line\">                canvas.height=image.width/<span class=\"number\">2</span>*(image.height/image.width);</span><br><span class=\"line\">                context.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">                newURL=canvas.toDataURL(<span class=\"string\">'image/jpeg'</span>,<span class=\"number\">0.5</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> base=newURL.substr(<span class=\"number\">23</span>); </span><br><span class=\"line\">                newFile=atob(base);</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reader.readAsDataURL(files[i]);</span><br><span class=\"line\">        filesArray.push(newURL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码实现了将经过转换的图片的base64编码放入一个数组中，将这些代码传给后台。<br>这里有一点，本身base64可以利用javascript的window.atob()实现base64的转码，但是简单利用该函数进行转码不能转回图片，还需要blob对象中的一些东西，关于这个对象我并没有深入研究，只是知道，对于该对象的研究我会在接下来继续研究。后台可以解析base64，所以直接把base64传给后台也可以，关于base64转码的实现可以参考稀土掘金中的文章<a href=\"http://gold.xitu.io/entry/560a726960b2ad8a22a538fc\" target=\"_blank\" rel=\"noopener\">@用Canvas技术压缩要上传的图片</a>。</p>\n<h2 id=\"五-利用XMLHttpRequest-FormData实现文件上传\"><a href=\"#五-利用XMLHttpRequest-FormData实现文件上传\" class=\"headerlink\" title=\"五.利用XMLHttpRequest,FormData实现文件上传\"></a>五.利用XMLHttpRequest,FormData实现文件上传</h2><h3 id=\"1-FormData对象\"><a href=\"#1-FormData对象\" class=\"headerlink\" title=\"1.FormData对象\"></a>1.FormData对象</h3><p>利用<code>FormData</code>对象可以创建一系列键值对来模拟一个完整的表单，然后再使用XMLHttpRequest发送这个表单，这样就不用像传统的表单那样写form。所以在新建一个FormData对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data=<span class=\"keyword\">new</span> FormData();</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以使用append()方法向该对象里添加字段，形成可以发送给后台的键值对。</p>\n<h3 id=\"2-XMLHttpRequest对象\"><a href=\"#2-XMLHttpRequest对象\" class=\"headerlink\" title=\"2.XMLHttpRequest对象\"></a>2.XMLHttpRequest对象</h3><p>通过XMLHttpRequest可以很容易取回URL上的数据资源，可以取回的数据不仅仅是XML，除了支持HTTP还支持file，ftp协议。<br>通过下列代码可以获得一个XMLHttpRequest()实例。 然后利用open()初始化请求。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.open(<span class=\"string\">'post'</span>,<span class=\"string\">'uploader.php'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.send(data);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-open方法\"><a href=\"#3-open方法\" class=\"headerlink\" title=\"3.open方法\"></a>3.open方法</h3><p>open可以写入的参数如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> open(</span><br><span class=\"line\">   DOMString method,</span><br><span class=\"line\">   DOMString url,</span><br><span class=\"line\">   optional boolean <span class=\"keyword\">async</span>,</span><br><span class=\"line\">   optional DOMString user,</span><br><span class=\"line\">   optional DOMString password</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>method：请求所使用的HTTP方法：例如’GET’，’POST’，’PUT’，’DELETE’等，但是如果下个参数是非HTTP(S)的URL，则忽略该参数。</li>\n<li>url：该请求所要访问的URL</li>\n<li>async：一个可选的布尔值参数，默认为true,意味着是否执行异步操作，如果值为false,则send()方法不会返回任何东西，直到接受到了服务器的返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。这个值必须是true,如果multipart 属性是true，否则将会出现一个意外。</li>\n<li>user：用户名,可选参数,为授权使用;默认参数为空string.</li>\n<li>password：密码,可选参数,为授权使用;默认参数为空string.<h3 id=\"4-send-方法\"><a href=\"#4-send-方法\" class=\"headerlink\" title=\"4.send()方法\"></a>4.send()方法</h3>发送请求. 如果该请求是异步模式(默认),该方法会立刻返回. 相反,如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回.<h2 id=\"综合以上，简单的一个上传图片代码实现如下：\"><a href=\"#综合以上，简单的一个上传图片代码实现如下：\" class=\"headerlink\" title=\"综合以上，简单的一个上传图片代码实现如下：\"></a>综合以上，简单的一个上传图片代码实现如下：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建缩略图样式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createThumbnailFromUrl</span>(<span class=\"params\">context,fileURL</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//创建元素</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> img=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>),</span><br><span class=\"line\">         imgBox=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</span><br><span class=\"line\">         imgContent=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">     <span class=\"comment\">//添加Class    </span></span><br><span class=\"line\">     imgBox.classList.add(<span class=\"string\">'img-box'</span>);</span><br><span class=\"line\">     imgContent.classList.add(<span class=\"string\">'img-content'</span>);</span><br><span class=\"line\">     <span class=\"comment\">//动态插入创建的元素 </span></span><br><span class=\"line\">     context.appendChild(imgContent);</span><br><span class=\"line\">     imgContent.appendChild(imgBox);</span><br><span class=\"line\">     imgBox.appendChild(img);</span><br><span class=\"line\">     <span class=\"comment\">//创建canvas重绘缩略图    </span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> context=canvas.getContext(<span class=\"string\">'2d'</span>); </span><br><span class=\"line\">     <span class=\"comment\">// 创建image对象</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> image=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">     image.src=fileURL;</span><br><span class=\"line\">     image.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        canvas.width=<span class=\"number\">120</span>;</span><br><span class=\"line\">        canvas.height=<span class=\"number\">120</span>*(image.height/image.width);</span><br><span class=\"line\">        context.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">        img.src=canvas.toDataURL(<span class=\"string\">'image/png'</span>,<span class=\"number\">0.5</span>);  </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> uploader=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#uploader'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> button=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#button'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> upbox=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.upbox'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> files,filesLen,newFileURL,newFile;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filesArray=[],newURL;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#test'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">//input选框change事件，取得文件，创建缩略图</span></span><br><span class=\"line\">    uploader.addEventListener(<span class=\"string\">'change'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> target=e.target;</span><br><span class=\"line\">        files=target.files;</span><br><span class=\"line\">        filesLen=files.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;filesLen;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> reader=<span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">            <span class=\"comment\">//文件读取结束后要做的事</span></span><br><span class=\"line\">            reader.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//读取用户选择的文件</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> fileURL=event.target.result;</span><br><span class=\"line\">                <span class=\"comment\">//根据读取的文件创建缩略图</span></span><br><span class=\"line\">                createThumbnailFromUrl(upbox,fileURL);</span><br><span class=\"line\">                <span class=\"comment\">//上传前改变图片的格式</span></span><br><span class=\"line\">                <span class=\"comment\">//创建canvas重绘缩略图    </span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> context=canvas.getContext(<span class=\"string\">'2d'</span>); </span><br><span class=\"line\">                <span class=\"comment\">// 创建image对象</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> image=<span class=\"keyword\">new</span> Image();<span class=\"comment\">//这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高</span></span><br><span class=\"line\">                image.src=fileURL;</span><br><span class=\"line\">                image.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    canvas.width=image.width/<span class=\"number\">2</span>;</span><br><span class=\"line\">                    canvas.height=image.width/<span class=\"number\">2</span>*(image.height/image.width);</span><br><span class=\"line\">                    context.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">                    newURL=canvas.toDataURL(<span class=\"string\">'image/jpeg'</span>,<span class=\"number\">0.5</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> base=newURL.substr(<span class=\"number\">23</span>); </span><br><span class=\"line\">                    newFile=atob(base);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            reader.readAsDataURL(files[i]);</span><br><span class=\"line\">            filesArray.push(newURL);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">//button按钮点击上传</span></span><br><span class=\"line\">    button.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(filesLen.length!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> data=<span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//将所有的经过转码后的base64组成的数组传给后台</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i&lt;filesLen)&#123;</span><br><span class=\"line\">                data.append(<span class=\"string\">'file'</span>+i,filesArray[i]);</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">            xhr.open(<span class=\"string\">'post'</span>,<span class=\"string\">'uploader.php'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">            xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.readyState==<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(xhr.responseText);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            xhr.send(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;最近公司让调研关于webUploader的图片上传中能否压缩，能否实现图片的格式转换，如果能如何实现，经过调研，这个插件可以实现文件的压缩，但是不能实现图片的格式转换，同时在调研过程中，知道了很多新的东西，H5 file API，canvas，等等，所以有了自己写一个文件上传来熟悉这些东西，所以有了本篇文章。</p>\n<h2 id=\"一-做好HTML，CSS样式\"><a href=\"#一-做好HTML，CSS样式\" class=\"headerlink\" title=\"一.做好HTML，CSS样式\"></a>一.做好HTML，CSS样式</h2><p>这里很简单，就是写一个HTML+CSS的文件，让我们的上传看起来像那么回事儿，这里不细说，代码如下：</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>fileUploader<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./index.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"upbox\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>测试<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uploader\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">multiple</span>=<span class=\"string\">\"multiple\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>点击选择上传图片<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>上传<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"index-css\"><a href=\"#index-css\" class=\"headerlink\" title=\"index.css\"></a>index.css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.upbox</span>&#123;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;<span class=\"attribute\">border</span>: <span class=\"number\">3px</span> dashed <span class=\"number\">#000</span>;<span class=\"attribute\">position</span>: relative;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#uploader</span>&#123;<span class=\"attribute\">display</span>: block;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;<span class=\"attribute\">position</span>: absolute;<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;<span class=\"attribute\">cursor</span>: pointer;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>&#123;<span class=\"attribute\">position</span>: absolute;<span class=\"attribute\">left</span>: <span class=\"number\">45%</span>;<span class=\"attribute\">top</span>: <span class=\"number\">40%</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span>&#123;<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;<span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;<span class=\"attribute\">float</span>: right;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img-content</span>&#123;<span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;<span class=\"attribute\">height</span>: <span class=\"number\">120px</span>;<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;<span class=\"attribute\">margin</span>: <span class=\"number\">20px</span>;<span class=\"attribute\">float</span>: left;<span class=\"attribute\">position</span>: relative; <span class=\"attribute\">z-index</span>: <span class=\"number\">5</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img-box</span>&#123;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img-box</span> <span class=\"selector-tag\">img</span>&#123;<span class=\"attribute\">display</span>: block; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"二-用户多选文件并读取用户选择的文件\"><a href=\"#二-用户多选文件并读取用户选择的文件\" class=\"headerlink\" title=\"二.用户多选文件并读取用户选择的文件\"></a>二.用户多选文件并读取用户选择的文件</h2><h3 id=\"1-让input实现多文件选择\"><a href=\"#1-让input实现多文件选择\" class=\"headerlink\" title=\"1.让input实现多文件选择\"></a>1.让input实现多文件选择</h3><p>用户在点击input区域后，可以选择文件，H5支持多文件选择，只需要像下面这样写就可以：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uploader\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">multiple</span>=<span class=\"string\">\"multiple\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在上面代码中，设置multiple可以让input实现文件多选，accept则是允许用户选择什么文件，这里我们要写图片上传，所以接受所有的图片的类型，也为后文的转换上传图片的文件格式奠定基础。</p>\n<h3 id=\"2-利用FileReader对象读取源文件\"><a href=\"#2-利用FileReader对象读取源文件\" class=\"headerlink\" title=\"2.利用FileReader对象读取源文件\"></a>2.利用FileReader对象读取源文件</h3><p>H5的File接口提供了文件的信息以及文件内容的存取的方法。File对象是用户在input元素上选择文件后返回的FileList对象，所以，通过File对象可以获得用户选择的文件。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> uploader=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#uploader'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">uploader.addEventListener(<span class=\"string\">'change'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target=e.target;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> files=target.files;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这里可以获得用户选择的文件，但是因为我们要利用用户选择的源文件生成缩略图，所以需要需要读取的是用户在计算机上存储的源文件，H5提供了FileReader对象，该对象允许web应用程序异步读取存储在用户计算机上的文件（或者元素数据缓冲）内容。</p>\n<h4 id=\"FileReader对象提供了readAsDataURL-方法：\"><a href=\"#FileReader对象提供了readAsDataURL-方法：\" class=\"headerlink\" title=\"FileReader对象提供了readAsDataURL()方法：\"></a>FileReader对象提供了readAsDataURL()方法：</h4><h4 id=\"readAsDataURL\"><a href=\"#readAsDataURL\" class=\"headerlink\" title=\"readAsDataURL()\"></a>readAsDataURL()</h4><p>开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,readyState属性的值会成为DONE,如果设置了onloadend事件处理程序,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容.参数file为将要读取的Blob对象或者File对象.<br>所以拿到用户选择的源文件的代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> filesLen;</span><br><span class=\"line\"><span class=\"keyword\">var</span> uploader=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#uploader'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">uploader.addEventListener(<span class=\"string\">'change'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target=e.target;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> files=target.files;</span><br><span class=\"line\">    filesLen=files.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;filesLen;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reader=<span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">        <span class=\"comment\">//文件读取结束后要做的事</span></span><br><span class=\"line\">        reader.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//读取用户选择的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> fileURL=event.target.result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reader.readAsDataURL(files[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>因为是读取多个文件，所以需要使用for循环去读取每一个文件（这意味着FileReader一次只读取一个文件，异步读取），这样就拿到了用户选择的图片的源文件，该源文件被读取为base64编码，这位下一步，生成缩略图做了基础。</p>\n<h2 id=\"三-利用canvas生成缩略图\"><a href=\"#三-利用canvas生成缩略图\" class=\"headerlink\" title=\"三.利用canvas生成缩略图\"></a>三.利用canvas生成缩略图</h2><p>H5的canvas提供了drawImage和toDataURL两个方法</p>\n<h3 id=\"1-drawImage\"><a href=\"#1-drawImage\" class=\"headerlink\" title=\"1.drawImage()\"></a>1.drawImage()</h3><p>drawImage()方法在画布上绘制图像，画布或视频，同时也能绘制图像的某个部分或者增加减少图像的尺寸。在javascript中有三种语法，分别如下：</p>\n<h4 id=\"在画布上定位图像\"><a href=\"#在画布上定位图像\" class=\"headerlink\" title=\"在画布上定位图像\"></a>在画布上定位图像</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.drawImage(img,x,y);</span><br></pre></td></tr></table></figure>\n<h4 id=\"在画布上定位图像并规定图像的宽度和高度\"><a href=\"#在画布上定位图像并规定图像的宽度和高度\" class=\"headerlink\" title=\"在画布上定位图像并规定图像的宽度和高度\"></a>在画布上定位图像并规定图像的宽度和高度</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.drawImage(img,x,y,width,height);</span><br></pre></td></tr></table></figure>\n<p>正是这一点儿让利用canvas压缩图片成为可能（本身生成缩略图也是在更改图片大小）</p>\n<h4 id=\"剪切图像并在画布上定位被剪切部分\"><a href=\"#剪切图像并在画布上定位被剪切部分\" class=\"headerlink\" title=\"剪切图像并在画布上定位被剪切部分\"></a>剪切图像并在画布上定位被剪切部分</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</span><br></pre></td></tr></table></figure>\n<p>以上参数值对应如下：<br><img src=\"/img/canshu.PNG\" alt=\"mahua\"></p>\n<h3 id=\"2-toDataURL\"><a href=\"#2-toDataURL\" class=\"headerlink\" title=\"2.toDataURL()\"></a>2.toDataURL()</h3><p>toDataURL()方法回传含有图像和参数设置特定格式的dataURLs，回传的图像解析度为96dpi。同样通过toDataURL()可以方便的将图片转换为base64编码，但是这里需要注意两点：</p>\n<ul>\n<li>如果canvas的高度或者宽度为0，则回传的字符串为”data:,”。</li>\n<li>如果要求图像类型并非image/png，但是回传的类型却是data:image/png，表示要求的图像类型并不支持。<br>表达式如下：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.toDataURL(type,encoderOptions);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>type：图片的格式，预设为image/png<br>encoderOptions：生成的图片的品质，为0~1之间的数字，如果只不在该范围内，则使用默认值，其他会忽略</p>\n<h3 id=\"生成缩略图代码实现\"><a href=\"#生成缩略图代码实现\" class=\"headerlink\" title=\"生成缩略图代码实现\"></a>生成缩略图代码实现</h3><p>基于以上两个canvas方法，可以写出生成缩略图的方法，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建缩略图样式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createThumbnailFromUrl</span>(<span class=\"params\">context,fileURL</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//创建元素</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> img=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>),</span><br><span class=\"line\">         imgBox=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</span><br><span class=\"line\">         imgContent=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">     <span class=\"comment\">//添加Class    </span></span><br><span class=\"line\">     imgBox.classList.add(<span class=\"string\">'img-box'</span>);</span><br><span class=\"line\">     imgContent.classList.add(<span class=\"string\">'img-content'</span>);</span><br><span class=\"line\">     <span class=\"comment\">//动态插入创建的元素 </span></span><br><span class=\"line\">     context.appendChild(imgContent);</span><br><span class=\"line\">     imgContent.appendChild(imgBox);</span><br><span class=\"line\">     imgBox.appendChild(img);</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"comment\">//创建canvas重绘缩略图    </span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> context=canvas.getContext(<span class=\"string\">'2d'</span>); </span><br><span class=\"line\">     <span class=\"comment\">// 创建image图片对象</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> image=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">     image.src=fileURL;</span><br><span class=\"line\">     image.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        canvas.width=<span class=\"number\">120</span>;</span><br><span class=\"line\">        canvas.height=<span class=\"number\">120</span>*(image.height/image.width);</span><br><span class=\"line\">        context.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">        img.src=canvas.toDataURL(<span class=\"string\">'image/png'</span>,<span class=\"number\">0.5</span>);  </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里，为了拿到图片对象，也就是拿到要转换的图片，我们新建一个图片对象，<font color=\"red\">然后将图片对象的src赋值为FileReader拿到的FileURL，这样就拿到了用户选择上传的图片，这就将用户选择的文件与canvas联系起来</font>，接下来就进行处理，等图片读取完成后，进行cnavas操作，最后把生成的base64图片编码直接赋值给动态创建的缩略图img，这样就实现了用户在选择完要上传的图片后生成缩略图。</p>\n<h2 id=\"四-将要上传的图片利用canvas进行压缩，改变格式—遇到js中的异步执行\"><a href=\"#四-将要上传的图片利用canvas进行压缩，改变格式—遇到js中的异步执行\" class=\"headerlink\" title=\"四.将要上传的图片利用canvas进行压缩，改变格式—遇到js中的异步执行\"></a>四.将要上传的图片利用canvas进行压缩，改变格式—遇到js中的异步执行</h2><p>canvas压缩，更改图片格式的实现就是上面生成缩略图的方法，但是我在写这里的时候遇到了一个问题，就是javascript中异步执行机制。<br>我在javascript中写了一个函数，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeImg</span>(<span class=\"params\">fileURL</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//创建canvas重绘缩略图    </span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> context=canvas.getContext(<span class=\"string\">'2d'</span>); </span><br><span class=\"line\">     <span class=\"comment\">// 创建image对象</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> image=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">     <span class=\"comment\">//这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高</span></span><br><span class=\"line\">     image.src=fileURL;</span><br><span class=\"line\">     image.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        canvas.width=image.width;</span><br><span class=\"line\">        canvas.height=image.height;</span><br><span class=\"line\">        context.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">        newFile=canvas.toDataURL(<span class=\"string\">'image/png'</span>,<span class=\"number\">0.5</span>);</span><br><span class=\"line\">        <span class=\"comment\">//这里的return就是问题的所在</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> newFile</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>本来我的想法是通过写一个changeImg函数，在文件读取完成后，进行图片压缩，然后再将转换后的图片利用return返回回来，然后继续操作。但是在执行的时候，发现浏览器一直报错，var newFile=changeImg(newFile)返回的是undefined的。经过询问高手，得知这里遇到了js中异步执行索带来的结果。关于js异步执行机制，我会在接下来做细致研究，并记录，现在说一下通过这个问题知道的一些东西。</p>\n<h3 id=\"什么时候就会出现异步执行机制\"><a href=\"#什么时候就会出现异步执行机制\" class=\"headerlink\" title=\"什么时候就会出现异步执行机制\"></a>什么时候就会出现异步执行机制</h3><p>当在js中出现回调，ajax，FileReader(暂时知道这三个)的时候，就会出现异步执行机制，简单举例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a=ajax();<span class=\"comment\">//这里代表经过ajax执行后返回的值给a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>以上代码运行结果并不是ajax返回的值，而是undefined。ajax是 JavaScript和XML，这里我对异步的简单理解就是在代码执行的同时，ajax执行，可以想象，在浏览器中js代码执行的速度与通过ajax返回服务器回传的数据的速度，当ajax返回数据时，浏览器中代码早已执行完成console，所以输入的是undefined，同时这也解释了为什么ajax会存在当ajax调用成功后，再执行一个XXX。<br>所以在这里不能写return newFile，因为image.onload=function(){}也是异步的，我这里想到的办法就是在文件读取完成后，继续创建canvas，转换压缩图片（我感觉这个方法一点儿不好，暂时这么写）。<br>所以正确的代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//input选框change事件，取得文件，创建缩略图</span></span><br><span class=\"line\">uploader.addEventListener(<span class=\"string\">'change'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target=e.target;</span><br><span class=\"line\">    files=target.files;</span><br><span class=\"line\">    filesLen=files.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;filesLen;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reader=<span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">        <span class=\"comment\">//文件读取结束后要做的事</span></span><br><span class=\"line\">        reader.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//读取用户选择的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> fileURL=event.target.result;</span><br><span class=\"line\">            <span class=\"comment\">//根据读取的文件创建缩略图</span></span><br><span class=\"line\">            createThumbnailFromUrl(upbox,fileURL); </span><br><span class=\"line\">            <span class=\"comment\">//上传前改变图片的格式</span></span><br><span class=\"line\">            <span class=\"comment\">//创建canvas重绘缩略图    </span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> context=canvas.getContext(<span class=\"string\">'2d'</span>); </span><br><span class=\"line\">            <span class=\"comment\">// 创建image对象</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> image=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">            <span class=\"comment\">//这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高</span></span><br><span class=\"line\">            image.src=fileURL;</span><br><span class=\"line\">            image.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                canvas.width=image.width/<span class=\"number\">2</span>;</span><br><span class=\"line\">                canvas.height=image.width/<span class=\"number\">2</span>*(image.height/image.width);</span><br><span class=\"line\">                context.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">                newURL=canvas.toDataURL(<span class=\"string\">'image/jpeg'</span>,<span class=\"number\">0.5</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> base=newURL.substr(<span class=\"number\">23</span>); </span><br><span class=\"line\">                newFile=atob(base);</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reader.readAsDataURL(files[i]);</span><br><span class=\"line\">        filesArray.push(newURL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码实现了将经过转换的图片的base64编码放入一个数组中，将这些代码传给后台。<br>这里有一点，本身base64可以利用javascript的window.atob()实现base64的转码，但是简单利用该函数进行转码不能转回图片，还需要blob对象中的一些东西，关于这个对象我并没有深入研究，只是知道，对于该对象的研究我会在接下来继续研究。后台可以解析base64，所以直接把base64传给后台也可以，关于base64转码的实现可以参考稀土掘金中的文章<a href=\"http://gold.xitu.io/entry/560a726960b2ad8a22a538fc\" target=\"_blank\" rel=\"noopener\">@用Canvas技术压缩要上传的图片</a>。</p>\n<h2 id=\"五-利用XMLHttpRequest-FormData实现文件上传\"><a href=\"#五-利用XMLHttpRequest-FormData实现文件上传\" class=\"headerlink\" title=\"五.利用XMLHttpRequest,FormData实现文件上传\"></a>五.利用XMLHttpRequest,FormData实现文件上传</h2><h3 id=\"1-FormData对象\"><a href=\"#1-FormData对象\" class=\"headerlink\" title=\"1.FormData对象\"></a>1.FormData对象</h3><p>利用<code>FormData</code>对象可以创建一系列键值对来模拟一个完整的表单，然后再使用XMLHttpRequest发送这个表单，这样就不用像传统的表单那样写form。所以在新建一个FormData对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data=<span class=\"keyword\">new</span> FormData();</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以使用append()方法向该对象里添加字段，形成可以发送给后台的键值对。</p>\n<h3 id=\"2-XMLHttpRequest对象\"><a href=\"#2-XMLHttpRequest对象\" class=\"headerlink\" title=\"2.XMLHttpRequest对象\"></a>2.XMLHttpRequest对象</h3><p>通过XMLHttpRequest可以很容易取回URL上的数据资源，可以取回的数据不仅仅是XML，除了支持HTTP还支持file，ftp协议。<br>通过下列代码可以获得一个XMLHttpRequest()实例。 然后利用open()初始化请求。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.open(<span class=\"string\">'post'</span>,<span class=\"string\">'uploader.php'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.send(data);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-open方法\"><a href=\"#3-open方法\" class=\"headerlink\" title=\"3.open方法\"></a>3.open方法</h3><p>open可以写入的参数如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> open(</span><br><span class=\"line\">   DOMString method,</span><br><span class=\"line\">   DOMString url,</span><br><span class=\"line\">   optional boolean <span class=\"keyword\">async</span>,</span><br><span class=\"line\">   optional DOMString user,</span><br><span class=\"line\">   optional DOMString password</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>method：请求所使用的HTTP方法：例如’GET’，’POST’，’PUT’，’DELETE’等，但是如果下个参数是非HTTP(S)的URL，则忽略该参数。</li>\n<li>url：该请求所要访问的URL</li>\n<li>async：一个可选的布尔值参数，默认为true,意味着是否执行异步操作，如果值为false,则send()方法不会返回任何东西，直到接受到了服务器的返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。这个值必须是true,如果multipart 属性是true，否则将会出现一个意外。</li>\n<li>user：用户名,可选参数,为授权使用;默认参数为空string.</li>\n<li>password：密码,可选参数,为授权使用;默认参数为空string.<h3 id=\"4-send-方法\"><a href=\"#4-send-方法\" class=\"headerlink\" title=\"4.send()方法\"></a>4.send()方法</h3>发送请求. 如果该请求是异步模式(默认),该方法会立刻返回. 相反,如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回.<h2 id=\"综合以上，简单的一个上传图片代码实现如下：\"><a href=\"#综合以上，简单的一个上传图片代码实现如下：\" class=\"headerlink\" title=\"综合以上，简单的一个上传图片代码实现如下：\"></a>综合以上，简单的一个上传图片代码实现如下：</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建缩略图样式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createThumbnailFromUrl</span>(<span class=\"params\">context,fileURL</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//创建元素</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> img=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>),</span><br><span class=\"line\">         imgBox=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</span><br><span class=\"line\">         imgContent=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">     <span class=\"comment\">//添加Class    </span></span><br><span class=\"line\">     imgBox.classList.add(<span class=\"string\">'img-box'</span>);</span><br><span class=\"line\">     imgContent.classList.add(<span class=\"string\">'img-content'</span>);</span><br><span class=\"line\">     <span class=\"comment\">//动态插入创建的元素 </span></span><br><span class=\"line\">     context.appendChild(imgContent);</span><br><span class=\"line\">     imgContent.appendChild(imgBox);</span><br><span class=\"line\">     imgBox.appendChild(img);</span><br><span class=\"line\">     <span class=\"comment\">//创建canvas重绘缩略图    </span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> context=canvas.getContext(<span class=\"string\">'2d'</span>); </span><br><span class=\"line\">     <span class=\"comment\">// 创建image对象</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> image=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">     image.src=fileURL;</span><br><span class=\"line\">     image.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        canvas.width=<span class=\"number\">120</span>;</span><br><span class=\"line\">        canvas.height=<span class=\"number\">120</span>*(image.height/image.width);</span><br><span class=\"line\">        context.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">        img.src=canvas.toDataURL(<span class=\"string\">'image/png'</span>,<span class=\"number\">0.5</span>);  </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> uploader=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#uploader'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> button=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#button'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> upbox=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.upbox'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> files,filesLen,newFileURL,newFile;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filesArray=[],newURL;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#test'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">//input选框change事件，取得文件，创建缩略图</span></span><br><span class=\"line\">    uploader.addEventListener(<span class=\"string\">'change'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> target=e.target;</span><br><span class=\"line\">        files=target.files;</span><br><span class=\"line\">        filesLen=files.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;filesLen;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> reader=<span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">            <span class=\"comment\">//文件读取结束后要做的事</span></span><br><span class=\"line\">            reader.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//读取用户选择的文件</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> fileURL=event.target.result;</span><br><span class=\"line\">                <span class=\"comment\">//根据读取的文件创建缩略图</span></span><br><span class=\"line\">                createThumbnailFromUrl(upbox,fileURL);</span><br><span class=\"line\">                <span class=\"comment\">//上传前改变图片的格式</span></span><br><span class=\"line\">                <span class=\"comment\">//创建canvas重绘缩略图    </span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> canvas=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> context=canvas.getContext(<span class=\"string\">'2d'</span>); </span><br><span class=\"line\">                <span class=\"comment\">// 创建image对象</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> image=<span class=\"keyword\">new</span> Image();<span class=\"comment\">//这里把fileURL赋值给src，就可以拿到用户选择的图片，此时可以获取到图片的宽高</span></span><br><span class=\"line\">                image.src=fileURL;</span><br><span class=\"line\">                image.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    canvas.width=image.width/<span class=\"number\">2</span>;</span><br><span class=\"line\">                    canvas.height=image.width/<span class=\"number\">2</span>*(image.height/image.width);</span><br><span class=\"line\">                    context.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">                    newURL=canvas.toDataURL(<span class=\"string\">'image/jpeg'</span>,<span class=\"number\">0.5</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> base=newURL.substr(<span class=\"number\">23</span>); </span><br><span class=\"line\">                    newFile=atob(base);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            reader.readAsDataURL(files[i]);</span><br><span class=\"line\">            filesArray.push(newURL);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">//button按钮点击上传</span></span><br><span class=\"line\">    button.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(filesLen.length!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> data=<span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//将所有的经过转码后的base64组成的数组传给后台</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i&lt;filesLen)&#123;</span><br><span class=\"line\">                data.append(<span class=\"string\">'file'</span>+i,filesArray[i]);</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">            xhr.open(<span class=\"string\">'post'</span>,<span class=\"string\">'uploader.php'</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">            xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.readyState==<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(xhr.responseText);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            xhr.send(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"第一篇文章","date":"2016-03-20T03:25:38.000Z","comments":1,"_content":"&emsp;&emsp;这个星期前两天因为要发版，所以在星期一二很忙，真心累的厉害，因为要发版。终于在周四晚上发版了，大家都很拼，真心觉得公司很有前途。周四时候，我突然想起来要弄个博客，所以自己查了查，找到github与hexo，hexo生成静态页面，github提供免费服务，所以二话不说，直接闹起，在这些天的研究中，感受到了github的强大，在那上面弄项目真心感觉很爽。同时也觉得nodejs真的是非常强大，各种插件，各种玩儿。![icon](/img/macbook.jpg)<!--more-->\n&emsp;&emsp;hexo写博客支持markdown格式，第一次接触markdown是在上传github上面的第一个项目时候写read.md时候开始写的，挺好玩儿的，我的第一个github上面的项目是要求我做一个类支付宝的密码输入，本来自己找的插件，但是发现bug太多，所以直接自己写了，写的过程中，发现也不难，开始慢慢的接触jquery插件如何写，开始接触，现在项目已经上传github，网址为 https://github.com/MrZhang123/jquery.pwd ，起初传上去是为了让别人看看，改改，因为有缺陷还，不过貌似没人看，但是也挺开心，自己弄得第一个github项目。\n&emsp;&emsp;玩儿hexo，github，git是必不可少的，因为公司用的git，有客户端smartgit，所以在公司上传项目很简答，但是，我可能就是一个爱折腾的人，我在自己的电脑上，装的是命令行的git，喜欢命令，感觉蛮帅气（有点儿装了，嘿嘿），用这个我可以学习一下git，现在用git的人越来越多，我很庆幸，公司用的是git而不是svn，因为经常见网上有文章写git用法什么的，说明git技能还是蛮重要的，所以我觉得我有必要学习下。顺便提一句，最近准备买电脑了，买了电脑后准备上linux+win双系统，开始慢慢熟悉liux，慢慢学着用命令行。\n&emsp;&emsp;这是我的第一篇正式文章，记录下来，以作纪念。\n  ","source":"_posts/article-1.md","raw":"---\ntitle: 第一篇文章\ndate: 2016-03-20 11:25:38\ntags: 生活\ncomments: true\ncategories: \"生活\"\n---\n&emsp;&emsp;这个星期前两天因为要发版，所以在星期一二很忙，真心累的厉害，因为要发版。终于在周四晚上发版了，大家都很拼，真心觉得公司很有前途。周四时候，我突然想起来要弄个博客，所以自己查了查，找到github与hexo，hexo生成静态页面，github提供免费服务，所以二话不说，直接闹起，在这些天的研究中，感受到了github的强大，在那上面弄项目真心感觉很爽。同时也觉得nodejs真的是非常强大，各种插件，各种玩儿。![icon](/img/macbook.jpg)<!--more-->\n&emsp;&emsp;hexo写博客支持markdown格式，第一次接触markdown是在上传github上面的第一个项目时候写read.md时候开始写的，挺好玩儿的，我的第一个github上面的项目是要求我做一个类支付宝的密码输入，本来自己找的插件，但是发现bug太多，所以直接自己写了，写的过程中，发现也不难，开始慢慢的接触jquery插件如何写，开始接触，现在项目已经上传github，网址为 https://github.com/MrZhang123/jquery.pwd ，起初传上去是为了让别人看看，改改，因为有缺陷还，不过貌似没人看，但是也挺开心，自己弄得第一个github项目。\n&emsp;&emsp;玩儿hexo，github，git是必不可少的，因为公司用的git，有客户端smartgit，所以在公司上传项目很简答，但是，我可能就是一个爱折腾的人，我在自己的电脑上，装的是命令行的git，喜欢命令，感觉蛮帅气（有点儿装了，嘿嘿），用这个我可以学习一下git，现在用git的人越来越多，我很庆幸，公司用的是git而不是svn，因为经常见网上有文章写git用法什么的，说明git技能还是蛮重要的，所以我觉得我有必要学习下。顺便提一句，最近准备买电脑了，买了电脑后准备上linux+win双系统，开始慢慢熟悉liux，慢慢学着用命令行。\n&emsp;&emsp;这是我的第一篇正式文章，记录下来，以作纪念。\n  ","slug":"article-1","published":1,"updated":"2016-07-13T19:05:46.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoas000dzrv4fwae7nlj","content":"<p>&emsp;&emsp;这个星期前两天因为要发版，所以在星期一二很忙，真心累的厉害，因为要发版。终于在周四晚上发版了，大家都很拼，真心觉得公司很有前途。周四时候，我突然想起来要弄个博客，所以自己查了查，找到github与hexo，hexo生成静态页面，github提供免费服务，所以二话不说，直接闹起，在这些天的研究中，感受到了github的强大，在那上面弄项目真心感觉很爽。同时也觉得nodejs真的是非常强大，各种插件，各种玩儿。<img src=\"/img/macbook.jpg\" alt=\"icon\"><a id=\"more\"></a><br>&emsp;&emsp;hexo写博客支持markdown格式，第一次接触markdown是在上传github上面的第一个项目时候写read.md时候开始写的，挺好玩儿的，我的第一个github上面的项目是要求我做一个类支付宝的密码输入，本来自己找的插件，但是发现bug太多，所以直接自己写了，写的过程中，发现也不难，开始慢慢的接触jquery插件如何写，开始接触，现在项目已经上传github，网址为 <a href=\"https://github.com/MrZhang123/jquery.pwd\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/jquery.pwd</a> ，起初传上去是为了让别人看看，改改，因为有缺陷还，不过貌似没人看，但是也挺开心，自己弄得第一个github项目。<br>&emsp;&emsp;玩儿hexo，github，git是必不可少的，因为公司用的git，有客户端smartgit，所以在公司上传项目很简答，但是，我可能就是一个爱折腾的人，我在自己的电脑上，装的是命令行的git，喜欢命令，感觉蛮帅气（有点儿装了，嘿嘿），用这个我可以学习一下git，现在用git的人越来越多，我很庆幸，公司用的是git而不是svn，因为经常见网上有文章写git用法什么的，说明git技能还是蛮重要的，所以我觉得我有必要学习下。顺便提一句，最近准备买电脑了，买了电脑后准备上linux+win双系统，开始慢慢熟悉liux，慢慢学着用命令行。<br>&emsp;&emsp;这是我的第一篇正式文章，记录下来，以作纪念。</p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;这个星期前两天因为要发版，所以在星期一二很忙，真心累的厉害，因为要发版。终于在周四晚上发版了，大家都很拼，真心觉得公司很有前途。周四时候，我突然想起来要弄个博客，所以自己查了查，找到github与hexo，hexo生成静态页面，github提供免费服务，所以二话不说，直接闹起，在这些天的研究中，感受到了github的强大，在那上面弄项目真心感觉很爽。同时也觉得nodejs真的是非常强大，各种插件，各种玩儿。<img src=\"/img/macbook.jpg\" alt=\"icon\">","more":"<br>&emsp;&emsp;hexo写博客支持markdown格式，第一次接触markdown是在上传github上面的第一个项目时候写read.md时候开始写的，挺好玩儿的，我的第一个github上面的项目是要求我做一个类支付宝的密码输入，本来自己找的插件，但是发现bug太多，所以直接自己写了，写的过程中，发现也不难，开始慢慢的接触jquery插件如何写，开始接触，现在项目已经上传github，网址为 <a href=\"https://github.com/MrZhang123/jquery.pwd\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/jquery.pwd</a> ，起初传上去是为了让别人看看，改改，因为有缺陷还，不过貌似没人看，但是也挺开心，自己弄得第一个github项目。<br>&emsp;&emsp;玩儿hexo，github，git是必不可少的，因为公司用的git，有客户端smartgit，所以在公司上传项目很简答，但是，我可能就是一个爱折腾的人，我在自己的电脑上，装的是命令行的git，喜欢命令，感觉蛮帅气（有点儿装了，嘿嘿），用这个我可以学习一下git，现在用git的人越来越多，我很庆幸，公司用的是git而不是svn，因为经常见网上有文章写git用法什么的，说明git技能还是蛮重要的，所以我觉得我有必要学习下。顺便提一句，最近准备买电脑了，买了电脑后准备上linux+win双系统，开始慢慢熟悉liux，慢慢学着用命令行。<br>&emsp;&emsp;这是我的第一篇正式文章，记录下来，以作纪念。</p>"},{"title":"一些想法","date":"2016-03-21T13:37:42.000Z","comments":1,"_content":"&emsp;&emsp;今天下班比较早，本来想的要看书呢，结果都走了，所以我也就下班了，回来时候回顾自己的一天，感觉今天什么都没学下，瞬间觉得自己今天没多少收获，本来早晨时候任务很多，但是很多任务都不是很明确，让我很迷茫，不知道该怎么弄，后来问了问陈哥，才发现这些任务好几个都是能完成一半，自己的强迫症瞬间犯了，我不喜欢我的任务栏中有那么多任务，但是又完成不了，着实让我觉得难受啊！<!--more-->\n&emsp;&emsp;回想起自己的工作，来到工作这半年多来，感觉并没多少成长，这里我所说的成长指的是并没有从无到有学会一个自己曾经从没接触过的东西，有时候会觉得每天就是改改样式，改改页面，前端和后台的交互我都不需要写这样好么？说实话，自己也不是说改那些就改的很好，总是很粗心，陈哥说我眼高手低，可能怎得是这样，自己以后一定要改正。去年元旦的时候，给自己定下要在2016年多读书，要每天跑步，要学习掌握前端框架，但是现在都快3月底了，貌似只做到了每天早晨跑步，其他都没有，前几天没事儿干，一直都在看《javascript高级程序设计》，感觉收获蛮多的，讲的javascript非常细。公司的要求支持IE9+，所以我感觉用原生js是可以用的。关于框架，有时候觉得可能是自己知道的太多了，学什么犹犹豫豫的，这样下去不太好，这样犹豫下去什么都学不会，所以要选一个自己感兴趣的去钻研。\n&emsp;&emsp;晚上回来的时候听说同学跳槽涨工资了，自己觉得可能心里有些不平衡，所以更加心烦，开始考虑到底要不要换工作，什么时候需要换工作，反正各种跟跳槽有关的想法出现在我的脑海中，感觉自己淡定不了了，从小到大一直都是这样，这样真心不好，自己的抗干扰能力太差了，外界一点儿风吹草动自己就淡定不下来，就觉得应该怎么样怎么样，这着实不应该，无论别人如何，自己做好自己就行，干嘛非得想别人怎么样怎么样呢。不过回想起来，确实是自己也出问题了，每到周六日就想到玩儿玩儿玩儿，这么玩儿下去，必然学习的机会少，所以在这一点上以后一定要注意点儿，毕竟公司其实也学不到你想学的东西，全靠自己，关于每天的时间规划，应该要仔细点儿，有时候真是觉得一天不知道干了些什么，反正一天就过去了。心若冰清，天塌不惊，淡定...\n&emsp;&emsp;本来是弄个博客要记录些技术，成日记本了，不管怎么说，加油吧！![icon](/img/fight.jpg)\n","source":"_posts/article-2.md","raw":"---\ntitle: 一些想法\ndate: 2016-03-21 21:37:42\ntags: 生活\ncomments: true\ncategories: \"生活\"\n---\n&emsp;&emsp;今天下班比较早，本来想的要看书呢，结果都走了，所以我也就下班了，回来时候回顾自己的一天，感觉今天什么都没学下，瞬间觉得自己今天没多少收获，本来早晨时候任务很多，但是很多任务都不是很明确，让我很迷茫，不知道该怎么弄，后来问了问陈哥，才发现这些任务好几个都是能完成一半，自己的强迫症瞬间犯了，我不喜欢我的任务栏中有那么多任务，但是又完成不了，着实让我觉得难受啊！<!--more-->\n&emsp;&emsp;回想起自己的工作，来到工作这半年多来，感觉并没多少成长，这里我所说的成长指的是并没有从无到有学会一个自己曾经从没接触过的东西，有时候会觉得每天就是改改样式，改改页面，前端和后台的交互我都不需要写这样好么？说实话，自己也不是说改那些就改的很好，总是很粗心，陈哥说我眼高手低，可能怎得是这样，自己以后一定要改正。去年元旦的时候，给自己定下要在2016年多读书，要每天跑步，要学习掌握前端框架，但是现在都快3月底了，貌似只做到了每天早晨跑步，其他都没有，前几天没事儿干，一直都在看《javascript高级程序设计》，感觉收获蛮多的，讲的javascript非常细。公司的要求支持IE9+，所以我感觉用原生js是可以用的。关于框架，有时候觉得可能是自己知道的太多了，学什么犹犹豫豫的，这样下去不太好，这样犹豫下去什么都学不会，所以要选一个自己感兴趣的去钻研。\n&emsp;&emsp;晚上回来的时候听说同学跳槽涨工资了，自己觉得可能心里有些不平衡，所以更加心烦，开始考虑到底要不要换工作，什么时候需要换工作，反正各种跟跳槽有关的想法出现在我的脑海中，感觉自己淡定不了了，从小到大一直都是这样，这样真心不好，自己的抗干扰能力太差了，外界一点儿风吹草动自己就淡定不下来，就觉得应该怎么样怎么样，这着实不应该，无论别人如何，自己做好自己就行，干嘛非得想别人怎么样怎么样呢。不过回想起来，确实是自己也出问题了，每到周六日就想到玩儿玩儿玩儿，这么玩儿下去，必然学习的机会少，所以在这一点上以后一定要注意点儿，毕竟公司其实也学不到你想学的东西，全靠自己，关于每天的时间规划，应该要仔细点儿，有时候真是觉得一天不知道干了些什么，反正一天就过去了。心若冰清，天塌不惊，淡定...\n&emsp;&emsp;本来是弄个博客要记录些技术，成日记本了，不管怎么说，加油吧！![icon](/img/fight.jpg)\n","slug":"article-2","published":1,"updated":"2016-07-13T19:05:02.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoau000izrv4c76j68vv","content":"<p>&emsp;&emsp;今天下班比较早，本来想的要看书呢，结果都走了，所以我也就下班了，回来时候回顾自己的一天，感觉今天什么都没学下，瞬间觉得自己今天没多少收获，本来早晨时候任务很多，但是很多任务都不是很明确，让我很迷茫，不知道该怎么弄，后来问了问陈哥，才发现这些任务好几个都是能完成一半，自己的强迫症瞬间犯了，我不喜欢我的任务栏中有那么多任务，但是又完成不了，着实让我觉得难受啊！<a id=\"more\"></a><br>&emsp;&emsp;回想起自己的工作，来到工作这半年多来，感觉并没多少成长，这里我所说的成长指的是并没有从无到有学会一个自己曾经从没接触过的东西，有时候会觉得每天就是改改样式，改改页面，前端和后台的交互我都不需要写这样好么？说实话，自己也不是说改那些就改的很好，总是很粗心，陈哥说我眼高手低，可能怎得是这样，自己以后一定要改正。去年元旦的时候，给自己定下要在2016年多读书，要每天跑步，要学习掌握前端框架，但是现在都快3月底了，貌似只做到了每天早晨跑步，其他都没有，前几天没事儿干，一直都在看《javascript高级程序设计》，感觉收获蛮多的，讲的javascript非常细。公司的要求支持IE9+，所以我感觉用原生js是可以用的。关于框架，有时候觉得可能是自己知道的太多了，学什么犹犹豫豫的，这样下去不太好，这样犹豫下去什么都学不会，所以要选一个自己感兴趣的去钻研。<br>&emsp;&emsp;晚上回来的时候听说同学跳槽涨工资了，自己觉得可能心里有些不平衡，所以更加心烦，开始考虑到底要不要换工作，什么时候需要换工作，反正各种跟跳槽有关的想法出现在我的脑海中，感觉自己淡定不了了，从小到大一直都是这样，这样真心不好，自己的抗干扰能力太差了，外界一点儿风吹草动自己就淡定不下来，就觉得应该怎么样怎么样，这着实不应该，无论别人如何，自己做好自己就行，干嘛非得想别人怎么样怎么样呢。不过回想起来，确实是自己也出问题了，每到周六日就想到玩儿玩儿玩儿，这么玩儿下去，必然学习的机会少，所以在这一点上以后一定要注意点儿，毕竟公司其实也学不到你想学的东西，全靠自己，关于每天的时间规划，应该要仔细点儿，有时候真是觉得一天不知道干了些什么，反正一天就过去了。心若冰清，天塌不惊，淡定…<br>&emsp;&emsp;本来是弄个博客要记录些技术，成日记本了，不管怎么说，加油吧！<img src=\"/img/fight.jpg\" alt=\"icon\"></p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;今天下班比较早，本来想的要看书呢，结果都走了，所以我也就下班了，回来时候回顾自己的一天，感觉今天什么都没学下，瞬间觉得自己今天没多少收获，本来早晨时候任务很多，但是很多任务都不是很明确，让我很迷茫，不知道该怎么弄，后来问了问陈哥，才发现这些任务好几个都是能完成一半，自己的强迫症瞬间犯了，我不喜欢我的任务栏中有那么多任务，但是又完成不了，着实让我觉得难受啊！","more":"<br>&emsp;&emsp;回想起自己的工作，来到工作这半年多来，感觉并没多少成长，这里我所说的成长指的是并没有从无到有学会一个自己曾经从没接触过的东西，有时候会觉得每天就是改改样式，改改页面，前端和后台的交互我都不需要写这样好么？说实话，自己也不是说改那些就改的很好，总是很粗心，陈哥说我眼高手低，可能怎得是这样，自己以后一定要改正。去年元旦的时候，给自己定下要在2016年多读书，要每天跑步，要学习掌握前端框架，但是现在都快3月底了，貌似只做到了每天早晨跑步，其他都没有，前几天没事儿干，一直都在看《javascript高级程序设计》，感觉收获蛮多的，讲的javascript非常细。公司的要求支持IE9+，所以我感觉用原生js是可以用的。关于框架，有时候觉得可能是自己知道的太多了，学什么犹犹豫豫的，这样下去不太好，这样犹豫下去什么都学不会，所以要选一个自己感兴趣的去钻研。<br>&emsp;&emsp;晚上回来的时候听说同学跳槽涨工资了，自己觉得可能心里有些不平衡，所以更加心烦，开始考虑到底要不要换工作，什么时候需要换工作，反正各种跟跳槽有关的想法出现在我的脑海中，感觉自己淡定不了了，从小到大一直都是这样，这样真心不好，自己的抗干扰能力太差了，外界一点儿风吹草动自己就淡定不下来，就觉得应该怎么样怎么样，这着实不应该，无论别人如何，自己做好自己就行，干嘛非得想别人怎么样怎么样呢。不过回想起来，确实是自己也出问题了，每到周六日就想到玩儿玩儿玩儿，这么玩儿下去，必然学习的机会少，所以在这一点上以后一定要注意点儿，毕竟公司其实也学不到你想学的东西，全靠自己，关于每天的时间规划，应该要仔细点儿，有时候真是觉得一天不知道干了些什么，反正一天就过去了。心若冰清，天塌不惊，淡定…<br>&emsp;&emsp;本来是弄个博客要记录些技术，成日记本了，不管怎么说，加油吧！<img src=\"/img/fight.jpg\" alt=\"icon\"></p>"},{"title":"初探ES6——轮播图实践总结","date":"2016-04-10T16:10:54.000Z","comments":1,"_content":"&emsp;&emsp;最近因为同学的一个轮播图不会写，让我萌生了用ES6写一个轮播图的想法（本人喜欢这些玩儿一些新的东西），以前就知道ES6，但是一直没有学，现在终于下决心学了，借助阮一峰老师的书[ECMAScript 6 入门](http://es6.ruanyifeng.com/) 和Youtube上面老外的视频学习ES6非常不错。阮一峰老师的书写的非常详细，推荐想学习的ES6的同学仔细看看。本篇文章会总结在实践中用到的ES6的知识。\n## 模板字符串\n这是我非常喜欢的ES6的特点之一，非常直观的反应出变量和字符串之间的关系，在ES5中，如果我们想在字符串中添加变量，需要用如下写法：\n```javascript\nanimate(box, 'translate(-' + itemWidth * num + 'px,0)', 1000, function () {\n    box.style.transitionDuration = '';\n    box.style.transform = 'translate(-800px,0)';\n    flag = true;\n});\n```\n现在用ES6的模板字符串，可以直接把字符串和变量相结合，更加易懂。\n```javascript\nanimate(box, `translate(-${itemWidth*num}px,0)`, 1000, function() {\n    box.style.transitionDuration = '';\n    box.style.transform = `translate(-${itemWidth*(item.length-2)}px,0)`;\n    flag = true;\n});\n```\n<!--more-->\n是不是非常直观方便，从上面的两个简单示例中可以看出，在ES6中，字符串用反引号（``）标识，这一点需要知道。\n还有一个特点，模板字符串可以输出折行的字符串，这在ES5传统字符串中是无法做到的，必须借助（\\n），且不能在书写时候写入回车，但是在ES6的字符串模板中，可以直接写入回车，空格，然后在字符串输出时候直接输出，非常方便。\n```javascript\nlet myString=`abc\nde\nffff  \nfas`;\nconsole.log(myString);\n/*输出abc\nde\nffff  \nfas*/\n```\n## 对函数的扩展\n### 1.给函数设置默认值\n在对函数的扩展中，添加了一项给函数设置默认值的功能，这个功能可以说是非常赞的。是否记得我们在ES5中是怎么给函数设置默认值？\n```javascript\nfunction test(a,b,c){\n    var a=a||10;\n    var a=b||15;\n    var c=c||20;\n    console.log(a+b+c);\n}\n```\n这里我们设置默认值，可以达到自己的预期效果，直到有一天，我们把a=0传入，这时候，我们这么写就不对了，对于程序来说，0就是false，所以a会取默认值10，从而达不到我们预期的效果。但是ES6为我们提供非常好的设置默认值的方式。上面的代码可以改写成下面的这样：\n```javascript\nfunction test(a=10,b=15,c=20){\n    console.log(a+b+c);\n}\n```\n### 2.箭头函数\n了解Coffescript的同学应该清楚，Cofficescript的强大之处在于它的无处不在的箭头函数，写起来非常爽，现在，ES6正式引入箭头函数，让我们的程序可以得到简化，例如：\n```javascript\n//ES5的写法\nvar test = function (a,b){\n    return a+b;\n}\n//ES6的箭头函数\nvar test2 = test(a,b)=>a+b;\n```\n在写轮播时候，需要鼠标移动到下面的这个小圆点在小圆点类数组对象中是第几个，从而才能让图运动到正确位置，在ES5的时候，我们需要给当前这个对象添加属性，写起来比较繁琐，写法如下：\n```javascript\nvar liList = document.querySelectorAll('li');\nfor(var i=0;i<liList.length;i++){\n    liList[i].index=i;\n    liList[i].addEventListener('mouseenter',function(){\n        console.log(this.index);\n    },false);\n}\n```\n这个this.index属性就是当前的鼠标放上去的元素的索引，然后根据这个索引去得到当前的元素。但是在ES6中，我们可以直接使用箭头函数以及在数组中新引入的findIndex来找到当前的活动元素的索引，代码如下：\n```javascript\nlet liList = document.querySelectorAll('li');\nlet ArrayliList=Array.form(liList);\nfor(var i=0;i<liList.length;i++){\n    liList[i].index=i;\n    liList[i].addEventListener('mouseenter',function(){\n        let thisIndex = ArrayliList.findIndex((n) => n == this);\n    },false);\n}\n```\n以上代码得到的thisIndex就是当前鼠标放上去的索引，这里我对箭头函数中n这个参数的理解是，传入参数n后会遍历数组中的对象，从而找到与this相等的那个对象，然后返回它的索引，这里用到<font color='red'>Array.from()，这是一个ES6中数组中新增的方法，可以将类数组转换成数组。</font>\n## ES6的for...of循环\n上面的JS代码循环用了for，其实可以用ES6中的for...of循环去代替，这样写法更加简洁。是否记得JS中的for...in循环，这个循环可以循环键值对中的键，但是无法循环值，而for...of的出现正是为了弥补它的不足，for...of循环可以使用的范围包括数组、Set和Map结构、某些类似数组的对象（比如arguments对象、DOM NodeList对象）、Generator对象，以及字符串。所以我们可以利用该循环替代for循环，但是这里要注意一点<font color='red'>如果直接用for...of循环，在chrome49下会报错，官方已证实这是chrome49的BUG，将会在chrome51中修复</font>，所以我在写的时候，利用Array.from()将NodeList对象转换为数组，这样可以放心操作，代码如下：\n```javascript\nlet liList = document.querySelectorAll('li');\nlet ArrayliList=Array.form(liList);\nfor(let li of liList){\n    li.addEventListener('mouseenter',function(){\n        let thisIndex = ArrayliList.findIndex((n) => n == this);\n    },false);\n}\n```\n是不是非常简洁:)\n以上就是最近几天对ES6的初探的总结，感觉仅仅只是这些就已经让我感受到ES6的魅力了，接下来，我会再做几个demo，慢慢去熟悉这个新的但是非常好玩儿的ES6。\n\n\n","source":"_posts/es6-Practice.md","raw":"---\ntitle: 初探ES6——轮播图实践总结\ndate: 2016-04-11 00:10:54\ntags: Javascript\ncomments: true\ncategories: \"Javascript\"\n---\n&emsp;&emsp;最近因为同学的一个轮播图不会写，让我萌生了用ES6写一个轮播图的想法（本人喜欢这些玩儿一些新的东西），以前就知道ES6，但是一直没有学，现在终于下决心学了，借助阮一峰老师的书[ECMAScript 6 入门](http://es6.ruanyifeng.com/) 和Youtube上面老外的视频学习ES6非常不错。阮一峰老师的书写的非常详细，推荐想学习的ES6的同学仔细看看。本篇文章会总结在实践中用到的ES6的知识。\n## 模板字符串\n这是我非常喜欢的ES6的特点之一，非常直观的反应出变量和字符串之间的关系，在ES5中，如果我们想在字符串中添加变量，需要用如下写法：\n```javascript\nanimate(box, 'translate(-' + itemWidth * num + 'px,0)', 1000, function () {\n    box.style.transitionDuration = '';\n    box.style.transform = 'translate(-800px,0)';\n    flag = true;\n});\n```\n现在用ES6的模板字符串，可以直接把字符串和变量相结合，更加易懂。\n```javascript\nanimate(box, `translate(-${itemWidth*num}px,0)`, 1000, function() {\n    box.style.transitionDuration = '';\n    box.style.transform = `translate(-${itemWidth*(item.length-2)}px,0)`;\n    flag = true;\n});\n```\n<!--more-->\n是不是非常直观方便，从上面的两个简单示例中可以看出，在ES6中，字符串用反引号（``）标识，这一点需要知道。\n还有一个特点，模板字符串可以输出折行的字符串，这在ES5传统字符串中是无法做到的，必须借助（\\n），且不能在书写时候写入回车，但是在ES6的字符串模板中，可以直接写入回车，空格，然后在字符串输出时候直接输出，非常方便。\n```javascript\nlet myString=`abc\nde\nffff  \nfas`;\nconsole.log(myString);\n/*输出abc\nde\nffff  \nfas*/\n```\n## 对函数的扩展\n### 1.给函数设置默认值\n在对函数的扩展中，添加了一项给函数设置默认值的功能，这个功能可以说是非常赞的。是否记得我们在ES5中是怎么给函数设置默认值？\n```javascript\nfunction test(a,b,c){\n    var a=a||10;\n    var a=b||15;\n    var c=c||20;\n    console.log(a+b+c);\n}\n```\n这里我们设置默认值，可以达到自己的预期效果，直到有一天，我们把a=0传入，这时候，我们这么写就不对了，对于程序来说，0就是false，所以a会取默认值10，从而达不到我们预期的效果。但是ES6为我们提供非常好的设置默认值的方式。上面的代码可以改写成下面的这样：\n```javascript\nfunction test(a=10,b=15,c=20){\n    console.log(a+b+c);\n}\n```\n### 2.箭头函数\n了解Coffescript的同学应该清楚，Cofficescript的强大之处在于它的无处不在的箭头函数，写起来非常爽，现在，ES6正式引入箭头函数，让我们的程序可以得到简化，例如：\n```javascript\n//ES5的写法\nvar test = function (a,b){\n    return a+b;\n}\n//ES6的箭头函数\nvar test2 = test(a,b)=>a+b;\n```\n在写轮播时候，需要鼠标移动到下面的这个小圆点在小圆点类数组对象中是第几个，从而才能让图运动到正确位置，在ES5的时候，我们需要给当前这个对象添加属性，写起来比较繁琐，写法如下：\n```javascript\nvar liList = document.querySelectorAll('li');\nfor(var i=0;i<liList.length;i++){\n    liList[i].index=i;\n    liList[i].addEventListener('mouseenter',function(){\n        console.log(this.index);\n    },false);\n}\n```\n这个this.index属性就是当前的鼠标放上去的元素的索引，然后根据这个索引去得到当前的元素。但是在ES6中，我们可以直接使用箭头函数以及在数组中新引入的findIndex来找到当前的活动元素的索引，代码如下：\n```javascript\nlet liList = document.querySelectorAll('li');\nlet ArrayliList=Array.form(liList);\nfor(var i=0;i<liList.length;i++){\n    liList[i].index=i;\n    liList[i].addEventListener('mouseenter',function(){\n        let thisIndex = ArrayliList.findIndex((n) => n == this);\n    },false);\n}\n```\n以上代码得到的thisIndex就是当前鼠标放上去的索引，这里我对箭头函数中n这个参数的理解是，传入参数n后会遍历数组中的对象，从而找到与this相等的那个对象，然后返回它的索引，这里用到<font color='red'>Array.from()，这是一个ES6中数组中新增的方法，可以将类数组转换成数组。</font>\n## ES6的for...of循环\n上面的JS代码循环用了for，其实可以用ES6中的for...of循环去代替，这样写法更加简洁。是否记得JS中的for...in循环，这个循环可以循环键值对中的键，但是无法循环值，而for...of的出现正是为了弥补它的不足，for...of循环可以使用的范围包括数组、Set和Map结构、某些类似数组的对象（比如arguments对象、DOM NodeList对象）、Generator对象，以及字符串。所以我们可以利用该循环替代for循环，但是这里要注意一点<font color='red'>如果直接用for...of循环，在chrome49下会报错，官方已证实这是chrome49的BUG，将会在chrome51中修复</font>，所以我在写的时候，利用Array.from()将NodeList对象转换为数组，这样可以放心操作，代码如下：\n```javascript\nlet liList = document.querySelectorAll('li');\nlet ArrayliList=Array.form(liList);\nfor(let li of liList){\n    li.addEventListener('mouseenter',function(){\n        let thisIndex = ArrayliList.findIndex((n) => n == this);\n    },false);\n}\n```\n是不是非常简洁:)\n以上就是最近几天对ES6的初探的总结，感觉仅仅只是这些就已经让我感受到ES6的魅力了，接下来，我会再做几个demo，慢慢去熟悉这个新的但是非常好玩儿的ES6。\n\n\n","slug":"es6-Practice","published":1,"updated":"2016-08-02T08:37:36.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoax000jzrv42z3k3vtg","content":"<p>&emsp;&emsp;最近因为同学的一个轮播图不会写，让我萌生了用ES6写一个轮播图的想法（本人喜欢这些玩儿一些新的东西），以前就知道ES6，但是一直没有学，现在终于下决心学了，借助阮一峰老师的书<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ECMAScript 6 入门</a> 和Youtube上面老外的视频学习ES6非常不错。阮一峰老师的书写的非常详细，推荐想学习的ES6的同学仔细看看。本篇文章会总结在实践中用到的ES6的知识。</p>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><p>这是我非常喜欢的ES6的特点之一，非常直观的反应出变量和字符串之间的关系，在ES5中，如果我们想在字符串中添加变量，需要用如下写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animate(box, <span class=\"string\">'translate(-'</span> + itemWidth * num + <span class=\"string\">'px,0)'</span>, <span class=\"number\">1000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    box.style.transitionDuration = <span class=\"string\">''</span>;</span><br><span class=\"line\">    box.style.transform = <span class=\"string\">'translate(-800px,0)'</span>;</span><br><span class=\"line\">    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>现在用ES6的模板字符串，可以直接把字符串和变量相结合，更加易懂。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animate(box, <span class=\"string\">`translate(-<span class=\"subst\">$&#123;itemWidth*num&#125;</span>px,0)`</span>, <span class=\"number\">1000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    box.style.transitionDuration = <span class=\"string\">''</span>;</span><br><span class=\"line\">    box.style.transform = <span class=\"string\">`translate(-<span class=\"subst\">$&#123;itemWidth*(item.length<span class=\"number\">-2</span>)&#125;</span>px,0)`</span>;</span><br><span class=\"line\">    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>是不是非常直观方便，从上面的两个简单示例中可以看出，在ES6中，字符串用反引号（<code></code>）标识，这一点需要知道。<br>还有一个特点，模板字符串可以输出折行的字符串，这在ES5传统字符串中是无法做到的，必须借助（\\n），且不能在书写时候写入回车，但是在ES6的字符串模板中，可以直接写入回车，空格，然后在字符串输出时候直接输出，非常方便。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myString=<span class=\"string\">`abc</span></span><br><span class=\"line\"><span class=\"string\">de</span></span><br><span class=\"line\"><span class=\"string\">ffff  </span></span><br><span class=\"line\"><span class=\"string\">fas`</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myString);</span><br><span class=\"line\"><span class=\"comment\">/*输出abc</span></span><br><span class=\"line\"><span class=\"comment\">de</span></span><br><span class=\"line\"><span class=\"comment\">ffff  </span></span><br><span class=\"line\"><span class=\"comment\">fas*/</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对函数的扩展\"><a href=\"#对函数的扩展\" class=\"headerlink\" title=\"对函数的扩展\"></a>对函数的扩展</h2><h3 id=\"1-给函数设置默认值\"><a href=\"#1-给函数设置默认值\" class=\"headerlink\" title=\"1.给函数设置默认值\"></a>1.给函数设置默认值</h3><p>在对函数的扩展中，添加了一项给函数设置默认值的功能，这个功能可以说是非常赞的。是否记得我们在ES5中是怎么给函数设置默认值？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a=a||<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a=b||<span class=\"number\">15</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c=c||<span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a+b+c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们设置默认值，可以达到自己的预期效果，直到有一天，我们把a=0传入，这时候，我们这么写就不对了，对于程序来说，0就是false，所以a会取默认值10，从而达不到我们预期的效果。但是ES6为我们提供非常好的设置默认值的方式。上面的代码可以改写成下面的这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a=<span class=\"number\">10</span>,b=<span class=\"number\">15</span>,c=<span class=\"number\">20</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a+b+c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-箭头函数\"><a href=\"#2-箭头函数\" class=\"headerlink\" title=\"2.箭头函数\"></a>2.箭头函数</h3><p>了解Coffescript的同学应该清楚，Cofficescript的强大之处在于它的无处不在的箭头函数，写起来非常爽，现在，ES6正式引入箭头函数，让我们的程序可以得到简化，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//ES6的箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test2 = test(a,b)=&gt;a+b;</span><br></pre></td></tr></table></figure></p>\n<p>在写轮播时候，需要鼠标移动到下面的这个小圆点在小圆点类数组对象中是第几个，从而才能让图运动到正确位置，在ES5的时候，我们需要给当前这个对象添加属性，写起来比较繁琐，写法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> liList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;liList.length;i++)&#123;</span><br><span class=\"line\">    liList[i].index=i;</span><br><span class=\"line\">    liList[i].addEventListener(<span class=\"string\">'mouseenter'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.index);</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个this.index属性就是当前的鼠标放上去的元素的索引，然后根据这个索引去得到当前的元素。但是在ES6中，我们可以直接使用箭头函数以及在数组中新引入的findIndex来找到当前的活动元素的索引，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> liList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ArrayliList=<span class=\"built_in\">Array</span>.form(liList);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;liList.length;i++)&#123;</span><br><span class=\"line\">    liList[i].index=i;</span><br><span class=\"line\">    liList[i].addEventListener(<span class=\"string\">'mouseenter'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> thisIndex = ArrayliList.findIndex(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n == <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上代码得到的thisIndex就是当前鼠标放上去的索引，这里我对箭头函数中n这个参数的理解是，传入参数n后会遍历数组中的对象，从而找到与this相等的那个对象，然后返回它的索引，这里用到<font color=\"red\">Array.from()，这是一个ES6中数组中新增的方法，可以将类数组转换成数组。</font></p>\n<h2 id=\"ES6的for…of循环\"><a href=\"#ES6的for…of循环\" class=\"headerlink\" title=\"ES6的for…of循环\"></a>ES6的for…of循环</h2><p>上面的JS代码循环用了for，其实可以用ES6中的for…of循环去代替，这样写法更加简洁。是否记得JS中的for…in循环，这个循环可以循环键值对中的键，但是无法循环值，而for…of的出现正是为了弥补它的不足，for…of循环可以使用的范围包括数组、Set和Map结构、某些类似数组的对象（比如arguments对象、DOM NodeList对象）、Generator对象，以及字符串。所以我们可以利用该循环替代for循环，但是这里要注意一点<font color=\"red\">如果直接用for…of循环，在chrome49下会报错，官方已证实这是chrome49的BUG，将会在chrome51中修复</font>，所以我在写的时候，利用Array.from()将NodeList对象转换为数组，这样可以放心操作，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> liList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ArrayliList=<span class=\"built_in\">Array</span>.form(liList);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> li <span class=\"keyword\">of</span> liList)&#123;</span><br><span class=\"line\">    li.addEventListener(<span class=\"string\">'mouseenter'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> thisIndex = ArrayliList.findIndex(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n == <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>是不是非常简洁:)<br>以上就是最近几天对ES6的初探的总结，感觉仅仅只是这些就已经让我感受到ES6的魅力了，接下来，我会再做几个demo，慢慢去熟悉这个新的但是非常好玩儿的ES6。</p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;最近因为同学的一个轮播图不会写，让我萌生了用ES6写一个轮播图的想法（本人喜欢这些玩儿一些新的东西），以前就知道ES6，但是一直没有学，现在终于下决心学了，借助阮一峰老师的书<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">ECMAScript 6 入门</a> 和Youtube上面老外的视频学习ES6非常不错。阮一峰老师的书写的非常详细，推荐想学习的ES6的同学仔细看看。本篇文章会总结在实践中用到的ES6的知识。</p>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><p>这是我非常喜欢的ES6的特点之一，非常直观的反应出变量和字符串之间的关系，在ES5中，如果我们想在字符串中添加变量，需要用如下写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animate(box, <span class=\"string\">'translate(-'</span> + itemWidth * num + <span class=\"string\">'px,0)'</span>, <span class=\"number\">1000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    box.style.transitionDuration = <span class=\"string\">''</span>;</span><br><span class=\"line\">    box.style.transform = <span class=\"string\">'translate(-800px,0)'</span>;</span><br><span class=\"line\">    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>现在用ES6的模板字符串，可以直接把字符串和变量相结合，更加易懂。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">animate(box, <span class=\"string\">`translate(-<span class=\"subst\">$&#123;itemWidth*num&#125;</span>px,0)`</span>, <span class=\"number\">1000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    box.style.transitionDuration = <span class=\"string\">''</span>;</span><br><span class=\"line\">    box.style.transform = <span class=\"string\">`translate(-<span class=\"subst\">$&#123;itemWidth*(item.length<span class=\"number\">-2</span>)&#125;</span>px,0)`</span>;</span><br><span class=\"line\">    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>","more":"<p>是不是非常直观方便，从上面的两个简单示例中可以看出，在ES6中，字符串用反引号（<code></code>）标识，这一点需要知道。<br>还有一个特点，模板字符串可以输出折行的字符串，这在ES5传统字符串中是无法做到的，必须借助（\\n），且不能在书写时候写入回车，但是在ES6的字符串模板中，可以直接写入回车，空格，然后在字符串输出时候直接输出，非常方便。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myString=<span class=\"string\">`abc</span></span><br><span class=\"line\"><span class=\"string\">de</span></span><br><span class=\"line\"><span class=\"string\">ffff  </span></span><br><span class=\"line\"><span class=\"string\">fas`</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myString);</span><br><span class=\"line\"><span class=\"comment\">/*输出abc</span></span><br><span class=\"line\"><span class=\"comment\">de</span></span><br><span class=\"line\"><span class=\"comment\">ffff  </span></span><br><span class=\"line\"><span class=\"comment\">fas*/</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对函数的扩展\"><a href=\"#对函数的扩展\" class=\"headerlink\" title=\"对函数的扩展\"></a>对函数的扩展</h2><h3 id=\"1-给函数设置默认值\"><a href=\"#1-给函数设置默认值\" class=\"headerlink\" title=\"1.给函数设置默认值\"></a>1.给函数设置默认值</h3><p>在对函数的扩展中，添加了一项给函数设置默认值的功能，这个功能可以说是非常赞的。是否记得我们在ES5中是怎么给函数设置默认值？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a=a||<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a=b||<span class=\"number\">15</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c=c||<span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a+b+c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们设置默认值，可以达到自己的预期效果，直到有一天，我们把a=0传入，这时候，我们这么写就不对了，对于程序来说，0就是false，所以a会取默认值10，从而达不到我们预期的效果。但是ES6为我们提供非常好的设置默认值的方式。上面的代码可以改写成下面的这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a=<span class=\"number\">10</span>,b=<span class=\"number\">15</span>,c=<span class=\"number\">20</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a+b+c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-箭头函数\"><a href=\"#2-箭头函数\" class=\"headerlink\" title=\"2.箭头函数\"></a>2.箭头函数</h3><p>了解Coffescript的同学应该清楚，Cofficescript的强大之处在于它的无处不在的箭头函数，写起来非常爽，现在，ES6正式引入箭头函数，让我们的程序可以得到简化，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//ES6的箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test2 = test(a,b)=&gt;a+b;</span><br></pre></td></tr></table></figure></p>\n<p>在写轮播时候，需要鼠标移动到下面的这个小圆点在小圆点类数组对象中是第几个，从而才能让图运动到正确位置，在ES5的时候，我们需要给当前这个对象添加属性，写起来比较繁琐，写法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> liList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;liList.length;i++)&#123;</span><br><span class=\"line\">    liList[i].index=i;</span><br><span class=\"line\">    liList[i].addEventListener(<span class=\"string\">'mouseenter'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.index);</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个this.index属性就是当前的鼠标放上去的元素的索引，然后根据这个索引去得到当前的元素。但是在ES6中，我们可以直接使用箭头函数以及在数组中新引入的findIndex来找到当前的活动元素的索引，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> liList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ArrayliList=<span class=\"built_in\">Array</span>.form(liList);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;liList.length;i++)&#123;</span><br><span class=\"line\">    liList[i].index=i;</span><br><span class=\"line\">    liList[i].addEventListener(<span class=\"string\">'mouseenter'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> thisIndex = ArrayliList.findIndex(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n == <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上代码得到的thisIndex就是当前鼠标放上去的索引，这里我对箭头函数中n这个参数的理解是，传入参数n后会遍历数组中的对象，从而找到与this相等的那个对象，然后返回它的索引，这里用到<font color=\"red\">Array.from()，这是一个ES6中数组中新增的方法，可以将类数组转换成数组。</font></p>\n<h2 id=\"ES6的for…of循环\"><a href=\"#ES6的for…of循环\" class=\"headerlink\" title=\"ES6的for…of循环\"></a>ES6的for…of循环</h2><p>上面的JS代码循环用了for，其实可以用ES6中的for…of循环去代替，这样写法更加简洁。是否记得JS中的for…in循环，这个循环可以循环键值对中的键，但是无法循环值，而for…of的出现正是为了弥补它的不足，for…of循环可以使用的范围包括数组、Set和Map结构、某些类似数组的对象（比如arguments对象、DOM NodeList对象）、Generator对象，以及字符串。所以我们可以利用该循环替代for循环，但是这里要注意一点<font color=\"red\">如果直接用for…of循环，在chrome49下会报错，官方已证实这是chrome49的BUG，将会在chrome51中修复</font>，所以我在写的时候，利用Array.from()将NodeList对象转换为数组，这样可以放心操作，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> liList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'li'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ArrayliList=<span class=\"built_in\">Array</span>.form(liList);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> li <span class=\"keyword\">of</span> liList)&#123;</span><br><span class=\"line\">    li.addEventListener(<span class=\"string\">'mouseenter'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> thisIndex = ArrayliList.findIndex(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n == <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>是不是非常简洁:)<br>以上就是最近几天对ES6的初探的总结，感觉仅仅只是这些就已经让我感受到ES6的魅力了，接下来，我会再做几个demo，慢慢去熟悉这个新的但是非常好玩儿的ES6。</p>"},{"title":"利用CSS3新单位rem实现响应","date":"2016-04-26T14:49:25.000Z","comments":1,"_content":"做移动端的响应方法有很多，但是我喜欢用CSS3的新单位rem，这个单位非常好用（有个比它还好用的单位vh，不过兼容性太差，不考虑了），根据不同屏幕，设置不同的基准值，从而实现适配各个屏幕尺寸的移动设备。慕课网有一套非常不错的讲关于rem的视频，这里推荐给大家[http://www.imooc.com/learn/494](http://www.imooc.com/learn/494)。\nrem----CSS3中新增的单位，兼容性还不错，常用于移动端实现字体的响应，与em不同，rem根据根元素的font-size计算，所以要利用rem实现适配各个屏幕的大小，就需要根据不同的屏幕设置根元素不同的font-size的值。所以我们需要做下面的一些工作。\n### 1.获取浏览器的宽高（对于移动设备就是设备的宽度）\n代码如下：\n```javascript\nvar pageWidth=window.innerWidth;\nvar pageHeight=window.innerHeight;\nif(typeof pageWidth !=='number'){\n\tif(document.compatMode==='CSS1Compat'){\n\t\tpageWidt=document.documentElement.clientWidth;\n\t\tpageHeight=document.documentElement.clientHeight;\n\t}else{\n\t\tpageWidt=document.body.clientWidth;\n\t\tpageHeight=document.body.clientHeight;\n\t}\n}\n```\n<!--more-->\n#### 1.1 window.innerWidth与document.documentElement.clientWidth\n通过测试发现，在IE9+，chrome，firefox下利用window.innerWidth与document.documentElement.clientWidth都可以获取到浏览器的宽高，但是他们有区别：\n- window.innerWidth获取到的宽度是把右侧滚动条<font color=\"red\">算在内</font>的宽度\n- document.documentElement.clientWidth获取到的宽度是把右侧滚动条的宽度<font color=\"red\">不算在内</font>的宽度\n\n但是，window.innerWidth支持的是IE9+，到IE8以前就会输出undefined，而document.documentElement.clientWidth可以支持IE7（在IE模拟器中，没有IE6，到IE5就只能输出0了），在《javascript高级程序设计》（第三版）中这样写道：“在 IE6 中，这些属性必须在标准模式下才有效；如果是混杂模式，就必须通过 document.body.clientWidth 和 document.body. clientHeight 取得相同信息。”所以document.body.clientWidth;用于混杂模式，在标准模式下只需要document.documentElement.clientWidth即可。\n\n#### 1.2 如何判断浏览器处于什么模式？\nJavascript提供了方法\n```javascript\nif(document.compatMode==='CSS1Compat'){\n    alert('标准模式');\n}else if(document.compatMode==='BackCompat'){\n    alert('混杂模式');\n}\n```\n### 2.计算rem基准值\n通过上面代码可以拿到浏览器窗口（也就是document）的宽度，这样就可以计算根元素的基准值了，计算公式如下：\n```javascript\nvar fontSize=pageWidth / 20;\nvar html=document.querySelectorAll('html')[0];\nhtml.style.fontSize=fontSize;\n```\n通过以上代码就实现了给根元素设置基准fontSize。\n### 3.将PSD中测量出的值换算成rem\n公司设计师给的PSD的基准宽度为720px,所以我在布局的时候常常使用nexus 5作为移动端设备去测试，因为它的宽度是360px，与720px刚好是2倍的关系，根据这个2倍的关系，所以换算步骤如下：\n\n1. PSD设计图中测量出来的尺寸为m px，则放在我移动设备中需要写的尺寸为m/2 px\n2. 将px换算为rem，由于在360px的移动设备下，font-size基准值为360 / 20 = 18px，所以px=>rem过程为：rem = m / 2 / 18 = m / 36;\n\n通过以上计算就将PSD中的px转换为移动设备中的rem，这样就可以实现对各个移动设备的适配。\n","source":"_posts/file-rem.md","raw":"---\ntitle: 利用CSS3新单位rem实现响应\ndate: 2016-04-26 22:49:25\ntags: CSS\ncomments: true\ncategories: \"CSS\"\n---\n做移动端的响应方法有很多，但是我喜欢用CSS3的新单位rem，这个单位非常好用（有个比它还好用的单位vh，不过兼容性太差，不考虑了），根据不同屏幕，设置不同的基准值，从而实现适配各个屏幕尺寸的移动设备。慕课网有一套非常不错的讲关于rem的视频，这里推荐给大家[http://www.imooc.com/learn/494](http://www.imooc.com/learn/494)。\nrem----CSS3中新增的单位，兼容性还不错，常用于移动端实现字体的响应，与em不同，rem根据根元素的font-size计算，所以要利用rem实现适配各个屏幕的大小，就需要根据不同的屏幕设置根元素不同的font-size的值。所以我们需要做下面的一些工作。\n### 1.获取浏览器的宽高（对于移动设备就是设备的宽度）\n代码如下：\n```javascript\nvar pageWidth=window.innerWidth;\nvar pageHeight=window.innerHeight;\nif(typeof pageWidth !=='number'){\n\tif(document.compatMode==='CSS1Compat'){\n\t\tpageWidt=document.documentElement.clientWidth;\n\t\tpageHeight=document.documentElement.clientHeight;\n\t}else{\n\t\tpageWidt=document.body.clientWidth;\n\t\tpageHeight=document.body.clientHeight;\n\t}\n}\n```\n<!--more-->\n#### 1.1 window.innerWidth与document.documentElement.clientWidth\n通过测试发现，在IE9+，chrome，firefox下利用window.innerWidth与document.documentElement.clientWidth都可以获取到浏览器的宽高，但是他们有区别：\n- window.innerWidth获取到的宽度是把右侧滚动条<font color=\"red\">算在内</font>的宽度\n- document.documentElement.clientWidth获取到的宽度是把右侧滚动条的宽度<font color=\"red\">不算在内</font>的宽度\n\n但是，window.innerWidth支持的是IE9+，到IE8以前就会输出undefined，而document.documentElement.clientWidth可以支持IE7（在IE模拟器中，没有IE6，到IE5就只能输出0了），在《javascript高级程序设计》（第三版）中这样写道：“在 IE6 中，这些属性必须在标准模式下才有效；如果是混杂模式，就必须通过 document.body.clientWidth 和 document.body. clientHeight 取得相同信息。”所以document.body.clientWidth;用于混杂模式，在标准模式下只需要document.documentElement.clientWidth即可。\n\n#### 1.2 如何判断浏览器处于什么模式？\nJavascript提供了方法\n```javascript\nif(document.compatMode==='CSS1Compat'){\n    alert('标准模式');\n}else if(document.compatMode==='BackCompat'){\n    alert('混杂模式');\n}\n```\n### 2.计算rem基准值\n通过上面代码可以拿到浏览器窗口（也就是document）的宽度，这样就可以计算根元素的基准值了，计算公式如下：\n```javascript\nvar fontSize=pageWidth / 20;\nvar html=document.querySelectorAll('html')[0];\nhtml.style.fontSize=fontSize;\n```\n通过以上代码就实现了给根元素设置基准fontSize。\n### 3.将PSD中测量出的值换算成rem\n公司设计师给的PSD的基准宽度为720px,所以我在布局的时候常常使用nexus 5作为移动端设备去测试，因为它的宽度是360px，与720px刚好是2倍的关系，根据这个2倍的关系，所以换算步骤如下：\n\n1. PSD设计图中测量出来的尺寸为m px，则放在我移动设备中需要写的尺寸为m/2 px\n2. 将px换算为rem，由于在360px的移动设备下，font-size基准值为360 / 20 = 18px，所以px=>rem过程为：rem = m / 2 / 18 = m / 36;\n\n通过以上计算就将PSD中的px转换为移动设备中的rem，这样就可以实现对各个移动设备的适配。\n","slug":"file-rem","published":1,"updated":"2016-08-02T08:37:00.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoay000nzrv441710j0p","content":"<p>做移动端的响应方法有很多，但是我喜欢用CSS3的新单位rem，这个单位非常好用（有个比它还好用的单位vh，不过兼容性太差，不考虑了），根据不同屏幕，设置不同的基准值，从而实现适配各个屏幕尺寸的移动设备。慕课网有一套非常不错的讲关于rem的视频，这里推荐给大家<a href=\"http://www.imooc.com/learn/494\" target=\"_blank\" rel=\"noopener\">http://www.imooc.com/learn/494</a>。<br>rem—-CSS3中新增的单位，兼容性还不错，常用于移动端实现字体的响应，与em不同，rem根据根元素的font-size计算，所以要利用rem实现适配各个屏幕的大小，就需要根据不同的屏幕设置根元素不同的font-size的值。所以我们需要做下面的一些工作。</p>\n<h3 id=\"1-获取浏览器的宽高（对于移动设备就是设备的宽度）\"><a href=\"#1-获取浏览器的宽高（对于移动设备就是设备的宽度）\" class=\"headerlink\" title=\"1.获取浏览器的宽高（对于移动设备就是设备的宽度）\"></a>1.获取浏览器的宽高（对于移动设备就是设备的宽度）</h3><p>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pageWidth=<span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pageHeight=<span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> pageWidth !==<span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode===<span class=\"string\">'CSS1Compat'</span>)&#123;</span><br><span class=\"line\">\t\tpageWidt=<span class=\"built_in\">document</span>.documentElement.clientWidth;</span><br><span class=\"line\">\t\tpageHeight=<span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tpageWidt=<span class=\"built_in\">document</span>.body.clientWidth;</span><br><span class=\"line\">\t\tpageHeight=<span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h4 id=\"1-1-window-innerWidth与document-documentElement-clientWidth\"><a href=\"#1-1-window-innerWidth与document-documentElement-clientWidth\" class=\"headerlink\" title=\"1.1 window.innerWidth与document.documentElement.clientWidth\"></a>1.1 window.innerWidth与document.documentElement.clientWidth</h4><p>通过测试发现，在IE9+，chrome，firefox下利用window.innerWidth与document.documentElement.clientWidth都可以获取到浏览器的宽高，但是他们有区别：</p>\n<ul>\n<li>window.innerWidth获取到的宽度是把右侧滚动条<font color=\"red\">算在内</font>的宽度</li>\n<li>document.documentElement.clientWidth获取到的宽度是把右侧滚动条的宽度<font color=\"red\">不算在内</font>的宽度</li>\n</ul>\n<p>但是，window.innerWidth支持的是IE9+，到IE8以前就会输出undefined，而document.documentElement.clientWidth可以支持IE7（在IE模拟器中，没有IE6，到IE5就只能输出0了），在《javascript高级程序设计》（第三版）中这样写道：“在 IE6 中，这些属性必须在标准模式下才有效；如果是混杂模式，就必须通过 document.body.clientWidth 和 document.body. clientHeight 取得相同信息。”所以document.body.clientWidth;用于混杂模式，在标准模式下只需要document.documentElement.clientWidth即可。</p>\n<h4 id=\"1-2-如何判断浏览器处于什么模式？\"><a href=\"#1-2-如何判断浏览器处于什么模式？\" class=\"headerlink\" title=\"1.2 如何判断浏览器处于什么模式？\"></a>1.2 如何判断浏览器处于什么模式？</h4><p>Javascript提供了方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode===<span class=\"string\">'CSS1Compat'</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'标准模式'</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode===<span class=\"string\">'BackCompat'</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'混杂模式'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-计算rem基准值\"><a href=\"#2-计算rem基准值\" class=\"headerlink\" title=\"2.计算rem基准值\"></a>2.计算rem基准值</h3><p>通过上面代码可以拿到浏览器窗口（也就是document）的宽度，这样就可以计算根元素的基准值了，计算公式如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fontSize=pageWidth / <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> html=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'html'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">html.style.fontSize=fontSize;</span><br></pre></td></tr></table></figure></p>\n<p>通过以上代码就实现了给根元素设置基准fontSize。</p>\n<h3 id=\"3-将PSD中测量出的值换算成rem\"><a href=\"#3-将PSD中测量出的值换算成rem\" class=\"headerlink\" title=\"3.将PSD中测量出的值换算成rem\"></a>3.将PSD中测量出的值换算成rem</h3><p>公司设计师给的PSD的基准宽度为720px,所以我在布局的时候常常使用nexus 5作为移动端设备去测试，因为它的宽度是360px，与720px刚好是2倍的关系，根据这个2倍的关系，所以换算步骤如下：</p>\n<ol>\n<li>PSD设计图中测量出来的尺寸为m px，则放在我移动设备中需要写的尺寸为m/2 px</li>\n<li>将px换算为rem，由于在360px的移动设备下，font-size基准值为360 / 20 = 18px，所以px=&gt;rem过程为：rem = m / 2 / 18 = m / 36;</li>\n</ol>\n<p>通过以上计算就将PSD中的px转换为移动设备中的rem，这样就可以实现对各个移动设备的适配。</p>\n","site":{"data":{}},"excerpt":"<p>做移动端的响应方法有很多，但是我喜欢用CSS3的新单位rem，这个单位非常好用（有个比它还好用的单位vh，不过兼容性太差，不考虑了），根据不同屏幕，设置不同的基准值，从而实现适配各个屏幕尺寸的移动设备。慕课网有一套非常不错的讲关于rem的视频，这里推荐给大家<a href=\"http://www.imooc.com/learn/494\" target=\"_blank\" rel=\"noopener\">http://www.imooc.com/learn/494</a>。<br>rem—-CSS3中新增的单位，兼容性还不错，常用于移动端实现字体的响应，与em不同，rem根据根元素的font-size计算，所以要利用rem实现适配各个屏幕的大小，就需要根据不同的屏幕设置根元素不同的font-size的值。所以我们需要做下面的一些工作。</p>\n<h3 id=\"1-获取浏览器的宽高（对于移动设备就是设备的宽度）\"><a href=\"#1-获取浏览器的宽高（对于移动设备就是设备的宽度）\" class=\"headerlink\" title=\"1.获取浏览器的宽高（对于移动设备就是设备的宽度）\"></a>1.获取浏览器的宽高（对于移动设备就是设备的宽度）</h3><p>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pageWidth=<span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pageHeight=<span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> pageWidth !==<span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode===<span class=\"string\">'CSS1Compat'</span>)&#123;</span><br><span class=\"line\">\t\tpageWidt=<span class=\"built_in\">document</span>.documentElement.clientWidth;</span><br><span class=\"line\">\t\tpageHeight=<span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tpageWidt=<span class=\"built_in\">document</span>.body.clientWidth;</span><br><span class=\"line\">\t\tpageHeight=<span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<h4 id=\"1-1-window-innerWidth与document-documentElement-clientWidth\"><a href=\"#1-1-window-innerWidth与document-documentElement-clientWidth\" class=\"headerlink\" title=\"1.1 window.innerWidth与document.documentElement.clientWidth\"></a>1.1 window.innerWidth与document.documentElement.clientWidth</h4><p>通过测试发现，在IE9+，chrome，firefox下利用window.innerWidth与document.documentElement.clientWidth都可以获取到浏览器的宽高，但是他们有区别：</p>\n<ul>\n<li>window.innerWidth获取到的宽度是把右侧滚动条<font color=\"red\">算在内</font>的宽度</li>\n<li>document.documentElement.clientWidth获取到的宽度是把右侧滚动条的宽度<font color=\"red\">不算在内</font>的宽度</li>\n</ul>\n<p>但是，window.innerWidth支持的是IE9+，到IE8以前就会输出undefined，而document.documentElement.clientWidth可以支持IE7（在IE模拟器中，没有IE6，到IE5就只能输出0了），在《javascript高级程序设计》（第三版）中这样写道：“在 IE6 中，这些属性必须在标准模式下才有效；如果是混杂模式，就必须通过 document.body.clientWidth 和 document.body. clientHeight 取得相同信息。”所以document.body.clientWidth;用于混杂模式，在标准模式下只需要document.documentElement.clientWidth即可。</p>\n<h4 id=\"1-2-如何判断浏览器处于什么模式？\"><a href=\"#1-2-如何判断浏览器处于什么模式？\" class=\"headerlink\" title=\"1.2 如何判断浏览器处于什么模式？\"></a>1.2 如何判断浏览器处于什么模式？</h4><p>Javascript提供了方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode===<span class=\"string\">'CSS1Compat'</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'标准模式'</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode===<span class=\"string\">'BackCompat'</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'混杂模式'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-计算rem基准值\"><a href=\"#2-计算rem基准值\" class=\"headerlink\" title=\"2.计算rem基准值\"></a>2.计算rem基准值</h3><p>通过上面代码可以拿到浏览器窗口（也就是document）的宽度，这样就可以计算根元素的基准值了，计算公式如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fontSize=pageWidth / <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> html=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'html'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">html.style.fontSize=fontSize;</span><br></pre></td></tr></table></figure></p>\n<p>通过以上代码就实现了给根元素设置基准fontSize。</p>\n<h3 id=\"3-将PSD中测量出的值换算成rem\"><a href=\"#3-将PSD中测量出的值换算成rem\" class=\"headerlink\" title=\"3.将PSD中测量出的值换算成rem\"></a>3.将PSD中测量出的值换算成rem</h3><p>公司设计师给的PSD的基准宽度为720px,所以我在布局的时候常常使用nexus 5作为移动端设备去测试，因为它的宽度是360px，与720px刚好是2倍的关系，根据这个2倍的关系，所以换算步骤如下：</p>\n<ol>\n<li>PSD设计图中测量出来的尺寸为m px，则放在我移动设备中需要写的尺寸为m/2 px</li>\n<li>将px换算为rem，由于在360px的移动设备下，font-size基准值为360 / 20 = 18px，所以px=&gt;rem过程为：rem = m / 2 / 18 = m / 36;</li>\n</ol>\n<p>通过以上计算就将PSD中的px转换为移动设备中的rem，这样就可以实现对各个移动设备的适配。</p>"},{"title":"文件上传（二）---新XMLHttpRequest实现带进度条文件上传","date":"2016-04-14T15:10:58.000Z","comments":1,"_content":"前几天搞得那个文件上传，最近工作不太忙，又开始完善。这次主要添加了文件上传的进度部分，主要用到的则是XMLHttpRequest2的progress，由于我读的是《javascript高级程序设计》（第三版），这里我遇到一个关于progeress事件的坑，后面详细解答。\n## 创建XMLHttpRequest对象\n首先说说XMLHttpRequest，在IE7+浏览器中，只需要new一个XMLHttpRequest对象即可：\n```javascript\nlet xhr=new XMLHttpRequest();\n```\n由于现在淘宝都不再支持IE6以及7，所以这里不考虑IE7及以下浏览器关于xhr的创建方法。\n<!--more-->\n### open()方法\n在使用XHR对象时候，第一个方法是open()方法，它接受3个参数：\n* 要发送的请求的类型（\"get\"、\"post\"等）；\n* 请求的URL；\n* 是否异步发送请求的布尔值。\n例如：\n```javascript\nlet xhr=new XMLHttpRequest();\nxhr.open('get','example.php',false);\n```\n以上代码会启动一个针对example.php的GET请求。这里需要注意两点：\n* URL相对于执行代码的当前页面；\n* 调用open()方法并不会真正发送请求，只是启动一个请求以备发送\n\n### sned()方法\nsend()方法接收一个参数，即要作为请求主题发送的数据。如果不需要通过请求主题发送数据，则传入null。在发送数据收到响应后，响应的数据会自动填充XHR对象的属性，相关属性如下：\n* responseText：作为响应主题被返回的文本；\n* responseXML：如果响应的内容类型是\"text/xml\"或者\"application/xml\"，则这个属性中将保存包含着响应数据的XML DOM文档；\n* status：响应HTTP状态；\n* statusText：响应HTTP状态的说明。\n\n在接收到响应后，第一步是检查 status 属性，以确定响应已经成功返回。一般来说，可以将 HTTP状态代码为 200作为成功的标志。此时，responseText 属性的内容已经就绪，而且在内容类型正确的情况下，responseXML也应该能够访问了。此外，状态代码为304 表示请求的资源并没有被修改，可以直接使用浏览器中缓存的版本。由于我们用XHR对象常常是为了异步传输，所以---可以检测 XHR 对象的readyState 属性，该属性表示请求/响应过程的当前活动阶段。这个属性可取的值如下：\n* 0：未初始化。尚未调用 open()方法。 \n* 1：启动。已经调用 open()方法，但尚未调用 send()方法。 \n* 2：发送。已经调用 send()方法，但尚未接收到响应。 \n* 3：接收。已经接收到部分响应数据。 \n* 4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。\n \n<font color=red>必须在调用 open()之前指定 onreadystatechange事件处理程序才能确保跨浏览器兼容性。</font>所以，实现代码如下：\n```javascript\n var xhr = new XMLHttpRequest();\n//必须在open之前指定onreadystatechange才能保证跨浏览器兼容性！！！！\nxhr.onreadystatechange=function () {\n    if(xhr.readyState==4){\n        if((xhr.status>=200&&xhr.status<300)||xhr.status==304){\n            alert(xhr.responseText);\n        }else{\n            alert('请求失败'+xhr.status);\n        }                    \n    }\n};\n```\n所以利用以上代码就可以实现文件是上传成功还是失败。\n## XMLHttpRequest2级的进度事件\nXHR2有如下6个进度事件：\n* loadstart：在接收到响应数据的第一个字节时触发。 \n* progress：在接收响应期间持续不断地触发。 \n* error：在请求发生错误时触发。 \n* abort：在因为调用 abort()方法而终止连接时触发。 \n* load：在接收到完整的响应数据时触发。 \n* loadend：在通信完成或者触发 error、abort 或 load 事件后触发。\n\n以上事件触发顺序如下：\nlaodstart => progress => error => abort/load => loadend\n### 关于progress事件中上传与下载的事件\n这里就是我遇到的坑，在《javascript高级程序设计》中并没有说清楚，让我感到困惑，在原书中581页这么描写：“onprogress事件处理程序会接收到一个 event 对象，其 target 属性是 XHR 对象，但包含着三个额外的属性：lengthComputable、position 和 totalSize。其中，lengthComputable 是一个表示进度信息是否可用的布尔值，position 表示已经接收的字节数，totalSize 表示根据Content-Length 响应头部确定的预期字节数。”而实际上表示<font color=red>总字节数的属性是total，表示已经传输的字节数是load属性。</font>\nXHR2传输数据有一个progress事件，用来返回进度信息，它分成上传和下载两种情况，<font color=red>下载的progress事件属于XMLHttpRequest对象，而上传的progress事件属于XMLHttpRequest.upload对象</font>。\n首先定义传输文件的函数：\n```javascript\nfunction percentFun(event){\n    if (event.lengthComputable) {\n        /*event.total是需要传输的总字节数，event.load是已经传输的字节数，如果event.lengthComputable!=true,则event.total=0*/       \n　　　　 var percent = event.loaded / event.total;\n　　}\n}\n```\n如果需要显示进度，则分别如下：\n```javascript\n/*下载的进度*/\nxhr.onprogress = percentFun;\n/*上传的进度*/\nxhr.upload.onprogress = percentFun;\n```\n基于以上几点，实现了上传进度显示，具体代码如下：\n```javascript\naddEvent(button,'click',function () {\n    if(filesArray.length!=0){\n        var data=new FormData();\n        var i=0;\n        while(i<filesLen){\n            data.append('file'+i,filesArray[i]);\n            i++;\n        }\n        var xhr = new XMLHttpRequest();\n        //必须在open之前指定onreadystatechange才能保证跨浏览器兼容性！！！！\n        xhr.onreadystatechange=function () {\n            if(xhr.readyState==4){\n                if((xhr.status>=200&&xhr.status<300)||xhr.status==304){\n                    //console.log(xhr.responseText);\n                }else{\n                    alert('请求失败'+xhr.status);\n                }                    \n            }\n        };\n        xhr.upload.onprogress=function (event) {\n            var e=event||window.event;\n            var percentComplete = Math.ceil((e.loaded / e.total)*100);\n            var progressFont=document.querySelectorAll('.progress-font');\n            for(let i=0;i<filesArray.length;i++){\n                ThumbnailArray[i].innerHTML=percentComplete +'%';\n            }\n        }\n        /*上传完成后滞空数组，保证下次上传不会重复上传*/\n        xhr.upload.onload=function () {\n            filesArray=[];\n            ThumbnailArray=[];\n            alert('上传完成，数组置空');                \n        }\n        xhr.open('post','uploader.php',true); \n        xhr.send(data);\n    }        \n});\n```","source":"_posts/fileupload2.md","raw":"---\ntitle: 文件上传（二）---新XMLHttpRequest实现带进度条文件上传\ndate: 2016-04-14 23:10:58\ntags: H5 file，canvas\ncomments: true\ncategories: \"Javascript\"\n---\n前几天搞得那个文件上传，最近工作不太忙，又开始完善。这次主要添加了文件上传的进度部分，主要用到的则是XMLHttpRequest2的progress，由于我读的是《javascript高级程序设计》（第三版），这里我遇到一个关于progeress事件的坑，后面详细解答。\n## 创建XMLHttpRequest对象\n首先说说XMLHttpRequest，在IE7+浏览器中，只需要new一个XMLHttpRequest对象即可：\n```javascript\nlet xhr=new XMLHttpRequest();\n```\n由于现在淘宝都不再支持IE6以及7，所以这里不考虑IE7及以下浏览器关于xhr的创建方法。\n<!--more-->\n### open()方法\n在使用XHR对象时候，第一个方法是open()方法，它接受3个参数：\n* 要发送的请求的类型（\"get\"、\"post\"等）；\n* 请求的URL；\n* 是否异步发送请求的布尔值。\n例如：\n```javascript\nlet xhr=new XMLHttpRequest();\nxhr.open('get','example.php',false);\n```\n以上代码会启动一个针对example.php的GET请求。这里需要注意两点：\n* URL相对于执行代码的当前页面；\n* 调用open()方法并不会真正发送请求，只是启动一个请求以备发送\n\n### sned()方法\nsend()方法接收一个参数，即要作为请求主题发送的数据。如果不需要通过请求主题发送数据，则传入null。在发送数据收到响应后，响应的数据会自动填充XHR对象的属性，相关属性如下：\n* responseText：作为响应主题被返回的文本；\n* responseXML：如果响应的内容类型是\"text/xml\"或者\"application/xml\"，则这个属性中将保存包含着响应数据的XML DOM文档；\n* status：响应HTTP状态；\n* statusText：响应HTTP状态的说明。\n\n在接收到响应后，第一步是检查 status 属性，以确定响应已经成功返回。一般来说，可以将 HTTP状态代码为 200作为成功的标志。此时，responseText 属性的内容已经就绪，而且在内容类型正确的情况下，responseXML也应该能够访问了。此外，状态代码为304 表示请求的资源并没有被修改，可以直接使用浏览器中缓存的版本。由于我们用XHR对象常常是为了异步传输，所以---可以检测 XHR 对象的readyState 属性，该属性表示请求/响应过程的当前活动阶段。这个属性可取的值如下：\n* 0：未初始化。尚未调用 open()方法。 \n* 1：启动。已经调用 open()方法，但尚未调用 send()方法。 \n* 2：发送。已经调用 send()方法，但尚未接收到响应。 \n* 3：接收。已经接收到部分响应数据。 \n* 4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。\n \n<font color=red>必须在调用 open()之前指定 onreadystatechange事件处理程序才能确保跨浏览器兼容性。</font>所以，实现代码如下：\n```javascript\n var xhr = new XMLHttpRequest();\n//必须在open之前指定onreadystatechange才能保证跨浏览器兼容性！！！！\nxhr.onreadystatechange=function () {\n    if(xhr.readyState==4){\n        if((xhr.status>=200&&xhr.status<300)||xhr.status==304){\n            alert(xhr.responseText);\n        }else{\n            alert('请求失败'+xhr.status);\n        }                    \n    }\n};\n```\n所以利用以上代码就可以实现文件是上传成功还是失败。\n## XMLHttpRequest2级的进度事件\nXHR2有如下6个进度事件：\n* loadstart：在接收到响应数据的第一个字节时触发。 \n* progress：在接收响应期间持续不断地触发。 \n* error：在请求发生错误时触发。 \n* abort：在因为调用 abort()方法而终止连接时触发。 \n* load：在接收到完整的响应数据时触发。 \n* loadend：在通信完成或者触发 error、abort 或 load 事件后触发。\n\n以上事件触发顺序如下：\nlaodstart => progress => error => abort/load => loadend\n### 关于progress事件中上传与下载的事件\n这里就是我遇到的坑，在《javascript高级程序设计》中并没有说清楚，让我感到困惑，在原书中581页这么描写：“onprogress事件处理程序会接收到一个 event 对象，其 target 属性是 XHR 对象，但包含着三个额外的属性：lengthComputable、position 和 totalSize。其中，lengthComputable 是一个表示进度信息是否可用的布尔值，position 表示已经接收的字节数，totalSize 表示根据Content-Length 响应头部确定的预期字节数。”而实际上表示<font color=red>总字节数的属性是total，表示已经传输的字节数是load属性。</font>\nXHR2传输数据有一个progress事件，用来返回进度信息，它分成上传和下载两种情况，<font color=red>下载的progress事件属于XMLHttpRequest对象，而上传的progress事件属于XMLHttpRequest.upload对象</font>。\n首先定义传输文件的函数：\n```javascript\nfunction percentFun(event){\n    if (event.lengthComputable) {\n        /*event.total是需要传输的总字节数，event.load是已经传输的字节数，如果event.lengthComputable!=true,则event.total=0*/       \n　　　　 var percent = event.loaded / event.total;\n　　}\n}\n```\n如果需要显示进度，则分别如下：\n```javascript\n/*下载的进度*/\nxhr.onprogress = percentFun;\n/*上传的进度*/\nxhr.upload.onprogress = percentFun;\n```\n基于以上几点，实现了上传进度显示，具体代码如下：\n```javascript\naddEvent(button,'click',function () {\n    if(filesArray.length!=0){\n        var data=new FormData();\n        var i=0;\n        while(i<filesLen){\n            data.append('file'+i,filesArray[i]);\n            i++;\n        }\n        var xhr = new XMLHttpRequest();\n        //必须在open之前指定onreadystatechange才能保证跨浏览器兼容性！！！！\n        xhr.onreadystatechange=function () {\n            if(xhr.readyState==4){\n                if((xhr.status>=200&&xhr.status<300)||xhr.status==304){\n                    //console.log(xhr.responseText);\n                }else{\n                    alert('请求失败'+xhr.status);\n                }                    \n            }\n        };\n        xhr.upload.onprogress=function (event) {\n            var e=event||window.event;\n            var percentComplete = Math.ceil((e.loaded / e.total)*100);\n            var progressFont=document.querySelectorAll('.progress-font');\n            for(let i=0;i<filesArray.length;i++){\n                ThumbnailArray[i].innerHTML=percentComplete +'%';\n            }\n        }\n        /*上传完成后滞空数组，保证下次上传不会重复上传*/\n        xhr.upload.onload=function () {\n            filesArray=[];\n            ThumbnailArray=[];\n            alert('上传完成，数组置空');                \n        }\n        xhr.open('post','uploader.php',true); \n        xhr.send(data);\n    }        \n});\n```","slug":"fileupload2","published":1,"updated":"2016-08-02T08:37:16.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoaz000pzrv4fztdwtfk","content":"<p>前几天搞得那个文件上传，最近工作不太忙，又开始完善。这次主要添加了文件上传的进度部分，主要用到的则是XMLHttpRequest2的progress，由于我读的是《javascript高级程序设计》（第三版），这里我遇到一个关于progeress事件的坑，后面详细解答。</p>\n<h2 id=\"创建XMLHttpRequest对象\"><a href=\"#创建XMLHttpRequest对象\" class=\"headerlink\" title=\"创建XMLHttpRequest对象\"></a>创建XMLHttpRequest对象</h2><p>首先说说XMLHttpRequest，在IE7+浏览器中，只需要new一个XMLHttpRequest对象即可：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></p>\n<p>由于现在淘宝都不再支持IE6以及7，所以这里不考虑IE7及以下浏览器关于xhr的创建方法。<br><a id=\"more\"></a></p>\n<h3 id=\"open-方法\"><a href=\"#open-方法\" class=\"headerlink\" title=\"open()方法\"></a>open()方法</h3><p>在使用XHR对象时候，第一个方法是open()方法，它接受3个参数：</p>\n<ul>\n<li>要发送的请求的类型（”get”、”post”等）；</li>\n<li>请求的URL；</li>\n<li>是否异步发送请求的布尔值。<br>例如：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.open(<span class=\"string\">'get'</span>,<span class=\"string\">'example.php'</span>,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上代码会启动一个针对example.php的GET请求。这里需要注意两点：</p>\n<ul>\n<li>URL相对于执行代码的当前页面；</li>\n<li>调用open()方法并不会真正发送请求，只是启动一个请求以备发送</li>\n</ul>\n<h3 id=\"sned-方法\"><a href=\"#sned-方法\" class=\"headerlink\" title=\"sned()方法\"></a>sned()方法</h3><p>send()方法接收一个参数，即要作为请求主题发送的数据。如果不需要通过请求主题发送数据，则传入null。在发送数据收到响应后，响应的数据会自动填充XHR对象的属性，相关属性如下：</p>\n<ul>\n<li>responseText：作为响应主题被返回的文本；</li>\n<li>responseXML：如果响应的内容类型是”text/xml”或者”application/xml”，则这个属性中将保存包含着响应数据的XML DOM文档；</li>\n<li>status：响应HTTP状态；</li>\n<li>statusText：响应HTTP状态的说明。</li>\n</ul>\n<p>在接收到响应后，第一步是检查 status 属性，以确定响应已经成功返回。一般来说，可以将 HTTP状态代码为 200作为成功的标志。此时，responseText 属性的内容已经就绪，而且在内容类型正确的情况下，responseXML也应该能够访问了。此外，状态代码为304 表示请求的资源并没有被修改，可以直接使用浏览器中缓存的版本。由于我们用XHR对象常常是为了异步传输，所以—可以检测 XHR 对象的readyState 属性，该属性表示请求/响应过程的当前活动阶段。这个属性可取的值如下：</p>\n<ul>\n<li>0：未初始化。尚未调用 open()方法。 </li>\n<li>1：启动。已经调用 open()方法，但尚未调用 send()方法。 </li>\n<li>2：发送。已经调用 send()方法，但尚未接收到响应。 </li>\n<li>3：接收。已经接收到部分响应数据。 </li>\n<li>4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。</li>\n</ul>\n<p><font color=\"red\">必须在调用 open()之前指定 onreadystatechange事件处理程序才能确保跨浏览器兼容性。</font>所以，实现代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">//必须在open之前指定onreadystatechange才能保证跨浏览器兼容性！！！！</span></span><br><span class=\"line\">xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState==<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xhr.status&gt;=<span class=\"number\">200</span>&amp;&amp;xhr.status&lt;<span class=\"number\">300</span>)||xhr.status==<span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">            alert(xhr.responseText);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'请求失败'</span>+xhr.status);</span><br><span class=\"line\">        &#125;                    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>所以利用以上代码就可以实现文件是上传成功还是失败。</p>\n<h2 id=\"XMLHttpRequest2级的进度事件\"><a href=\"#XMLHttpRequest2级的进度事件\" class=\"headerlink\" title=\"XMLHttpRequest2级的进度事件\"></a>XMLHttpRequest2级的进度事件</h2><p>XHR2有如下6个进度事件：</p>\n<ul>\n<li>loadstart：在接收到响应数据的第一个字节时触发。 </li>\n<li>progress：在接收响应期间持续不断地触发。 </li>\n<li>error：在请求发生错误时触发。 </li>\n<li>abort：在因为调用 abort()方法而终止连接时触发。 </li>\n<li>load：在接收到完整的响应数据时触发。 </li>\n<li>loadend：在通信完成或者触发 error、abort 或 load 事件后触发。</li>\n</ul>\n<p>以上事件触发顺序如下：<br>laodstart =&gt; progress =&gt; error =&gt; abort/load =&gt; loadend</p>\n<h3 id=\"关于progress事件中上传与下载的事件\"><a href=\"#关于progress事件中上传与下载的事件\" class=\"headerlink\" title=\"关于progress事件中上传与下载的事件\"></a>关于progress事件中上传与下载的事件</h3><p>这里就是我遇到的坑，在《javascript高级程序设计》中并没有说清楚，让我感到困惑，在原书中581页这么描写：“onprogress事件处理程序会接收到一个 event 对象，其 target 属性是 XHR 对象，但包含着三个额外的属性：lengthComputable、position 和 totalSize。其中，lengthComputable 是一个表示进度信息是否可用的布尔值，position 表示已经接收的字节数，totalSize 表示根据Content-Length 响应头部确定的预期字节数。”而实际上表示<font color=\"red\">总字节数的属性是total，表示已经传输的字节数是load属性。</font><br>XHR2传输数据有一个progress事件，用来返回进度信息，它分成上传和下载两种情况，<font color=\"red\">下载的progress事件属于XMLHttpRequest对象，而上传的progress事件属于XMLHttpRequest.upload对象</font>。<br>首先定义传输文件的函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">percentFun</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.lengthComputable) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*event.total是需要传输的总字节数，event.load是已经传输的字节数，如果event.lengthComputable!=true,则event.total=0*/</span>       </span><br><span class=\"line\">　　　　 <span class=\"keyword\">var</span> percent = event.loaded / event.total;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果需要显示进度，则分别如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*下载的进度*/</span></span><br><span class=\"line\">xhr.onprogress = percentFun;</span><br><span class=\"line\"><span class=\"comment\">/*上传的进度*/</span></span><br><span class=\"line\">xhr.upload.onprogress = percentFun;</span><br></pre></td></tr></table></figure></p>\n<p>基于以上几点，实现了上传进度显示，具体代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEvent(button,<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(filesArray.length!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data=<span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;filesLen)&#123;</span><br><span class=\"line\">            data.append(<span class=\"string\">'file'</span>+i,filesArray[i]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        <span class=\"comment\">//必须在open之前指定onreadystatechange才能保证跨浏览器兼容性！！！！</span></span><br><span class=\"line\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState==<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((xhr.status&gt;=<span class=\"number\">200</span>&amp;&amp;xhr.status&lt;<span class=\"number\">300</span>)||xhr.status==<span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//console.log(xhr.responseText);</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    alert(<span class=\"string\">'请求失败'</span>+xhr.status);</span><br><span class=\"line\">                &#125;                    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.upload.onprogress=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> percentComplete = <span class=\"built_in\">Math</span>.ceil((e.loaded / e.total)*<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> progressFont=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.progress-font'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;filesArray.length;i++)&#123;</span><br><span class=\"line\">                ThumbnailArray[i].innerHTML=percentComplete +<span class=\"string\">'%'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*上传完成后滞空数组，保证下次上传不会重复上传*/</span></span><br><span class=\"line\">        xhr.upload.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            filesArray=[];</span><br><span class=\"line\">            ThumbnailArray=[];</span><br><span class=\"line\">            alert(<span class=\"string\">'上传完成，数组置空'</span>);                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">'post'</span>,<span class=\"string\">'uploader.php'</span>,<span class=\"literal\">true</span>); </span><br><span class=\"line\">        xhr.send(data);</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>前几天搞得那个文件上传，最近工作不太忙，又开始完善。这次主要添加了文件上传的进度部分，主要用到的则是XMLHttpRequest2的progress，由于我读的是《javascript高级程序设计》（第三版），这里我遇到一个关于progeress事件的坑，后面详细解答。</p>\n<h2 id=\"创建XMLHttpRequest对象\"><a href=\"#创建XMLHttpRequest对象\" class=\"headerlink\" title=\"创建XMLHttpRequest对象\"></a>创建XMLHttpRequest对象</h2><p>首先说说XMLHttpRequest，在IE7+浏览器中，只需要new一个XMLHttpRequest对象即可：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></p>\n<p>由于现在淘宝都不再支持IE6以及7，所以这里不考虑IE7及以下浏览器关于xhr的创建方法。<br>","more":"</p>\n<h3 id=\"open-方法\"><a href=\"#open-方法\" class=\"headerlink\" title=\"open()方法\"></a>open()方法</h3><p>在使用XHR对象时候，第一个方法是open()方法，它接受3个参数：</p>\n<ul>\n<li>要发送的请求的类型（”get”、”post”等）；</li>\n<li>请求的URL；</li>\n<li>是否异步发送请求的布尔值。<br>例如：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.open(<span class=\"string\">'get'</span>,<span class=\"string\">'example.php'</span>,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上代码会启动一个针对example.php的GET请求。这里需要注意两点：</p>\n<ul>\n<li>URL相对于执行代码的当前页面；</li>\n<li>调用open()方法并不会真正发送请求，只是启动一个请求以备发送</li>\n</ul>\n<h3 id=\"sned-方法\"><a href=\"#sned-方法\" class=\"headerlink\" title=\"sned()方法\"></a>sned()方法</h3><p>send()方法接收一个参数，即要作为请求主题发送的数据。如果不需要通过请求主题发送数据，则传入null。在发送数据收到响应后，响应的数据会自动填充XHR对象的属性，相关属性如下：</p>\n<ul>\n<li>responseText：作为响应主题被返回的文本；</li>\n<li>responseXML：如果响应的内容类型是”text/xml”或者”application/xml”，则这个属性中将保存包含着响应数据的XML DOM文档；</li>\n<li>status：响应HTTP状态；</li>\n<li>statusText：响应HTTP状态的说明。</li>\n</ul>\n<p>在接收到响应后，第一步是检查 status 属性，以确定响应已经成功返回。一般来说，可以将 HTTP状态代码为 200作为成功的标志。此时，responseText 属性的内容已经就绪，而且在内容类型正确的情况下，responseXML也应该能够访问了。此外，状态代码为304 表示请求的资源并没有被修改，可以直接使用浏览器中缓存的版本。由于我们用XHR对象常常是为了异步传输，所以—可以检测 XHR 对象的readyState 属性，该属性表示请求/响应过程的当前活动阶段。这个属性可取的值如下：</p>\n<ul>\n<li>0：未初始化。尚未调用 open()方法。 </li>\n<li>1：启动。已经调用 open()方法，但尚未调用 send()方法。 </li>\n<li>2：发送。已经调用 send()方法，但尚未接收到响应。 </li>\n<li>3：接收。已经接收到部分响应数据。 </li>\n<li>4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。</li>\n</ul>\n<p><font color=\"red\">必须在调用 open()之前指定 onreadystatechange事件处理程序才能确保跨浏览器兼容性。</font>所以，实现代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">//必须在open之前指定onreadystatechange才能保证跨浏览器兼容性！！！！</span></span><br><span class=\"line\">xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState==<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((xhr.status&gt;=<span class=\"number\">200</span>&amp;&amp;xhr.status&lt;<span class=\"number\">300</span>)||xhr.status==<span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">            alert(xhr.responseText);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'请求失败'</span>+xhr.status);</span><br><span class=\"line\">        &#125;                    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>所以利用以上代码就可以实现文件是上传成功还是失败。</p>\n<h2 id=\"XMLHttpRequest2级的进度事件\"><a href=\"#XMLHttpRequest2级的进度事件\" class=\"headerlink\" title=\"XMLHttpRequest2级的进度事件\"></a>XMLHttpRequest2级的进度事件</h2><p>XHR2有如下6个进度事件：</p>\n<ul>\n<li>loadstart：在接收到响应数据的第一个字节时触发。 </li>\n<li>progress：在接收响应期间持续不断地触发。 </li>\n<li>error：在请求发生错误时触发。 </li>\n<li>abort：在因为调用 abort()方法而终止连接时触发。 </li>\n<li>load：在接收到完整的响应数据时触发。 </li>\n<li>loadend：在通信完成或者触发 error、abort 或 load 事件后触发。</li>\n</ul>\n<p>以上事件触发顺序如下：<br>laodstart =&gt; progress =&gt; error =&gt; abort/load =&gt; loadend</p>\n<h3 id=\"关于progress事件中上传与下载的事件\"><a href=\"#关于progress事件中上传与下载的事件\" class=\"headerlink\" title=\"关于progress事件中上传与下载的事件\"></a>关于progress事件中上传与下载的事件</h3><p>这里就是我遇到的坑，在《javascript高级程序设计》中并没有说清楚，让我感到困惑，在原书中581页这么描写：“onprogress事件处理程序会接收到一个 event 对象，其 target 属性是 XHR 对象，但包含着三个额外的属性：lengthComputable、position 和 totalSize。其中，lengthComputable 是一个表示进度信息是否可用的布尔值，position 表示已经接收的字节数，totalSize 表示根据Content-Length 响应头部确定的预期字节数。”而实际上表示<font color=\"red\">总字节数的属性是total，表示已经传输的字节数是load属性。</font><br>XHR2传输数据有一个progress事件，用来返回进度信息，它分成上传和下载两种情况，<font color=\"red\">下载的progress事件属于XMLHttpRequest对象，而上传的progress事件属于XMLHttpRequest.upload对象</font>。<br>首先定义传输文件的函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">percentFun</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.lengthComputable) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*event.total是需要传输的总字节数，event.load是已经传输的字节数，如果event.lengthComputable!=true,则event.total=0*/</span>       </span><br><span class=\"line\">　　　　 <span class=\"keyword\">var</span> percent = event.loaded / event.total;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果需要显示进度，则分别如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*下载的进度*/</span></span><br><span class=\"line\">xhr.onprogress = percentFun;</span><br><span class=\"line\"><span class=\"comment\">/*上传的进度*/</span></span><br><span class=\"line\">xhr.upload.onprogress = percentFun;</span><br></pre></td></tr></table></figure></p>\n<p>基于以上几点，实现了上传进度显示，具体代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEvent(button,<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(filesArray.length!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data=<span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;filesLen)&#123;</span><br><span class=\"line\">            data.append(<span class=\"string\">'file'</span>+i,filesArray[i]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        <span class=\"comment\">//必须在open之前指定onreadystatechange才能保证跨浏览器兼容性！！！！</span></span><br><span class=\"line\">        xhr.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState==<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((xhr.status&gt;=<span class=\"number\">200</span>&amp;&amp;xhr.status&lt;<span class=\"number\">300</span>)||xhr.status==<span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//console.log(xhr.responseText);</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    alert(<span class=\"string\">'请求失败'</span>+xhr.status);</span><br><span class=\"line\">                &#125;                    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.upload.onprogress=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> percentComplete = <span class=\"built_in\">Math</span>.ceil((e.loaded / e.total)*<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> progressFont=<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.progress-font'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;filesArray.length;i++)&#123;</span><br><span class=\"line\">                ThumbnailArray[i].innerHTML=percentComplete +<span class=\"string\">'%'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*上传完成后滞空数组，保证下次上传不会重复上传*/</span></span><br><span class=\"line\">        xhr.upload.onload=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            filesArray=[];</span><br><span class=\"line\">            ThumbnailArray=[];</span><br><span class=\"line\">            alert(<span class=\"string\">'上传完成，数组置空'</span>);                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">'post'</span>,<span class=\"string\">'uploader.php'</span>,<span class=\"literal\">true</span>); </span><br><span class=\"line\">        xhr.send(data);</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>"},{"title":"Git Commint规范","date":"2017-10-18T14:11:36.000Z","comments":1,"_content":"\n>之前看一个github的开源项目，看到要求使用angular的git commit规范，刚好自己项目中也需要规范git commit，所以就研究总结一下。\n\n<!--more-->\n\n## 配置检测git commit是否合法\n\n```sh\nnpm install --save-dev @commitlint/cli husky\n```\n\n新建`commitlint.config.js`配置git提交规范（这里使用的是angular的提交规范）\n\n```js\nmodule.exports = {\n  rules: {\n    'body-leading-blank': [1, 'always'], //body开始于空白行\n    'body-tense': [1, 'always', ['present-imperative']], \n    'footer-leading-blank': [1, 'always'], //footer开始于空白行\n    'footer-tense': [1, 'always', ['present-imperative']],\n    'header-max-length': [2, 'always', 72],\n    'scope-case': [2, 'always', 'lowerCase'], //scope小写\n    'subject-empty': [2, 'never'], //subjec不t为空\n    'subject-full-stop': [2, 'never', '.'], //subject结尾不加'.'\n    'subject-tense': [1, 'always', ['present-imperative']], //以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n    'type-case': [2, 'always', 'lowerCase'], //type小写\n    'type-empty': [2, 'never'], //type不为空\n    'type-enum': [\n      2,\n      'always',\n      [\n        'build',\n        'chore',      //构建过程或辅助工具的变动\n        'docs',       //文档（documentation）\n        'feat',       //新功能（feature）\n        'fix',        //修补bug\n        'perf',\n        'refactor',   //重构（即不是新增功能，也不是修改bug的代码变动）\n        'revert',\n        'style',      //格式（不影响代码运行的变动）\n        'test',       //增加测试\n      ],\n    ], //type关键字必须是其中之一\n  },\n};\n```\n\n配置husky\n\n```json\n{\n  \"scripts\": {\n    \"commitmsg\": \"commitlint -e\"\n  }\n}\n```\n\n配置完成之后，提交所写的commit如果不符合规范，则无法进行下一步操作\n\n## Commit message 的格式\n\n每次提交，Commit message 都包括三个部分：Header，Body 和 Footer\n\n```xml\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n\nHeader是必需的，Body和Footer可以省略\n\n### header\n\nHeader部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）\n\n#### type\n\n该字段用于说明commit的类型，被指定在上面的`type-enum`中\n\n```js\n'build',\n'chore',      //构建过程或辅助工具的变动\n'docs',       //文档（documentation）\n'feat',       //新功能（feature）\n'fix',        //修补bug\n'perf',\n'refactor',   //重构（即不是新增功能，也不是修改bug的代码变动）\n'revert',\n'style',      //格式（不影响代码运行的变动）\n'test',       //增加测试\n```\n\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况建议是不要放入\n\n#### scope\n\n用于说明commit的影响范围\n\n#### subject\n\nsubject是 commit 目的的简短描述，不超过50个字符\n\n要求如下：\n\n* 以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n* 第一个字母小写\n* 结尾不加句号（.）\n\n### body\n\nbody 部分是对本次 commit 的描述，可以分成多行，例如：\n\n```sh\nMore detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n```\n\n有两个注意点:\n\n1. 使用第一人称现在时，比如使用change而不是changed或changes\n\n2. 应该说明代码变动的原因，以及跟以前提交的对比\n\n### footer\n\nfooter只用于以下两种情况：\n\n#### 不兼容变动\n\n如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法\n\n```sh\nBREAKING CHANGE: isolate scope bindings definition has changed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: {\n      myAttr: 'attribute',\n    }\n\n    After:\n\n    scope: {\n      myAttr: '@',\n    }\n\n    The removed `inject` wasn't generaly useful for directives so there should be no code using it.\n```\n\n#### 关闭Issue\n\n如果当前 commit 针对某个issue，那么可以在 footer 部分关闭这个 issue\n\n```sh\n//关闭一个\nCloses #1\n//关闭多个\nCloses #2, #3, #4\n```\n\n### revert\n\n还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，必须以revert:开头，后面跟着被撤销 commit 的 header\n\n```sh\nrevert: refactor(compiler): introduce `TestBed.deprecatedOverrideProvider` (#19558)\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n```\n\nBody部分的格式是固定的，必须写成`This reverts commit <hash>.`，其中的hash是被撤销 commit 的 SHA 标识符\n\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。\n\n### Example\n\n```sh\nrefactor(compiler): introduce `TestBed.deprecatedOverrideProvider` (#19558)\n\nThis allows use to fix `TestBed.overrideProvider` to keep imported `NgModule`s eager,\nwhile allowing our users to still keep the old semantics until they have fixed their\ntests.\n\nPR Close #19558\n```\n\n## 生成change log\n\n如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成。\n\n生成的文档包括以下三个部分。\n\n```sh\nNew features\nBug fixes\nBreaking changes.\n```\n\n每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。\n\nconventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。\n\n```sh\n$ npm install -g conventional-changelog\n$ cd my-project\n$ conventional-changelog -p angular -i CHANGELOG.md -w\n```\n\n上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。\n\n如果你想生成所有发布的 Change log，要改为运行下面的命令。\n\n```sh\n$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0\n```\n\n为了方便使用，可以将其写入package.json的scripts字段。\n\n```json\n{\n  \"scripts\": {\n    \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -w -r 0\"\n  }\n}\n```\n\n以后，直接运行下面的命令即可。\n\n```sh\n$ npm run changelog\n```\n","source":"_posts/git-commint-norm.md","raw":"---\ntitle: Git Commint规范\ndate: 2017-10-18 22:11:36\ntags: git&github\ncomments: true\ncategories: \"git&github\"\n---\n\n>之前看一个github的开源项目，看到要求使用angular的git commit规范，刚好自己项目中也需要规范git commit，所以就研究总结一下。\n\n<!--more-->\n\n## 配置检测git commit是否合法\n\n```sh\nnpm install --save-dev @commitlint/cli husky\n```\n\n新建`commitlint.config.js`配置git提交规范（这里使用的是angular的提交规范）\n\n```js\nmodule.exports = {\n  rules: {\n    'body-leading-blank': [1, 'always'], //body开始于空白行\n    'body-tense': [1, 'always', ['present-imperative']], \n    'footer-leading-blank': [1, 'always'], //footer开始于空白行\n    'footer-tense': [1, 'always', ['present-imperative']],\n    'header-max-length': [2, 'always', 72],\n    'scope-case': [2, 'always', 'lowerCase'], //scope小写\n    'subject-empty': [2, 'never'], //subjec不t为空\n    'subject-full-stop': [2, 'never', '.'], //subject结尾不加'.'\n    'subject-tense': [1, 'always', ['present-imperative']], //以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n    'type-case': [2, 'always', 'lowerCase'], //type小写\n    'type-empty': [2, 'never'], //type不为空\n    'type-enum': [\n      2,\n      'always',\n      [\n        'build',\n        'chore',      //构建过程或辅助工具的变动\n        'docs',       //文档（documentation）\n        'feat',       //新功能（feature）\n        'fix',        //修补bug\n        'perf',\n        'refactor',   //重构（即不是新增功能，也不是修改bug的代码变动）\n        'revert',\n        'style',      //格式（不影响代码运行的变动）\n        'test',       //增加测试\n      ],\n    ], //type关键字必须是其中之一\n  },\n};\n```\n\n配置husky\n\n```json\n{\n  \"scripts\": {\n    \"commitmsg\": \"commitlint -e\"\n  }\n}\n```\n\n配置完成之后，提交所写的commit如果不符合规范，则无法进行下一步操作\n\n## Commit message 的格式\n\n每次提交，Commit message 都包括三个部分：Header，Body 和 Footer\n\n```xml\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n\nHeader是必需的，Body和Footer可以省略\n\n### header\n\nHeader部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）\n\n#### type\n\n该字段用于说明commit的类型，被指定在上面的`type-enum`中\n\n```js\n'build',\n'chore',      //构建过程或辅助工具的变动\n'docs',       //文档（documentation）\n'feat',       //新功能（feature）\n'fix',        //修补bug\n'perf',\n'refactor',   //重构（即不是新增功能，也不是修改bug的代码变动）\n'revert',\n'style',      //格式（不影响代码运行的变动）\n'test',       //增加测试\n```\n\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况建议是不要放入\n\n#### scope\n\n用于说明commit的影响范围\n\n#### subject\n\nsubject是 commit 目的的简短描述，不超过50个字符\n\n要求如下：\n\n* 以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n* 第一个字母小写\n* 结尾不加句号（.）\n\n### body\n\nbody 部分是对本次 commit 的描述，可以分成多行，例如：\n\n```sh\nMore detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n```\n\n有两个注意点:\n\n1. 使用第一人称现在时，比如使用change而不是changed或changes\n\n2. 应该说明代码变动的原因，以及跟以前提交的对比\n\n### footer\n\nfooter只用于以下两种情况：\n\n#### 不兼容变动\n\n如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法\n\n```sh\nBREAKING CHANGE: isolate scope bindings definition has changed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: {\n      myAttr: 'attribute',\n    }\n\n    After:\n\n    scope: {\n      myAttr: '@',\n    }\n\n    The removed `inject` wasn't generaly useful for directives so there should be no code using it.\n```\n\n#### 关闭Issue\n\n如果当前 commit 针对某个issue，那么可以在 footer 部分关闭这个 issue\n\n```sh\n//关闭一个\nCloses #1\n//关闭多个\nCloses #2, #3, #4\n```\n\n### revert\n\n还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，必须以revert:开头，后面跟着被撤销 commit 的 header\n\n```sh\nrevert: refactor(compiler): introduce `TestBed.deprecatedOverrideProvider` (#19558)\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n```\n\nBody部分的格式是固定的，必须写成`This reverts commit <hash>.`，其中的hash是被撤销 commit 的 SHA 标识符\n\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。\n\n### Example\n\n```sh\nrefactor(compiler): introduce `TestBed.deprecatedOverrideProvider` (#19558)\n\nThis allows use to fix `TestBed.overrideProvider` to keep imported `NgModule`s eager,\nwhile allowing our users to still keep the old semantics until they have fixed their\ntests.\n\nPR Close #19558\n```\n\n## 生成change log\n\n如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成。\n\n生成的文档包括以下三个部分。\n\n```sh\nNew features\nBug fixes\nBreaking changes.\n```\n\n每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。\n\nconventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。\n\n```sh\n$ npm install -g conventional-changelog\n$ cd my-project\n$ conventional-changelog -p angular -i CHANGELOG.md -w\n```\n\n上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。\n\n如果你想生成所有发布的 Change log，要改为运行下面的命令。\n\n```sh\n$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0\n```\n\n为了方便使用，可以将其写入package.json的scripts字段。\n\n```json\n{\n  \"scripts\": {\n    \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -w -r 0\"\n  }\n}\n```\n\n以后，直接运行下面的命令即可。\n\n```sh\n$ npm run changelog\n```\n","slug":"git-commint-norm","published":1,"updated":"2017-10-18T10:24:28.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktob2000uzrv4y8xw29wy","content":"<blockquote>\n<p>之前看一个github的开源项目，看到要求使用angular的git commit规范，刚好自己项目中也需要规范git commit，所以就研究总结一下。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"配置检测git-commit是否合法\"><a href=\"#配置检测git-commit是否合法\" class=\"headerlink\" title=\"配置检测git commit是否合法\"></a>配置检测git commit是否合法</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev @commitlint/cli husky</span><br></pre></td></tr></table></figure>\n<p>新建<code>commitlint.config.js</code>配置git提交规范（这里使用的是angular的提交规范）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"string\">'body-leading-blank'</span>: [<span class=\"number\">1</span>, <span class=\"string\">'always'</span>], <span class=\"comment\">//body开始于空白行</span></span><br><span class=\"line\">    <span class=\"string\">'body-tense'</span>: [<span class=\"number\">1</span>, <span class=\"string\">'always'</span>, [<span class=\"string\">'present-imperative'</span>]], </span><br><span class=\"line\">    <span class=\"string\">'footer-leading-blank'</span>: [<span class=\"number\">1</span>, <span class=\"string\">'always'</span>], <span class=\"comment\">//footer开始于空白行</span></span><br><span class=\"line\">    <span class=\"string\">'footer-tense'</span>: [<span class=\"number\">1</span>, <span class=\"string\">'always'</span>, [<span class=\"string\">'present-imperative'</span>]],</span><br><span class=\"line\">    <span class=\"string\">'header-max-length'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'always'</span>, <span class=\"number\">72</span>],</span><br><span class=\"line\">    <span class=\"string\">'scope-case'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'always'</span>, <span class=\"string\">'lowerCase'</span>], <span class=\"comment\">//scope小写</span></span><br><span class=\"line\">    <span class=\"string\">'subject-empty'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'never'</span>], <span class=\"comment\">//subjec不t为空</span></span><br><span class=\"line\">    <span class=\"string\">'subject-full-stop'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'never'</span>, <span class=\"string\">'.'</span>], <span class=\"comment\">//subject结尾不加'.'</span></span><br><span class=\"line\">    <span class=\"string\">'subject-tense'</span>: [<span class=\"number\">1</span>, <span class=\"string\">'always'</span>, [<span class=\"string\">'present-imperative'</span>]], <span class=\"comment\">//以动词开头，使用第一人称现在时，比如change，而不是changed或changes</span></span><br><span class=\"line\">    <span class=\"string\">'type-case'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'always'</span>, <span class=\"string\">'lowerCase'</span>], <span class=\"comment\">//type小写</span></span><br><span class=\"line\">    <span class=\"string\">'type-empty'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'never'</span>], <span class=\"comment\">//type不为空</span></span><br><span class=\"line\">    <span class=\"string\">'type-enum'</span>: [</span><br><span class=\"line\">      <span class=\"number\">2</span>,</span><br><span class=\"line\">      <span class=\"string\">'always'</span>,</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">'build'</span>,</span><br><span class=\"line\">        <span class=\"string\">'chore'</span>,      <span class=\"comment\">//构建过程或辅助工具的变动</span></span><br><span class=\"line\">        <span class=\"string\">'docs'</span>,       <span class=\"comment\">//文档（documentation）</span></span><br><span class=\"line\">        <span class=\"string\">'feat'</span>,       <span class=\"comment\">//新功能（feature）</span></span><br><span class=\"line\">        <span class=\"string\">'fix'</span>,        <span class=\"comment\">//修补bug</span></span><br><span class=\"line\">        <span class=\"string\">'perf'</span>,</span><br><span class=\"line\">        <span class=\"string\">'refactor'</span>,   <span class=\"comment\">//重构（即不是新增功能，也不是修改bug的代码变动）</span></span><br><span class=\"line\">        <span class=\"string\">'revert'</span>,</span><br><span class=\"line\">        <span class=\"string\">'style'</span>,      <span class=\"comment\">//格式（不影响代码运行的变动）</span></span><br><span class=\"line\">        <span class=\"string\">'test'</span>,       <span class=\"comment\">//增加测试</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">    ], <span class=\"comment\">//type关键字必须是其中之一</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>配置husky</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"commitmsg\"</span>: <span class=\"string\">\"commitlint -e\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，提交所写的commit如果不符合规范，则无法进行下一步操作</p>\n<h2 id=\"Commit-message-的格式\"><a href=\"#Commit-message-的格式\" class=\"headerlink\" title=\"Commit message 的格式\"></a>Commit message 的格式</h2><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>(<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>): <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Header是必需的，Body和Footer可以省略</p>\n<h3 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h3><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）</p>\n<h4 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h4><p>该字段用于说明commit的类型，被指定在上面的<code>type-enum</code>中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'build'</span>,</span><br><span class=\"line\"><span class=\"string\">'chore'</span>,      <span class=\"comment\">//构建过程或辅助工具的变动</span></span><br><span class=\"line\"><span class=\"string\">'docs'</span>,       <span class=\"comment\">//文档（documentation）</span></span><br><span class=\"line\"><span class=\"string\">'feat'</span>,       <span class=\"comment\">//新功能（feature）</span></span><br><span class=\"line\"><span class=\"string\">'fix'</span>,        <span class=\"comment\">//修补bug</span></span><br><span class=\"line\"><span class=\"string\">'perf'</span>,</span><br><span class=\"line\"><span class=\"string\">'refactor'</span>,   <span class=\"comment\">//重构（即不是新增功能，也不是修改bug的代码变动）</span></span><br><span class=\"line\"><span class=\"string\">'revert'</span>,</span><br><span class=\"line\"><span class=\"string\">'style'</span>,      <span class=\"comment\">//格式（不影响代码运行的变动）</span></span><br><span class=\"line\"><span class=\"string\">'test'</span>,       <span class=\"comment\">//增加测试</span></span><br></pre></td></tr></table></figure>\n<p>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况建议是不要放入</p>\n<h4 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h4><p>用于说明commit的影响范围</p>\n<h4 id=\"subject\"><a href=\"#subject\" class=\"headerlink\" title=\"subject\"></a>subject</h4><p>subject是 commit 目的的简短描述，不超过50个字符</p>\n<p>要求如下：</p>\n<ul>\n<li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li>\n<li>第一个字母小写</li>\n<li>结尾不加句号（.）</li>\n</ul>\n<h3 id=\"body\"><a href=\"#body\" class=\"headerlink\" title=\"body\"></a>body</h3><p>body 部分是对本次 commit 的描述，可以分成多行，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">More detailed explanatory text, <span class=\"keyword\">if</span> necessary.  Wrap it to </span><br><span class=\"line\">about 72 characters or so. </span><br><span class=\"line\"></span><br><span class=\"line\">Further paragraphs come after blank lines.</span><br><span class=\"line\"></span><br><span class=\"line\">- Bullet points are okay, too</span><br><span class=\"line\">- Use a hanging indent</span><br></pre></td></tr></table></figure>\n<p>有两个注意点:</p>\n<ol>\n<li><p>使用第一人称现在时，比如使用change而不是changed或changes</p>\n</li>\n<li><p>应该说明代码变动的原因，以及跟以前提交的对比</p>\n</li>\n</ol>\n<h3 id=\"footer\"><a href=\"#footer\" class=\"headerlink\" title=\"footer\"></a>footer</h3><p>footer只用于以下两种情况：</p>\n<h4 id=\"不兼容变动\"><a href=\"#不兼容变动\" class=\"headerlink\" title=\"不兼容变动\"></a>不兼容变动</h4><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class=\"line\"></span><br><span class=\"line\">    To migrate the code follow the example below:</span><br><span class=\"line\"></span><br><span class=\"line\">    Before:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: <span class=\"string\">'attribute'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    After:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: <span class=\"string\">'@'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    The removed `inject` wasn<span class=\"string\">'t generaly useful for directives so there should be no code using it.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"关闭Issue\"><a href=\"#关闭Issue\" class=\"headerlink\" title=\"关闭Issue\"></a>关闭Issue</h4><p>如果当前 commit 针对某个issue，那么可以在 footer 部分关闭这个 issue</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//关闭一个</span><br><span class=\"line\">Closes <span class=\"comment\">#1</span></span><br><span class=\"line\">//关闭多个</span><br><span class=\"line\">Closes <span class=\"comment\">#2, #3, #4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h3><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，必须以revert:开头，后面跟着被撤销 commit 的 header</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revert: refactor(compiler): introduce `TestBed.deprecatedOverrideProvider` (<span class=\"comment\">#19558)</span></span><br><span class=\"line\"></span><br><span class=\"line\">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure>\n<p>Body部分的格式是固定的，必须写成<code>This reverts commit &lt;hash&gt;.</code>，其中的hash是被撤销 commit 的 SHA 标识符</p>\n<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">refactor(compiler): introduce `TestBed.deprecatedOverrideProvider` (<span class=\"comment\">#19558)</span></span><br><span class=\"line\"></span><br><span class=\"line\">This allows use to fix `TestBed.overrideProvider` to keep imported `NgModule`s eager,</span><br><span class=\"line\"><span class=\"keyword\">while</span> allowing our users to still keep the old semantics until they have fixed their</span><br><span class=\"line\">tests.</span><br><span class=\"line\"></span><br><span class=\"line\">PR Close <span class=\"comment\">#19558</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成change-log\"><a href=\"#生成change-log\" class=\"headerlink\" title=\"生成change log\"></a>生成change log</h2><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成。</p>\n<p>生成的文档包括以下三个部分。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New features</span><br><span class=\"line\">Bug fixes</span><br><span class=\"line\">Breaking changes.</span><br></pre></td></tr></table></figure>\n<p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p>\n<p>conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g conventional-changelog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure>\n<p>上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。</p>\n<p>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure>\n<p>为了方便使用，可以将其写入package.json的scripts字段。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"changelog\"</span>: <span class=\"string\">\"conventional-changelog -p angular -i CHANGELOG.md -w -r 0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后，直接运行下面的命令即可。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run changelog</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>之前看一个github的开源项目，看到要求使用angular的git commit规范，刚好自己项目中也需要规范git commit，所以就研究总结一下。</p>\n</blockquote>","more":"<h2 id=\"配置检测git-commit是否合法\"><a href=\"#配置检测git-commit是否合法\" class=\"headerlink\" title=\"配置检测git commit是否合法\"></a>配置检测git commit是否合法</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev @commitlint/cli husky</span><br></pre></td></tr></table></figure>\n<p>新建<code>commitlint.config.js</code>配置git提交规范（这里使用的是angular的提交规范）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"string\">'body-leading-blank'</span>: [<span class=\"number\">1</span>, <span class=\"string\">'always'</span>], <span class=\"comment\">//body开始于空白行</span></span><br><span class=\"line\">    <span class=\"string\">'body-tense'</span>: [<span class=\"number\">1</span>, <span class=\"string\">'always'</span>, [<span class=\"string\">'present-imperative'</span>]], </span><br><span class=\"line\">    <span class=\"string\">'footer-leading-blank'</span>: [<span class=\"number\">1</span>, <span class=\"string\">'always'</span>], <span class=\"comment\">//footer开始于空白行</span></span><br><span class=\"line\">    <span class=\"string\">'footer-tense'</span>: [<span class=\"number\">1</span>, <span class=\"string\">'always'</span>, [<span class=\"string\">'present-imperative'</span>]],</span><br><span class=\"line\">    <span class=\"string\">'header-max-length'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'always'</span>, <span class=\"number\">72</span>],</span><br><span class=\"line\">    <span class=\"string\">'scope-case'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'always'</span>, <span class=\"string\">'lowerCase'</span>], <span class=\"comment\">//scope小写</span></span><br><span class=\"line\">    <span class=\"string\">'subject-empty'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'never'</span>], <span class=\"comment\">//subjec不t为空</span></span><br><span class=\"line\">    <span class=\"string\">'subject-full-stop'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'never'</span>, <span class=\"string\">'.'</span>], <span class=\"comment\">//subject结尾不加'.'</span></span><br><span class=\"line\">    <span class=\"string\">'subject-tense'</span>: [<span class=\"number\">1</span>, <span class=\"string\">'always'</span>, [<span class=\"string\">'present-imperative'</span>]], <span class=\"comment\">//以动词开头，使用第一人称现在时，比如change，而不是changed或changes</span></span><br><span class=\"line\">    <span class=\"string\">'type-case'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'always'</span>, <span class=\"string\">'lowerCase'</span>], <span class=\"comment\">//type小写</span></span><br><span class=\"line\">    <span class=\"string\">'type-empty'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'never'</span>], <span class=\"comment\">//type不为空</span></span><br><span class=\"line\">    <span class=\"string\">'type-enum'</span>: [</span><br><span class=\"line\">      <span class=\"number\">2</span>,</span><br><span class=\"line\">      <span class=\"string\">'always'</span>,</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">'build'</span>,</span><br><span class=\"line\">        <span class=\"string\">'chore'</span>,      <span class=\"comment\">//构建过程或辅助工具的变动</span></span><br><span class=\"line\">        <span class=\"string\">'docs'</span>,       <span class=\"comment\">//文档（documentation）</span></span><br><span class=\"line\">        <span class=\"string\">'feat'</span>,       <span class=\"comment\">//新功能（feature）</span></span><br><span class=\"line\">        <span class=\"string\">'fix'</span>,        <span class=\"comment\">//修补bug</span></span><br><span class=\"line\">        <span class=\"string\">'perf'</span>,</span><br><span class=\"line\">        <span class=\"string\">'refactor'</span>,   <span class=\"comment\">//重构（即不是新增功能，也不是修改bug的代码变动）</span></span><br><span class=\"line\">        <span class=\"string\">'revert'</span>,</span><br><span class=\"line\">        <span class=\"string\">'style'</span>,      <span class=\"comment\">//格式（不影响代码运行的变动）</span></span><br><span class=\"line\">        <span class=\"string\">'test'</span>,       <span class=\"comment\">//增加测试</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">    ], <span class=\"comment\">//type关键字必须是其中之一</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>配置husky</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"commitmsg\"</span>: <span class=\"string\">\"commitlint -e\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，提交所写的commit如果不符合规范，则无法进行下一步操作</p>\n<h2 id=\"Commit-message-的格式\"><a href=\"#Commit-message-的格式\" class=\"headerlink\" title=\"Commit message 的格式\"></a>Commit message 的格式</h2><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>(<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>): <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Header是必需的，Body和Footer可以省略</p>\n<h3 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h3><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）</p>\n<h4 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h4><p>该字段用于说明commit的类型，被指定在上面的<code>type-enum</code>中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'build'</span>,</span><br><span class=\"line\"><span class=\"string\">'chore'</span>,      <span class=\"comment\">//构建过程或辅助工具的变动</span></span><br><span class=\"line\"><span class=\"string\">'docs'</span>,       <span class=\"comment\">//文档（documentation）</span></span><br><span class=\"line\"><span class=\"string\">'feat'</span>,       <span class=\"comment\">//新功能（feature）</span></span><br><span class=\"line\"><span class=\"string\">'fix'</span>,        <span class=\"comment\">//修补bug</span></span><br><span class=\"line\"><span class=\"string\">'perf'</span>,</span><br><span class=\"line\"><span class=\"string\">'refactor'</span>,   <span class=\"comment\">//重构（即不是新增功能，也不是修改bug的代码变动）</span></span><br><span class=\"line\"><span class=\"string\">'revert'</span>,</span><br><span class=\"line\"><span class=\"string\">'style'</span>,      <span class=\"comment\">//格式（不影响代码运行的变动）</span></span><br><span class=\"line\"><span class=\"string\">'test'</span>,       <span class=\"comment\">//增加测试</span></span><br></pre></td></tr></table></figure>\n<p>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况建议是不要放入</p>\n<h4 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h4><p>用于说明commit的影响范围</p>\n<h4 id=\"subject\"><a href=\"#subject\" class=\"headerlink\" title=\"subject\"></a>subject</h4><p>subject是 commit 目的的简短描述，不超过50个字符</p>\n<p>要求如下：</p>\n<ul>\n<li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li>\n<li>第一个字母小写</li>\n<li>结尾不加句号（.）</li>\n</ul>\n<h3 id=\"body\"><a href=\"#body\" class=\"headerlink\" title=\"body\"></a>body</h3><p>body 部分是对本次 commit 的描述，可以分成多行，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">More detailed explanatory text, <span class=\"keyword\">if</span> necessary.  Wrap it to </span><br><span class=\"line\">about 72 characters or so. </span><br><span class=\"line\"></span><br><span class=\"line\">Further paragraphs come after blank lines.</span><br><span class=\"line\"></span><br><span class=\"line\">- Bullet points are okay, too</span><br><span class=\"line\">- Use a hanging indent</span><br></pre></td></tr></table></figure>\n<p>有两个注意点:</p>\n<ol>\n<li><p>使用第一人称现在时，比如使用change而不是changed或changes</p>\n</li>\n<li><p>应该说明代码变动的原因，以及跟以前提交的对比</p>\n</li>\n</ol>\n<h3 id=\"footer\"><a href=\"#footer\" class=\"headerlink\" title=\"footer\"></a>footer</h3><p>footer只用于以下两种情况：</p>\n<h4 id=\"不兼容变动\"><a href=\"#不兼容变动\" class=\"headerlink\" title=\"不兼容变动\"></a>不兼容变动</h4><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class=\"line\"></span><br><span class=\"line\">    To migrate the code follow the example below:</span><br><span class=\"line\"></span><br><span class=\"line\">    Before:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: <span class=\"string\">'attribute'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    After:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: <span class=\"string\">'@'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    The removed `inject` wasn<span class=\"string\">'t generaly useful for directives so there should be no code using it.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"关闭Issue\"><a href=\"#关闭Issue\" class=\"headerlink\" title=\"关闭Issue\"></a>关闭Issue</h4><p>如果当前 commit 针对某个issue，那么可以在 footer 部分关闭这个 issue</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//关闭一个</span><br><span class=\"line\">Closes <span class=\"comment\">#1</span></span><br><span class=\"line\">//关闭多个</span><br><span class=\"line\">Closes <span class=\"comment\">#2, #3, #4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h3><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，必须以revert:开头，后面跟着被撤销 commit 的 header</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revert: refactor(compiler): introduce `TestBed.deprecatedOverrideProvider` (<span class=\"comment\">#19558)</span></span><br><span class=\"line\"></span><br><span class=\"line\">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure>\n<p>Body部分的格式是固定的，必须写成<code>This reverts commit &lt;hash&gt;.</code>，其中的hash是被撤销 commit 的 SHA 标识符</p>\n<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">refactor(compiler): introduce `TestBed.deprecatedOverrideProvider` (<span class=\"comment\">#19558)</span></span><br><span class=\"line\"></span><br><span class=\"line\">This allows use to fix `TestBed.overrideProvider` to keep imported `NgModule`s eager,</span><br><span class=\"line\"><span class=\"keyword\">while</span> allowing our users to still keep the old semantics until they have fixed their</span><br><span class=\"line\">tests.</span><br><span class=\"line\"></span><br><span class=\"line\">PR Close <span class=\"comment\">#19558</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成change-log\"><a href=\"#生成change-log\" class=\"headerlink\" title=\"生成change log\"></a>生成change log</h2><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成。</p>\n<p>生成的文档包括以下三个部分。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New features</span><br><span class=\"line\">Bug fixes</span><br><span class=\"line\">Breaking changes.</span><br></pre></td></tr></table></figure>\n<p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p>\n<p>conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g conventional-changelog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure>\n<p>上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。</p>\n<p>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure>\n<p>为了方便使用，可以将其写入package.json的scripts字段。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"changelog\"</span>: <span class=\"string\">\"conventional-changelog -p angular -i CHANGELOG.md -w -r 0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后，直接运行下面的命令即可。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run changelog</span><br></pre></td></tr></table></figure>"},{"title":"Git连接Github总结","date":"2016-11-13T02:54:26.000Z","comments":1,"_content":"> 好长时间不写东西了， 因为换了工作，所以在忙着熟悉公司的项目代码，所以没什么时间搞自己的东西，回想了一下，在计划中要总结一下关于如何使用终端的git连接github，所以写一下这个。\n\n<!--more-->\n\n## 创建github仓库\n\n在注册了账号后登陆点击头像旁边的+选择New repository创建一个个人的仓库。填写仓库名称，如图所示：\n\n![icon](/img/git&github/1.png)\n\n## 安装git客户端\n\n如果是windows，建议安装[gitbash](https://git-for-windows.github.io/)\n\n如果是mac，先安装[Homebrew](http://brew.sh/index_zh-cn.html)，然后再使用homebrew安装git。\n\n```shell\n$ brew install git \n```\n\n如果是linux直接在终端使用`apt-get`安装：\n\n```shell\nsudo apt-get install git\n```\n\n## 配置git\n\n### 1.初始化git\n\n一般我们是要将自己的本地项目上传到github，实现开源共享，那么就首先需要让git知道它需要跟踪这个项目，所以，我们首先在终端进入项目，初始化git(以mac为例，假设项目在桌面)：\n\n```shell\n//进入项目\n\n$ cd Desktop/myproject\n\n//初始化git\n\n$ git init\n```\n\n#### 2.创建ssh key\n\n为了让github能够识别是我们自己上传文件，需要创建ssh key\n\n```shell\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n\n这里的**your_email@youremail.com**是你的**邮箱地址**，在输入后会询问你是否保存创建的ssh key，点回车就好，然后要求输入你要设置的密码，如果直接回车表示不设密码。然后会提示你ssh key已经创建好。\n\n#### 3.将ssh可以写入github\n\n创建好本地的ssh key后，我们需要让github知道这个ssh key是我们自己，所以需要将生成的ssh key复制出来，写入github，在mac下在终端输入\n\n```shell \ncat ~/.ssh/id_rsa.pub\n```\n\n此时在终端会显示出刚刚创建好的ssh key，复制出来，在github在点击头像，然后点击setting，在找到SSH and GPG keys，创建一个new ssh key，然后将刚刚复制的ssh key填入即可。\n\n#### 4.验证是否连接成功\n\n在终端输入\n\n```shell\n$ ssh -T git@github.com\n```\n\n如果回车看到：**You’ve successfully authenticated, but GitHub does not provide shell access** 。表示已成功连上github。\n\n#### 5.设置username和email\n\n在把本项目上传到github之前还需要分别输入设置username和email，因为github每次commit都会记录他们。所以分别输入如下命令：\n\n```shell\n$ git config --global user.name \"your name\"\n$ git config --global user.email \"your_email@youremail.com\"\n```\n\n#### 6.添加远程地址\n\n在与github连接成功后，如何才能让相应的项目上传到对应的仓库呢？这里就需要添加远程地址，从而让我们的本地项目顺利到达对应的仓库。\n\n打开终端，输入\n\n```shell\n$ git remote add origin git@github.com:yourName/yourRepo.git\n```\n\n后面的yourName和yourRepo分别是你的github的用户名和刚才新建的仓库名。\n\n## 上传项目\n\n进入项目，在终端运行\n\n```shell\n$ git status\n```\n查看要上传的文件是否正确，然后将项目下的所有文件添加到git跟踪范围。\n\n```shell\n$ git add .\n```\n记录此次提交并上传\n\n```shell\n$ git commit -m 'my project push'\n$ git push origin master\n```\n\n这里的**master**指的是主分支名，如果是其他分支，则填写相应的分支名。\n\n这样我们就将我们的项目上传到github仓库。\n\n","source":"_posts/gitandgithub.md","raw":"---\ntitle: Git连接Github总结\ndate: 2016-11-13 10:54:26\ntags: git&github\ncomments: true\ncategories: \"git&github\"\n---\n> 好长时间不写东西了， 因为换了工作，所以在忙着熟悉公司的项目代码，所以没什么时间搞自己的东西，回想了一下，在计划中要总结一下关于如何使用终端的git连接github，所以写一下这个。\n\n<!--more-->\n\n## 创建github仓库\n\n在注册了账号后登陆点击头像旁边的+选择New repository创建一个个人的仓库。填写仓库名称，如图所示：\n\n![icon](/img/git&github/1.png)\n\n## 安装git客户端\n\n如果是windows，建议安装[gitbash](https://git-for-windows.github.io/)\n\n如果是mac，先安装[Homebrew](http://brew.sh/index_zh-cn.html)，然后再使用homebrew安装git。\n\n```shell\n$ brew install git \n```\n\n如果是linux直接在终端使用`apt-get`安装：\n\n```shell\nsudo apt-get install git\n```\n\n## 配置git\n\n### 1.初始化git\n\n一般我们是要将自己的本地项目上传到github，实现开源共享，那么就首先需要让git知道它需要跟踪这个项目，所以，我们首先在终端进入项目，初始化git(以mac为例，假设项目在桌面)：\n\n```shell\n//进入项目\n\n$ cd Desktop/myproject\n\n//初始化git\n\n$ git init\n```\n\n#### 2.创建ssh key\n\n为了让github能够识别是我们自己上传文件，需要创建ssh key\n\n```shell\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n\n这里的**your_email@youremail.com**是你的**邮箱地址**，在输入后会询问你是否保存创建的ssh key，点回车就好，然后要求输入你要设置的密码，如果直接回车表示不设密码。然后会提示你ssh key已经创建好。\n\n#### 3.将ssh可以写入github\n\n创建好本地的ssh key后，我们需要让github知道这个ssh key是我们自己，所以需要将生成的ssh key复制出来，写入github，在mac下在终端输入\n\n```shell \ncat ~/.ssh/id_rsa.pub\n```\n\n此时在终端会显示出刚刚创建好的ssh key，复制出来，在github在点击头像，然后点击setting，在找到SSH and GPG keys，创建一个new ssh key，然后将刚刚复制的ssh key填入即可。\n\n#### 4.验证是否连接成功\n\n在终端输入\n\n```shell\n$ ssh -T git@github.com\n```\n\n如果回车看到：**You’ve successfully authenticated, but GitHub does not provide shell access** 。表示已成功连上github。\n\n#### 5.设置username和email\n\n在把本项目上传到github之前还需要分别输入设置username和email，因为github每次commit都会记录他们。所以分别输入如下命令：\n\n```shell\n$ git config --global user.name \"your name\"\n$ git config --global user.email \"your_email@youremail.com\"\n```\n\n#### 6.添加远程地址\n\n在与github连接成功后，如何才能让相应的项目上传到对应的仓库呢？这里就需要添加远程地址，从而让我们的本地项目顺利到达对应的仓库。\n\n打开终端，输入\n\n```shell\n$ git remote add origin git@github.com:yourName/yourRepo.git\n```\n\n后面的yourName和yourRepo分别是你的github的用户名和刚才新建的仓库名。\n\n## 上传项目\n\n进入项目，在终端运行\n\n```shell\n$ git status\n```\n查看要上传的文件是否正确，然后将项目下的所有文件添加到git跟踪范围。\n\n```shell\n$ git add .\n```\n记录此次提交并上传\n\n```shell\n$ git commit -m 'my project push'\n$ git push origin master\n```\n\n这里的**master**指的是主分支名，如果是其他分支，则填写相应的分支名。\n\n这样我们就将我们的项目上传到github仓库。\n\n","slug":"gitandgithub","published":1,"updated":"2016-11-12T19:12:56.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktob3000xzrv48foaa2na","content":"<blockquote>\n<p>好长时间不写东西了， 因为换了工作，所以在忙着熟悉公司的项目代码，所以没什么时间搞自己的东西，回想了一下，在计划中要总结一下关于如何使用终端的git连接github，所以写一下这个。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"创建github仓库\"><a href=\"#创建github仓库\" class=\"headerlink\" title=\"创建github仓库\"></a>创建github仓库</h2><p>在注册了账号后登陆点击头像旁边的+选择New repository创建一个个人的仓库。填写仓库名称，如图所示：</p>\n<p><img src=\"/img/git&amp;github/1.png\" alt=\"icon\"></p>\n<h2 id=\"安装git客户端\"><a href=\"#安装git客户端\" class=\"headerlink\" title=\"安装git客户端\"></a>安装git客户端</h2><p>如果是windows，建议安装<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"noopener\">gitbash</a></p>\n<p>如果是mac，先安装<a href=\"http://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"noopener\">Homebrew</a>，然后再使用homebrew安装git。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install git</span></span><br></pre></td></tr></table></figure>\n<p>如果是linux直接在终端使用<code>apt-get</code>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h2><h3 id=\"1-初始化git\"><a href=\"#1-初始化git\" class=\"headerlink\" title=\"1.初始化git\"></a>1.初始化git</h3><p>一般我们是要将自己的本地项目上传到github，实现开源共享，那么就首先需要让git知道它需要跟踪这个项目，所以，我们首先在终端进入项目，初始化git(以mac为例，假设项目在桌面)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//进入项目</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> Desktop/myproject</span></span><br><span class=\"line\"></span><br><span class=\"line\">//初始化git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-创建ssh-key\"><a href=\"#2-创建ssh-key\" class=\"headerlink\" title=\"2.创建ssh key\"></a>2.创建ssh key</h4><p>为了让github能够识别是我们自己上传文件，需要创建ssh key</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span></span><br></pre></td></tr></table></figure>\n<p>这里的<a href=\"mailto:**your_email@youremail.com\" target=\"_blank\" rel=\"noopener\">**your_email@youremail.com</a><strong>是你的</strong>邮箱地址**，在输入后会询问你是否保存创建的ssh key，点回车就好，然后要求输入你要设置的密码，如果直接回车表示不设密码。然后会提示你ssh key已经创建好。</p>\n<h4 id=\"3-将ssh可以写入github\"><a href=\"#3-将ssh可以写入github\" class=\"headerlink\" title=\"3.将ssh可以写入github\"></a>3.将ssh可以写入github</h4><p>创建好本地的ssh key后，我们需要让github知道这个ssh key是我们自己，所以需要将生成的ssh key复制出来，写入github，在mac下在终端输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>此时在终端会显示出刚刚创建好的ssh key，复制出来，在github在点击头像，然后点击setting，在找到SSH and GPG keys，创建一个new ssh key，然后将刚刚复制的ssh key填入即可。</p>\n<h4 id=\"4-验证是否连接成功\"><a href=\"#4-验证是否连接成功\" class=\"headerlink\" title=\"4.验证是否连接成功\"></a>4.验证是否连接成功</h4><p>在终端输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -T git@github.com</span></span><br></pre></td></tr></table></figure>\n<p>如果回车看到：<strong>You’ve successfully authenticated, but GitHub does not provide shell access</strong> 。表示已成功连上github。</p>\n<h4 id=\"5-设置username和email\"><a href=\"#5-设置username和email\" class=\"headerlink\" title=\"5.设置username和email\"></a>5.设置username和email</h4><p>在把本项目上传到github之前还需要分别输入设置username和email，因为github每次commit都会记录他们。所以分别输入如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.name <span class=\"string\">\"your name\"</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.email <span class=\"string\">\"your_email@youremail.com\"</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-添加远程地址\"><a href=\"#6-添加远程地址\" class=\"headerlink\" title=\"6.添加远程地址\"></a>6.添加远程地址</h4><p>在与github连接成功后，如何才能让相应的项目上传到对应的仓库呢？这里就需要添加远程地址，从而让我们的本地项目顺利到达对应的仓库。</p>\n<p>打开终端，输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote add origin git@github.com:yourName/yourRepo.git</span></span><br></pre></td></tr></table></figure>\n<p>后面的yourName和yourRepo分别是你的github的用户名和刚才新建的仓库名。</p>\n<h2 id=\"上传项目\"><a href=\"#上传项目\" class=\"headerlink\" title=\"上传项目\"></a>上传项目</h2><p>进入项目，在终端运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br></pre></td></tr></table></figure>\n<p>查看要上传的文件是否正确，然后将项目下的所有文件添加到git跟踪范围。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add .</span></span><br></pre></td></tr></table></figure>\n<p>记录此次提交并上传</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">'my project push'</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin master</span></span><br></pre></td></tr></table></figure>\n<p>这里的<strong>master</strong>指的是主分支名，如果是其他分支，则填写相应的分支名。</p>\n<p>这样我们就将我们的项目上传到github仓库。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>好长时间不写东西了， 因为换了工作，所以在忙着熟悉公司的项目代码，所以没什么时间搞自己的东西，回想了一下，在计划中要总结一下关于如何使用终端的git连接github，所以写一下这个。</p>\n</blockquote>","more":"<h2 id=\"创建github仓库\"><a href=\"#创建github仓库\" class=\"headerlink\" title=\"创建github仓库\"></a>创建github仓库</h2><p>在注册了账号后登陆点击头像旁边的+选择New repository创建一个个人的仓库。填写仓库名称，如图所示：</p>\n<p><img src=\"/img/git&amp;github/1.png\" alt=\"icon\"></p>\n<h2 id=\"安装git客户端\"><a href=\"#安装git客户端\" class=\"headerlink\" title=\"安装git客户端\"></a>安装git客户端</h2><p>如果是windows，建议安装<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"noopener\">gitbash</a></p>\n<p>如果是mac，先安装<a href=\"http://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"noopener\">Homebrew</a>，然后再使用homebrew安装git。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install git</span></span><br></pre></td></tr></table></figure>\n<p>如果是linux直接在终端使用<code>apt-get</code>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h2><h3 id=\"1-初始化git\"><a href=\"#1-初始化git\" class=\"headerlink\" title=\"1.初始化git\"></a>1.初始化git</h3><p>一般我们是要将自己的本地项目上传到github，实现开源共享，那么就首先需要让git知道它需要跟踪这个项目，所以，我们首先在终端进入项目，初始化git(以mac为例，假设项目在桌面)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//进入项目</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> Desktop/myproject</span></span><br><span class=\"line\"></span><br><span class=\"line\">//初始化git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-创建ssh-key\"><a href=\"#2-创建ssh-key\" class=\"headerlink\" title=\"2.创建ssh key\"></a>2.创建ssh key</h4><p>为了让github能够识别是我们自己上传文件，需要创建ssh key</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span></span><br></pre></td></tr></table></figure>\n<p>这里的<a href=\"mailto:**your_email@youremail.com\" target=\"_blank\" rel=\"noopener\">**your_email@youremail.com</a><strong>是你的</strong>邮箱地址**，在输入后会询问你是否保存创建的ssh key，点回车就好，然后要求输入你要设置的密码，如果直接回车表示不设密码。然后会提示你ssh key已经创建好。</p>\n<h4 id=\"3-将ssh可以写入github\"><a href=\"#3-将ssh可以写入github\" class=\"headerlink\" title=\"3.将ssh可以写入github\"></a>3.将ssh可以写入github</h4><p>创建好本地的ssh key后，我们需要让github知道这个ssh key是我们自己，所以需要将生成的ssh key复制出来，写入github，在mac下在终端输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>此时在终端会显示出刚刚创建好的ssh key，复制出来，在github在点击头像，然后点击setting，在找到SSH and GPG keys，创建一个new ssh key，然后将刚刚复制的ssh key填入即可。</p>\n<h4 id=\"4-验证是否连接成功\"><a href=\"#4-验证是否连接成功\" class=\"headerlink\" title=\"4.验证是否连接成功\"></a>4.验证是否连接成功</h4><p>在终端输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh -T git@github.com</span></span><br></pre></td></tr></table></figure>\n<p>如果回车看到：<strong>You’ve successfully authenticated, but GitHub does not provide shell access</strong> 。表示已成功连上github。</p>\n<h4 id=\"5-设置username和email\"><a href=\"#5-设置username和email\" class=\"headerlink\" title=\"5.设置username和email\"></a>5.设置username和email</h4><p>在把本项目上传到github之前还需要分别输入设置username和email，因为github每次commit都会记录他们。所以分别输入如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.name <span class=\"string\">\"your name\"</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.email <span class=\"string\">\"your_email@youremail.com\"</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-添加远程地址\"><a href=\"#6-添加远程地址\" class=\"headerlink\" title=\"6.添加远程地址\"></a>6.添加远程地址</h4><p>在与github连接成功后，如何才能让相应的项目上传到对应的仓库呢？这里就需要添加远程地址，从而让我们的本地项目顺利到达对应的仓库。</p>\n<p>打开终端，输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git remote add origin git@github.com:yourName/yourRepo.git</span></span><br></pre></td></tr></table></figure>\n<p>后面的yourName和yourRepo分别是你的github的用户名和刚才新建的仓库名。</p>\n<h2 id=\"上传项目\"><a href=\"#上传项目\" class=\"headerlink\" title=\"上传项目\"></a>上传项目</h2><p>进入项目，在终端运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br></pre></td></tr></table></figure>\n<p>查看要上传的文件是否正确，然后将项目下的所有文件添加到git跟踪范围。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add .</span></span><br></pre></td></tr></table></figure>\n<p>记录此次提交并上传</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">'my project push'</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin master</span></span><br></pre></td></tr></table></figure>\n<p>这里的<strong>master</strong>指的是主分支名，如果是其他分支，则填写相应的分支名。</p>\n<p>这样我们就将我们的项目上传到github仓库。</p>"},{"title":"使用git回退远程库代码","date":"2017-03-04T12:57:48.000Z","comments":1,"_content":"\n> 前几天在公司合代码的时候出现了问题，需要reset回去，在同事的帮助下利用git的log进行了reset，虽然很简单，但是还是想记录一下。\n\n<!--more-->\n\n## 本地代码回滚\n\n首先需要使用`git log`查看需要回退的hash码，但是因为是多人合作，所以我在gitlab中切换到自己的分支，然后在`Graphs->Network`中查看树桩gitlog图，在其中有每一次git操作的hash码，如果想回退到某个git操作，只需要进行如下操作：\n\n```shell\n$ git reset --hard \"commit id\"\n```\n即可回退到当前提交，这次提交之后的所有提交的log也会随着回退而全部消失。\n\n但是这样的回退只是本地代码回退，远程代码库依然是已经更新过的，接下来需要让远程代码库更新。\n\n### reset & revert\n\n在git的命令中，这两个命令都是回退，不同的在于，`reset`在回退后，回退点之前的记录也会被清空，但是`revert`会保留，所以回退的时候使用哪一个可以自己选择。\n\n这里有两个命令需要区别一下，\n\n## 更新远程代码库\n\n因为reset之后本地库落后于远程库一个版本，因此需要强制提交。\n\n```shell\n$ git push origin master -f\n```\n\n这里的`-f`可以强制将本地代码库提交到远程。\n","source":"_posts/gitreset-md.md","raw":"---\ntitle: 使用git回退远程库代码\ndate: 2017-03-04 20:57:48\ntags: Git\ncomments: true\ncategories: \"Git\"\n---\n\n> 前几天在公司合代码的时候出现了问题，需要reset回去，在同事的帮助下利用git的log进行了reset，虽然很简单，但是还是想记录一下。\n\n<!--more-->\n\n## 本地代码回滚\n\n首先需要使用`git log`查看需要回退的hash码，但是因为是多人合作，所以我在gitlab中切换到自己的分支，然后在`Graphs->Network`中查看树桩gitlog图，在其中有每一次git操作的hash码，如果想回退到某个git操作，只需要进行如下操作：\n\n```shell\n$ git reset --hard \"commit id\"\n```\n即可回退到当前提交，这次提交之后的所有提交的log也会随着回退而全部消失。\n\n但是这样的回退只是本地代码回退，远程代码库依然是已经更新过的，接下来需要让远程代码库更新。\n\n### reset & revert\n\n在git的命令中，这两个命令都是回退，不同的在于，`reset`在回退后，回退点之前的记录也会被清空，但是`revert`会保留，所以回退的时候使用哪一个可以自己选择。\n\n这里有两个命令需要区别一下，\n\n## 更新远程代码库\n\n因为reset之后本地库落后于远程库一个版本，因此需要强制提交。\n\n```shell\n$ git push origin master -f\n```\n\n这里的`-f`可以强制将本地代码库提交到远程。\n","slug":"gitreset-md","published":1,"updated":"2017-03-04T13:03:02.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktob40012zrv4ixzik4nh","content":"<blockquote>\n<p>前几天在公司合代码的时候出现了问题，需要reset回去，在同事的帮助下利用git的log进行了reset，虽然很简单，但是还是想记录一下。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"本地代码回滚\"><a href=\"#本地代码回滚\" class=\"headerlink\" title=\"本地代码回滚\"></a>本地代码回滚</h2><p>首先需要使用<code>git log</code>查看需要回退的hash码，但是因为是多人合作，所以我在gitlab中切换到自己的分支，然后在<code>Graphs-&gt;Network</code>中查看树桩gitlog图，在其中有每一次git操作的hash码，如果想回退到某个git操作，只需要进行如下操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard <span class=\"string\">\"commit id\"</span></span></span><br></pre></td></tr></table></figure>\n<p>即可回退到当前提交，这次提交之后的所有提交的log也会随着回退而全部消失。</p>\n<p>但是这样的回退只是本地代码回退，远程代码库依然是已经更新过的，接下来需要让远程代码库更新。</p>\n<h3 id=\"reset-amp-revert\"><a href=\"#reset-amp-revert\" class=\"headerlink\" title=\"reset &amp; revert\"></a>reset &amp; revert</h3><p>在git的命令中，这两个命令都是回退，不同的在于，<code>reset</code>在回退后，回退点之前的记录也会被清空，但是<code>revert</code>会保留，所以回退的时候使用哪一个可以自己选择。</p>\n<p>这里有两个命令需要区别一下，</p>\n<h2 id=\"更新远程代码库\"><a href=\"#更新远程代码库\" class=\"headerlink\" title=\"更新远程代码库\"></a>更新远程代码库</h2><p>因为reset之后本地库落后于远程库一个版本，因此需要强制提交。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin master -f</span></span><br></pre></td></tr></table></figure>\n<p>这里的<code>-f</code>可以强制将本地代码库提交到远程。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>前几天在公司合代码的时候出现了问题，需要reset回去，在同事的帮助下利用git的log进行了reset，虽然很简单，但是还是想记录一下。</p>\n</blockquote>","more":"<h2 id=\"本地代码回滚\"><a href=\"#本地代码回滚\" class=\"headerlink\" title=\"本地代码回滚\"></a>本地代码回滚</h2><p>首先需要使用<code>git log</code>查看需要回退的hash码，但是因为是多人合作，所以我在gitlab中切换到自己的分支，然后在<code>Graphs-&gt;Network</code>中查看树桩gitlog图，在其中有每一次git操作的hash码，如果想回退到某个git操作，只需要进行如下操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reset --hard <span class=\"string\">\"commit id\"</span></span></span><br></pre></td></tr></table></figure>\n<p>即可回退到当前提交，这次提交之后的所有提交的log也会随着回退而全部消失。</p>\n<p>但是这样的回退只是本地代码回退，远程代码库依然是已经更新过的，接下来需要让远程代码库更新。</p>\n<h3 id=\"reset-amp-revert\"><a href=\"#reset-amp-revert\" class=\"headerlink\" title=\"reset &amp; revert\"></a>reset &amp; revert</h3><p>在git的命令中，这两个命令都是回退，不同的在于，<code>reset</code>在回退后，回退点之前的记录也会被清空，但是<code>revert</code>会保留，所以回退的时候使用哪一个可以自己选择。</p>\n<p>这里有两个命令需要区别一下，</p>\n<h2 id=\"更新远程代码库\"><a href=\"#更新远程代码库\" class=\"headerlink\" title=\"更新远程代码库\"></a>更新远程代码库</h2><p>因为reset之后本地库落后于远程库一个版本，因此需要强制提交。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git push origin master -f</span></span><br></pre></td></tr></table></figure>\n<p>这里的<code>-f</code>可以强制将本地代码库提交到远程。</p>"},{"title":"调用Google Map Api实现自定义Google Map","date":"2017-06-10T16:10:54.000Z","comments":1,"_content":"\n>前段时间做了一个简单调用Google Map API的项目，因为之前没有接触过这些，所以在看了文档做出来之后自己稍微总结一下。\n\n<!--more-->\n\n## 加载 Google Maps JavaScript API\n\n官方指导教程中写的引入的Google Map API是异步调用的，引入方式如下：\n\n```html\n<script>\n  var map;\n  function initMap() {\n    map = new google.maps.Map(document.getElementById('map'), {\n      center: {lat: -34.397, lng: 150.644},\n      zoom: 8\n    });\n  }\n</script>\n<script async defer src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap\"></script>\n```\n\n这里需要注意一点官方提供是异步加载Google Maps JavaScript API，这样会让网站运行速率更高，`但是这样会有一个问题，就是在自己写的js必须与引用在引入api之前，否则会报错。`由于项目中js api只能在自己写的js的后面，所以只能使用同步的方式引入api js，引入方式如下：\n\n```js\n<script src=\"https://maps.googleapis.com/maps/api/js?key=yourkey\"></script>\n```\n\n这里的key是通过申请成为谷歌开发者然后获取的密钥。\n\n## 创建地图对象\n\n地图的 JavaScript 类是 Map 类。该类的对象定义页面上的单个地图。（创建该类的多个实例–每个对象都将定义页面上的一个不同地图。）我们利用 JavaScript new 运算符来新建该类。\n\n```js\n//初次进入页面只显示首都不显示坐标，只定义地图\nconst map = new google.maps.Map(document.getElementById('map'), {\n  center: capitalLatLng,\n  zoom: mapZoom,\n  maxZoom: mapMaxZoom,\n  minZoom: mapMinZoom,\n  //禁用街景地图\n  streetViewControl:false,\n  mapTypeId: google.maps.MapTypeId.ROADMAP,\n  //控制地图类型控件的位置\n  mapTypeControlOptions: {\n    style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n    position: google.maps.ControlPosition.TOP_RIGHT\n  },\n});\n```\n\n- center：设置地图初始化后中心点的位置，接受经纬度对象{lat: -25.363, lng: 131.044}\n- zoom：地图初始化后的缩放比例\n- mapTypeId：设置地图类型，这里设置的就是普通的街道地图\n- mapTypeControlOptions：修改地图类型控件\n\n谷歌地图默认会显示缩放控件（zoomControl），地图类型控件（mapTypeControl），街景小人（streetViewControl），全屏按钮（fullscreenControl，移动设备可见），除此之外还有旋转控件（rotateControl，默认情况下，该控件是否显示取决于给定地图类型在当前的缩放级别和位置上是否存在 45° 图像），比例控件（scaleControl，默认不显示）。但是有些时候可能需要调节他们的位置或者是否显示，可以通过相应的Options去控制，例如在上面初始化中，控制地图类型控件的位置。\n\n## 创建地图marker\n\n我们在创建好地图后需要根据坐标去在地图中标注出相应的位置（marker对象），创建方式如下：\n\n```js\n//latlngArr为所地理位置数组\nlatlngArr.map((position, index) => {\n  let marker = new google.maps.Marker({\n    position,\n    zIndex: 0,\n    map\n  });\n});\n```\n\n其中`map`为前面所创建的地图，`postion`则为marker的坐标位置。\n\n#### 给marker添加事件\n\n经常见到在点击marker出现弹窗，这个效果可以通过给marker添加点击事件\n\n```js\nmarker.addListener('click', function (e) {\n  map.setZoom(mapMaxZoom);\n});\n```\n\n这里实现了一个点击设置地图放大到最大的效果，这里需要多说一句，就是在对象中的熟悉是可以通过`set`去设置的。\n\n#### *设置marker自动居中\n\n当设置了多个marker在地图中后，会发现点击某个不在中心的marker后，它并不会自动居中，这一点很不友好，为了设置点击自动居中，需要添加如下代码：\n\n```js\n//map auto center\nconst bounds = new google.maps.LatLngBounds();\nlatlngArr.map((position, index) => {\n  let marker = new google.maps.Marker({\n    position,\n    icon: notSelect,\n    zIndex: 0,\n    map\n  });\n  bounds.extend(marker.position);\n});\nmap.fitBounds(bounds);\nmap.panToBounds(bounds);\n```\n\n- 一个`LatLngBounds`实例表示地理坐标中的矩形，包括穿过180度纵向子午线在内的矩形\n- `LatLngBounds`类下的`extend`方法用于扩展这个边界以包含给定的点（marker）\n- `fitBounds`设置视口包含给定的边界\n\n#### *设置地图缩放自动调整\n\n根据marker的分布自动调整地图缩放比例是很常见的交互，Google Map API提供了`panToBounds`方法用于根据给定的`LatLngBounds`绘制出包含最小边界的地图，所以在代码中只需要设置`map.panToBounds(bounds)`即可。\n\n## 总结\n\n真心觉得Google的文档写的很好，而且Google Map的功能很强大，我在项目中只是使用了些简单的功能，更复杂功能请参考Google Map API：https://developers.google.com/maps/documentation/javascript/reference?csw=1","source":"_posts/google-map.md","raw":"---\ntitle: 调用Google Map Api实现自定义Google Map\ndate: 2017-06-11 00:10:54\ntags: Javascript\ncomments: true\ncategories: \"Javascript\"\n---\n\n>前段时间做了一个简单调用Google Map API的项目，因为之前没有接触过这些，所以在看了文档做出来之后自己稍微总结一下。\n\n<!--more-->\n\n## 加载 Google Maps JavaScript API\n\n官方指导教程中写的引入的Google Map API是异步调用的，引入方式如下：\n\n```html\n<script>\n  var map;\n  function initMap() {\n    map = new google.maps.Map(document.getElementById('map'), {\n      center: {lat: -34.397, lng: 150.644},\n      zoom: 8\n    });\n  }\n</script>\n<script async defer src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap\"></script>\n```\n\n这里需要注意一点官方提供是异步加载Google Maps JavaScript API，这样会让网站运行速率更高，`但是这样会有一个问题，就是在自己写的js必须与引用在引入api之前，否则会报错。`由于项目中js api只能在自己写的js的后面，所以只能使用同步的方式引入api js，引入方式如下：\n\n```js\n<script src=\"https://maps.googleapis.com/maps/api/js?key=yourkey\"></script>\n```\n\n这里的key是通过申请成为谷歌开发者然后获取的密钥。\n\n## 创建地图对象\n\n地图的 JavaScript 类是 Map 类。该类的对象定义页面上的单个地图。（创建该类的多个实例–每个对象都将定义页面上的一个不同地图。）我们利用 JavaScript new 运算符来新建该类。\n\n```js\n//初次进入页面只显示首都不显示坐标，只定义地图\nconst map = new google.maps.Map(document.getElementById('map'), {\n  center: capitalLatLng,\n  zoom: mapZoom,\n  maxZoom: mapMaxZoom,\n  minZoom: mapMinZoom,\n  //禁用街景地图\n  streetViewControl:false,\n  mapTypeId: google.maps.MapTypeId.ROADMAP,\n  //控制地图类型控件的位置\n  mapTypeControlOptions: {\n    style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n    position: google.maps.ControlPosition.TOP_RIGHT\n  },\n});\n```\n\n- center：设置地图初始化后中心点的位置，接受经纬度对象{lat: -25.363, lng: 131.044}\n- zoom：地图初始化后的缩放比例\n- mapTypeId：设置地图类型，这里设置的就是普通的街道地图\n- mapTypeControlOptions：修改地图类型控件\n\n谷歌地图默认会显示缩放控件（zoomControl），地图类型控件（mapTypeControl），街景小人（streetViewControl），全屏按钮（fullscreenControl，移动设备可见），除此之外还有旋转控件（rotateControl，默认情况下，该控件是否显示取决于给定地图类型在当前的缩放级别和位置上是否存在 45° 图像），比例控件（scaleControl，默认不显示）。但是有些时候可能需要调节他们的位置或者是否显示，可以通过相应的Options去控制，例如在上面初始化中，控制地图类型控件的位置。\n\n## 创建地图marker\n\n我们在创建好地图后需要根据坐标去在地图中标注出相应的位置（marker对象），创建方式如下：\n\n```js\n//latlngArr为所地理位置数组\nlatlngArr.map((position, index) => {\n  let marker = new google.maps.Marker({\n    position,\n    zIndex: 0,\n    map\n  });\n});\n```\n\n其中`map`为前面所创建的地图，`postion`则为marker的坐标位置。\n\n#### 给marker添加事件\n\n经常见到在点击marker出现弹窗，这个效果可以通过给marker添加点击事件\n\n```js\nmarker.addListener('click', function (e) {\n  map.setZoom(mapMaxZoom);\n});\n```\n\n这里实现了一个点击设置地图放大到最大的效果，这里需要多说一句，就是在对象中的熟悉是可以通过`set`去设置的。\n\n#### *设置marker自动居中\n\n当设置了多个marker在地图中后，会发现点击某个不在中心的marker后，它并不会自动居中，这一点很不友好，为了设置点击自动居中，需要添加如下代码：\n\n```js\n//map auto center\nconst bounds = new google.maps.LatLngBounds();\nlatlngArr.map((position, index) => {\n  let marker = new google.maps.Marker({\n    position,\n    icon: notSelect,\n    zIndex: 0,\n    map\n  });\n  bounds.extend(marker.position);\n});\nmap.fitBounds(bounds);\nmap.panToBounds(bounds);\n```\n\n- 一个`LatLngBounds`实例表示地理坐标中的矩形，包括穿过180度纵向子午线在内的矩形\n- `LatLngBounds`类下的`extend`方法用于扩展这个边界以包含给定的点（marker）\n- `fitBounds`设置视口包含给定的边界\n\n#### *设置地图缩放自动调整\n\n根据marker的分布自动调整地图缩放比例是很常见的交互，Google Map API提供了`panToBounds`方法用于根据给定的`LatLngBounds`绘制出包含最小边界的地图，所以在代码中只需要设置`map.panToBounds(bounds)`即可。\n\n## 总结\n\n真心觉得Google的文档写的很好，而且Google Map的功能很强大，我在项目中只是使用了些简单的功能，更复杂功能请参考Google Map API：https://developers.google.com/maps/documentation/javascript/reference?csw=1","slug":"google-map","published":1,"updated":"2017-10-18T09:49:57.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktob60015zrv4wwpnmgl2","content":"<blockquote>\n<p>前段时间做了一个简单调用Google Map API的项目，因为之前没有接触过这些，所以在看了文档做出来之后自己稍微总结一下。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"加载-Google-Maps-JavaScript-API\"><a href=\"#加载-Google-Maps-JavaScript-API\" class=\"headerlink\" title=\"加载 Google Maps JavaScript API\"></a>加载 Google Maps JavaScript API</h2><p>官方指导教程中写的引入的Google Map API是异步调用的，引入方式如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> map;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initMap</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    map = <span class=\"keyword\">new</span> google.maps.Map(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'map'</span>), &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      center: &#123;lat: -34.397, lng: 150.644&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      zoom: 8</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">defer</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;callback=initMap\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里需要注意一点官方提供是异步加载Google Maps JavaScript API，这样会让网站运行速率更高，<code>但是这样会有一个问题，就是在自己写的js必须与引用在引入api之前，否则会报错。</code>由于项目中js api只能在自己写的js的后面，所以只能使用同步的方式引入api js，引入方式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://maps.googleapis.com/maps/api/js?key=yourkey\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>这里的key是通过申请成为谷歌开发者然后获取的密钥。</p>\n<h2 id=\"创建地图对象\"><a href=\"#创建地图对象\" class=\"headerlink\" title=\"创建地图对象\"></a>创建地图对象</h2><p>地图的 JavaScript 类是 Map 类。该类的对象定义页面上的单个地图。（创建该类的多个实例–每个对象都将定义页面上的一个不同地图。）我们利用 JavaScript new 运算符来新建该类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初次进入页面只显示首都不显示坐标，只定义地图</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> google.maps.Map(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'map'</span>), &#123;</span><br><span class=\"line\">  center: capitalLatLng,</span><br><span class=\"line\">  zoom: mapZoom,</span><br><span class=\"line\">  maxZoom: mapMaxZoom,</span><br><span class=\"line\">  minZoom: mapMinZoom,</span><br><span class=\"line\">  <span class=\"comment\">//禁用街景地图</span></span><br><span class=\"line\">  streetViewControl:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  mapTypeId: google.maps.MapTypeId.ROADMAP,</span><br><span class=\"line\">  <span class=\"comment\">//控制地图类型控件的位置</span></span><br><span class=\"line\">  mapTypeControlOptions: &#123;</span><br><span class=\"line\">    style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,</span><br><span class=\"line\">    position: google.maps.ControlPosition.TOP_RIGHT</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>center：设置地图初始化后中心点的位置，接受经纬度对象{lat: -25.363, lng: 131.044}</li>\n<li>zoom：地图初始化后的缩放比例</li>\n<li>mapTypeId：设置地图类型，这里设置的就是普通的街道地图</li>\n<li>mapTypeControlOptions：修改地图类型控件</li>\n</ul>\n<p>谷歌地图默认会显示缩放控件（zoomControl），地图类型控件（mapTypeControl），街景小人（streetViewControl），全屏按钮（fullscreenControl，移动设备可见），除此之外还有旋转控件（rotateControl，默认情况下，该控件是否显示取决于给定地图类型在当前的缩放级别和位置上是否存在 45° 图像），比例控件（scaleControl，默认不显示）。但是有些时候可能需要调节他们的位置或者是否显示，可以通过相应的Options去控制，例如在上面初始化中，控制地图类型控件的位置。</p>\n<h2 id=\"创建地图marker\"><a href=\"#创建地图marker\" class=\"headerlink\" title=\"创建地图marker\"></a>创建地图marker</h2><p>我们在创建好地图后需要根据坐标去在地图中标注出相应的位置（marker对象），创建方式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//latlngArr为所地理位置数组</span></span><br><span class=\"line\">latlngArr.map(<span class=\"function\">(<span class=\"params\">position, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> marker = <span class=\"keyword\">new</span> google.maps.Marker(&#123;</span><br><span class=\"line\">    position,</span><br><span class=\"line\">    zIndex: <span class=\"number\">0</span>,</span><br><span class=\"line\">    map</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其中<code>map</code>为前面所创建的地图，<code>postion</code>则为marker的坐标位置。</p>\n<h4 id=\"给marker添加事件\"><a href=\"#给marker添加事件\" class=\"headerlink\" title=\"给marker添加事件\"></a>给marker添加事件</h4><p>经常见到在点击marker出现弹窗，这个效果可以通过给marker添加点击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">marker.addListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  map.setZoom(mapMaxZoom);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里实现了一个点击设置地图放大到最大的效果，这里需要多说一句，就是在对象中的熟悉是可以通过<code>set</code>去设置的。</p>\n<h4 id=\"设置marker自动居中\"><a href=\"#设置marker自动居中\" class=\"headerlink\" title=\"*设置marker自动居中\"></a>*设置marker自动居中</h4><p>当设置了多个marker在地图中后，会发现点击某个不在中心的marker后，它并不会自动居中，这一点很不友好，为了设置点击自动居中，需要添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//map auto center</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bounds = <span class=\"keyword\">new</span> google.maps.LatLngBounds();</span><br><span class=\"line\">latlngArr.map(<span class=\"function\">(<span class=\"params\">position, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> marker = <span class=\"keyword\">new</span> google.maps.Marker(&#123;</span><br><span class=\"line\">    position,</span><br><span class=\"line\">    icon: notSelect,</span><br><span class=\"line\">    zIndex: <span class=\"number\">0</span>,</span><br><span class=\"line\">    map</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  bounds.extend(marker.position);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">map.fitBounds(bounds);</span><br><span class=\"line\">map.panToBounds(bounds);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>一个<code>LatLngBounds</code>实例表示地理坐标中的矩形，包括穿过180度纵向子午线在内的矩形</li>\n<li><code>LatLngBounds</code>类下的<code>extend</code>方法用于扩展这个边界以包含给定的点（marker）</li>\n<li><code>fitBounds</code>设置视口包含给定的边界</li>\n</ul>\n<h4 id=\"设置地图缩放自动调整\"><a href=\"#设置地图缩放自动调整\" class=\"headerlink\" title=\"*设置地图缩放自动调整\"></a>*设置地图缩放自动调整</h4><p>根据marker的分布自动调整地图缩放比例是很常见的交互，Google Map API提供了<code>panToBounds</code>方法用于根据给定的<code>LatLngBounds</code>绘制出包含最小边界的地图，所以在代码中只需要设置<code>map.panToBounds(bounds)</code>即可。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>真心觉得Google的文档写的很好，而且Google Map的功能很强大，我在项目中只是使用了些简单的功能，更复杂功能请参考Google Map API：<a href=\"https://developers.google.com/maps/documentation/javascript/reference?csw=1\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/maps/documentation/javascript/reference?csw=1</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>前段时间做了一个简单调用Google Map API的项目，因为之前没有接触过这些，所以在看了文档做出来之后自己稍微总结一下。</p>\n</blockquote>","more":"<h2 id=\"加载-Google-Maps-JavaScript-API\"><a href=\"#加载-Google-Maps-JavaScript-API\" class=\"headerlink\" title=\"加载 Google Maps JavaScript API\"></a>加载 Google Maps JavaScript API</h2><p>官方指导教程中写的引入的Google Map API是异步调用的，引入方式如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> map;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initMap</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    map = <span class=\"keyword\">new</span> google.maps.Map(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'map'</span>), &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      center: &#123;lat: -34.397, lng: 150.644&#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      zoom: 8</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">defer</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;callback=initMap\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里需要注意一点官方提供是异步加载Google Maps JavaScript API，这样会让网站运行速率更高，<code>但是这样会有一个问题，就是在自己写的js必须与引用在引入api之前，否则会报错。</code>由于项目中js api只能在自己写的js的后面，所以只能使用同步的方式引入api js，引入方式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://maps.googleapis.com/maps/api/js?key=yourkey\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>这里的key是通过申请成为谷歌开发者然后获取的密钥。</p>\n<h2 id=\"创建地图对象\"><a href=\"#创建地图对象\" class=\"headerlink\" title=\"创建地图对象\"></a>创建地图对象</h2><p>地图的 JavaScript 类是 Map 类。该类的对象定义页面上的单个地图。（创建该类的多个实例–每个对象都将定义页面上的一个不同地图。）我们利用 JavaScript new 运算符来新建该类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初次进入页面只显示首都不显示坐标，只定义地图</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> google.maps.Map(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'map'</span>), &#123;</span><br><span class=\"line\">  center: capitalLatLng,</span><br><span class=\"line\">  zoom: mapZoom,</span><br><span class=\"line\">  maxZoom: mapMaxZoom,</span><br><span class=\"line\">  minZoom: mapMinZoom,</span><br><span class=\"line\">  <span class=\"comment\">//禁用街景地图</span></span><br><span class=\"line\">  streetViewControl:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  mapTypeId: google.maps.MapTypeId.ROADMAP,</span><br><span class=\"line\">  <span class=\"comment\">//控制地图类型控件的位置</span></span><br><span class=\"line\">  mapTypeControlOptions: &#123;</span><br><span class=\"line\">    style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,</span><br><span class=\"line\">    position: google.maps.ControlPosition.TOP_RIGHT</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>center：设置地图初始化后中心点的位置，接受经纬度对象{lat: -25.363, lng: 131.044}</li>\n<li>zoom：地图初始化后的缩放比例</li>\n<li>mapTypeId：设置地图类型，这里设置的就是普通的街道地图</li>\n<li>mapTypeControlOptions：修改地图类型控件</li>\n</ul>\n<p>谷歌地图默认会显示缩放控件（zoomControl），地图类型控件（mapTypeControl），街景小人（streetViewControl），全屏按钮（fullscreenControl，移动设备可见），除此之外还有旋转控件（rotateControl，默认情况下，该控件是否显示取决于给定地图类型在当前的缩放级别和位置上是否存在 45° 图像），比例控件（scaleControl，默认不显示）。但是有些时候可能需要调节他们的位置或者是否显示，可以通过相应的Options去控制，例如在上面初始化中，控制地图类型控件的位置。</p>\n<h2 id=\"创建地图marker\"><a href=\"#创建地图marker\" class=\"headerlink\" title=\"创建地图marker\"></a>创建地图marker</h2><p>我们在创建好地图后需要根据坐标去在地图中标注出相应的位置（marker对象），创建方式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//latlngArr为所地理位置数组</span></span><br><span class=\"line\">latlngArr.map(<span class=\"function\">(<span class=\"params\">position, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> marker = <span class=\"keyword\">new</span> google.maps.Marker(&#123;</span><br><span class=\"line\">    position,</span><br><span class=\"line\">    zIndex: <span class=\"number\">0</span>,</span><br><span class=\"line\">    map</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其中<code>map</code>为前面所创建的地图，<code>postion</code>则为marker的坐标位置。</p>\n<h4 id=\"给marker添加事件\"><a href=\"#给marker添加事件\" class=\"headerlink\" title=\"给marker添加事件\"></a>给marker添加事件</h4><p>经常见到在点击marker出现弹窗，这个效果可以通过给marker添加点击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">marker.addListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  map.setZoom(mapMaxZoom);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里实现了一个点击设置地图放大到最大的效果，这里需要多说一句，就是在对象中的熟悉是可以通过<code>set</code>去设置的。</p>\n<h4 id=\"设置marker自动居中\"><a href=\"#设置marker自动居中\" class=\"headerlink\" title=\"*设置marker自动居中\"></a>*设置marker自动居中</h4><p>当设置了多个marker在地图中后，会发现点击某个不在中心的marker后，它并不会自动居中，这一点很不友好，为了设置点击自动居中，需要添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//map auto center</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bounds = <span class=\"keyword\">new</span> google.maps.LatLngBounds();</span><br><span class=\"line\">latlngArr.map(<span class=\"function\">(<span class=\"params\">position, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> marker = <span class=\"keyword\">new</span> google.maps.Marker(&#123;</span><br><span class=\"line\">    position,</span><br><span class=\"line\">    icon: notSelect,</span><br><span class=\"line\">    zIndex: <span class=\"number\">0</span>,</span><br><span class=\"line\">    map</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  bounds.extend(marker.position);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">map.fitBounds(bounds);</span><br><span class=\"line\">map.panToBounds(bounds);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>一个<code>LatLngBounds</code>实例表示地理坐标中的矩形，包括穿过180度纵向子午线在内的矩形</li>\n<li><code>LatLngBounds</code>类下的<code>extend</code>方法用于扩展这个边界以包含给定的点（marker）</li>\n<li><code>fitBounds</code>设置视口包含给定的边界</li>\n</ul>\n<h4 id=\"设置地图缩放自动调整\"><a href=\"#设置地图缩放自动调整\" class=\"headerlink\" title=\"*设置地图缩放自动调整\"></a>*设置地图缩放自动调整</h4><p>根据marker的分布自动调整地图缩放比例是很常见的交互，Google Map API提供了<code>panToBounds</code>方法用于根据给定的<code>LatLngBounds</code>绘制出包含最小边界的地图，所以在代码中只需要设置<code>map.panToBounds(bounds)</code>即可。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>真心觉得Google的文档写的很好，而且Google Map的功能很强大，我在项目中只是使用了些简单的功能，更复杂功能请参考Google Map API：<a href=\"https://developers.google.com/maps/documentation/javascript/reference?csw=1\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/maps/documentation/javascript/reference?csw=1</a></p>"},{"title":"Gulp+BroserSync实现浏览器自动刷新","date":"2016-05-16T14:10:39.000Z","comments":1,"_content":"&emsp;&emsp;在写前端代码的时候，我们为了看效果，需要一直按F5进行刷新，这样做很繁琐而且非常浪费时间，在网上搜过后发现很多关于自动刷新的办法，这里我介绍的是基于gulp和broserSync实现浏览器的自动刷新，即只要编辑器保存，浏览器就会自动刷新。\n&emsp;&emsp;那么gulp，broserSync是什么呢？\n### Gulp\n&emsp;&emsp;Gulp是一个前端自动化工具，基于nodejs，和grunt差不多，但是比grunt语法更加简单，语法更加自然。在gulp的插件中，我们可以找到自动刷新，压缩图片/代码/等等各类工具，方便我们的使用，并且gulp的任务是流（pipe），即一个任务完成后，紧接的另一个任务开始进行。gulp的使用如下：\n#### 1.安装gulp\n1. 全局安装gulp：\n```js\n$ npm install --global gulp\n```\n2. 作为项目的开发依赖（devDependencies）安装：\n```js\n$ npm install --save-dev gulp\n```\n3. 生成package.json\n```js\n$ npm init\n```\n<!--more-->\n<font color=red>注意：</font>\n&emsp;&emsp;这里官网只是写让这么安装，但是需要注意，两个安装不是第一步第二步，而是第一种方式或者第二种方式，两种方式任选其一。第一种安装方式是全局安装，即安装后，整个电脑无论哪个项目都可以使用。对应的，第二个表示安装到对应项目中，即如果在window的cmd命令行进入对应项目A的目录，则运行npm install --save-dev gulp后，安装的gulp只能在该文件夹下使用，其他文件夹下的其他文件都无法使用。\n&emsp;&emsp;其实不只是gulp，gulp的插件也是这样，要么全局安装，要么安装在项目中。一般情况下，gulp会全局安装，但是由于每个项目用到的gulp插件不同，所以可能需要局部安装gulp插件。\n&emsp;&emsp;安装完成gulp之后，会在安装gulp的文件夹下生成node_modules文件夹。此时，在与该文件夹同层创建gulpfile.js这就是用于配置gulp插件的文件。\n\n#### 2.恢复gulp\n&emsp;&emsp;随着我们gulp插件的改变，package.json会自动变化，同时我们的配置文件gulpfile.js也会对应变化（自己手动配置）。他们可以把我们安装的gulp给备份，如果我们在电脑A中安装完我们的工具，然后换了一台电脑B，我们只需要把电脑A中package.json与gulpfile.js复制到B电脑，然后在安装完gulp后，运行\n```js\n$ npm install\n```\ngulp就会自动把我们在package.json中的所有gulp插件全部安装回来，非常方便。\n### broserSync\n&emsp;&emsp;broserSync（以下简称bs）是一款非常优秀的自动刷新工具，本身可以独立使用，也可以配合gulp或者grunt一起使用，非常不错的一款插件。\n&emsp;&emsp;当你改变代码的时候，BrowserSync会重新加载页面，或者如果是css文件，会直接添加进css中，页面并不需要再次刷新。这项功能在网站是禁止刷新的时候是很有用的。假设你正在开发单页应用的第4页，刷新页面就会导致你回到开始页。BrowserSync会直接将需要修改的地方添加进CSS，就不用再点击回退。同时，BrowserSync也可以在不同浏览器之间同步点击翻页、表单操作、滚动位置。你可以在电脑和iPhone上打开不同的浏览器然后进行操作。所有设备上的链接将会随之变化，当你向下滚动页面时，所有设备上页面都会向下滚动（通常还很流畅！）。当你在表单中输入文本时，每个窗口都会有输入。当你不想要这种行为时，也可以把这个功能关闭。\n&emsp;&emsp;实际上bs对于gulp并不算是一种插件，因为bs并不像一个插件一样操作文件。然而，npm上的bs模块能在gulp上被直接调用。\n#### 1.安装broserSync\n进入需要使用bs的目录，运行：\n```js\n$ npm install --save-dev broser-sync\n```\n#### 2.配置broserSync\nbs本身可以打开本地静态服务器，也可以代理像wamp这样的服务器。\n##### 2.1 代理其他服务器\n打开我们新建的gulpfile.js，配置如下：\n```js\n/*browserSync*/\nconst gulp        = require('gulp');\nconst browserSync = require('browser-sync').create();\ngulp.task(\"watch\",function(){\n    browserSync.init({\n        /*这里的files写的是需要监控的文件的位置*/\n         files:[             \n             \"./Home/View/PC/**/*.html\",\n             \"./public/group/css/*.css\",\n             \"./public/group/js/*.js\"\n         ],\n         logLevel: \"debug\",\n         logPrefix:\"insgeek\",\n         /*这里的proxy写的是需要代理的服务器，我自己的wamp启动的是localhost:80*/\n         proxy:\"localhost:80\",\n         ghostMode: {\n\t        clicks: true,\n\t        forms: true,\n\t        scroll: true\n\t     },\n         /*这里写的是代理后，bs在哪个端口打开*/\n         port: 81,\n         /*这里设置的是bs运行时打开的浏览器名称*/\n\t     browser: \"chrome\"\n    });\n});\n```\n##### 2.2 启动静态服务器\n```js\nconst gulp = require('gulp');\nconst browserSync = require('browser-sync').create();\nconst reload = browserSync.reload;\n/*实时监控*/\ngulp.task(\"watch\", function() {\n    browserSync.init({\n        files: [\n            \"./work/*/*.html\",\n            \"./work/*/*.css\",\n            \"./work/*/*.js\"\n        ],\n        logLevel: \"debug\",\n        logPrefix: \"insgeek\",\n        server: {\n            /*这里写的是html文件相对于根目录所在的文件夹*/\n            baseDir: \"./work/statement\"\n            /*这里如果不写，默认启动的是index.html，如果是其他名字，需要这里写*/\n            // index: \"insurance_template_statement.html\"\n        },\n        ghostMode: {\n            clicks: true,\n            forms: true,\n            scroll: true\n        },\n        browser: \"chrome\"\n    });\n});\n```\n完成上述配置后，可以在cmd命令行切换到工作目录，运行gulp watch启动broserSync。\n","source":"_posts/gulp-broserSync.md","raw":"---\ntitle: Gulp+BroserSync实现浏览器自动刷新\ndate: 2016-05-16 22:10:39\ntags: gulp\ncomments: true\ncategories: \"前端工具\"\n---\n&emsp;&emsp;在写前端代码的时候，我们为了看效果，需要一直按F5进行刷新，这样做很繁琐而且非常浪费时间，在网上搜过后发现很多关于自动刷新的办法，这里我介绍的是基于gulp和broserSync实现浏览器的自动刷新，即只要编辑器保存，浏览器就会自动刷新。\n&emsp;&emsp;那么gulp，broserSync是什么呢？\n### Gulp\n&emsp;&emsp;Gulp是一个前端自动化工具，基于nodejs，和grunt差不多，但是比grunt语法更加简单，语法更加自然。在gulp的插件中，我们可以找到自动刷新，压缩图片/代码/等等各类工具，方便我们的使用，并且gulp的任务是流（pipe），即一个任务完成后，紧接的另一个任务开始进行。gulp的使用如下：\n#### 1.安装gulp\n1. 全局安装gulp：\n```js\n$ npm install --global gulp\n```\n2. 作为项目的开发依赖（devDependencies）安装：\n```js\n$ npm install --save-dev gulp\n```\n3. 生成package.json\n```js\n$ npm init\n```\n<!--more-->\n<font color=red>注意：</font>\n&emsp;&emsp;这里官网只是写让这么安装，但是需要注意，两个安装不是第一步第二步，而是第一种方式或者第二种方式，两种方式任选其一。第一种安装方式是全局安装，即安装后，整个电脑无论哪个项目都可以使用。对应的，第二个表示安装到对应项目中，即如果在window的cmd命令行进入对应项目A的目录，则运行npm install --save-dev gulp后，安装的gulp只能在该文件夹下使用，其他文件夹下的其他文件都无法使用。\n&emsp;&emsp;其实不只是gulp，gulp的插件也是这样，要么全局安装，要么安装在项目中。一般情况下，gulp会全局安装，但是由于每个项目用到的gulp插件不同，所以可能需要局部安装gulp插件。\n&emsp;&emsp;安装完成gulp之后，会在安装gulp的文件夹下生成node_modules文件夹。此时，在与该文件夹同层创建gulpfile.js这就是用于配置gulp插件的文件。\n\n#### 2.恢复gulp\n&emsp;&emsp;随着我们gulp插件的改变，package.json会自动变化，同时我们的配置文件gulpfile.js也会对应变化（自己手动配置）。他们可以把我们安装的gulp给备份，如果我们在电脑A中安装完我们的工具，然后换了一台电脑B，我们只需要把电脑A中package.json与gulpfile.js复制到B电脑，然后在安装完gulp后，运行\n```js\n$ npm install\n```\ngulp就会自动把我们在package.json中的所有gulp插件全部安装回来，非常方便。\n### broserSync\n&emsp;&emsp;broserSync（以下简称bs）是一款非常优秀的自动刷新工具，本身可以独立使用，也可以配合gulp或者grunt一起使用，非常不错的一款插件。\n&emsp;&emsp;当你改变代码的时候，BrowserSync会重新加载页面，或者如果是css文件，会直接添加进css中，页面并不需要再次刷新。这项功能在网站是禁止刷新的时候是很有用的。假设你正在开发单页应用的第4页，刷新页面就会导致你回到开始页。BrowserSync会直接将需要修改的地方添加进CSS，就不用再点击回退。同时，BrowserSync也可以在不同浏览器之间同步点击翻页、表单操作、滚动位置。你可以在电脑和iPhone上打开不同的浏览器然后进行操作。所有设备上的链接将会随之变化，当你向下滚动页面时，所有设备上页面都会向下滚动（通常还很流畅！）。当你在表单中输入文本时，每个窗口都会有输入。当你不想要这种行为时，也可以把这个功能关闭。\n&emsp;&emsp;实际上bs对于gulp并不算是一种插件，因为bs并不像一个插件一样操作文件。然而，npm上的bs模块能在gulp上被直接调用。\n#### 1.安装broserSync\n进入需要使用bs的目录，运行：\n```js\n$ npm install --save-dev broser-sync\n```\n#### 2.配置broserSync\nbs本身可以打开本地静态服务器，也可以代理像wamp这样的服务器。\n##### 2.1 代理其他服务器\n打开我们新建的gulpfile.js，配置如下：\n```js\n/*browserSync*/\nconst gulp        = require('gulp');\nconst browserSync = require('browser-sync').create();\ngulp.task(\"watch\",function(){\n    browserSync.init({\n        /*这里的files写的是需要监控的文件的位置*/\n         files:[             \n             \"./Home/View/PC/**/*.html\",\n             \"./public/group/css/*.css\",\n             \"./public/group/js/*.js\"\n         ],\n         logLevel: \"debug\",\n         logPrefix:\"insgeek\",\n         /*这里的proxy写的是需要代理的服务器，我自己的wamp启动的是localhost:80*/\n         proxy:\"localhost:80\",\n         ghostMode: {\n\t        clicks: true,\n\t        forms: true,\n\t        scroll: true\n\t     },\n         /*这里写的是代理后，bs在哪个端口打开*/\n         port: 81,\n         /*这里设置的是bs运行时打开的浏览器名称*/\n\t     browser: \"chrome\"\n    });\n});\n```\n##### 2.2 启动静态服务器\n```js\nconst gulp = require('gulp');\nconst browserSync = require('browser-sync').create();\nconst reload = browserSync.reload;\n/*实时监控*/\ngulp.task(\"watch\", function() {\n    browserSync.init({\n        files: [\n            \"./work/*/*.html\",\n            \"./work/*/*.css\",\n            \"./work/*/*.js\"\n        ],\n        logLevel: \"debug\",\n        logPrefix: \"insgeek\",\n        server: {\n            /*这里写的是html文件相对于根目录所在的文件夹*/\n            baseDir: \"./work/statement\"\n            /*这里如果不写，默认启动的是index.html，如果是其他名字，需要这里写*/\n            // index: \"insurance_template_statement.html\"\n        },\n        ghostMode: {\n            clicks: true,\n            forms: true,\n            scroll: true\n        },\n        browser: \"chrome\"\n    });\n});\n```\n完成上述配置后，可以在cmd命令行切换到工作目录，运行gulp watch启动broserSync。\n","slug":"gulp-broserSync","published":1,"updated":"2016-08-02T08:36:12.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktob80018zrv4ybhlmyi4","content":"<p>&emsp;&emsp;在写前端代码的时候，我们为了看效果，需要一直按F5进行刷新，这样做很繁琐而且非常浪费时间，在网上搜过后发现很多关于自动刷新的办法，这里我介绍的是基于gulp和broserSync实现浏览器的自动刷新，即只要编辑器保存，浏览器就会自动刷新。<br>&emsp;&emsp;那么gulp，broserSync是什么呢？</p>\n<h3 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h3><p>&emsp;&emsp;Gulp是一个前端自动化工具，基于nodejs，和grunt差不多，但是比grunt语法更加简单，语法更加自然。在gulp的插件中，我们可以找到自动刷新，压缩图片/代码/等等各类工具，方便我们的使用，并且gulp的任务是流（pipe），即一个任务完成后，紧接的另一个任务开始进行。gulp的使用如下：</p>\n<h4 id=\"1-安装gulp\"><a href=\"#1-安装gulp\" class=\"headerlink\" title=\"1.安装gulp\"></a>1.安装gulp</h4><ol>\n<li><p>全局安装gulp：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --global gulp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>作为项目的开发依赖（devDependencies）安装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成package.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<p><font color=\"red\">注意：</font><br>&emsp;&emsp;这里官网只是写让这么安装，但是需要注意，两个安装不是第一步第二步，而是第一种方式或者第二种方式，两种方式任选其一。第一种安装方式是全局安装，即安装后，整个电脑无论哪个项目都可以使用。对应的，第二个表示安装到对应项目中，即如果在window的cmd命令行进入对应项目A的目录，则运行npm install –save-dev gulp后，安装的gulp只能在该文件夹下使用，其他文件夹下的其他文件都无法使用。<br>&emsp;&emsp;其实不只是gulp，gulp的插件也是这样，要么全局安装，要么安装在项目中。一般情况下，gulp会全局安装，但是由于每个项目用到的gulp插件不同，所以可能需要局部安装gulp插件。<br>&emsp;&emsp;安装完成gulp之后，会在安装gulp的文件夹下生成node_modules文件夹。此时，在与该文件夹同层创建gulpfile.js这就是用于配置gulp插件的文件。</p>\n<h4 id=\"2-恢复gulp\"><a href=\"#2-恢复gulp\" class=\"headerlink\" title=\"2.恢复gulp\"></a>2.恢复gulp</h4><p>&emsp;&emsp;随着我们gulp插件的改变，package.json会自动变化，同时我们的配置文件gulpfile.js也会对应变化（自己手动配置）。他们可以把我们安装的gulp给备份，如果我们在电脑A中安装完我们的工具，然后换了一台电脑B，我们只需要把电脑A中package.json与gulpfile.js复制到B电脑，然后在安装完gulp后，运行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure></p>\n<p>gulp就会自动把我们在package.json中的所有gulp插件全部安装回来，非常方便。</p>\n<h3 id=\"broserSync\"><a href=\"#broserSync\" class=\"headerlink\" title=\"broserSync\"></a>broserSync</h3><p>&emsp;&emsp;broserSync（以下简称bs）是一款非常优秀的自动刷新工具，本身可以独立使用，也可以配合gulp或者grunt一起使用，非常不错的一款插件。<br>&emsp;&emsp;当你改变代码的时候，BrowserSync会重新加载页面，或者如果是css文件，会直接添加进css中，页面并不需要再次刷新。这项功能在网站是禁止刷新的时候是很有用的。假设你正在开发单页应用的第4页，刷新页面就会导致你回到开始页。BrowserSync会直接将需要修改的地方添加进CSS，就不用再点击回退。同时，BrowserSync也可以在不同浏览器之间同步点击翻页、表单操作、滚动位置。你可以在电脑和iPhone上打开不同的浏览器然后进行操作。所有设备上的链接将会随之变化，当你向下滚动页面时，所有设备上页面都会向下滚动（通常还很流畅！）。当你在表单中输入文本时，每个窗口都会有输入。当你不想要这种行为时，也可以把这个功能关闭。<br>&emsp;&emsp;实际上bs对于gulp并不算是一种插件，因为bs并不像一个插件一样操作文件。然而，npm上的bs模块能在gulp上被直接调用。</p>\n<h4 id=\"1-安装broserSync\"><a href=\"#1-安装broserSync\" class=\"headerlink\" title=\"1.安装broserSync\"></a>1.安装broserSync</h4><p>进入需要使用bs的目录，运行：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev broser-sync</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-配置broserSync\"><a href=\"#2-配置broserSync\" class=\"headerlink\" title=\"2.配置broserSync\"></a>2.配置broserSync</h4><p>bs本身可以打开本地静态服务器，也可以代理像wamp这样的服务器。</p>\n<h5 id=\"2-1-代理其他服务器\"><a href=\"#2-1-代理其他服务器\" class=\"headerlink\" title=\"2.1 代理其他服务器\"></a>2.1 代理其他服务器</h5><p>打开我们新建的gulpfile.js，配置如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*browserSync*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulp        = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create();</span><br><span class=\"line\">gulp.task(<span class=\"string\">\"watch\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*这里的files写的是需要监控的文件的位置*/</span></span><br><span class=\"line\">         files:[             </span><br><span class=\"line\">             <span class=\"string\">\"./Home/View/PC/**/*.html\"</span>,</span><br><span class=\"line\">             <span class=\"string\">\"./public/group/css/*.css\"</span>,</span><br><span class=\"line\">             <span class=\"string\">\"./public/group/js/*.js\"</span></span><br><span class=\"line\">         ],</span><br><span class=\"line\">         logLevel: <span class=\"string\">\"debug\"</span>,</span><br><span class=\"line\">         logPrefix:<span class=\"string\">\"insgeek\"</span>,</span><br><span class=\"line\">         <span class=\"comment\">/*这里的proxy写的是需要代理的服务器，我自己的wamp启动的是localhost:80*/</span></span><br><span class=\"line\">         proxy:<span class=\"string\">\"localhost:80\"</span>,</span><br><span class=\"line\">         ghostMode: &#123;</span><br><span class=\"line\">\t        clicks: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t        forms: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t        scroll: <span class=\"literal\">true</span></span><br><span class=\"line\">\t     &#125;,</span><br><span class=\"line\">         <span class=\"comment\">/*这里写的是代理后，bs在哪个端口打开*/</span></span><br><span class=\"line\">         port: <span class=\"number\">81</span>,</span><br><span class=\"line\">         <span class=\"comment\">/*这里设置的是bs运行时打开的浏览器名称*/</span></span><br><span class=\"line\">\t     browser: <span class=\"string\">\"chrome\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-2-启动静态服务器\"><a href=\"#2-2-启动静态服务器\" class=\"headerlink\" title=\"2.2 启动静态服务器\"></a>2.2 启动静态服务器</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create();</span><br><span class=\"line\"><span class=\"keyword\">const</span> reload = browserSync.reload;</span><br><span class=\"line\"><span class=\"comment\">/*实时监控*/</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"watch\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">            <span class=\"string\">\"./work/*/*.html\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"./work/*/*.css\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"./work/*/*.js\"</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        logLevel: <span class=\"string\">\"debug\"</span>,</span><br><span class=\"line\">        logPrefix: <span class=\"string\">\"insgeek\"</span>,</span><br><span class=\"line\">        server: &#123;</span><br><span class=\"line\">            <span class=\"comment\">/*这里写的是html文件相对于根目录所在的文件夹*/</span></span><br><span class=\"line\">            baseDir: <span class=\"string\">\"./work/statement\"</span></span><br><span class=\"line\">            <span class=\"comment\">/*这里如果不写，默认启动的是index.html，如果是其他名字，需要这里写*/</span></span><br><span class=\"line\">            <span class=\"comment\">// index: \"insurance_template_statement.html\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        ghostMode: &#123;</span><br><span class=\"line\">            clicks: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            forms: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            scroll: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        browser: <span class=\"string\">\"chrome\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完成上述配置后，可以在cmd命令行切换到工作目录，运行gulp watch启动broserSync。</p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;在写前端代码的时候，我们为了看效果，需要一直按F5进行刷新，这样做很繁琐而且非常浪费时间，在网上搜过后发现很多关于自动刷新的办法，这里我介绍的是基于gulp和broserSync实现浏览器的自动刷新，即只要编辑器保存，浏览器就会自动刷新。<br>&emsp;&emsp;那么gulp，broserSync是什么呢？</p>\n<h3 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h3><p>&emsp;&emsp;Gulp是一个前端自动化工具，基于nodejs，和grunt差不多，但是比grunt语法更加简单，语法更加自然。在gulp的插件中，我们可以找到自动刷新，压缩图片/代码/等等各类工具，方便我们的使用，并且gulp的任务是流（pipe），即一个任务完成后，紧接的另一个任务开始进行。gulp的使用如下：</p>\n<h4 id=\"1-安装gulp\"><a href=\"#1-安装gulp\" class=\"headerlink\" title=\"1.安装gulp\"></a>1.安装gulp</h4><ol>\n<li><p>全局安装gulp：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --global gulp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>作为项目的开发依赖（devDependencies）安装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成package.json</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<p><font color=\"red\">注意：</font><br>&emsp;&emsp;这里官网只是写让这么安装，但是需要注意，两个安装不是第一步第二步，而是第一种方式或者第二种方式，两种方式任选其一。第一种安装方式是全局安装，即安装后，整个电脑无论哪个项目都可以使用。对应的，第二个表示安装到对应项目中，即如果在window的cmd命令行进入对应项目A的目录，则运行npm install –save-dev gulp后，安装的gulp只能在该文件夹下使用，其他文件夹下的其他文件都无法使用。<br>&emsp;&emsp;其实不只是gulp，gulp的插件也是这样，要么全局安装，要么安装在项目中。一般情况下，gulp会全局安装，但是由于每个项目用到的gulp插件不同，所以可能需要局部安装gulp插件。<br>&emsp;&emsp;安装完成gulp之后，会在安装gulp的文件夹下生成node_modules文件夹。此时，在与该文件夹同层创建gulpfile.js这就是用于配置gulp插件的文件。</p>\n<h4 id=\"2-恢复gulp\"><a href=\"#2-恢复gulp\" class=\"headerlink\" title=\"2.恢复gulp\"></a>2.恢复gulp</h4><p>&emsp;&emsp;随着我们gulp插件的改变，package.json会自动变化，同时我们的配置文件gulpfile.js也会对应变化（自己手动配置）。他们可以把我们安装的gulp给备份，如果我们在电脑A中安装完我们的工具，然后换了一台电脑B，我们只需要把电脑A中package.json与gulpfile.js复制到B电脑，然后在安装完gulp后，运行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure></p>\n<p>gulp就会自动把我们在package.json中的所有gulp插件全部安装回来，非常方便。</p>\n<h3 id=\"broserSync\"><a href=\"#broserSync\" class=\"headerlink\" title=\"broserSync\"></a>broserSync</h3><p>&emsp;&emsp;broserSync（以下简称bs）是一款非常优秀的自动刷新工具，本身可以独立使用，也可以配合gulp或者grunt一起使用，非常不错的一款插件。<br>&emsp;&emsp;当你改变代码的时候，BrowserSync会重新加载页面，或者如果是css文件，会直接添加进css中，页面并不需要再次刷新。这项功能在网站是禁止刷新的时候是很有用的。假设你正在开发单页应用的第4页，刷新页面就会导致你回到开始页。BrowserSync会直接将需要修改的地方添加进CSS，就不用再点击回退。同时，BrowserSync也可以在不同浏览器之间同步点击翻页、表单操作、滚动位置。你可以在电脑和iPhone上打开不同的浏览器然后进行操作。所有设备上的链接将会随之变化，当你向下滚动页面时，所有设备上页面都会向下滚动（通常还很流畅！）。当你在表单中输入文本时，每个窗口都会有输入。当你不想要这种行为时，也可以把这个功能关闭。<br>&emsp;&emsp;实际上bs对于gulp并不算是一种插件，因为bs并不像一个插件一样操作文件。然而，npm上的bs模块能在gulp上被直接调用。</p>\n<h4 id=\"1-安装broserSync\"><a href=\"#1-安装broserSync\" class=\"headerlink\" title=\"1.安装broserSync\"></a>1.安装broserSync</h4><p>进入需要使用bs的目录，运行：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev broser-sync</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-配置broserSync\"><a href=\"#2-配置broserSync\" class=\"headerlink\" title=\"2.配置broserSync\"></a>2.配置broserSync</h4><p>bs本身可以打开本地静态服务器，也可以代理像wamp这样的服务器。</p>\n<h5 id=\"2-1-代理其他服务器\"><a href=\"#2-1-代理其他服务器\" class=\"headerlink\" title=\"2.1 代理其他服务器\"></a>2.1 代理其他服务器</h5><p>打开我们新建的gulpfile.js，配置如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*browserSync*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulp        = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create();</span><br><span class=\"line\">gulp.task(<span class=\"string\">\"watch\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*这里的files写的是需要监控的文件的位置*/</span></span><br><span class=\"line\">         files:[             </span><br><span class=\"line\">             <span class=\"string\">\"./Home/View/PC/**/*.html\"</span>,</span><br><span class=\"line\">             <span class=\"string\">\"./public/group/css/*.css\"</span>,</span><br><span class=\"line\">             <span class=\"string\">\"./public/group/js/*.js\"</span></span><br><span class=\"line\">         ],</span><br><span class=\"line\">         logLevel: <span class=\"string\">\"debug\"</span>,</span><br><span class=\"line\">         logPrefix:<span class=\"string\">\"insgeek\"</span>,</span><br><span class=\"line\">         <span class=\"comment\">/*这里的proxy写的是需要代理的服务器，我自己的wamp启动的是localhost:80*/</span></span><br><span class=\"line\">         proxy:<span class=\"string\">\"localhost:80\"</span>,</span><br><span class=\"line\">         ghostMode: &#123;</span><br><span class=\"line\">\t        clicks: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t        forms: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t        scroll: <span class=\"literal\">true</span></span><br><span class=\"line\">\t     &#125;,</span><br><span class=\"line\">         <span class=\"comment\">/*这里写的是代理后，bs在哪个端口打开*/</span></span><br><span class=\"line\">         port: <span class=\"number\">81</span>,</span><br><span class=\"line\">         <span class=\"comment\">/*这里设置的是bs运行时打开的浏览器名称*/</span></span><br><span class=\"line\">\t     browser: <span class=\"string\">\"chrome\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-2-启动静态服务器\"><a href=\"#2-2-启动静态服务器\" class=\"headerlink\" title=\"2.2 启动静态服务器\"></a>2.2 启动静态服务器</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create();</span><br><span class=\"line\"><span class=\"keyword\">const</span> reload = browserSync.reload;</span><br><span class=\"line\"><span class=\"comment\">/*实时监控*/</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"watch\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">            <span class=\"string\">\"./work/*/*.html\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"./work/*/*.css\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"./work/*/*.js\"</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        logLevel: <span class=\"string\">\"debug\"</span>,</span><br><span class=\"line\">        logPrefix: <span class=\"string\">\"insgeek\"</span>,</span><br><span class=\"line\">        server: &#123;</span><br><span class=\"line\">            <span class=\"comment\">/*这里写的是html文件相对于根目录所在的文件夹*/</span></span><br><span class=\"line\">            baseDir: <span class=\"string\">\"./work/statement\"</span></span><br><span class=\"line\">            <span class=\"comment\">/*这里如果不写，默认启动的是index.html，如果是其他名字，需要这里写*/</span></span><br><span class=\"line\">            <span class=\"comment\">// index: \"insurance_template_statement.html\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        ghostMode: &#123;</span><br><span class=\"line\">            clicks: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            forms: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            scroll: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        browser: <span class=\"string\">\"chrome\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完成上述配置后，可以在cmd命令行切换到工作目录，运行gulp watch启动broserSync。</p>"},{"title":"再见，2016；你好，2017","date":"2016-12-31T15:28:51.000Z","comments":1,"_content":"![](/img/2017newyear.jpg)\n&emsp;&emsp;今天是2016年12月31日，2016年的最后一天，记得那天组长让组里面每个成员做年终总结，自己想了想，真心不知道该说什么，因为其实自己来到小米的时间并不长，做的东西也不多，所以需要总结的东西很少。但是其实今年对于我个人来说，2016年是难忘的一年，发生了很多事情，值得我去回忆，去思考，但是，让我铭记的也许只有这两件：离开，开始新的生活。\n\n<!--more-->\n\n## 回望2016\n\n### 人生中的第一次跳槽\n\n2016年的9月26日星期一，我来到小米报到，完成了我人生中的第一次跳槽。\n\n&emsp;&emsp;记得今年年初的时候，我初六来到公司，拿到了开工红包，开始了2016的一年的工作，那时候并没有想到，自己会在未来的几个月中，开始尝试的去找工作，去想着换一家公司。因为在原公司待着感激并没有什么前途，同时也觉得自己在工作中，并不是那么开心，所以在今年6月底开始尝试的去找工作，但是其实自己并没有说想着必须离开这里，只是那时候自己觉得当时在的那家公司虽然说自己本身的技术并不会在工作中有多大的提升，但是因为并不是很忙，所以自己支配的时间也比较多，同时也是为了检验一下自己的技术到底有多少提升，所以就偶尔会投几家公司，然后去跟面试官当面较量，从而让我知道自己在哪方面还有所欠缺。所以从6月底开始一直到9月都在陆陆续续的面试，虽然时间长，但是面试并不多，因为其间我动摇过，曾经自己也告诉自己，其实公司挺不错的，感觉在这里也会被领导重视，在这里可以做一些我想做的，比如曾经公司CTO还让自己给大家讲vue，同时记得那时候CTO找我们每一个技术谈话，跟我说，把学到的东西都去用，当时非常高兴觉得自己在公司很受重视，所以决定留下来。\n\n&emsp;&emsp;但是后来自己在公司的非常好的朋友因为身体不舒服请假了，在这其间，我开始了一个人中午吃饭，其实现在回想起来，到底那时候是我自己不主动跟别人说话，还是别人确实也不搭理我，我不知道，但是确实后来自己在公司开始不再说话，每天听着音乐，做着我自己喜欢做的事儿（因为那时候我也没什么工作需要做），那时候真的是感觉，一副耳机，几首曲子，一个项目，整个世界。就这样我在公司待到九月初，那小子回来了，终于有个能聊到一起的了。\n\n&emsp;&emsp;记得我是9月8日的时候，我去小米面试，那时候其实没有想的自己能过，自己把自己做过的讲了一些，然后等待晚上的回复，那天下午等的非常焦急，我想去，但是也不知道自己表现怎么样，那天晚上等到7点多的时候还没电话，感觉可能没戏了，但是在7点30左右的时候hr打电话过来，告诉我过了，我当时真的非常高兴。第二天下午，公司要去组织去团建，可以说这次团建让我彻底决定，我要走了，这里并不适合我，俗话说：道不同，不相与谋。所以在收到offer的那一刻，我立马提离职，随后在一周之内办理离职，成功在2016年6月26日，来到小米，开始我在兔厂的工作生涯...\n\n### 新的环境，新的伙伴\n\n来到小米，开始新的工作，一切都是陌生的，一切从头开始，但是既然选择了，就不会害怕。\n\n&emsp;&emsp;这里给我的第一印象是，大家每一个人都在认真工作，每一个人各司其职，认真做自己的事儿，没有一个闲逛的人，大家都在努力的为公司出自己的一份力。在随后的时间里，我发现大家对自己公司的产品可以说是非常的欣赏（事实上产品确实非常优秀），都在为做出最酷的产品而一起奋斗，在年终总结的时候，我们组的一个同学也说，自己当初来小米，就是因为看到这里是一个可以认真做事儿地方。这一点让我非常欣赏，也非常感动，我也感觉这里才是真正做事情的地方。\n\n&emsp;&emsp;在今年10月25日，小米发布了让世人惊艳的概念机----小米MIX，在发布会期间，雷总讲到开发这款手机当时是多么的艰难，随后是如何克服困难，一步步做出来的。当你看到这款手机，你会为之而感到惊艳，但是其背后的艰难又有多少人而得知呢？回头看看我的团队，他们每一个人，说真的在我刚来的时候，我并没有感觉他们有多厉害，因为他们并不是那么爱炫耀，也不喜欢到处去宣讲东西，但是在后来我发现他们各个都是高手，只是我不了解而已。所以在这里，我感受到的另一点，我想也是这个企业的企业文化之一吧----厚积而薄发。我们做什么事情，并不需要别人知道，做出来的成绩，也不会到处去宣扬，告诉别人，这是我们做的，你看看，多么牛逼，我们做的，只是我们该做的，仅此而已。\n\n&emsp;&emsp;记得在11月初的时候，看过一个关于雷总的一篇报道，雷总说自己从1989年开始创业，如果是第一次创业，早就买十几辆跑车了，但是自己并没有很着走，也没有自我膨胀，大家觉得他很成功，而自己觉得自己不算很成功。看到这句话，我真的感觉到，有这样的老板，公司何愁不上市？而雷总的这种想法，做法也深深的影响着这里的每一位员工，这一点让我非常欣赏。\n\n&emsp;&emsp;团队里的每一个人都非常热心，大家经常互帮互助，一起工作，一起玩儿，这才是我理想的地方，这才是我理想中的团队，在这里我感觉到非常的开心。\n\n### 其他一些事儿\n\n#### 参加活动\n\n&emsp;&emsp;在2016年我参加的技术活动可以说非常多，但是渐渐的我发现，其实在这些免费活动中，真正有质量的技术活动并不多，而且讲的东西都是非常流行的一些框架什么的，大部分活动可以说是出去宣传自己的公司了，所以后来我索性就不指望能学到些什么，就是参加一些活动，认识一些人，扩大自己的圈子吧，所以在2016年，自己在技术方面的圈子可以说是有所扩大，也算是一种收获吧。\n\n#### 开始去记录一些东西\n\n&emsp;&emsp;在2016年，我自己弄了一个博客，其实初衷是记录一些自己学到技术吧，但是后来因为是自己的，所以其实写什么随意啦，所以开始写一些总结，写一些自己的想法，也算是记录，为给以后的自己看吧，哈哈...\n\n## 展望2017\n\n&emsp;&emsp;现在是2016年12月31日23:07分，2017年马上就要到来，对于即将到来的2017年，可以说是充满期待，感觉在接下来的一年中会有很多新的好玩儿的事情发生，对自己的2017有以下几点吧\n\n### 学习新的东西\n\n&emsp;&emsp;作为前端开发者，必须要适应快速变化的形式，同时学习不能停止，所以在接下来的一年中，我会学习一些新的东西，像vue2.0，weex等等这些框架吧，然后学习http，网络等，了解数据是如何传递的，然后学习一下node，koa，让自己可以简易搭一个后台，从而实现整套网站的简易搭建。学习前端的一些工具，例如webpack。\n\n### 开始锻炼\n\n&emsp;&emsp;再过几个月就是春天了，开春了，北京的雾霾会好很多，自己也该开始锻炼了。2016年，得益于自己在春夏秋的锻炼，一年都没怎么生病，所以锻炼不能停，减肥不能停，还的继续加油啊，哈哈，期望自己在2017年，身体依然棒棒哒。\n\n### 参加非技术活动\n\n&emsp;&emsp;2016年，自己参加的技术活动真的是非常多了，当然2017年也不能停，毕竟要跟上时代嘛，看看别人家的技术，反思一下自己所知道的技术，弥补自己的不足。但是吧，我觉得我该参加一些其他活动，其实2016年就有这个想法，但是一直没有勇气去做（我自己并不喜欢一个人去参加活动），所以在2017年，我希望自己可以鼓起勇气，自己去接触一些新的东西，认识一些新的领域的人，加油！\n\n### 学我的乐器\n\n&emsp;&emsp;2016年年初的时候自己定了目标要学吉他，随后买了把吉他，自己开始玩儿，但是后来也因为自己还要学一些其他东西，在年末就不怎么碰它了，所以在2017年，我要重拾我的吉他，要学会，从而让自己的生活更加丰富多彩，毕竟生活不只是代码。\n\n再见，2016；你好，2017😊\n","source":"_posts/hello-2017.md","raw":"---\ntitle: 再见，2016；你好，2017\ndate: 2016-12-31 23:28:51\ntags: 年终总结\ncomments: true\ncategories: \"总结\"\n---\n![](/img/2017newyear.jpg)\n&emsp;&emsp;今天是2016年12月31日，2016年的最后一天，记得那天组长让组里面每个成员做年终总结，自己想了想，真心不知道该说什么，因为其实自己来到小米的时间并不长，做的东西也不多，所以需要总结的东西很少。但是其实今年对于我个人来说，2016年是难忘的一年，发生了很多事情，值得我去回忆，去思考，但是，让我铭记的也许只有这两件：离开，开始新的生活。\n\n<!--more-->\n\n## 回望2016\n\n### 人生中的第一次跳槽\n\n2016年的9月26日星期一，我来到小米报到，完成了我人生中的第一次跳槽。\n\n&emsp;&emsp;记得今年年初的时候，我初六来到公司，拿到了开工红包，开始了2016的一年的工作，那时候并没有想到，自己会在未来的几个月中，开始尝试的去找工作，去想着换一家公司。因为在原公司待着感激并没有什么前途，同时也觉得自己在工作中，并不是那么开心，所以在今年6月底开始尝试的去找工作，但是其实自己并没有说想着必须离开这里，只是那时候自己觉得当时在的那家公司虽然说自己本身的技术并不会在工作中有多大的提升，但是因为并不是很忙，所以自己支配的时间也比较多，同时也是为了检验一下自己的技术到底有多少提升，所以就偶尔会投几家公司，然后去跟面试官当面较量，从而让我知道自己在哪方面还有所欠缺。所以从6月底开始一直到9月都在陆陆续续的面试，虽然时间长，但是面试并不多，因为其间我动摇过，曾经自己也告诉自己，其实公司挺不错的，感觉在这里也会被领导重视，在这里可以做一些我想做的，比如曾经公司CTO还让自己给大家讲vue，同时记得那时候CTO找我们每一个技术谈话，跟我说，把学到的东西都去用，当时非常高兴觉得自己在公司很受重视，所以决定留下来。\n\n&emsp;&emsp;但是后来自己在公司的非常好的朋友因为身体不舒服请假了，在这其间，我开始了一个人中午吃饭，其实现在回想起来，到底那时候是我自己不主动跟别人说话，还是别人确实也不搭理我，我不知道，但是确实后来自己在公司开始不再说话，每天听着音乐，做着我自己喜欢做的事儿（因为那时候我也没什么工作需要做），那时候真的是感觉，一副耳机，几首曲子，一个项目，整个世界。就这样我在公司待到九月初，那小子回来了，终于有个能聊到一起的了。\n\n&emsp;&emsp;记得我是9月8日的时候，我去小米面试，那时候其实没有想的自己能过，自己把自己做过的讲了一些，然后等待晚上的回复，那天下午等的非常焦急，我想去，但是也不知道自己表现怎么样，那天晚上等到7点多的时候还没电话，感觉可能没戏了，但是在7点30左右的时候hr打电话过来，告诉我过了，我当时真的非常高兴。第二天下午，公司要去组织去团建，可以说这次团建让我彻底决定，我要走了，这里并不适合我，俗话说：道不同，不相与谋。所以在收到offer的那一刻，我立马提离职，随后在一周之内办理离职，成功在2016年6月26日，来到小米，开始我在兔厂的工作生涯...\n\n### 新的环境，新的伙伴\n\n来到小米，开始新的工作，一切都是陌生的，一切从头开始，但是既然选择了，就不会害怕。\n\n&emsp;&emsp;这里给我的第一印象是，大家每一个人都在认真工作，每一个人各司其职，认真做自己的事儿，没有一个闲逛的人，大家都在努力的为公司出自己的一份力。在随后的时间里，我发现大家对自己公司的产品可以说是非常的欣赏（事实上产品确实非常优秀），都在为做出最酷的产品而一起奋斗，在年终总结的时候，我们组的一个同学也说，自己当初来小米，就是因为看到这里是一个可以认真做事儿地方。这一点让我非常欣赏，也非常感动，我也感觉这里才是真正做事情的地方。\n\n&emsp;&emsp;在今年10月25日，小米发布了让世人惊艳的概念机----小米MIX，在发布会期间，雷总讲到开发这款手机当时是多么的艰难，随后是如何克服困难，一步步做出来的。当你看到这款手机，你会为之而感到惊艳，但是其背后的艰难又有多少人而得知呢？回头看看我的团队，他们每一个人，说真的在我刚来的时候，我并没有感觉他们有多厉害，因为他们并不是那么爱炫耀，也不喜欢到处去宣讲东西，但是在后来我发现他们各个都是高手，只是我不了解而已。所以在这里，我感受到的另一点，我想也是这个企业的企业文化之一吧----厚积而薄发。我们做什么事情，并不需要别人知道，做出来的成绩，也不会到处去宣扬，告诉别人，这是我们做的，你看看，多么牛逼，我们做的，只是我们该做的，仅此而已。\n\n&emsp;&emsp;记得在11月初的时候，看过一个关于雷总的一篇报道，雷总说自己从1989年开始创业，如果是第一次创业，早就买十几辆跑车了，但是自己并没有很着走，也没有自我膨胀，大家觉得他很成功，而自己觉得自己不算很成功。看到这句话，我真的感觉到，有这样的老板，公司何愁不上市？而雷总的这种想法，做法也深深的影响着这里的每一位员工，这一点让我非常欣赏。\n\n&emsp;&emsp;团队里的每一个人都非常热心，大家经常互帮互助，一起工作，一起玩儿，这才是我理想的地方，这才是我理想中的团队，在这里我感觉到非常的开心。\n\n### 其他一些事儿\n\n#### 参加活动\n\n&emsp;&emsp;在2016年我参加的技术活动可以说非常多，但是渐渐的我发现，其实在这些免费活动中，真正有质量的技术活动并不多，而且讲的东西都是非常流行的一些框架什么的，大部分活动可以说是出去宣传自己的公司了，所以后来我索性就不指望能学到些什么，就是参加一些活动，认识一些人，扩大自己的圈子吧，所以在2016年，自己在技术方面的圈子可以说是有所扩大，也算是一种收获吧。\n\n#### 开始去记录一些东西\n\n&emsp;&emsp;在2016年，我自己弄了一个博客，其实初衷是记录一些自己学到技术吧，但是后来因为是自己的，所以其实写什么随意啦，所以开始写一些总结，写一些自己的想法，也算是记录，为给以后的自己看吧，哈哈...\n\n## 展望2017\n\n&emsp;&emsp;现在是2016年12月31日23:07分，2017年马上就要到来，对于即将到来的2017年，可以说是充满期待，感觉在接下来的一年中会有很多新的好玩儿的事情发生，对自己的2017有以下几点吧\n\n### 学习新的东西\n\n&emsp;&emsp;作为前端开发者，必须要适应快速变化的形式，同时学习不能停止，所以在接下来的一年中，我会学习一些新的东西，像vue2.0，weex等等这些框架吧，然后学习http，网络等，了解数据是如何传递的，然后学习一下node，koa，让自己可以简易搭一个后台，从而实现整套网站的简易搭建。学习前端的一些工具，例如webpack。\n\n### 开始锻炼\n\n&emsp;&emsp;再过几个月就是春天了，开春了，北京的雾霾会好很多，自己也该开始锻炼了。2016年，得益于自己在春夏秋的锻炼，一年都没怎么生病，所以锻炼不能停，减肥不能停，还的继续加油啊，哈哈，期望自己在2017年，身体依然棒棒哒。\n\n### 参加非技术活动\n\n&emsp;&emsp;2016年，自己参加的技术活动真的是非常多了，当然2017年也不能停，毕竟要跟上时代嘛，看看别人家的技术，反思一下自己所知道的技术，弥补自己的不足。但是吧，我觉得我该参加一些其他活动，其实2016年就有这个想法，但是一直没有勇气去做（我自己并不喜欢一个人去参加活动），所以在2017年，我希望自己可以鼓起勇气，自己去接触一些新的东西，认识一些新的领域的人，加油！\n\n### 学我的乐器\n\n&emsp;&emsp;2016年年初的时候自己定了目标要学吉他，随后买了把吉他，自己开始玩儿，但是后来也因为自己还要学一些其他东西，在年末就不怎么碰它了，所以在2017年，我要重拾我的吉他，要学会，从而让自己的生活更加丰富多彩，毕竟生活不只是代码。\n\n再见，2016；你好，2017😊\n","slug":"hello-2017","published":1,"updated":"2018-04-13T02:51:31.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoba001czrv400dx6e0m","content":"<p><img src=\"/img/2017newyear.jpg\" alt=\"\"><br>&emsp;&emsp;今天是2016年12月31日，2016年的最后一天，记得那天组长让组里面每个成员做年终总结，自己想了想，真心不知道该说什么，因为其实自己来到小米的时间并不长，做的东西也不多，所以需要总结的东西很少。但是其实今年对于我个人来说，2016年是难忘的一年，发生了很多事情，值得我去回忆，去思考，但是，让我铭记的也许只有这两件：离开，开始新的生活。</p>\n<a id=\"more\"></a>\n<h2 id=\"回望2016\"><a href=\"#回望2016\" class=\"headerlink\" title=\"回望2016\"></a>回望2016</h2><h3 id=\"人生中的第一次跳槽\"><a href=\"#人生中的第一次跳槽\" class=\"headerlink\" title=\"人生中的第一次跳槽\"></a>人生中的第一次跳槽</h3><p>2016年的9月26日星期一，我来到小米报到，完成了我人生中的第一次跳槽。</p>\n<p>&emsp;&emsp;记得今年年初的时候，我初六来到公司，拿到了开工红包，开始了2016的一年的工作，那时候并没有想到，自己会在未来的几个月中，开始尝试的去找工作，去想着换一家公司。因为在原公司待着感激并没有什么前途，同时也觉得自己在工作中，并不是那么开心，所以在今年6月底开始尝试的去找工作，但是其实自己并没有说想着必须离开这里，只是那时候自己觉得当时在的那家公司虽然说自己本身的技术并不会在工作中有多大的提升，但是因为并不是很忙，所以自己支配的时间也比较多，同时也是为了检验一下自己的技术到底有多少提升，所以就偶尔会投几家公司，然后去跟面试官当面较量，从而让我知道自己在哪方面还有所欠缺。所以从6月底开始一直到9月都在陆陆续续的面试，虽然时间长，但是面试并不多，因为其间我动摇过，曾经自己也告诉自己，其实公司挺不错的，感觉在这里也会被领导重视，在这里可以做一些我想做的，比如曾经公司CTO还让自己给大家讲vue，同时记得那时候CTO找我们每一个技术谈话，跟我说，把学到的东西都去用，当时非常高兴觉得自己在公司很受重视，所以决定留下来。</p>\n<p>&emsp;&emsp;但是后来自己在公司的非常好的朋友因为身体不舒服请假了，在这其间，我开始了一个人中午吃饭，其实现在回想起来，到底那时候是我自己不主动跟别人说话，还是别人确实也不搭理我，我不知道，但是确实后来自己在公司开始不再说话，每天听着音乐，做着我自己喜欢做的事儿（因为那时候我也没什么工作需要做），那时候真的是感觉，一副耳机，几首曲子，一个项目，整个世界。就这样我在公司待到九月初，那小子回来了，终于有个能聊到一起的了。</p>\n<p>&emsp;&emsp;记得我是9月8日的时候，我去小米面试，那时候其实没有想的自己能过，自己把自己做过的讲了一些，然后等待晚上的回复，那天下午等的非常焦急，我想去，但是也不知道自己表现怎么样，那天晚上等到7点多的时候还没电话，感觉可能没戏了，但是在7点30左右的时候hr打电话过来，告诉我过了，我当时真的非常高兴。第二天下午，公司要去组织去团建，可以说这次团建让我彻底决定，我要走了，这里并不适合我，俗话说：道不同，不相与谋。所以在收到offer的那一刻，我立马提离职，随后在一周之内办理离职，成功在2016年6月26日，来到小米，开始我在兔厂的工作生涯…</p>\n<h3 id=\"新的环境，新的伙伴\"><a href=\"#新的环境，新的伙伴\" class=\"headerlink\" title=\"新的环境，新的伙伴\"></a>新的环境，新的伙伴</h3><p>来到小米，开始新的工作，一切都是陌生的，一切从头开始，但是既然选择了，就不会害怕。</p>\n<p>&emsp;&emsp;这里给我的第一印象是，大家每一个人都在认真工作，每一个人各司其职，认真做自己的事儿，没有一个闲逛的人，大家都在努力的为公司出自己的一份力。在随后的时间里，我发现大家对自己公司的产品可以说是非常的欣赏（事实上产品确实非常优秀），都在为做出最酷的产品而一起奋斗，在年终总结的时候，我们组的一个同学也说，自己当初来小米，就是因为看到这里是一个可以认真做事儿地方。这一点让我非常欣赏，也非常感动，我也感觉这里才是真正做事情的地方。</p>\n<p>&emsp;&emsp;在今年10月25日，小米发布了让世人惊艳的概念机—-小米MIX，在发布会期间，雷总讲到开发这款手机当时是多么的艰难，随后是如何克服困难，一步步做出来的。当你看到这款手机，你会为之而感到惊艳，但是其背后的艰难又有多少人而得知呢？回头看看我的团队，他们每一个人，说真的在我刚来的时候，我并没有感觉他们有多厉害，因为他们并不是那么爱炫耀，也不喜欢到处去宣讲东西，但是在后来我发现他们各个都是高手，只是我不了解而已。所以在这里，我感受到的另一点，我想也是这个企业的企业文化之一吧—-厚积而薄发。我们做什么事情，并不需要别人知道，做出来的成绩，也不会到处去宣扬，告诉别人，这是我们做的，你看看，多么牛逼，我们做的，只是我们该做的，仅此而已。</p>\n<p>&emsp;&emsp;记得在11月初的时候，看过一个关于雷总的一篇报道，雷总说自己从1989年开始创业，如果是第一次创业，早就买十几辆跑车了，但是自己并没有很着走，也没有自我膨胀，大家觉得他很成功，而自己觉得自己不算很成功。看到这句话，我真的感觉到，有这样的老板，公司何愁不上市？而雷总的这种想法，做法也深深的影响着这里的每一位员工，这一点让我非常欣赏。</p>\n<p>&emsp;&emsp;团队里的每一个人都非常热心，大家经常互帮互助，一起工作，一起玩儿，这才是我理想的地方，这才是我理想中的团队，在这里我感觉到非常的开心。</p>\n<h3 id=\"其他一些事儿\"><a href=\"#其他一些事儿\" class=\"headerlink\" title=\"其他一些事儿\"></a>其他一些事儿</h3><h4 id=\"参加活动\"><a href=\"#参加活动\" class=\"headerlink\" title=\"参加活动\"></a>参加活动</h4><p>&emsp;&emsp;在2016年我参加的技术活动可以说非常多，但是渐渐的我发现，其实在这些免费活动中，真正有质量的技术活动并不多，而且讲的东西都是非常流行的一些框架什么的，大部分活动可以说是出去宣传自己的公司了，所以后来我索性就不指望能学到些什么，就是参加一些活动，认识一些人，扩大自己的圈子吧，所以在2016年，自己在技术方面的圈子可以说是有所扩大，也算是一种收获吧。</p>\n<h4 id=\"开始去记录一些东西\"><a href=\"#开始去记录一些东西\" class=\"headerlink\" title=\"开始去记录一些东西\"></a>开始去记录一些东西</h4><p>&emsp;&emsp;在2016年，我自己弄了一个博客，其实初衷是记录一些自己学到技术吧，但是后来因为是自己的，所以其实写什么随意啦，所以开始写一些总结，写一些自己的想法，也算是记录，为给以后的自己看吧，哈哈…</p>\n<h2 id=\"展望2017\"><a href=\"#展望2017\" class=\"headerlink\" title=\"展望2017\"></a>展望2017</h2><p>&emsp;&emsp;现在是2016年12月31日23:07分，2017年马上就要到来，对于即将到来的2017年，可以说是充满期待，感觉在接下来的一年中会有很多新的好玩儿的事情发生，对自己的2017有以下几点吧</p>\n<h3 id=\"学习新的东西\"><a href=\"#学习新的东西\" class=\"headerlink\" title=\"学习新的东西\"></a>学习新的东西</h3><p>&emsp;&emsp;作为前端开发者，必须要适应快速变化的形式，同时学习不能停止，所以在接下来的一年中，我会学习一些新的东西，像vue2.0，weex等等这些框架吧，然后学习http，网络等，了解数据是如何传递的，然后学习一下node，koa，让自己可以简易搭一个后台，从而实现整套网站的简易搭建。学习前端的一些工具，例如webpack。</p>\n<h3 id=\"开始锻炼\"><a href=\"#开始锻炼\" class=\"headerlink\" title=\"开始锻炼\"></a>开始锻炼</h3><p>&emsp;&emsp;再过几个月就是春天了，开春了，北京的雾霾会好很多，自己也该开始锻炼了。2016年，得益于自己在春夏秋的锻炼，一年都没怎么生病，所以锻炼不能停，减肥不能停，还的继续加油啊，哈哈，期望自己在2017年，身体依然棒棒哒。</p>\n<h3 id=\"参加非技术活动\"><a href=\"#参加非技术活动\" class=\"headerlink\" title=\"参加非技术活动\"></a>参加非技术活动</h3><p>&emsp;&emsp;2016年，自己参加的技术活动真的是非常多了，当然2017年也不能停，毕竟要跟上时代嘛，看看别人家的技术，反思一下自己所知道的技术，弥补自己的不足。但是吧，我觉得我该参加一些其他活动，其实2016年就有这个想法，但是一直没有勇气去做（我自己并不喜欢一个人去参加活动），所以在2017年，我希望自己可以鼓起勇气，自己去接触一些新的东西，认识一些新的领域的人，加油！</p>\n<h3 id=\"学我的乐器\"><a href=\"#学我的乐器\" class=\"headerlink\" title=\"学我的乐器\"></a>学我的乐器</h3><p>&emsp;&emsp;2016年年初的时候自己定了目标要学吉他，随后买了把吉他，自己开始玩儿，但是后来也因为自己还要学一些其他东西，在年末就不怎么碰它了，所以在2017年，我要重拾我的吉他，要学会，从而让自己的生活更加丰富多彩，毕竟生活不只是代码。</p>\n<p>再见，2016；你好，2017😊</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/2017newyear.jpg\" alt=\"\"><br>&emsp;&emsp;今天是2016年12月31日，2016年的最后一天，记得那天组长让组里面每个成员做年终总结，自己想了想，真心不知道该说什么，因为其实自己来到小米的时间并不长，做的东西也不多，所以需要总结的东西很少。但是其实今年对于我个人来说，2016年是难忘的一年，发生了很多事情，值得我去回忆，去思考，但是，让我铭记的也许只有这两件：离开，开始新的生活。</p>","more":"<h2 id=\"回望2016\"><a href=\"#回望2016\" class=\"headerlink\" title=\"回望2016\"></a>回望2016</h2><h3 id=\"人生中的第一次跳槽\"><a href=\"#人生中的第一次跳槽\" class=\"headerlink\" title=\"人生中的第一次跳槽\"></a>人生中的第一次跳槽</h3><p>2016年的9月26日星期一，我来到小米报到，完成了我人生中的第一次跳槽。</p>\n<p>&emsp;&emsp;记得今年年初的时候，我初六来到公司，拿到了开工红包，开始了2016的一年的工作，那时候并没有想到，自己会在未来的几个月中，开始尝试的去找工作，去想着换一家公司。因为在原公司待着感激并没有什么前途，同时也觉得自己在工作中，并不是那么开心，所以在今年6月底开始尝试的去找工作，但是其实自己并没有说想着必须离开这里，只是那时候自己觉得当时在的那家公司虽然说自己本身的技术并不会在工作中有多大的提升，但是因为并不是很忙，所以自己支配的时间也比较多，同时也是为了检验一下自己的技术到底有多少提升，所以就偶尔会投几家公司，然后去跟面试官当面较量，从而让我知道自己在哪方面还有所欠缺。所以从6月底开始一直到9月都在陆陆续续的面试，虽然时间长，但是面试并不多，因为其间我动摇过，曾经自己也告诉自己，其实公司挺不错的，感觉在这里也会被领导重视，在这里可以做一些我想做的，比如曾经公司CTO还让自己给大家讲vue，同时记得那时候CTO找我们每一个技术谈话，跟我说，把学到的东西都去用，当时非常高兴觉得自己在公司很受重视，所以决定留下来。</p>\n<p>&emsp;&emsp;但是后来自己在公司的非常好的朋友因为身体不舒服请假了，在这其间，我开始了一个人中午吃饭，其实现在回想起来，到底那时候是我自己不主动跟别人说话，还是别人确实也不搭理我，我不知道，但是确实后来自己在公司开始不再说话，每天听着音乐，做着我自己喜欢做的事儿（因为那时候我也没什么工作需要做），那时候真的是感觉，一副耳机，几首曲子，一个项目，整个世界。就这样我在公司待到九月初，那小子回来了，终于有个能聊到一起的了。</p>\n<p>&emsp;&emsp;记得我是9月8日的时候，我去小米面试，那时候其实没有想的自己能过，自己把自己做过的讲了一些，然后等待晚上的回复，那天下午等的非常焦急，我想去，但是也不知道自己表现怎么样，那天晚上等到7点多的时候还没电话，感觉可能没戏了，但是在7点30左右的时候hr打电话过来，告诉我过了，我当时真的非常高兴。第二天下午，公司要去组织去团建，可以说这次团建让我彻底决定，我要走了，这里并不适合我，俗话说：道不同，不相与谋。所以在收到offer的那一刻，我立马提离职，随后在一周之内办理离职，成功在2016年6月26日，来到小米，开始我在兔厂的工作生涯…</p>\n<h3 id=\"新的环境，新的伙伴\"><a href=\"#新的环境，新的伙伴\" class=\"headerlink\" title=\"新的环境，新的伙伴\"></a>新的环境，新的伙伴</h3><p>来到小米，开始新的工作，一切都是陌生的，一切从头开始，但是既然选择了，就不会害怕。</p>\n<p>&emsp;&emsp;这里给我的第一印象是，大家每一个人都在认真工作，每一个人各司其职，认真做自己的事儿，没有一个闲逛的人，大家都在努力的为公司出自己的一份力。在随后的时间里，我发现大家对自己公司的产品可以说是非常的欣赏（事实上产品确实非常优秀），都在为做出最酷的产品而一起奋斗，在年终总结的时候，我们组的一个同学也说，自己当初来小米，就是因为看到这里是一个可以认真做事儿地方。这一点让我非常欣赏，也非常感动，我也感觉这里才是真正做事情的地方。</p>\n<p>&emsp;&emsp;在今年10月25日，小米发布了让世人惊艳的概念机—-小米MIX，在发布会期间，雷总讲到开发这款手机当时是多么的艰难，随后是如何克服困难，一步步做出来的。当你看到这款手机，你会为之而感到惊艳，但是其背后的艰难又有多少人而得知呢？回头看看我的团队，他们每一个人，说真的在我刚来的时候，我并没有感觉他们有多厉害，因为他们并不是那么爱炫耀，也不喜欢到处去宣讲东西，但是在后来我发现他们各个都是高手，只是我不了解而已。所以在这里，我感受到的另一点，我想也是这个企业的企业文化之一吧—-厚积而薄发。我们做什么事情，并不需要别人知道，做出来的成绩，也不会到处去宣扬，告诉别人，这是我们做的，你看看，多么牛逼，我们做的，只是我们该做的，仅此而已。</p>\n<p>&emsp;&emsp;记得在11月初的时候，看过一个关于雷总的一篇报道，雷总说自己从1989年开始创业，如果是第一次创业，早就买十几辆跑车了，但是自己并没有很着走，也没有自我膨胀，大家觉得他很成功，而自己觉得自己不算很成功。看到这句话，我真的感觉到，有这样的老板，公司何愁不上市？而雷总的这种想法，做法也深深的影响着这里的每一位员工，这一点让我非常欣赏。</p>\n<p>&emsp;&emsp;团队里的每一个人都非常热心，大家经常互帮互助，一起工作，一起玩儿，这才是我理想的地方，这才是我理想中的团队，在这里我感觉到非常的开心。</p>\n<h3 id=\"其他一些事儿\"><a href=\"#其他一些事儿\" class=\"headerlink\" title=\"其他一些事儿\"></a>其他一些事儿</h3><h4 id=\"参加活动\"><a href=\"#参加活动\" class=\"headerlink\" title=\"参加活动\"></a>参加活动</h4><p>&emsp;&emsp;在2016年我参加的技术活动可以说非常多，但是渐渐的我发现，其实在这些免费活动中，真正有质量的技术活动并不多，而且讲的东西都是非常流行的一些框架什么的，大部分活动可以说是出去宣传自己的公司了，所以后来我索性就不指望能学到些什么，就是参加一些活动，认识一些人，扩大自己的圈子吧，所以在2016年，自己在技术方面的圈子可以说是有所扩大，也算是一种收获吧。</p>\n<h4 id=\"开始去记录一些东西\"><a href=\"#开始去记录一些东西\" class=\"headerlink\" title=\"开始去记录一些东西\"></a>开始去记录一些东西</h4><p>&emsp;&emsp;在2016年，我自己弄了一个博客，其实初衷是记录一些自己学到技术吧，但是后来因为是自己的，所以其实写什么随意啦，所以开始写一些总结，写一些自己的想法，也算是记录，为给以后的自己看吧，哈哈…</p>\n<h2 id=\"展望2017\"><a href=\"#展望2017\" class=\"headerlink\" title=\"展望2017\"></a>展望2017</h2><p>&emsp;&emsp;现在是2016年12月31日23:07分，2017年马上就要到来，对于即将到来的2017年，可以说是充满期待，感觉在接下来的一年中会有很多新的好玩儿的事情发生，对自己的2017有以下几点吧</p>\n<h3 id=\"学习新的东西\"><a href=\"#学习新的东西\" class=\"headerlink\" title=\"学习新的东西\"></a>学习新的东西</h3><p>&emsp;&emsp;作为前端开发者，必须要适应快速变化的形式，同时学习不能停止，所以在接下来的一年中，我会学习一些新的东西，像vue2.0，weex等等这些框架吧，然后学习http，网络等，了解数据是如何传递的，然后学习一下node，koa，让自己可以简易搭一个后台，从而实现整套网站的简易搭建。学习前端的一些工具，例如webpack。</p>\n<h3 id=\"开始锻炼\"><a href=\"#开始锻炼\" class=\"headerlink\" title=\"开始锻炼\"></a>开始锻炼</h3><p>&emsp;&emsp;再过几个月就是春天了，开春了，北京的雾霾会好很多，自己也该开始锻炼了。2016年，得益于自己在春夏秋的锻炼，一年都没怎么生病，所以锻炼不能停，减肥不能停，还的继续加油啊，哈哈，期望自己在2017年，身体依然棒棒哒。</p>\n<h3 id=\"参加非技术活动\"><a href=\"#参加非技术活动\" class=\"headerlink\" title=\"参加非技术活动\"></a>参加非技术活动</h3><p>&emsp;&emsp;2016年，自己参加的技术活动真的是非常多了，当然2017年也不能停，毕竟要跟上时代嘛，看看别人家的技术，反思一下自己所知道的技术，弥补自己的不足。但是吧，我觉得我该参加一些其他活动，其实2016年就有这个想法，但是一直没有勇气去做（我自己并不喜欢一个人去参加活动），所以在2017年，我希望自己可以鼓起勇气，自己去接触一些新的东西，认识一些新的领域的人，加油！</p>\n<h3 id=\"学我的乐器\"><a href=\"#学我的乐器\" class=\"headerlink\" title=\"学我的乐器\"></a>学我的乐器</h3><p>&emsp;&emsp;2016年年初的时候自己定了目标要学吉他，随后买了把吉他，自己开始玩儿，但是后来也因为自己还要学一些其他东西，在年末就不怎么碰它了，所以在2017年，我要重拾我的吉他，要学会，从而让自己的生活更加丰富多彩，毕竟生活不只是代码。</p>\n<p>再见，2016；你好，2017😊</p>"},{"title":"基于Gulp的前端自动化工程搭建","date":"2016-09-07T15:25:06.000Z","comments":1,"_content":"> 上个月月底在公司提出关于前后端分离的想法，并且开始研究关于前后端分离，前端工程化，模块化的一些东西，上周开始我准备自己开始写基于Gulp流的前端工程文件，这两天有时间，着手开始实现这个想法，但是写的过程中，遇到了一些问题，正是因为这些问题的解决让我对Gulp的流式处理有了更深的理解，写下这篇文章，分享一下这俩天我在写Gulp的时候学到的一些东西。\n\n<!--more-->\n\n## 准备工作\n\n### 安装Node\n\n首先Gulp是基于Nodejs的，所以安装Nodejs是前提，Node可以说是前端神器，基于Node有各种各样的工具，正是因为这些工具让我们非常方便的构建前端工程。\n\n#### 更改Node插件默认安装位置（非必需）\n\n我自己一般不喜欢在C盘状太多与系统无关的东西，而通过Node自带的npm安装的插件默认在C盘，但是我将Node安装到D盘后，想让插件就安装在Nodejs的主目录下，怎么办呢？\n\n1. 在Node主目录下新建\"node_global\"及\"node_cache\"两个文件夹\n\n2. 启动cmd，输入\n\n```c\n//后面的设置目录根据你的目录结构自行更改\nnpm config set prefix \"D:\\Program\\nodejs\\node_global\"\nnpm config set cache \"D:\\Program\\nodejs\\node_cache\"\n```\n\n3. 关闭cmd，打开系统对话框，“我的电脑”右键“属性”-“高级系统设置”-“高级”-“环境变量”。\n\n4. 进入环境变量对话框，在系统变量下新建\"NODE_PATH\"，输入\"D:\\Program\\nodejs\\node_global\\node_module\"。 由于改变了module的默认地址，所以上面的用户变量都要跟着改变一下（用户变量\"PATH\"修改为\"D:\\Program\\nodejs\\node_global\\\"），要不使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个错误。\n\n经过这四步的设置就可以让安装的Node插件放在Nodejs的主目录了。\n\n### 安装Gulp\n\n```c\n//全局安装Gulp\nnpm install -g gulp\n//在项目中安装Gulp\nnpm install --save-dev gulp\n```\n\n运行`gulp -v`,如果不报错，表示安装成功\n\n然后在命令行运行\n\n```c\nnpm init\n```\n\n让项目生产`package.json`文件\n\n## 搭建工程\n\n众所周知，在开发工程中有开发和上线两个过程，在开发中，我们一般需要自动刷新以及实时编译，但是如果上线，我们就需要考虑很多优化的东西，比如文件编译压缩，静态资源放缓存处理等等问题，我自己搭的这个工程只涉及到文件编译压缩，实时刷新，静态资源放缓存这三个基本的流程。\n\n在项目的目录结构如下\n\n```c\n-------------------project\n    |\n    |--------------dist (该文件夹为打包生成的)\n    |   |\n    |   |----------css\n    |   |   |\n    |   |   |------index-9dcc24fe2e.css\n    |   |\n    |   |----------js\n    |   |   |\n    |   |   |------index-9dcc24fe2e.js\n    |   |----------index.html \n    |\n    |--------------src\n    |   |\n    |   |----------scss\n    |   |   |\n    |   |   |------index.scss\n    |   |\n    |   |----------js\n    |   |   |\n    |   |   |------index.js\n    |   |\n    |   |----------index.html\n    |--------------gulpfile.js\n    |--------------package.json\n```\n\n### 开发所用流程\n\n#### 文件编译\n\n在工程中准备使用scss作为css的预编译，所以需要利用gulp对scss进行编译，所以首先安装gulp-sass。\n\n```c\nnpm install --save-dev gulp-sass\n```\n\n安装完成之后，直接在gulpfile.js引用配置\n\n```js\nconst sass = require('gulp-sass'); //scss编译\n\ngulp.task('scss:dev',()=>{\n    gulp.src('src/scss/*.scss')\n    .pipe(sass())\n    .pipe(gulp.dest('dist/css')); //将生成好的css文件放到dist/css文件夹下\n});\n```\n\n这里简单介绍下gulp的两个api：\n\ngulp.src()输入符合所提供的匹配模式或者匹配模式的数组的文件。将返回一个stream或者可以被piped到别的插件中。**读文件**\n\ngulp.dest()能被pipe进来，并且将会写文件。并重新输出（emits）所有数据，因此可以将它pipe到多个文件夹，如果文件夹不存在则将会自动创建。**写文件**\n\n#### 实时刷新\n\n实现实时刷新的工具有很多，我自己使用browser-sync，这个工具的功能非常强大，想了解它更多的用法可以查看官网：[http://www.browsersync.cn/](http://www.browsersync.cn/)。\n\n首先我们在项目中安装该模块\n\n```c\nnpm install --save-dev browser-sync\n```\n\n根据官网的browser-sync与gulp的配置，得到如下配置：\n\n```js\nconst browserSync = require('browser-sync').create(); //实时刷新\nconst reload = browserSync.reload;\n\ngulp.task('dev',['scss:dev'],function () {\n    browserSync.init({\n        server:{\n            baseDir:'./'  //设置服务器的根目录\n        },\n        logLevel: \"debug\",\n        logPrefix:\"dev\",\n        browser:'chrome',\n        notify:false //开启静默模式\n    });\n    //使用gulp的监听功能，实现编译修改过后的文件\n    gulp.watch('src/scss/*.scss',['scss:dev']);\n    gulp.watch(('*.html')).on('change',reload);\n});\n```\n\n\n这样，一个简单的gulp开发流程就出来了，仅仅只是一个编译scss和一个实时刷新。\n\n### 打包上线所有流程\n\n打包上线，我们更多的是考虑，静态资源防缓存，优化。对css，js的压缩，对图片的处理，我写的这个简单的流程中并没有涉及对图片的处理，所以这里仅针对css，js，html处理。\n\n压缩css我们使用gulp-sass就可以，因为它在编译scss的时候有一个配置选项可以直接输出被压缩的css。压缩js我使用了gulp-uglify，静态资源防缓存使用gulp-rev和gulp-rev-collector。\n\n#### 对css，js的处理\n\n```js\n//scss编译\ngulp.task('css',()=> {\n    gulp.src('src/scss/*.scss')\n        .pipe(sass({\n            outputStyle: 'compressed'               //编译并输出压缩过的文件\n        }))\n        .pipe(rev())                                //给css添加哈希值\n        .pipe(gulp.dest('dist/css'))\n        .pipe(rev.manifest())                       //给添加哈希值的文件添加到清单中\n        .pipe(gulp.dest('rev/css'));\n});\n//压缩js\ngulp.task('js', ()=> {\n    gulp.src('src/js/*js')\n        .pipe(uglify())\n        .pipe(rev())                                //给js添加哈希值\n        .pipe(gulp.dest('dist/js'))\n        .pipe(rev.manifest())                       //给添加哈希值的文件添加到清单中\n        .pipe(gulp.dest('rev/js'));\n});\n```\n\n其中gulp-rev是为css文件名添加哈希值，而rev.manifest()会生成一个json文件，这个json文件中记录了原文件名和添加哈希值后的文件名的一个对应关系，这个对应关系在最后对应替换html的引用的时候会用到。\n\n生成的json文件如下：\n\n```json\n{\n  \"index.css\": \"index-9dcc24fe2e.css\"\n}\n```\n\n由于给文件添加了哈希值，所以每次编译出来的css和js都是不一样的，这会导致有很多冗余文件，所以我们可以每次在生成文件之前，先将原来的文件全部清空。\n\ngulp中也有做这个工作的插件---gulp-clean，因此我们可以在编译压缩添加哈希值之前先将原文将清空。\n\n#### 清空生成的项目文件\n\n```js\nconst clean = require('gulp-clean');                 //清空文件夹里所有的文件\n//每次打包时先清空原有的文件夹\ngulp.task('clean', ()=> {\n    gulp.src(['dist', 'rev'], {read: false}) //这里设置的dist表示删除dist文件夹及其下所有文件\n        .pipe(clean());\n});\n```\n\n#### 让添加哈希编码的文件自动添加到html中\n\n前面提到的gulp-rev实现了给文件名添加哈希编码，但是在打包完成后如何让原来未添加哈希值的引用自动变为已经添加哈希值的引用，这里用到gulp-rev的一个插件gulp-rev-collector，配置如下：\n\n```js\n//将处理过的css，js引入html\ngulp.task('reCollector',()=>{\n    gulp.src(['rev/**/*.json','src/*.html'])\n        .pipe(reCollector({\n            replaceReved: true,  //模板中已经被替换的文件是否还能再被替换,默认是false\n            dirReplacements: {   //标识目录替换的集合, 因为gulp-rev创建的manifest文件不包含任何目录信息,\n                'css/': '/dist/css/',\n                'js/': '/dist/js/'\n            }\n        }))\n        .pipe(gulp.dest('dist'))\n});\n```\n\n##### 并没有正常替换？\n\n在我自己写的时候，出现这个问题，运行完成该任务后，html中的css和js引用并没有发生变化，网上搜了半天，才知道是由于自己用了gulp-rename插件，然后将文件名都添加了.min（至于为什么添加，仅仅是因为是压缩过的，应该写个）而在自己写的html里面引用的文件并没有.min，由于gulp-rev-collector在替换的时候根据生成的json文件替换，在json中，文件都有了.min而在html中没有，所以无法匹配，自然也就不能实现替换了，所以在替换的时候一定要注意gulp-rev生成的json文件中的css，js与html中的引用的一样，否则无法实现替换。\n\n<font color=\"red\">在gulp-rev-collector的api中有一个revSuffix，这个看起来可以实现类似于gulp-rename的功能，但是不知道该怎么用，大家如果知道的话请告诉我...</font>\n\n#### 执行所有任务\n\n完成上面几个步骤后我们将所有任务串起来，让其可以一条命令然后全部执行\n\n```js\ngulp.task('build',['clean', 'css', 'js', 'reCollector']);\n```\n\n#### 再次理解gulp\n\n##### gulp---它的task是顺序执行吗？\n\n本以为到这里，就算是写完了，运行，完美，打包生成文件，再运行一次，报错了！！！！\n\n```c\n[19:04:57] Finished 'default' after 7.38 μs\nstream.js:74\n      throw er; // Unhandled stream error in pipe.\n      ^\n\nError: ENOENT: no such file or directory, stat 'D:\\project\\dist\\js\\index-6045b384e6.min.js'\n    at Error (native)\n```\n\n提示我找不到这个文件，这让我很郁闷啊，然后我分开执行，很ok，可以确定是执行顺序有问题，很可能在没有清理完成就执行后面了，查了gulp的官网文档才知道**本身gulp的pipe是一个一个任务进行的，是同步的，但是每个task之间是不同步的，是一起进行的**，这也验证了我的猜想，所以在网上找如何解决这个问题，找到一个叫run-sequence的npm插件，配置文件如下：\n\n```js\n//进行打包上线\ngulp.task('build', ()=> {\n    runSequence('clean', ['css', 'js'], 'reCollector');\n});\n```\n\n本以为运行就ok，结果，还是报错，这里就涉及到对gulp的另一个理解\n\n##### run-sequence插件对异步任务的处理\n\n在用这个插件让任务有序进行后，我想进一步直观的看到它对任务的序列化，自己写了一个demo，如下：\n\n```js\ngulp.task('a',function(){\n    setTimeout(function () {\n        console.log(1);\n    },30);\n});\ngulp.task('b',function() {\n    console.log(2);\n});\ngulp.task('ab',function(){\n    runSequence('a','b');\n});\n```\n\n但是这里就出现问题了，runSequence不管用了，找插件的说明和gulp官方文档，原来异步任务，像setTimeout，readFile等，需要添加一个callback的执行，这里的callback()就会返回一个promise的resolve()，告诉后面的任务，当前任务已经完成，后面可以继续执行了，所以在task a里面执行callback。\n\n```js\ngulp.task('a',function(cb){\n    setTimeout(function () {\n        console.log(1);\n        cb();\n    },30);\n});\n```\n\n那为什么前面写的那些任务不需要添加一个callback呢？由于gulp的pipe流让每一个task中的小任务（每一个pipe）顺序执行，从而整个pipe流是同步的，并不是异步任务，所以并不需要手动让其返回promise，run-sequence会自动帮我们管理。\n\n## gulpfile的分离\n\n在前面我们将dev和build写在了一个叫gulpfile的文件中，虽然可以执行，但是当我们的工程越来越大的时候，会导致gulpfile可维护性降低，那能否让dev和build分别写在两个文件中呢？答案是可以的，我们可以新建两个文件，分别为gulpfile-dev.js和gulpfile-build.js，其实我们在运行gulp build的时候，其实是运行了gulp --gulpfile gulpfile.js build，前者相当于后者的缩写，所以在运行gulp的时候在命令中输入如下：\n\n```c\ngulp --gulpfile gulpfile-dev.js\n\ngulp --gulpfile gulpfile-build.js\n```\n\n就可以在gulp运行时候指定gulpfile。这样我们再原来的task中的buil和dev改成default就可以直接运行以上命令达到预期效果。\n\n但是每次敲这么长的命令很烦，怎么办呢？我们可以在package.json的scripts中添加如下json：\n\n```json\n\"dev\": \"gulp --gulpfile gulpfile-dev.js\"\n\"build\": \"gulp --gulpfile gulpfile-build.js\"\n```\n\n这样，我们在运行的时候，直接在命令行输入：\n\n```c\nnpm run dev\nnpm run build\n```\n\n就可以实现打包了，是不是很酸爽，哈哈！\n\n## 总结\n\n至此，我们就完成了一个简易的基于gulp的前端工程的搭建，很多东西确实，想着并不难，做起来会出现各种各样意想不到的问题，gulp很早就知道，都是单个任务在写，然后用哪个执行哪个命令，直到自己写完这个这个简单的工程，才对gulp有了更深入的理解。\n","source":"_posts/gulpUse.md","raw":"---\ntitle: 基于Gulp的前端自动化工程搭建\ndate: 2016-09-07 23:25:06\ntags: Javascript Gulp Nodejs\ncomments: true\ncategories: \"Javascript Gulp Nodejs\"\n---\n> 上个月月底在公司提出关于前后端分离的想法，并且开始研究关于前后端分离，前端工程化，模块化的一些东西，上周开始我准备自己开始写基于Gulp流的前端工程文件，这两天有时间，着手开始实现这个想法，但是写的过程中，遇到了一些问题，正是因为这些问题的解决让我对Gulp的流式处理有了更深的理解，写下这篇文章，分享一下这俩天我在写Gulp的时候学到的一些东西。\n\n<!--more-->\n\n## 准备工作\n\n### 安装Node\n\n首先Gulp是基于Nodejs的，所以安装Nodejs是前提，Node可以说是前端神器，基于Node有各种各样的工具，正是因为这些工具让我们非常方便的构建前端工程。\n\n#### 更改Node插件默认安装位置（非必需）\n\n我自己一般不喜欢在C盘状太多与系统无关的东西，而通过Node自带的npm安装的插件默认在C盘，但是我将Node安装到D盘后，想让插件就安装在Nodejs的主目录下，怎么办呢？\n\n1. 在Node主目录下新建\"node_global\"及\"node_cache\"两个文件夹\n\n2. 启动cmd，输入\n\n```c\n//后面的设置目录根据你的目录结构自行更改\nnpm config set prefix \"D:\\Program\\nodejs\\node_global\"\nnpm config set cache \"D:\\Program\\nodejs\\node_cache\"\n```\n\n3. 关闭cmd，打开系统对话框，“我的电脑”右键“属性”-“高级系统设置”-“高级”-“环境变量”。\n\n4. 进入环境变量对话框，在系统变量下新建\"NODE_PATH\"，输入\"D:\\Program\\nodejs\\node_global\\node_module\"。 由于改变了module的默认地址，所以上面的用户变量都要跟着改变一下（用户变量\"PATH\"修改为\"D:\\Program\\nodejs\\node_global\\\"），要不使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个错误。\n\n经过这四步的设置就可以让安装的Node插件放在Nodejs的主目录了。\n\n### 安装Gulp\n\n```c\n//全局安装Gulp\nnpm install -g gulp\n//在项目中安装Gulp\nnpm install --save-dev gulp\n```\n\n运行`gulp -v`,如果不报错，表示安装成功\n\n然后在命令行运行\n\n```c\nnpm init\n```\n\n让项目生产`package.json`文件\n\n## 搭建工程\n\n众所周知，在开发工程中有开发和上线两个过程，在开发中，我们一般需要自动刷新以及实时编译，但是如果上线，我们就需要考虑很多优化的东西，比如文件编译压缩，静态资源放缓存处理等等问题，我自己搭的这个工程只涉及到文件编译压缩，实时刷新，静态资源放缓存这三个基本的流程。\n\n在项目的目录结构如下\n\n```c\n-------------------project\n    |\n    |--------------dist (该文件夹为打包生成的)\n    |   |\n    |   |----------css\n    |   |   |\n    |   |   |------index-9dcc24fe2e.css\n    |   |\n    |   |----------js\n    |   |   |\n    |   |   |------index-9dcc24fe2e.js\n    |   |----------index.html \n    |\n    |--------------src\n    |   |\n    |   |----------scss\n    |   |   |\n    |   |   |------index.scss\n    |   |\n    |   |----------js\n    |   |   |\n    |   |   |------index.js\n    |   |\n    |   |----------index.html\n    |--------------gulpfile.js\n    |--------------package.json\n```\n\n### 开发所用流程\n\n#### 文件编译\n\n在工程中准备使用scss作为css的预编译，所以需要利用gulp对scss进行编译，所以首先安装gulp-sass。\n\n```c\nnpm install --save-dev gulp-sass\n```\n\n安装完成之后，直接在gulpfile.js引用配置\n\n```js\nconst sass = require('gulp-sass'); //scss编译\n\ngulp.task('scss:dev',()=>{\n    gulp.src('src/scss/*.scss')\n    .pipe(sass())\n    .pipe(gulp.dest('dist/css')); //将生成好的css文件放到dist/css文件夹下\n});\n```\n\n这里简单介绍下gulp的两个api：\n\ngulp.src()输入符合所提供的匹配模式或者匹配模式的数组的文件。将返回一个stream或者可以被piped到别的插件中。**读文件**\n\ngulp.dest()能被pipe进来，并且将会写文件。并重新输出（emits）所有数据，因此可以将它pipe到多个文件夹，如果文件夹不存在则将会自动创建。**写文件**\n\n#### 实时刷新\n\n实现实时刷新的工具有很多，我自己使用browser-sync，这个工具的功能非常强大，想了解它更多的用法可以查看官网：[http://www.browsersync.cn/](http://www.browsersync.cn/)。\n\n首先我们在项目中安装该模块\n\n```c\nnpm install --save-dev browser-sync\n```\n\n根据官网的browser-sync与gulp的配置，得到如下配置：\n\n```js\nconst browserSync = require('browser-sync').create(); //实时刷新\nconst reload = browserSync.reload;\n\ngulp.task('dev',['scss:dev'],function () {\n    browserSync.init({\n        server:{\n            baseDir:'./'  //设置服务器的根目录\n        },\n        logLevel: \"debug\",\n        logPrefix:\"dev\",\n        browser:'chrome',\n        notify:false //开启静默模式\n    });\n    //使用gulp的监听功能，实现编译修改过后的文件\n    gulp.watch('src/scss/*.scss',['scss:dev']);\n    gulp.watch(('*.html')).on('change',reload);\n});\n```\n\n\n这样，一个简单的gulp开发流程就出来了，仅仅只是一个编译scss和一个实时刷新。\n\n### 打包上线所有流程\n\n打包上线，我们更多的是考虑，静态资源防缓存，优化。对css，js的压缩，对图片的处理，我写的这个简单的流程中并没有涉及对图片的处理，所以这里仅针对css，js，html处理。\n\n压缩css我们使用gulp-sass就可以，因为它在编译scss的时候有一个配置选项可以直接输出被压缩的css。压缩js我使用了gulp-uglify，静态资源防缓存使用gulp-rev和gulp-rev-collector。\n\n#### 对css，js的处理\n\n```js\n//scss编译\ngulp.task('css',()=> {\n    gulp.src('src/scss/*.scss')\n        .pipe(sass({\n            outputStyle: 'compressed'               //编译并输出压缩过的文件\n        }))\n        .pipe(rev())                                //给css添加哈希值\n        .pipe(gulp.dest('dist/css'))\n        .pipe(rev.manifest())                       //给添加哈希值的文件添加到清单中\n        .pipe(gulp.dest('rev/css'));\n});\n//压缩js\ngulp.task('js', ()=> {\n    gulp.src('src/js/*js')\n        .pipe(uglify())\n        .pipe(rev())                                //给js添加哈希值\n        .pipe(gulp.dest('dist/js'))\n        .pipe(rev.manifest())                       //给添加哈希值的文件添加到清单中\n        .pipe(gulp.dest('rev/js'));\n});\n```\n\n其中gulp-rev是为css文件名添加哈希值，而rev.manifest()会生成一个json文件，这个json文件中记录了原文件名和添加哈希值后的文件名的一个对应关系，这个对应关系在最后对应替换html的引用的时候会用到。\n\n生成的json文件如下：\n\n```json\n{\n  \"index.css\": \"index-9dcc24fe2e.css\"\n}\n```\n\n由于给文件添加了哈希值，所以每次编译出来的css和js都是不一样的，这会导致有很多冗余文件，所以我们可以每次在生成文件之前，先将原来的文件全部清空。\n\ngulp中也有做这个工作的插件---gulp-clean，因此我们可以在编译压缩添加哈希值之前先将原文将清空。\n\n#### 清空生成的项目文件\n\n```js\nconst clean = require('gulp-clean');                 //清空文件夹里所有的文件\n//每次打包时先清空原有的文件夹\ngulp.task('clean', ()=> {\n    gulp.src(['dist', 'rev'], {read: false}) //这里设置的dist表示删除dist文件夹及其下所有文件\n        .pipe(clean());\n});\n```\n\n#### 让添加哈希编码的文件自动添加到html中\n\n前面提到的gulp-rev实现了给文件名添加哈希编码，但是在打包完成后如何让原来未添加哈希值的引用自动变为已经添加哈希值的引用，这里用到gulp-rev的一个插件gulp-rev-collector，配置如下：\n\n```js\n//将处理过的css，js引入html\ngulp.task('reCollector',()=>{\n    gulp.src(['rev/**/*.json','src/*.html'])\n        .pipe(reCollector({\n            replaceReved: true,  //模板中已经被替换的文件是否还能再被替换,默认是false\n            dirReplacements: {   //标识目录替换的集合, 因为gulp-rev创建的manifest文件不包含任何目录信息,\n                'css/': '/dist/css/',\n                'js/': '/dist/js/'\n            }\n        }))\n        .pipe(gulp.dest('dist'))\n});\n```\n\n##### 并没有正常替换？\n\n在我自己写的时候，出现这个问题，运行完成该任务后，html中的css和js引用并没有发生变化，网上搜了半天，才知道是由于自己用了gulp-rename插件，然后将文件名都添加了.min（至于为什么添加，仅仅是因为是压缩过的，应该写个）而在自己写的html里面引用的文件并没有.min，由于gulp-rev-collector在替换的时候根据生成的json文件替换，在json中，文件都有了.min而在html中没有，所以无法匹配，自然也就不能实现替换了，所以在替换的时候一定要注意gulp-rev生成的json文件中的css，js与html中的引用的一样，否则无法实现替换。\n\n<font color=\"red\">在gulp-rev-collector的api中有一个revSuffix，这个看起来可以实现类似于gulp-rename的功能，但是不知道该怎么用，大家如果知道的话请告诉我...</font>\n\n#### 执行所有任务\n\n完成上面几个步骤后我们将所有任务串起来，让其可以一条命令然后全部执行\n\n```js\ngulp.task('build',['clean', 'css', 'js', 'reCollector']);\n```\n\n#### 再次理解gulp\n\n##### gulp---它的task是顺序执行吗？\n\n本以为到这里，就算是写完了，运行，完美，打包生成文件，再运行一次，报错了！！！！\n\n```c\n[19:04:57] Finished 'default' after 7.38 μs\nstream.js:74\n      throw er; // Unhandled stream error in pipe.\n      ^\n\nError: ENOENT: no such file or directory, stat 'D:\\project\\dist\\js\\index-6045b384e6.min.js'\n    at Error (native)\n```\n\n提示我找不到这个文件，这让我很郁闷啊，然后我分开执行，很ok，可以确定是执行顺序有问题，很可能在没有清理完成就执行后面了，查了gulp的官网文档才知道**本身gulp的pipe是一个一个任务进行的，是同步的，但是每个task之间是不同步的，是一起进行的**，这也验证了我的猜想，所以在网上找如何解决这个问题，找到一个叫run-sequence的npm插件，配置文件如下：\n\n```js\n//进行打包上线\ngulp.task('build', ()=> {\n    runSequence('clean', ['css', 'js'], 'reCollector');\n});\n```\n\n本以为运行就ok，结果，还是报错，这里就涉及到对gulp的另一个理解\n\n##### run-sequence插件对异步任务的处理\n\n在用这个插件让任务有序进行后，我想进一步直观的看到它对任务的序列化，自己写了一个demo，如下：\n\n```js\ngulp.task('a',function(){\n    setTimeout(function () {\n        console.log(1);\n    },30);\n});\ngulp.task('b',function() {\n    console.log(2);\n});\ngulp.task('ab',function(){\n    runSequence('a','b');\n});\n```\n\n但是这里就出现问题了，runSequence不管用了，找插件的说明和gulp官方文档，原来异步任务，像setTimeout，readFile等，需要添加一个callback的执行，这里的callback()就会返回一个promise的resolve()，告诉后面的任务，当前任务已经完成，后面可以继续执行了，所以在task a里面执行callback。\n\n```js\ngulp.task('a',function(cb){\n    setTimeout(function () {\n        console.log(1);\n        cb();\n    },30);\n});\n```\n\n那为什么前面写的那些任务不需要添加一个callback呢？由于gulp的pipe流让每一个task中的小任务（每一个pipe）顺序执行，从而整个pipe流是同步的，并不是异步任务，所以并不需要手动让其返回promise，run-sequence会自动帮我们管理。\n\n## gulpfile的分离\n\n在前面我们将dev和build写在了一个叫gulpfile的文件中，虽然可以执行，但是当我们的工程越来越大的时候，会导致gulpfile可维护性降低，那能否让dev和build分别写在两个文件中呢？答案是可以的，我们可以新建两个文件，分别为gulpfile-dev.js和gulpfile-build.js，其实我们在运行gulp build的时候，其实是运行了gulp --gulpfile gulpfile.js build，前者相当于后者的缩写，所以在运行gulp的时候在命令中输入如下：\n\n```c\ngulp --gulpfile gulpfile-dev.js\n\ngulp --gulpfile gulpfile-build.js\n```\n\n就可以在gulp运行时候指定gulpfile。这样我们再原来的task中的buil和dev改成default就可以直接运行以上命令达到预期效果。\n\n但是每次敲这么长的命令很烦，怎么办呢？我们可以在package.json的scripts中添加如下json：\n\n```json\n\"dev\": \"gulp --gulpfile gulpfile-dev.js\"\n\"build\": \"gulp --gulpfile gulpfile-build.js\"\n```\n\n这样，我们在运行的时候，直接在命令行输入：\n\n```c\nnpm run dev\nnpm run build\n```\n\n就可以实现打包了，是不是很酸爽，哈哈！\n\n## 总结\n\n至此，我们就完成了一个简易的基于gulp的前端工程的搭建，很多东西确实，想着并不难，做起来会出现各种各样意想不到的问题，gulp很早就知道，都是单个任务在写，然后用哪个执行哪个命令，直到自己写完这个这个简单的工程，才对gulp有了更深入的理解。\n","slug":"gulpUse","published":1,"updated":"2016-09-07T08:06:08.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobb001fzrv4ajcbaerc","content":"<blockquote>\n<p>上个月月底在公司提出关于前后端分离的想法，并且开始研究关于前后端分离，前端工程化，模块化的一些东西，上周开始我准备自己开始写基于Gulp流的前端工程文件，这两天有时间，着手开始实现这个想法，但是写的过程中，遇到了一些问题，正是因为这些问题的解决让我对Gulp的流式处理有了更深的理解，写下这篇文章，分享一下这俩天我在写Gulp的时候学到的一些东西。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装Node</h3><p>首先Gulp是基于Nodejs的，所以安装Nodejs是前提，Node可以说是前端神器，基于Node有各种各样的工具，正是因为这些工具让我们非常方便的构建前端工程。</p>\n<h4 id=\"更改Node插件默认安装位置（非必需）\"><a href=\"#更改Node插件默认安装位置（非必需）\" class=\"headerlink\" title=\"更改Node插件默认安装位置（非必需）\"></a>更改Node插件默认安装位置（非必需）</h4><p>我自己一般不喜欢在C盘状太多与系统无关的东西，而通过Node自带的npm安装的插件默认在C盘，但是我将Node安装到D盘后，想让插件就安装在Nodejs的主目录下，怎么办呢？</p>\n<ol>\n<li><p>在Node主目录下新建”node_global”及”node_cache”两个文件夹</p>\n</li>\n<li><p>启动cmd，输入</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后面的设置目录根据你的目录结构自行更改</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"D:\\Program\\nodejs\\node_global\"</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"D:\\Program\\nodejs\\node_cache\"</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>关闭cmd，打开系统对话框，“我的电脑”右键“属性”-“高级系统设置”-“高级”-“环境变量”。</p>\n</li>\n<li><p>进入环境变量对话框，在系统变量下新建”NODE_PATH”，输入”D:\\Program\\nodejs\\node_global\\node_module”。 由于改变了module的默认地址，所以上面的用户变量都要跟着改变一下（用户变量”PATH”修改为”D:\\Program\\nodejs\\node_global\\”），要不使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个错误。</p>\n</li>\n</ol>\n<p>经过这四步的设置就可以让安装的Node插件放在Nodejs的主目录了。</p>\n<h3 id=\"安装Gulp\"><a href=\"#安装Gulp\" class=\"headerlink\" title=\"安装Gulp\"></a>安装Gulp</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局安装Gulp</span></span><br><span class=\"line\">npm install -g gulp</span><br><span class=\"line\"><span class=\"comment\">//在项目中安装Gulp</span></span><br><span class=\"line\">npm install --save-dev gulp</span><br></pre></td></tr></table></figure>\n<p>运行<code>gulp -v</code>,如果不报错，表示安装成功</p>\n<p>然后在命令行运行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>让项目生产<code>package.json</code>文件</p>\n<h2 id=\"搭建工程\"><a href=\"#搭建工程\" class=\"headerlink\" title=\"搭建工程\"></a>搭建工程</h2><p>众所周知，在开发工程中有开发和上线两个过程，在开发中，我们一般需要自动刷新以及实时编译，但是如果上线，我们就需要考虑很多优化的东西，比如文件编译压缩，静态资源放缓存处理等等问题，我自己搭的这个工程只涉及到文件编译压缩，实时刷新，静态资源放缓存这三个基本的流程。</p>\n<p>在项目的目录结构如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------project</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |--------------dist (该文件夹为打包生成的)</span><br><span class=\"line\">    |   |</span><br><span class=\"line\">    |   |----------css</span><br><span class=\"line\">    |   |   |</span><br><span class=\"line\">    |   |   |------index<span class=\"number\">-9</span>dcc24fe2e.css</span><br><span class=\"line\">    |   |</span><br><span class=\"line\">    |   |----------js</span><br><span class=\"line\">    |   |   |</span><br><span class=\"line\">    |   |   |------index<span class=\"number\">-9</span>dcc24fe2e.js</span><br><span class=\"line\">    |   |----------index.html </span><br><span class=\"line\">    |</span><br><span class=\"line\">    |--------------src</span><br><span class=\"line\">    |   |</span><br><span class=\"line\">    |   |----------scss</span><br><span class=\"line\">    |   |   |</span><br><span class=\"line\">    |   |   |------index.scss</span><br><span class=\"line\">    |   |</span><br><span class=\"line\">    |   |----------js</span><br><span class=\"line\">    |   |   |</span><br><span class=\"line\">    |   |   |------index.js</span><br><span class=\"line\">    |   |</span><br><span class=\"line\">    |   |----------index.html</span><br><span class=\"line\">    |--------------gulpfile.js</span><br><span class=\"line\">    |--------------package.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发所用流程\"><a href=\"#开发所用流程\" class=\"headerlink\" title=\"开发所用流程\"></a>开发所用流程</h3><h4 id=\"文件编译\"><a href=\"#文件编译\" class=\"headerlink\" title=\"文件编译\"></a>文件编译</h4><p>在工程中准备使用scss作为css的预编译，所以需要利用gulp对scss进行编译，所以首先安装gulp-sass。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev gulp-sass</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，直接在gulpfile.js引用配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>); <span class=\"comment\">//scss编译</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'scss:dev'</span>,()=&gt;&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/scss/*.scss'</span>)</span><br><span class=\"line\">    .pipe(sass())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>)); <span class=\"comment\">//将生成好的css文件放到dist/css文件夹下</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里简单介绍下gulp的两个api：</p>\n<p>gulp.src()输入符合所提供的匹配模式或者匹配模式的数组的文件。将返回一个stream或者可以被piped到别的插件中。<strong>读文件</strong></p>\n<p>gulp.dest()能被pipe进来，并且将会写文件。并重新输出（emits）所有数据，因此可以将它pipe到多个文件夹，如果文件夹不存在则将会自动创建。<strong>写文件</strong></p>\n<h4 id=\"实时刷新\"><a href=\"#实时刷新\" class=\"headerlink\" title=\"实时刷新\"></a>实时刷新</h4><p>实现实时刷新的工具有很多，我自己使用browser-sync，这个工具的功能非常强大，想了解它更多的用法可以查看官网：<a href=\"http://www.browsersync.cn/\" target=\"_blank\" rel=\"noopener\">http://www.browsersync.cn/</a>。</p>\n<p>首先我们在项目中安装该模块</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev browser-sync</span><br></pre></td></tr></table></figure>\n<p>根据官网的browser-sync与gulp的配置，得到如下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create(); <span class=\"comment\">//实时刷新</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reload = browserSync.reload;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'dev'</span>,[<span class=\"string\">'scss:dev'</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        server:&#123;</span><br><span class=\"line\">            baseDir:<span class=\"string\">'./'</span>  <span class=\"comment\">//设置服务器的根目录</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        logLevel: <span class=\"string\">\"debug\"</span>,</span><br><span class=\"line\">        logPrefix:<span class=\"string\">\"dev\"</span>,</span><br><span class=\"line\">        browser:<span class=\"string\">'chrome'</span>,</span><br><span class=\"line\">        notify:<span class=\"literal\">false</span> <span class=\"comment\">//开启静默模式</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//使用gulp的监听功能，实现编译修改过后的文件</span></span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/scss/*.scss'</span>,[<span class=\"string\">'scss:dev'</span>]);</span><br><span class=\"line\">    gulp.watch((<span class=\"string\">'*.html'</span>)).on(<span class=\"string\">'change'</span>,reload);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这样，一个简单的gulp开发流程就出来了，仅仅只是一个编译scss和一个实时刷新。</p>\n<h3 id=\"打包上线所有流程\"><a href=\"#打包上线所有流程\" class=\"headerlink\" title=\"打包上线所有流程\"></a>打包上线所有流程</h3><p>打包上线，我们更多的是考虑，静态资源防缓存，优化。对css，js的压缩，对图片的处理，我写的这个简单的流程中并没有涉及对图片的处理，所以这里仅针对css，js，html处理。</p>\n<p>压缩css我们使用gulp-sass就可以，因为它在编译scss的时候有一个配置选项可以直接输出被压缩的css。压缩js我使用了gulp-uglify，静态资源防缓存使用gulp-rev和gulp-rev-collector。</p>\n<h4 id=\"对css，js的处理\"><a href=\"#对css，js的处理\" class=\"headerlink\" title=\"对css，js的处理\"></a>对css，js的处理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//scss编译</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>,()=&gt; &#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/scss/*.scss'</span>)</span><br><span class=\"line\">        .pipe(sass(&#123;</span><br><span class=\"line\">            outputStyle: <span class=\"string\">'compressed'</span>               <span class=\"comment\">//编译并输出压缩过的文件</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(rev())                                <span class=\"comment\">//给css添加哈希值</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</span><br><span class=\"line\">        .pipe(rev.manifest())                       <span class=\"comment\">//给添加哈希值的文件添加到清单中</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'rev/css'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//压缩js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, ()=&gt; &#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/js/*js'</span>)</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(rev())                                <span class=\"comment\">//给js添加哈希值</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">        .pipe(rev.manifest())                       <span class=\"comment\">//给添加哈希值的文件添加到清单中</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'rev/js'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其中gulp-rev是为css文件名添加哈希值，而rev.manifest()会生成一个json文件，这个json文件中记录了原文件名和添加哈希值后的文件名的一个对应关系，这个对应关系在最后对应替换html的引用的时候会用到。</p>\n<p>生成的json文件如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"index.css\"</span>: <span class=\"string\">\"index-9dcc24fe2e.css\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于给文件添加了哈希值，所以每次编译出来的css和js都是不一样的，这会导致有很多冗余文件，所以我们可以每次在生成文件之前，先将原来的文件全部清空。</p>\n<p>gulp中也有做这个工作的插件—gulp-clean，因此我们可以在编译压缩添加哈希值之前先将原文将清空。</p>\n<h4 id=\"清空生成的项目文件\"><a href=\"#清空生成的项目文件\" class=\"headerlink\" title=\"清空生成的项目文件\"></a>清空生成的项目文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> clean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean'</span>);                 <span class=\"comment\">//清空文件夹里所有的文件</span></span><br><span class=\"line\"><span class=\"comment\">//每次打包时先清空原有的文件夹</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, ()=&gt; &#123;</span><br><span class=\"line\">    gulp.src([<span class=\"string\">'dist'</span>, <span class=\"string\">'rev'</span>], &#123;<span class=\"attr\">read</span>: <span class=\"literal\">false</span>&#125;) <span class=\"comment\">//这里设置的dist表示删除dist文件夹及其下所有文件</span></span><br><span class=\"line\">        .pipe(clean());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"让添加哈希编码的文件自动添加到html中\"><a href=\"#让添加哈希编码的文件自动添加到html中\" class=\"headerlink\" title=\"让添加哈希编码的文件自动添加到html中\"></a>让添加哈希编码的文件自动添加到html中</h4><p>前面提到的gulp-rev实现了给文件名添加哈希编码，但是在打包完成后如何让原来未添加哈希值的引用自动变为已经添加哈希值的引用，这里用到gulp-rev的一个插件gulp-rev-collector，配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将处理过的css，js引入html</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'reCollector'</span>,()=&gt;&#123;</span><br><span class=\"line\">    gulp.src([<span class=\"string\">'rev/**/*.json'</span>,<span class=\"string\">'src/*.html'</span>])</span><br><span class=\"line\">        .pipe(reCollector(&#123;</span><br><span class=\"line\">            replaceReved: <span class=\"literal\">true</span>,  <span class=\"comment\">//模板中已经被替换的文件是否还能再被替换,默认是false</span></span><br><span class=\"line\">            dirReplacements: &#123;   <span class=\"comment\">//标识目录替换的集合, 因为gulp-rev创建的manifest文件不包含任何目录信息,</span></span><br><span class=\"line\">                <span class=\"string\">'css/'</span>: <span class=\"string\">'/dist/css/'</span>,</span><br><span class=\"line\">                <span class=\"string\">'js/'</span>: <span class=\"string\">'/dist/js/'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"并没有正常替换？\"><a href=\"#并没有正常替换？\" class=\"headerlink\" title=\"并没有正常替换？\"></a>并没有正常替换？</h5><p>在我自己写的时候，出现这个问题，运行完成该任务后，html中的css和js引用并没有发生变化，网上搜了半天，才知道是由于自己用了gulp-rename插件，然后将文件名都添加了.min（至于为什么添加，仅仅是因为是压缩过的，应该写个）而在自己写的html里面引用的文件并没有.min，由于gulp-rev-collector在替换的时候根据生成的json文件替换，在json中，文件都有了.min而在html中没有，所以无法匹配，自然也就不能实现替换了，所以在替换的时候一定要注意gulp-rev生成的json文件中的css，js与html中的引用的一样，否则无法实现替换。</p>\n<font color=\"red\">在gulp-rev-collector的api中有一个revSuffix，这个看起来可以实现类似于gulp-rename的功能，但是不知道该怎么用，大家如果知道的话请告诉我…</font>\n\n<h4 id=\"执行所有任务\"><a href=\"#执行所有任务\" class=\"headerlink\" title=\"执行所有任务\"></a>执行所有任务</h4><p>完成上面几个步骤后我们将所有任务串起来，让其可以一条命令然后全部执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>,[<span class=\"string\">'clean'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'js'</span>, <span class=\"string\">'reCollector'</span>]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"再次理解gulp\"><a href=\"#再次理解gulp\" class=\"headerlink\" title=\"再次理解gulp\"></a>再次理解gulp</h4><h5 id=\"gulp—它的task是顺序执行吗？\"><a href=\"#gulp—它的task是顺序执行吗？\" class=\"headerlink\" title=\"gulp—它的task是顺序执行吗？\"></a>gulp—它的task是顺序执行吗？</h5><p>本以为到这里，就算是写完了，运行，完美，打包生成文件，再运行一次，报错了！！！！</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[19:04:57] Finished 'default' after 7.38 μs</span><br><span class=\"line\">stream.js:<span class=\"number\">74</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> er; <span class=\"comment\">// Unhandled stream error in pipe.</span></span><br><span class=\"line\">      ^</span><br><span class=\"line\"></span><br><span class=\"line\">Error: ENOENT: no such file or directory, stat 'D:\\project\\dist\\js\\index-6045b384e6.min.js'</span><br><span class=\"line\">    <span class=\"function\">at <span class=\"title\">Error</span> <span class=\"params\">(native)</span></span></span><br></pre></td></tr></table></figure>\n<p>提示我找不到这个文件，这让我很郁闷啊，然后我分开执行，很ok，可以确定是执行顺序有问题，很可能在没有清理完成就执行后面了，查了gulp的官网文档才知道<strong>本身gulp的pipe是一个一个任务进行的，是同步的，但是每个task之间是不同步的，是一起进行的</strong>，这也验证了我的猜想，所以在网上找如何解决这个问题，找到一个叫run-sequence的npm插件，配置文件如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进行打包上线</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>, ()=&gt; &#123;</span><br><span class=\"line\">    runSequence(<span class=\"string\">'clean'</span>, [<span class=\"string\">'css'</span>, <span class=\"string\">'js'</span>], <span class=\"string\">'reCollector'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>本以为运行就ok，结果，还是报错，这里就涉及到对gulp的另一个理解</p>\n<h5 id=\"run-sequence插件对异步任务的处理\"><a href=\"#run-sequence插件对异步任务的处理\" class=\"headerlink\" title=\"run-sequence插件对异步任务的处理\"></a>run-sequence插件对异步任务的处理</h5><p>在用这个插件让任务有序进行后，我想进一步直观的看到它对任务的序列化，自己写了一个demo，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'a'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;,<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.task(<span class=\"string\">'b'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.task(<span class=\"string\">'ab'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    runSequence(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>但是这里就出现问题了，runSequence不管用了，找插件的说明和gulp官方文档，原来异步任务，像setTimeout，readFile等，需要添加一个callback的执行，这里的callback()就会返回一个promise的resolve()，告诉后面的任务，当前任务已经完成，后面可以继续执行了，所以在task a里面执行callback。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'a'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        cb();</span><br><span class=\"line\">    &#125;,<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>那为什么前面写的那些任务不需要添加一个callback呢？由于gulp的pipe流让每一个task中的小任务（每一个pipe）顺序执行，从而整个pipe流是同步的，并不是异步任务，所以并不需要手动让其返回promise，run-sequence会自动帮我们管理。</p>\n<h2 id=\"gulpfile的分离\"><a href=\"#gulpfile的分离\" class=\"headerlink\" title=\"gulpfile的分离\"></a>gulpfile的分离</h2><p>在前面我们将dev和build写在了一个叫gulpfile的文件中，虽然可以执行，但是当我们的工程越来越大的时候，会导致gulpfile可维护性降低，那能否让dev和build分别写在两个文件中呢？答案是可以的，我们可以新建两个文件，分别为gulpfile-dev.js和gulpfile-build.js，其实我们在运行gulp build的时候，其实是运行了gulp –gulpfile gulpfile.js build，前者相当于后者的缩写，所以在运行gulp的时候在命令中输入如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp --gulpfile gulpfile-dev.js</span><br><span class=\"line\"></span><br><span class=\"line\">gulp --gulpfile gulpfile-build.js</span><br></pre></td></tr></table></figure>\n<p>就可以在gulp运行时候指定gulpfile。这样我们再原来的task中的buil和dev改成default就可以直接运行以上命令达到预期效果。</p>\n<p>但是每次敲这么长的命令很烦，怎么办呢？我们可以在package.json的scripts中添加如下json：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"gulp --gulpfile gulpfile-dev.js\"</span><br><span class=\"line\">\"build\": \"gulp --gulpfile gulpfile-build.js\"</span><br></pre></td></tr></table></figure>\n<p>这样，我们在运行的时候，直接在命令行输入：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>就可以实现打包了，是不是很酸爽，哈哈！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此，我们就完成了一个简易的基于gulp的前端工程的搭建，很多东西确实，想着并不难，做起来会出现各种各样意想不到的问题，gulp很早就知道，都是单个任务在写，然后用哪个执行哪个命令，直到自己写完这个这个简单的工程，才对gulp有了更深入的理解。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>上个月月底在公司提出关于前后端分离的想法，并且开始研究关于前后端分离，前端工程化，模块化的一些东西，上周开始我准备自己开始写基于Gulp流的前端工程文件，这两天有时间，着手开始实现这个想法，但是写的过程中，遇到了一些问题，正是因为这些问题的解决让我对Gulp的流式处理有了更深的理解，写下这篇文章，分享一下这俩天我在写Gulp的时候学到的一些东西。</p>\n</blockquote>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装Node</h3><p>首先Gulp是基于Nodejs的，所以安装Nodejs是前提，Node可以说是前端神器，基于Node有各种各样的工具，正是因为这些工具让我们非常方便的构建前端工程。</p>\n<h4 id=\"更改Node插件默认安装位置（非必需）\"><a href=\"#更改Node插件默认安装位置（非必需）\" class=\"headerlink\" title=\"更改Node插件默认安装位置（非必需）\"></a>更改Node插件默认安装位置（非必需）</h4><p>我自己一般不喜欢在C盘状太多与系统无关的东西，而通过Node自带的npm安装的插件默认在C盘，但是我将Node安装到D盘后，想让插件就安装在Nodejs的主目录下，怎么办呢？</p>\n<ol>\n<li><p>在Node主目录下新建”node_global”及”node_cache”两个文件夹</p>\n</li>\n<li><p>启动cmd，输入</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后面的设置目录根据你的目录结构自行更改</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"D:\\Program\\nodejs\\node_global\"</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"D:\\Program\\nodejs\\node_cache\"</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>关闭cmd，打开系统对话框，“我的电脑”右键“属性”-“高级系统设置”-“高级”-“环境变量”。</p>\n</li>\n<li><p>进入环境变量对话框，在系统变量下新建”NODE_PATH”，输入”D:\\Program\\nodejs\\node_global\\node_module”。 由于改变了module的默认地址，所以上面的用户变量都要跟着改变一下（用户变量”PATH”修改为”D:\\Program\\nodejs\\node_global\\”），要不使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个错误。</p>\n</li>\n</ol>\n<p>经过这四步的设置就可以让安装的Node插件放在Nodejs的主目录了。</p>\n<h3 id=\"安装Gulp\"><a href=\"#安装Gulp\" class=\"headerlink\" title=\"安装Gulp\"></a>安装Gulp</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局安装Gulp</span></span><br><span class=\"line\">npm install -g gulp</span><br><span class=\"line\"><span class=\"comment\">//在项目中安装Gulp</span></span><br><span class=\"line\">npm install --save-dev gulp</span><br></pre></td></tr></table></figure>\n<p>运行<code>gulp -v</code>,如果不报错，表示安装成功</p>\n<p>然后在命令行运行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>让项目生产<code>package.json</code>文件</p>\n<h2 id=\"搭建工程\"><a href=\"#搭建工程\" class=\"headerlink\" title=\"搭建工程\"></a>搭建工程</h2><p>众所周知，在开发工程中有开发和上线两个过程，在开发中，我们一般需要自动刷新以及实时编译，但是如果上线，我们就需要考虑很多优化的东西，比如文件编译压缩，静态资源放缓存处理等等问题，我自己搭的这个工程只涉及到文件编译压缩，实时刷新，静态资源放缓存这三个基本的流程。</p>\n<p>在项目的目录结构如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------project</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |--------------dist (该文件夹为打包生成的)</span><br><span class=\"line\">    |   |</span><br><span class=\"line\">    |   |----------css</span><br><span class=\"line\">    |   |   |</span><br><span class=\"line\">    |   |   |------index<span class=\"number\">-9</span>dcc24fe2e.css</span><br><span class=\"line\">    |   |</span><br><span class=\"line\">    |   |----------js</span><br><span class=\"line\">    |   |   |</span><br><span class=\"line\">    |   |   |------index<span class=\"number\">-9</span>dcc24fe2e.js</span><br><span class=\"line\">    |   |----------index.html </span><br><span class=\"line\">    |</span><br><span class=\"line\">    |--------------src</span><br><span class=\"line\">    |   |</span><br><span class=\"line\">    |   |----------scss</span><br><span class=\"line\">    |   |   |</span><br><span class=\"line\">    |   |   |------index.scss</span><br><span class=\"line\">    |   |</span><br><span class=\"line\">    |   |----------js</span><br><span class=\"line\">    |   |   |</span><br><span class=\"line\">    |   |   |------index.js</span><br><span class=\"line\">    |   |</span><br><span class=\"line\">    |   |----------index.html</span><br><span class=\"line\">    |--------------gulpfile.js</span><br><span class=\"line\">    |--------------package.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发所用流程\"><a href=\"#开发所用流程\" class=\"headerlink\" title=\"开发所用流程\"></a>开发所用流程</h3><h4 id=\"文件编译\"><a href=\"#文件编译\" class=\"headerlink\" title=\"文件编译\"></a>文件编译</h4><p>在工程中准备使用scss作为css的预编译，所以需要利用gulp对scss进行编译，所以首先安装gulp-sass。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev gulp-sass</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，直接在gulpfile.js引用配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>); <span class=\"comment\">//scss编译</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'scss:dev'</span>,()=&gt;&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/scss/*.scss'</span>)</span><br><span class=\"line\">    .pipe(sass())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>)); <span class=\"comment\">//将生成好的css文件放到dist/css文件夹下</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里简单介绍下gulp的两个api：</p>\n<p>gulp.src()输入符合所提供的匹配模式或者匹配模式的数组的文件。将返回一个stream或者可以被piped到别的插件中。<strong>读文件</strong></p>\n<p>gulp.dest()能被pipe进来，并且将会写文件。并重新输出（emits）所有数据，因此可以将它pipe到多个文件夹，如果文件夹不存在则将会自动创建。<strong>写文件</strong></p>\n<h4 id=\"实时刷新\"><a href=\"#实时刷新\" class=\"headerlink\" title=\"实时刷新\"></a>实时刷新</h4><p>实现实时刷新的工具有很多，我自己使用browser-sync，这个工具的功能非常强大，想了解它更多的用法可以查看官网：<a href=\"http://www.browsersync.cn/\" target=\"_blank\" rel=\"noopener\">http://www.browsersync.cn/</a>。</p>\n<p>首先我们在项目中安装该模块</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev browser-sync</span><br></pre></td></tr></table></figure>\n<p>根据官网的browser-sync与gulp的配置，得到如下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> browserSync = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create(); <span class=\"comment\">//实时刷新</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reload = browserSync.reload;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'dev'</span>,[<span class=\"string\">'scss:dev'</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        server:&#123;</span><br><span class=\"line\">            baseDir:<span class=\"string\">'./'</span>  <span class=\"comment\">//设置服务器的根目录</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        logLevel: <span class=\"string\">\"debug\"</span>,</span><br><span class=\"line\">        logPrefix:<span class=\"string\">\"dev\"</span>,</span><br><span class=\"line\">        browser:<span class=\"string\">'chrome'</span>,</span><br><span class=\"line\">        notify:<span class=\"literal\">false</span> <span class=\"comment\">//开启静默模式</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//使用gulp的监听功能，实现编译修改过后的文件</span></span><br><span class=\"line\">    gulp.watch(<span class=\"string\">'src/scss/*.scss'</span>,[<span class=\"string\">'scss:dev'</span>]);</span><br><span class=\"line\">    gulp.watch((<span class=\"string\">'*.html'</span>)).on(<span class=\"string\">'change'</span>,reload);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这样，一个简单的gulp开发流程就出来了，仅仅只是一个编译scss和一个实时刷新。</p>\n<h3 id=\"打包上线所有流程\"><a href=\"#打包上线所有流程\" class=\"headerlink\" title=\"打包上线所有流程\"></a>打包上线所有流程</h3><p>打包上线，我们更多的是考虑，静态资源防缓存，优化。对css，js的压缩，对图片的处理，我写的这个简单的流程中并没有涉及对图片的处理，所以这里仅针对css，js，html处理。</p>\n<p>压缩css我们使用gulp-sass就可以，因为它在编译scss的时候有一个配置选项可以直接输出被压缩的css。压缩js我使用了gulp-uglify，静态资源防缓存使用gulp-rev和gulp-rev-collector。</p>\n<h4 id=\"对css，js的处理\"><a href=\"#对css，js的处理\" class=\"headerlink\" title=\"对css，js的处理\"></a>对css，js的处理</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//scss编译</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>,()=&gt; &#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/scss/*.scss'</span>)</span><br><span class=\"line\">        .pipe(sass(&#123;</span><br><span class=\"line\">            outputStyle: <span class=\"string\">'compressed'</span>               <span class=\"comment\">//编译并输出压缩过的文件</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(rev())                                <span class=\"comment\">//给css添加哈希值</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</span><br><span class=\"line\">        .pipe(rev.manifest())                       <span class=\"comment\">//给添加哈希值的文件添加到清单中</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'rev/css'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//压缩js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'js'</span>, ()=&gt; &#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'src/js/*js'</span>)</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(rev())                                <span class=\"comment\">//给js添加哈希值</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">        .pipe(rev.manifest())                       <span class=\"comment\">//给添加哈希值的文件添加到清单中</span></span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'rev/js'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其中gulp-rev是为css文件名添加哈希值，而rev.manifest()会生成一个json文件，这个json文件中记录了原文件名和添加哈希值后的文件名的一个对应关系，这个对应关系在最后对应替换html的引用的时候会用到。</p>\n<p>生成的json文件如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"index.css\"</span>: <span class=\"string\">\"index-9dcc24fe2e.css\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于给文件添加了哈希值，所以每次编译出来的css和js都是不一样的，这会导致有很多冗余文件，所以我们可以每次在生成文件之前，先将原来的文件全部清空。</p>\n<p>gulp中也有做这个工作的插件—gulp-clean，因此我们可以在编译压缩添加哈希值之前先将原文将清空。</p>\n<h4 id=\"清空生成的项目文件\"><a href=\"#清空生成的项目文件\" class=\"headerlink\" title=\"清空生成的项目文件\"></a>清空生成的项目文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> clean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-clean'</span>);                 <span class=\"comment\">//清空文件夹里所有的文件</span></span><br><span class=\"line\"><span class=\"comment\">//每次打包时先清空原有的文件夹</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, ()=&gt; &#123;</span><br><span class=\"line\">    gulp.src([<span class=\"string\">'dist'</span>, <span class=\"string\">'rev'</span>], &#123;<span class=\"attr\">read</span>: <span class=\"literal\">false</span>&#125;) <span class=\"comment\">//这里设置的dist表示删除dist文件夹及其下所有文件</span></span><br><span class=\"line\">        .pipe(clean());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"让添加哈希编码的文件自动添加到html中\"><a href=\"#让添加哈希编码的文件自动添加到html中\" class=\"headerlink\" title=\"让添加哈希编码的文件自动添加到html中\"></a>让添加哈希编码的文件自动添加到html中</h4><p>前面提到的gulp-rev实现了给文件名添加哈希编码，但是在打包完成后如何让原来未添加哈希值的引用自动变为已经添加哈希值的引用，这里用到gulp-rev的一个插件gulp-rev-collector，配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将处理过的css，js引入html</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'reCollector'</span>,()=&gt;&#123;</span><br><span class=\"line\">    gulp.src([<span class=\"string\">'rev/**/*.json'</span>,<span class=\"string\">'src/*.html'</span>])</span><br><span class=\"line\">        .pipe(reCollector(&#123;</span><br><span class=\"line\">            replaceReved: <span class=\"literal\">true</span>,  <span class=\"comment\">//模板中已经被替换的文件是否还能再被替换,默认是false</span></span><br><span class=\"line\">            dirReplacements: &#123;   <span class=\"comment\">//标识目录替换的集合, 因为gulp-rev创建的manifest文件不包含任何目录信息,</span></span><br><span class=\"line\">                <span class=\"string\">'css/'</span>: <span class=\"string\">'/dist/css/'</span>,</span><br><span class=\"line\">                <span class=\"string\">'js/'</span>: <span class=\"string\">'/dist/js/'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'dist'</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"并没有正常替换？\"><a href=\"#并没有正常替换？\" class=\"headerlink\" title=\"并没有正常替换？\"></a>并没有正常替换？</h5><p>在我自己写的时候，出现这个问题，运行完成该任务后，html中的css和js引用并没有发生变化，网上搜了半天，才知道是由于自己用了gulp-rename插件，然后将文件名都添加了.min（至于为什么添加，仅仅是因为是压缩过的，应该写个）而在自己写的html里面引用的文件并没有.min，由于gulp-rev-collector在替换的时候根据生成的json文件替换，在json中，文件都有了.min而在html中没有，所以无法匹配，自然也就不能实现替换了，所以在替换的时候一定要注意gulp-rev生成的json文件中的css，js与html中的引用的一样，否则无法实现替换。</p>\n<font color=\"red\">在gulp-rev-collector的api中有一个revSuffix，这个看起来可以实现类似于gulp-rename的功能，但是不知道该怎么用，大家如果知道的话请告诉我…</font>\n\n<h4 id=\"执行所有任务\"><a href=\"#执行所有任务\" class=\"headerlink\" title=\"执行所有任务\"></a>执行所有任务</h4><p>完成上面几个步骤后我们将所有任务串起来，让其可以一条命令然后全部执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>,[<span class=\"string\">'clean'</span>, <span class=\"string\">'css'</span>, <span class=\"string\">'js'</span>, <span class=\"string\">'reCollector'</span>]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"再次理解gulp\"><a href=\"#再次理解gulp\" class=\"headerlink\" title=\"再次理解gulp\"></a>再次理解gulp</h4><h5 id=\"gulp—它的task是顺序执行吗？\"><a href=\"#gulp—它的task是顺序执行吗？\" class=\"headerlink\" title=\"gulp—它的task是顺序执行吗？\"></a>gulp—它的task是顺序执行吗？</h5><p>本以为到这里，就算是写完了，运行，完美，打包生成文件，再运行一次，报错了！！！！</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[19:04:57] Finished 'default' after 7.38 μs</span><br><span class=\"line\">stream.js:<span class=\"number\">74</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> er; <span class=\"comment\">// Unhandled stream error in pipe.</span></span><br><span class=\"line\">      ^</span><br><span class=\"line\"></span><br><span class=\"line\">Error: ENOENT: no such file or directory, stat 'D:\\project\\dist\\js\\index-6045b384e6.min.js'</span><br><span class=\"line\">    <span class=\"function\">at <span class=\"title\">Error</span> <span class=\"params\">(native)</span></span></span><br></pre></td></tr></table></figure>\n<p>提示我找不到这个文件，这让我很郁闷啊，然后我分开执行，很ok，可以确定是执行顺序有问题，很可能在没有清理完成就执行后面了，查了gulp的官网文档才知道<strong>本身gulp的pipe是一个一个任务进行的，是同步的，但是每个task之间是不同步的，是一起进行的</strong>，这也验证了我的猜想，所以在网上找如何解决这个问题，找到一个叫run-sequence的npm插件，配置文件如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进行打包上线</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>, ()=&gt; &#123;</span><br><span class=\"line\">    runSequence(<span class=\"string\">'clean'</span>, [<span class=\"string\">'css'</span>, <span class=\"string\">'js'</span>], <span class=\"string\">'reCollector'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>本以为运行就ok，结果，还是报错，这里就涉及到对gulp的另一个理解</p>\n<h5 id=\"run-sequence插件对异步任务的处理\"><a href=\"#run-sequence插件对异步任务的处理\" class=\"headerlink\" title=\"run-sequence插件对异步任务的处理\"></a>run-sequence插件对异步任务的处理</h5><p>在用这个插件让任务有序进行后，我想进一步直观的看到它对任务的序列化，自己写了一个demo，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'a'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;,<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.task(<span class=\"string\">'b'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.task(<span class=\"string\">'ab'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    runSequence(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>但是这里就出现问题了，runSequence不管用了，找插件的说明和gulp官方文档，原来异步任务，像setTimeout，readFile等，需要添加一个callback的执行，这里的callback()就会返回一个promise的resolve()，告诉后面的任务，当前任务已经完成，后面可以继续执行了，所以在task a里面执行callback。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'a'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        cb();</span><br><span class=\"line\">    &#125;,<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>那为什么前面写的那些任务不需要添加一个callback呢？由于gulp的pipe流让每一个task中的小任务（每一个pipe）顺序执行，从而整个pipe流是同步的，并不是异步任务，所以并不需要手动让其返回promise，run-sequence会自动帮我们管理。</p>\n<h2 id=\"gulpfile的分离\"><a href=\"#gulpfile的分离\" class=\"headerlink\" title=\"gulpfile的分离\"></a>gulpfile的分离</h2><p>在前面我们将dev和build写在了一个叫gulpfile的文件中，虽然可以执行，但是当我们的工程越来越大的时候，会导致gulpfile可维护性降低，那能否让dev和build分别写在两个文件中呢？答案是可以的，我们可以新建两个文件，分别为gulpfile-dev.js和gulpfile-build.js，其实我们在运行gulp build的时候，其实是运行了gulp –gulpfile gulpfile.js build，前者相当于后者的缩写，所以在运行gulp的时候在命令中输入如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp --gulpfile gulpfile-dev.js</span><br><span class=\"line\"></span><br><span class=\"line\">gulp --gulpfile gulpfile-build.js</span><br></pre></td></tr></table></figure>\n<p>就可以在gulp运行时候指定gulpfile。这样我们再原来的task中的buil和dev改成default就可以直接运行以上命令达到预期效果。</p>\n<p>但是每次敲这么长的命令很烦，怎么办呢？我们可以在package.json的scripts中添加如下json：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"gulp --gulpfile gulpfile-dev.js\"</span><br><span class=\"line\">\"build\": \"gulp --gulpfile gulpfile-build.js\"</span><br></pre></td></tr></table></figure>\n<p>这样，我们在运行的时候，直接在命令行输入：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>就可以实现打包了，是不是很酸爽，哈哈！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此，我们就完成了一个简易的基于gulp的前端工程的搭建，很多东西确实，想着并不难，做起来会出现各种各样意想不到的问题，gulp很早就知道，都是单个任务在写，然后用哪个执行哪个命令，直到自己写完这个这个简单的工程，才对gulp有了更深入的理解。</p>"},{"title":"如何写一个自己的hexo主题","date":"2017-04-01T12:57:48.000Z","comments":1,"_content":"\n>好长时间不写东西了，都在忙工作，去年三月份的时候我搞了一个hexo的博客，主题换过两三个吧，感觉都大部分的hexo主题都是东西比较多，有那么两三个比较简单的，但是自己并不是很喜欢，所以去年的时候就想着自己抽时间写一个自己的主题，但是当初看了几个hexo主题的源码，完全看不懂是什么，所以放弃了，今年又定了一个目标，写一个自己的hexo主题，终于终于在文章[写一个自己的Hexo主题](https://segmentfault.com/a/1190000006057336])和该文中提到的作者自己写的主题[hexo-showonne](https://github.com/showonne/hexo-showonne)的启发下，开始了自己的hexo主题之旅，之后更参考自己用了很长时间的hexo主题——[hexo-theme-icarus](https://github.com/ppoffice/hexo-theme-icarus)进行了修正。\n\n<!--more-->\n\n我的博客就是用的我写的主题，博客地址：https://mrzhang123.github.io/\n\n项目地址：https://github.com/MrZhang123/hexo-theme-SpecLumn\n\n\n## 搭建项目\n\n\n参考大多数的hexo主题的目录结构不难发现，大部分都会有layout、source以及配置文件_config.yml，所以具体目录如下：\n\n```sh\n├── _config.yml      #主题的配置文件\n├── layout          #布局模版文件夹 \n│   ├── comment     #评论相关模版\n│   ├── common      #公共的模版\n│   │   └── post    #post页相关模版\n│   └── plugin      #插件\n├── source          #主题的css和js\n│   └── css\n│       └── images  #主题中用到的图片\n└── source_src      #scss所在的文件夹\n    └── scss\n        ├── code-style\n        └── markdown-style\n```\n\n项目基于gulp搭建，hexo默认使用stylus，但是我使用的scss，然后生成css，但是在项目过程中发现一个问题（同时明白为什么hexo默认使用stylus,可以直接识别styl文件），hexo提供了`hexo-config`方法，可以读取`_config.yml`中的配置。所以如果想要在`_config.yml`中动态设置代码的高亮主题，可以在stylus中写如下代码：\n\n```css\n/*\n一个三元表达式设置默认主题\n然后在index.styl中设置引入的表达式\n*/\nhighlight = hexo-config(\"customize.highlight\") || \"tomorrow\"\n\n@import \"highlight/\" + highlight\n```\n但是我在项目中使用的是gulp-sass编译成的css文件，无法实现根据_config.yml动态的引入文件，所以准备下次改的时候直接换stylus（虽然hexo可以通过装插件识别scss，但是自己测试并未成功）。\n\n## 布局\n\n### 布局文件layout.ejs\n\n在layout文件夹下，布局被写在layout.ejs中，由于hexo支持**模块儿化布局**，使用hexo提供的局部函数`partial`载入其他模版文件，配合ejs的语法，布局文件layout.ejs：\n\n```js\n<%- partial('common/head') %>\n<div class=\"content\">\n    <%- partial('common/header') %>\n    <div class=\"main\">\n        <%- body %>\n    </div>\n</div>\n<%- partial('common/footer') %>\n<%- partial('common/foot') %>\n</body>\n</html>\n```\n\nhexo默认使用ejs语法，但是可以通过安装插件使用Haml和Jade（Jade以前看过，并不喜欢缩进的写法，所以在开发工程中也没用使用同样使用缩进语法的stylus）。\n\n项目中直接使用了ejs，所以这里简要列一下ejs中tag的使用：\n\n- `<%`' 脚本标签，用于控制流程，不会输出\n- `<%=` 将转义的值输出到模版\n- `<%-` 将未转义的值输出到模版\n- `<%#` 注释标签\n- `<%%` 输出 '<%'\n- `%>`  闭合标签\n- `-%>` Trim-mode ('newline slurp') 标签, 移除随后的换行符\n\n### 其他模版\n\n| Url        | Description   |  Layout  |\n| --------   | -----:  | :----:  |\n| /     | 首页      |   index.ejs     |\n| /yyyy/mm/dd/:title/        |   文章   |   post.ejs   |\n| /archives/        |    归档    |  archive.ejs  |\n| /tags/:tagname/        |    某个标签的归档    |  tag.ejs  |\n| /:else/   |    其他    |  page.ejs  |\n\n在我的主题中只有主页index.ejs，文章页post.ejs。\n\n## 变量\n\n模版中获取文章，调用配置项等会使用到变量，hexo提供了很多变量供我们使用（[hexo提供的变量](https://hexo.io/zh-cn/docs/variables.html)），其中比较重要的有：\n\n- `page`：针对该页面的内容以及 front-matter 所设定的变量\n- `config`：网站配置（hexo的_config.yml）\n- `theme`：主题配置（theme的_config.yml）\n- `url`：当前页面的完整网址\n- `path`：当前页面的路径（不含根路径）\n\n另外在参看主题hexo-theme-icarus的源码发现一些变量的使用，但是我在官方文档中并没有找到。\n\n- `post.title`：文章的题目\n- `post.excerpt`：文章的摘要，即写文章的时候`<!--more-->`之上的那段儿，首页显示\n- `post.comments`：评论模块\n- `post.photots`：文章中插入的图片\n- `post.content`：文章内容\n- `post.date`：文章的时间\n\n以上均获取的是hexo生成的markdown文件中的配置。\n\n## 辅助函数\n\n在hexo中同样提供了很多[辅助函数](https://hexo.io/zh-cn/docs/helpers.html)方便在博客主题中使用，但是同样很多都用不着，常用的有：\n\n- `url_for`：输出路径\n- `partial`：载入其他模版文件\n- `css`：载入css文件\n- `js`：载入js文件\n- `data_xml`：插入 XML 格式的日期\n- `paginator`：生成分页，其中可以插入配置，partial一样，例如改变上一页下一页的文字，可以配置`{ prev_text: '« 上一页', next_text: '下一页 »'}`\n\n关于`partical`需要注意几点\n\n1. 它可以添变量，在被引用文件直接可以饮用，例如：\n\n```js\n/*引用*/\n<%- partial('plugin/scripts', { isHead: true }) %>\n/*被引用文件判断*/\n<% if (typeof(isHead) !== 'undefined' && isHead) { %>\n\n<% } %>\n```\n\n2. 可以添加class名字\n\n```js\n<%- partial('post/date', { class_name: 'article-date', date_format: null }) %>\n```\n\n## 其他\n\n### 评论\n\nhexo中添加评论只需要在ejs中添加相应的`script`标签插入代码即可，以前的时候用多说，现在多说要关闭了，准备换个，但是找来找去没找到一个比较适合的，同事介绍有一个叫来必力的还不错，试用确实觉得可以，可以替代多说，所以推荐一下。[官方网站](https://livere.com/)。\n\n### 代码高亮\n\n代码高亮其实就是引入一段css的代码，为了实现可以通过配置文件动态引入，就需要配合`hexo-config`，前面已经提到过，这里不再重复。\n\n## 最后\n\n最后写一点自己的想法，说实话，hexo的官方文档，实在是烂的没话可说，跟webpack1的文档不相上下，估计连作者自己都不一定看得懂，所以要想自己写一个主题的同学们还是在github参考一下写的比较好的主题的源码吧。\n\n另外，当前这个版本功能相对简单一点儿而且在后期的修改过程中发现用scss确实不如直接用stylus方便一些，所以准备在以后改用stylus。\n\n## 参考\n\n[hexo-theme-icarus](https://github.com/ppoffice/hexo-theme-icarus)\n[写一个自己的Hexo主题](https://segmentfault.com/a/1190000006057336)\n[hexo-showonne](https://github.com/showonne/hexo-showonne)","source":"_posts/hexo-theme.md","raw":"---\ntitle: 如何写一个自己的hexo主题\ndate: 2017-04-01 20:57:48\ntags: hexo\ncomments: true\ncategories: \"hexo\"\n---\n\n>好长时间不写东西了，都在忙工作，去年三月份的时候我搞了一个hexo的博客，主题换过两三个吧，感觉都大部分的hexo主题都是东西比较多，有那么两三个比较简单的，但是自己并不是很喜欢，所以去年的时候就想着自己抽时间写一个自己的主题，但是当初看了几个hexo主题的源码，完全看不懂是什么，所以放弃了，今年又定了一个目标，写一个自己的hexo主题，终于终于在文章[写一个自己的Hexo主题](https://segmentfault.com/a/1190000006057336])和该文中提到的作者自己写的主题[hexo-showonne](https://github.com/showonne/hexo-showonne)的启发下，开始了自己的hexo主题之旅，之后更参考自己用了很长时间的hexo主题——[hexo-theme-icarus](https://github.com/ppoffice/hexo-theme-icarus)进行了修正。\n\n<!--more-->\n\n我的博客就是用的我写的主题，博客地址：https://mrzhang123.github.io/\n\n项目地址：https://github.com/MrZhang123/hexo-theme-SpecLumn\n\n\n## 搭建项目\n\n\n参考大多数的hexo主题的目录结构不难发现，大部分都会有layout、source以及配置文件_config.yml，所以具体目录如下：\n\n```sh\n├── _config.yml      #主题的配置文件\n├── layout          #布局模版文件夹 \n│   ├── comment     #评论相关模版\n│   ├── common      #公共的模版\n│   │   └── post    #post页相关模版\n│   └── plugin      #插件\n├── source          #主题的css和js\n│   └── css\n│       └── images  #主题中用到的图片\n└── source_src      #scss所在的文件夹\n    └── scss\n        ├── code-style\n        └── markdown-style\n```\n\n项目基于gulp搭建，hexo默认使用stylus，但是我使用的scss，然后生成css，但是在项目过程中发现一个问题（同时明白为什么hexo默认使用stylus,可以直接识别styl文件），hexo提供了`hexo-config`方法，可以读取`_config.yml`中的配置。所以如果想要在`_config.yml`中动态设置代码的高亮主题，可以在stylus中写如下代码：\n\n```css\n/*\n一个三元表达式设置默认主题\n然后在index.styl中设置引入的表达式\n*/\nhighlight = hexo-config(\"customize.highlight\") || \"tomorrow\"\n\n@import \"highlight/\" + highlight\n```\n但是我在项目中使用的是gulp-sass编译成的css文件，无法实现根据_config.yml动态的引入文件，所以准备下次改的时候直接换stylus（虽然hexo可以通过装插件识别scss，但是自己测试并未成功）。\n\n## 布局\n\n### 布局文件layout.ejs\n\n在layout文件夹下，布局被写在layout.ejs中，由于hexo支持**模块儿化布局**，使用hexo提供的局部函数`partial`载入其他模版文件，配合ejs的语法，布局文件layout.ejs：\n\n```js\n<%- partial('common/head') %>\n<div class=\"content\">\n    <%- partial('common/header') %>\n    <div class=\"main\">\n        <%- body %>\n    </div>\n</div>\n<%- partial('common/footer') %>\n<%- partial('common/foot') %>\n</body>\n</html>\n```\n\nhexo默认使用ejs语法，但是可以通过安装插件使用Haml和Jade（Jade以前看过，并不喜欢缩进的写法，所以在开发工程中也没用使用同样使用缩进语法的stylus）。\n\n项目中直接使用了ejs，所以这里简要列一下ejs中tag的使用：\n\n- `<%`' 脚本标签，用于控制流程，不会输出\n- `<%=` 将转义的值输出到模版\n- `<%-` 将未转义的值输出到模版\n- `<%#` 注释标签\n- `<%%` 输出 '<%'\n- `%>`  闭合标签\n- `-%>` Trim-mode ('newline slurp') 标签, 移除随后的换行符\n\n### 其他模版\n\n| Url        | Description   |  Layout  |\n| --------   | -----:  | :----:  |\n| /     | 首页      |   index.ejs     |\n| /yyyy/mm/dd/:title/        |   文章   |   post.ejs   |\n| /archives/        |    归档    |  archive.ejs  |\n| /tags/:tagname/        |    某个标签的归档    |  tag.ejs  |\n| /:else/   |    其他    |  page.ejs  |\n\n在我的主题中只有主页index.ejs，文章页post.ejs。\n\n## 变量\n\n模版中获取文章，调用配置项等会使用到变量，hexo提供了很多变量供我们使用（[hexo提供的变量](https://hexo.io/zh-cn/docs/variables.html)），其中比较重要的有：\n\n- `page`：针对该页面的内容以及 front-matter 所设定的变量\n- `config`：网站配置（hexo的_config.yml）\n- `theme`：主题配置（theme的_config.yml）\n- `url`：当前页面的完整网址\n- `path`：当前页面的路径（不含根路径）\n\n另外在参看主题hexo-theme-icarus的源码发现一些变量的使用，但是我在官方文档中并没有找到。\n\n- `post.title`：文章的题目\n- `post.excerpt`：文章的摘要，即写文章的时候`<!--more-->`之上的那段儿，首页显示\n- `post.comments`：评论模块\n- `post.photots`：文章中插入的图片\n- `post.content`：文章内容\n- `post.date`：文章的时间\n\n以上均获取的是hexo生成的markdown文件中的配置。\n\n## 辅助函数\n\n在hexo中同样提供了很多[辅助函数](https://hexo.io/zh-cn/docs/helpers.html)方便在博客主题中使用，但是同样很多都用不着，常用的有：\n\n- `url_for`：输出路径\n- `partial`：载入其他模版文件\n- `css`：载入css文件\n- `js`：载入js文件\n- `data_xml`：插入 XML 格式的日期\n- `paginator`：生成分页，其中可以插入配置，partial一样，例如改变上一页下一页的文字，可以配置`{ prev_text: '« 上一页', next_text: '下一页 »'}`\n\n关于`partical`需要注意几点\n\n1. 它可以添变量，在被引用文件直接可以饮用，例如：\n\n```js\n/*引用*/\n<%- partial('plugin/scripts', { isHead: true }) %>\n/*被引用文件判断*/\n<% if (typeof(isHead) !== 'undefined' && isHead) { %>\n\n<% } %>\n```\n\n2. 可以添加class名字\n\n```js\n<%- partial('post/date', { class_name: 'article-date', date_format: null }) %>\n```\n\n## 其他\n\n### 评论\n\nhexo中添加评论只需要在ejs中添加相应的`script`标签插入代码即可，以前的时候用多说，现在多说要关闭了，准备换个，但是找来找去没找到一个比较适合的，同事介绍有一个叫来必力的还不错，试用确实觉得可以，可以替代多说，所以推荐一下。[官方网站](https://livere.com/)。\n\n### 代码高亮\n\n代码高亮其实就是引入一段css的代码，为了实现可以通过配置文件动态引入，就需要配合`hexo-config`，前面已经提到过，这里不再重复。\n\n## 最后\n\n最后写一点自己的想法，说实话，hexo的官方文档，实在是烂的没话可说，跟webpack1的文档不相上下，估计连作者自己都不一定看得懂，所以要想自己写一个主题的同学们还是在github参考一下写的比较好的主题的源码吧。\n\n另外，当前这个版本功能相对简单一点儿而且在后期的修改过程中发现用scss确实不如直接用stylus方便一些，所以准备在以后改用stylus。\n\n## 参考\n\n[hexo-theme-icarus](https://github.com/ppoffice/hexo-theme-icarus)\n[写一个自己的Hexo主题](https://segmentfault.com/a/1190000006057336)\n[hexo-showonne](https://github.com/showonne/hexo-showonne)","slug":"hexo-theme","published":1,"updated":"2017-10-18T09:48:07.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobd001jzrv4v1e08naw","content":"<blockquote>\n<p>好长时间不写东西了，都在忙工作，去年三月份的时候我搞了一个hexo的博客，主题换过两三个吧，感觉都大部分的hexo主题都是东西比较多，有那么两三个比较简单的，但是自己并不是很喜欢，所以去年的时候就想着自己抽时间写一个自己的主题，但是当初看了几个hexo主题的源码，完全看不懂是什么，所以放弃了，今年又定了一个目标，写一个自己的hexo主题，终于终于在文章<a href=\"https://segmentfault.com/a/1190000006057336]\" target=\"_blank\" rel=\"noopener\">写一个自己的Hexo主题</a>和该文中提到的作者自己写的主题<a href=\"https://github.com/showonne/hexo-showonne\" target=\"_blank\" rel=\"noopener\">hexo-showonne</a>的启发下，开始了自己的hexo主题之旅，之后更参考自己用了很长时间的hexo主题——<a href=\"https://github.com/ppoffice/hexo-theme-icarus\" target=\"_blank\" rel=\"noopener\">hexo-theme-icarus</a>进行了修正。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>我的博客就是用的我写的主题，博客地址：<a href=\"https://mrzhang123.github.io/\">https://mrzhang123.github.io/</a></p>\n<p>项目地址：<a href=\"https://github.com/MrZhang123/hexo-theme-SpecLumn\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/hexo-theme-SpecLumn</a></p>\n<h2 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h2><p>参考大多数的hexo主题的目录结构不难发现，大部分都会有layout、source以及配置文件_config.yml，所以具体目录如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── _config.yml      <span class=\"comment\">#主题的配置文件</span></span><br><span class=\"line\">├── layout          <span class=\"comment\">#布局模版文件夹 </span></span><br><span class=\"line\">│   ├── comment     <span class=\"comment\">#评论相关模版</span></span><br><span class=\"line\">│   ├── common      <span class=\"comment\">#公共的模版</span></span><br><span class=\"line\">│   │   └── post    <span class=\"comment\">#post页相关模版</span></span><br><span class=\"line\">│   └── plugin      <span class=\"comment\">#插件</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>          <span class=\"comment\">#主题的css和js</span></span><br><span class=\"line\">│   └── css</span><br><span class=\"line\">│       └── images  <span class=\"comment\">#主题中用到的图片</span></span><br><span class=\"line\">└── source_src      <span class=\"comment\">#scss所在的文件夹</span></span><br><span class=\"line\">    └── scss</span><br><span class=\"line\">        ├── code-style</span><br><span class=\"line\">        └── markdown-style</span><br></pre></td></tr></table></figure>\n<p>项目基于gulp搭建，hexo默认使用stylus，但是我使用的scss，然后生成css，但是在项目过程中发现一个问题（同时明白为什么hexo默认使用stylus,可以直接识别styl文件），hexo提供了<code>hexo-config</code>方法，可以读取<code>_config.yml</code>中的配置。所以如果想要在<code>_config.yml</code>中动态设置代码的高亮主题，可以在stylus中写如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">一个三元表达式设置默认主题</span></span><br><span class=\"line\"><span class=\"comment\">然后在index.styl中设置引入的表达式</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">highlight = hexo-config(\"customize.highlight\") || \"tomorrow\"</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"highlight/\"</span> + highlight</span><br></pre></td></tr></table></figure>\n<p>但是我在项目中使用的是gulp-sass编译成的css文件，无法实现根据_config.yml动态的引入文件，所以准备下次改的时候直接换stylus（虽然hexo可以通过装插件识别scss，但是自己测试并未成功）。</p>\n<h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><h3 id=\"布局文件layout-ejs\"><a href=\"#布局文件layout-ejs\" class=\"headerlink\" title=\"布局文件layout.ejs\"></a>布局文件layout.ejs</h3><p>在layout文件夹下，布局被写在layout.ejs中，由于hexo支持<strong>模块儿化布局</strong>，使用hexo提供的局部函数<code>partial</code>载入其他模版文件，配合ejs的语法，布局文件layout.ejs：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(<span class=\"string\">'common/head'</span>) %&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"content\"</span>&gt;</span><br><span class=\"line\">    &lt;%- partial(<span class=\"string\">'common/header'</span>) %&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"main\"</span>&gt;</span><br><span class=\"line\">        &lt;%- body %&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;%- partial(<span class=\"string\">'common/footer'</span>) %&gt;</span><br><span class=\"line\">&lt;%- partial(<span class=\"string\">'common/foot'</span>) %&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n<p>hexo默认使用ejs语法，但是可以通过安装插件使用Haml和Jade（Jade以前看过，并不喜欢缩进的写法，所以在开发工程中也没用使用同样使用缩进语法的stylus）。</p>\n<p>项目中直接使用了ejs，所以这里简要列一下ejs中tag的使用：</p>\n<ul>\n<li><code>&lt;%</code>‘ 脚本标签，用于控制流程，不会输出</li>\n<li><code>&lt;%=</code> 将转义的值输出到模版</li>\n<li><code>&lt;%-</code> 将未转义的值输出到模版</li>\n<li><code>&lt;%#</code> 注释标签</li>\n<li><code>&lt;%%</code> 输出 ‘&lt;%’</li>\n<li><code>%&gt;</code>  闭合标签</li>\n<li><code>-%&gt;</code> Trim-mode (‘newline slurp’) 标签, 移除随后的换行符</li>\n</ul>\n<h3 id=\"其他模版\"><a href=\"#其他模版\" class=\"headerlink\" title=\"其他模版\"></a>其他模版</h3><table>\n<thead>\n<tr>\n<th>Url</th>\n<th style=\"text-align:right\">Description</th>\n<th style=\"text-align:center\">Layout</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/</td>\n<td style=\"text-align:right\">首页</td>\n<td style=\"text-align:center\">index.ejs</td>\n</tr>\n<tr>\n<td>/yyyy/mm/dd/:title/</td>\n<td style=\"text-align:right\">文章</td>\n<td style=\"text-align:center\">post.ejs</td>\n</tr>\n<tr>\n<td>/archives/</td>\n<td style=\"text-align:right\">归档</td>\n<td style=\"text-align:center\">archive.ejs</td>\n</tr>\n<tr>\n<td>/tags/:tagname/</td>\n<td style=\"text-align:right\">某个标签的归档</td>\n<td style=\"text-align:center\">tag.ejs</td>\n</tr>\n<tr>\n<td>/:else/</td>\n<td style=\"text-align:right\">其他</td>\n<td style=\"text-align:center\">page.ejs</td>\n</tr>\n</tbody>\n</table>\n<p>在我的主题中只有主页index.ejs，文章页post.ejs。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>模版中获取文章，调用配置项等会使用到变量，hexo提供了很多变量供我们使用（<a href=\"https://hexo.io/zh-cn/docs/variables.html\" target=\"_blank\" rel=\"noopener\">hexo提供的变量</a>），其中比较重要的有：</p>\n<ul>\n<li><code>page</code>：针对该页面的内容以及 front-matter 所设定的变量</li>\n<li><code>config</code>：网站配置（hexo的_config.yml）</li>\n<li><code>theme</code>：主题配置（theme的_config.yml）</li>\n<li><code>url</code>：当前页面的完整网址</li>\n<li><code>path</code>：当前页面的路径（不含根路径）</li>\n</ul>\n<p>另外在参看主题hexo-theme-icarus的源码发现一些变量的使用，但是我在官方文档中并没有找到。</p>\n<ul>\n<li><code>post.title</code>：文章的题目</li>\n<li><code>post.excerpt</code>：文章的摘要，即写文章的时候<code>&lt;!--more--&gt;</code>之上的那段儿，首页显示</li>\n<li><code>post.comments</code>：评论模块</li>\n<li><code>post.photots</code>：文章中插入的图片</li>\n<li><code>post.content</code>：文章内容</li>\n<li><code>post.date</code>：文章的时间</li>\n</ul>\n<p>以上均获取的是hexo生成的markdown文件中的配置。</p>\n<h2 id=\"辅助函数\"><a href=\"#辅助函数\" class=\"headerlink\" title=\"辅助函数\"></a>辅助函数</h2><p>在hexo中同样提供了很多<a href=\"https://hexo.io/zh-cn/docs/helpers.html\" target=\"_blank\" rel=\"noopener\">辅助函数</a>方便在博客主题中使用，但是同样很多都用不着，常用的有：</p>\n<ul>\n<li><code>url_for</code>：输出路径</li>\n<li><code>partial</code>：载入其他模版文件</li>\n<li><code>css</code>：载入css文件</li>\n<li><code>js</code>：载入js文件</li>\n<li><code>data_xml</code>：插入 XML 格式的日期</li>\n<li><code>paginator</code>：生成分页，其中可以插入配置，partial一样，例如改变上一页下一页的文字，可以配置<code>{ prev_text: &#39;« 上一页&#39;, next_text: &#39;下一页 »&#39;}</code></li>\n</ul>\n<p>关于<code>partical</code>需要注意几点</p>\n<ol>\n<li>它可以添变量，在被引用文件直接可以饮用，例如：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*引用*/</span></span><br><span class=\"line\">&lt;%- partial(<span class=\"string\">'plugin/scripts'</span>, &#123; <span class=\"attr\">isHead</span>: <span class=\"literal\">true</span> &#125;) %&gt;</span><br><span class=\"line\"><span class=\"comment\">/*被引用文件判断*/</span></span><br><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(isHead) !== <span class=\"string\">'undefined'</span> &amp;&amp; isHead) &#123; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>可以添加class名字</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(<span class=\"string\">'post/date'</span>, &#123; <span class=\"attr\">class_name</span>: <span class=\"string\">'article-date'</span>, <span class=\"attr\">date_format</span>: <span class=\"literal\">null</span> &#125;) %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h3><p>hexo中添加评论只需要在ejs中添加相应的<code>script</code>标签插入代码即可，以前的时候用多说，现在多说要关闭了，准备换个，但是找来找去没找到一个比较适合的，同事介绍有一个叫来必力的还不错，试用确实觉得可以，可以替代多说，所以推荐一下。<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官方网站</a>。</p>\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>代码高亮其实就是引入一段css的代码，为了实现可以通过配置文件动态引入，就需要配合<code>hexo-config</code>，前面已经提到过，这里不再重复。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>最后写一点自己的想法，说实话，hexo的官方文档，实在是烂的没话可说，跟webpack1的文档不相上下，估计连作者自己都不一定看得懂，所以要想自己写一个主题的同学们还是在github参考一下写的比较好的主题的源码吧。</p>\n<p>另外，当前这个版本功能相对简单一点儿而且在后期的修改过程中发现用scss确实不如直接用stylus方便一些，所以准备在以后改用stylus。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/ppoffice/hexo-theme-icarus\" target=\"_blank\" rel=\"noopener\">hexo-theme-icarus</a><br><a href=\"https://segmentfault.com/a/1190000006057336\" target=\"_blank\" rel=\"noopener\">写一个自己的Hexo主题</a><br><a href=\"https://github.com/showonne/hexo-showonne\" target=\"_blank\" rel=\"noopener\">hexo-showonne</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>好长时间不写东西了，都在忙工作，去年三月份的时候我搞了一个hexo的博客，主题换过两三个吧，感觉都大部分的hexo主题都是东西比较多，有那么两三个比较简单的，但是自己并不是很喜欢，所以去年的时候就想着自己抽时间写一个自己的主题，但是当初看了几个hexo主题的源码，完全看不懂是什么，所以放弃了，今年又定了一个目标，写一个自己的hexo主题，终于终于在文章<a href=\"https://segmentfault.com/a/1190000006057336]\" target=\"_blank\" rel=\"noopener\">写一个自己的Hexo主题</a>和该文中提到的作者自己写的主题<a href=\"https://github.com/showonne/hexo-showonne\" target=\"_blank\" rel=\"noopener\">hexo-showonne</a>的启发下，开始了自己的hexo主题之旅，之后更参考自己用了很长时间的hexo主题——<a href=\"https://github.com/ppoffice/hexo-theme-icarus\" target=\"_blank\" rel=\"noopener\">hexo-theme-icarus</a>进行了修正。</p>\n</blockquote>","more":"<p>我的博客就是用的我写的主题，博客地址：<a href=\"https://mrzhang123.github.io/\">https://mrzhang123.github.io/</a></p>\n<p>项目地址：<a href=\"https://github.com/MrZhang123/hexo-theme-SpecLumn\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/hexo-theme-SpecLumn</a></p>\n<h2 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h2><p>参考大多数的hexo主题的目录结构不难发现，大部分都会有layout、source以及配置文件_config.yml，所以具体目录如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── _config.yml      <span class=\"comment\">#主题的配置文件</span></span><br><span class=\"line\">├── layout          <span class=\"comment\">#布局模版文件夹 </span></span><br><span class=\"line\">│   ├── comment     <span class=\"comment\">#评论相关模版</span></span><br><span class=\"line\">│   ├── common      <span class=\"comment\">#公共的模版</span></span><br><span class=\"line\">│   │   └── post    <span class=\"comment\">#post页相关模版</span></span><br><span class=\"line\">│   └── plugin      <span class=\"comment\">#插件</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>          <span class=\"comment\">#主题的css和js</span></span><br><span class=\"line\">│   └── css</span><br><span class=\"line\">│       └── images  <span class=\"comment\">#主题中用到的图片</span></span><br><span class=\"line\">└── source_src      <span class=\"comment\">#scss所在的文件夹</span></span><br><span class=\"line\">    └── scss</span><br><span class=\"line\">        ├── code-style</span><br><span class=\"line\">        └── markdown-style</span><br></pre></td></tr></table></figure>\n<p>项目基于gulp搭建，hexo默认使用stylus，但是我使用的scss，然后生成css，但是在项目过程中发现一个问题（同时明白为什么hexo默认使用stylus,可以直接识别styl文件），hexo提供了<code>hexo-config</code>方法，可以读取<code>_config.yml</code>中的配置。所以如果想要在<code>_config.yml</code>中动态设置代码的高亮主题，可以在stylus中写如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">一个三元表达式设置默认主题</span></span><br><span class=\"line\"><span class=\"comment\">然后在index.styl中设置引入的表达式</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">highlight = hexo-config(\"customize.highlight\") || \"tomorrow\"</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"highlight/\"</span> + highlight</span><br></pre></td></tr></table></figure>\n<p>但是我在项目中使用的是gulp-sass编译成的css文件，无法实现根据_config.yml动态的引入文件，所以准备下次改的时候直接换stylus（虽然hexo可以通过装插件识别scss，但是自己测试并未成功）。</p>\n<h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><h3 id=\"布局文件layout-ejs\"><a href=\"#布局文件layout-ejs\" class=\"headerlink\" title=\"布局文件layout.ejs\"></a>布局文件layout.ejs</h3><p>在layout文件夹下，布局被写在layout.ejs中，由于hexo支持<strong>模块儿化布局</strong>，使用hexo提供的局部函数<code>partial</code>载入其他模版文件，配合ejs的语法，布局文件layout.ejs：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(<span class=\"string\">'common/head'</span>) %&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"content\"</span>&gt;</span><br><span class=\"line\">    &lt;%- partial(<span class=\"string\">'common/header'</span>) %&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"main\"</span>&gt;</span><br><span class=\"line\">        &lt;%- body %&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;%- partial(<span class=\"string\">'common/footer'</span>) %&gt;</span><br><span class=\"line\">&lt;%- partial(<span class=\"string\">'common/foot'</span>) %&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n<p>hexo默认使用ejs语法，但是可以通过安装插件使用Haml和Jade（Jade以前看过，并不喜欢缩进的写法，所以在开发工程中也没用使用同样使用缩进语法的stylus）。</p>\n<p>项目中直接使用了ejs，所以这里简要列一下ejs中tag的使用：</p>\n<ul>\n<li><code>&lt;%</code>‘ 脚本标签，用于控制流程，不会输出</li>\n<li><code>&lt;%=</code> 将转义的值输出到模版</li>\n<li><code>&lt;%-</code> 将未转义的值输出到模版</li>\n<li><code>&lt;%#</code> 注释标签</li>\n<li><code>&lt;%%</code> 输出 ‘&lt;%’</li>\n<li><code>%&gt;</code>  闭合标签</li>\n<li><code>-%&gt;</code> Trim-mode (‘newline slurp’) 标签, 移除随后的换行符</li>\n</ul>\n<h3 id=\"其他模版\"><a href=\"#其他模版\" class=\"headerlink\" title=\"其他模版\"></a>其他模版</h3><table>\n<thead>\n<tr>\n<th>Url</th>\n<th style=\"text-align:right\">Description</th>\n<th style=\"text-align:center\">Layout</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/</td>\n<td style=\"text-align:right\">首页</td>\n<td style=\"text-align:center\">index.ejs</td>\n</tr>\n<tr>\n<td>/yyyy/mm/dd/:title/</td>\n<td style=\"text-align:right\">文章</td>\n<td style=\"text-align:center\">post.ejs</td>\n</tr>\n<tr>\n<td>/archives/</td>\n<td style=\"text-align:right\">归档</td>\n<td style=\"text-align:center\">archive.ejs</td>\n</tr>\n<tr>\n<td>/tags/:tagname/</td>\n<td style=\"text-align:right\">某个标签的归档</td>\n<td style=\"text-align:center\">tag.ejs</td>\n</tr>\n<tr>\n<td>/:else/</td>\n<td style=\"text-align:right\">其他</td>\n<td style=\"text-align:center\">page.ejs</td>\n</tr>\n</tbody>\n</table>\n<p>在我的主题中只有主页index.ejs，文章页post.ejs。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>模版中获取文章，调用配置项等会使用到变量，hexo提供了很多变量供我们使用（<a href=\"https://hexo.io/zh-cn/docs/variables.html\" target=\"_blank\" rel=\"noopener\">hexo提供的变量</a>），其中比较重要的有：</p>\n<ul>\n<li><code>page</code>：针对该页面的内容以及 front-matter 所设定的变量</li>\n<li><code>config</code>：网站配置（hexo的_config.yml）</li>\n<li><code>theme</code>：主题配置（theme的_config.yml）</li>\n<li><code>url</code>：当前页面的完整网址</li>\n<li><code>path</code>：当前页面的路径（不含根路径）</li>\n</ul>\n<p>另外在参看主题hexo-theme-icarus的源码发现一些变量的使用，但是我在官方文档中并没有找到。</p>\n<ul>\n<li><code>post.title</code>：文章的题目</li>\n<li><code>post.excerpt</code>：文章的摘要，即写文章的时候<code>&lt;!--more--&gt;</code>之上的那段儿，首页显示</li>\n<li><code>post.comments</code>：评论模块</li>\n<li><code>post.photots</code>：文章中插入的图片</li>\n<li><code>post.content</code>：文章内容</li>\n<li><code>post.date</code>：文章的时间</li>\n</ul>\n<p>以上均获取的是hexo生成的markdown文件中的配置。</p>\n<h2 id=\"辅助函数\"><a href=\"#辅助函数\" class=\"headerlink\" title=\"辅助函数\"></a>辅助函数</h2><p>在hexo中同样提供了很多<a href=\"https://hexo.io/zh-cn/docs/helpers.html\" target=\"_blank\" rel=\"noopener\">辅助函数</a>方便在博客主题中使用，但是同样很多都用不着，常用的有：</p>\n<ul>\n<li><code>url_for</code>：输出路径</li>\n<li><code>partial</code>：载入其他模版文件</li>\n<li><code>css</code>：载入css文件</li>\n<li><code>js</code>：载入js文件</li>\n<li><code>data_xml</code>：插入 XML 格式的日期</li>\n<li><code>paginator</code>：生成分页，其中可以插入配置，partial一样，例如改变上一页下一页的文字，可以配置<code>{ prev_text: &#39;« 上一页&#39;, next_text: &#39;下一页 »&#39;}</code></li>\n</ul>\n<p>关于<code>partical</code>需要注意几点</p>\n<ol>\n<li>它可以添变量，在被引用文件直接可以饮用，例如：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*引用*/</span></span><br><span class=\"line\">&lt;%- partial(<span class=\"string\">'plugin/scripts'</span>, &#123; <span class=\"attr\">isHead</span>: <span class=\"literal\">true</span> &#125;) %&gt;</span><br><span class=\"line\"><span class=\"comment\">/*被引用文件判断*/</span></span><br><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(isHead) !== <span class=\"string\">'undefined'</span> &amp;&amp; isHead) &#123; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>可以添加class名字</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(<span class=\"string\">'post/date'</span>, &#123; <span class=\"attr\">class_name</span>: <span class=\"string\">'article-date'</span>, <span class=\"attr\">date_format</span>: <span class=\"literal\">null</span> &#125;) %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h3><p>hexo中添加评论只需要在ejs中添加相应的<code>script</code>标签插入代码即可，以前的时候用多说，现在多说要关闭了，准备换个，但是找来找去没找到一个比较适合的，同事介绍有一个叫来必力的还不错，试用确实觉得可以，可以替代多说，所以推荐一下。<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官方网站</a>。</p>\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>代码高亮其实就是引入一段css的代码，为了实现可以通过配置文件动态引入，就需要配合<code>hexo-config</code>，前面已经提到过，这里不再重复。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>最后写一点自己的想法，说实话，hexo的官方文档，实在是烂的没话可说，跟webpack1的文档不相上下，估计连作者自己都不一定看得懂，所以要想自己写一个主题的同学们还是在github参考一下写的比较好的主题的源码吧。</p>\n<p>另外，当前这个版本功能相对简单一点儿而且在后期的修改过程中发现用scss确实不如直接用stylus方便一些，所以准备在以后改用stylus。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/ppoffice/hexo-theme-icarus\" target=\"_blank\" rel=\"noopener\">hexo-theme-icarus</a><br><a href=\"https://segmentfault.com/a/1190000006057336\" target=\"_blank\" rel=\"noopener\">写一个自己的Hexo主题</a><br><a href=\"https://github.com/showonne/hexo-showonne\" target=\"_blank\" rel=\"noopener\">hexo-showonne</a></p>"},{"title":"iframe跨域POST提交","date":"2017-01-06T15:07:16.000Z","comments":1,"_content":"> 以前在面试的时候经常遇到问关于跨域的事儿，所以自己对跨域有一定的概念性了解，知道什么是跨域以及解决跨域的方法，但是具体实际从来没有操作过，直到最近在公司项目中，遇到了一个需要使iframe跨域进行POST提交的实际案例，我才明白具体如何使用iframe进行跨域操作。\n\n<!--more-->\n\n说到跨域，就不得不提起浏览器的同源策略。\n\n同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。\n\n## 源\n\n如果协议，端口（如果指定了一个）和主机对于两个页面是相同的，那么这两个页面就具有相同的源。\n\n从这个定义可以看出，如果两个页面的协议，端口，主机三个只要有一个不一样，就是不同的源，想要相互之间进行交互，就需要进行跨域。\n\n## iframe跨域POST无刷新提交\n\n跨域的方法有很多，像JSONP、iframe、CORS、postMessage等等，由于项目中用到了iframe进行POST跨域，所以本文主要总结一下如何利用iframe进行POST无刷新提交。\n\n我们知道一般提交使用form表单进行提交，但是这种提交会导致页面跳转，所以交互效果不是友好，为了实现无刷新提交，我们会使用Ajax，但是此时可能会出现一个问题----跨域，那么如何解决这个问题呢，可以使用一个隐藏的iframe，我们将要提交的数据提交到这个隐藏的iframe，然后让这个iframe去跳转，这样就可以在视觉上实现页面无跳转刷新（实际上页面还是跳转了，只是iframe被隐藏，我们看不到）。\n\n在提交后我们还要获取到后台给我们返回回来的数据，所以需要在iframe中进行数据的交互同时拿到返回回来的`data`。\n\n* 为了让数据可以顺利的进行数据交互，我们通常使用`document.domain`将域设置到顶级域。\n* 为了拿到返回回来的`data`，需要使用一个函数，函数名后台已经告知。\n\n## 附实现代码\n\n```html\n<form action=\"You POST Link\" method=\"post\" target=\"target\" id=\"J_commenting\">\n    <select name=\"category\" class=\"select J_filter\" id=\"J_typeFilter\">\n        <option value=\"0\" selected=\"selected\">Select Category</option>\n        <option value=\"1\">Life</option>\n        <option value=\"2\">People</option>\n        <option value=\"3\">Landscape</option>\n        <option value=\"4\">Tech</option>\n        <option value=\"5\">Others</option>\n    </select>\n    <input name=\"title\" type=\"text\" class=\"misstion-title J_misstion-title\">\n    <textarea name=\"desc\" class=\"misstion-description J_description\" maxlength=\"200\"></textarea>\n    <button class=\"button J_button\" type=\"submit\">Submit</button>\n</form>\n<iframe name=\"target\" style=\"display:none;\"></iframe>\n```\n\n```js\nvar $button = $('.J_button');\nvar $commenting = $('#J_commenting');\nvar $filter = $('.J_filter');\nvar $misstionTitle = $('.J_misstion-title');\nvar $description = $('.J_description');\n\n\n$button.on('click', function () {\n    var filterValue = $filter.val();\n    var misstionTitleValue = $misstionTitle.val();\n    var descriptionValue = $description.val();\n    if (filterValue === '0' || misstionTitleValue === '' || descriptionValue === '') {\n        alert('Check if you filled out all the fields required');\n    } else {\n        $commenting.submit();\n    }\n});\n\n$commenting.on('submit', function () {\n    document.domain = 'aa.com';\n    window.addData = function (data) {\n        var dataCode = data.code;\n        var dataMsg = data.message;\n        if (dataCode === 0) {\n            alert('submit success!');\n        } else {\n            alert('submit failed!');\n        }\n    }\n});\n```\n点击提交后，后台返回的数据：\n\n```js\ndocument.domain = \"aa.com\";\nvar data = {\"code\":-2,\"info\":\"please login first\",\"message\":\"please login first\"}; \nif( typeof(parent.window['addData']) == \"function\"){\n    parent.window['addData'](data);\n}else if( typeof(window.top['addData']) == \"function\"){\n    window.top['addData'](data);\n}\n```","source":"_posts/iframe-POST.md","raw":"---\ntitle: iframe跨域POST提交\ndate: 2017-01-06 23:07:16\ntags: javascript,iframe,POST,form\ncomments: true\ncategories: \"Javascript\"\n---\n> 以前在面试的时候经常遇到问关于跨域的事儿，所以自己对跨域有一定的概念性了解，知道什么是跨域以及解决跨域的方法，但是具体实际从来没有操作过，直到最近在公司项目中，遇到了一个需要使iframe跨域进行POST提交的实际案例，我才明白具体如何使用iframe进行跨域操作。\n\n<!--more-->\n\n说到跨域，就不得不提起浏览器的同源策略。\n\n同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。\n\n## 源\n\n如果协议，端口（如果指定了一个）和主机对于两个页面是相同的，那么这两个页面就具有相同的源。\n\n从这个定义可以看出，如果两个页面的协议，端口，主机三个只要有一个不一样，就是不同的源，想要相互之间进行交互，就需要进行跨域。\n\n## iframe跨域POST无刷新提交\n\n跨域的方法有很多，像JSONP、iframe、CORS、postMessage等等，由于项目中用到了iframe进行POST跨域，所以本文主要总结一下如何利用iframe进行POST无刷新提交。\n\n我们知道一般提交使用form表单进行提交，但是这种提交会导致页面跳转，所以交互效果不是友好，为了实现无刷新提交，我们会使用Ajax，但是此时可能会出现一个问题----跨域，那么如何解决这个问题呢，可以使用一个隐藏的iframe，我们将要提交的数据提交到这个隐藏的iframe，然后让这个iframe去跳转，这样就可以在视觉上实现页面无跳转刷新（实际上页面还是跳转了，只是iframe被隐藏，我们看不到）。\n\n在提交后我们还要获取到后台给我们返回回来的数据，所以需要在iframe中进行数据的交互同时拿到返回回来的`data`。\n\n* 为了让数据可以顺利的进行数据交互，我们通常使用`document.domain`将域设置到顶级域。\n* 为了拿到返回回来的`data`，需要使用一个函数，函数名后台已经告知。\n\n## 附实现代码\n\n```html\n<form action=\"You POST Link\" method=\"post\" target=\"target\" id=\"J_commenting\">\n    <select name=\"category\" class=\"select J_filter\" id=\"J_typeFilter\">\n        <option value=\"0\" selected=\"selected\">Select Category</option>\n        <option value=\"1\">Life</option>\n        <option value=\"2\">People</option>\n        <option value=\"3\">Landscape</option>\n        <option value=\"4\">Tech</option>\n        <option value=\"5\">Others</option>\n    </select>\n    <input name=\"title\" type=\"text\" class=\"misstion-title J_misstion-title\">\n    <textarea name=\"desc\" class=\"misstion-description J_description\" maxlength=\"200\"></textarea>\n    <button class=\"button J_button\" type=\"submit\">Submit</button>\n</form>\n<iframe name=\"target\" style=\"display:none;\"></iframe>\n```\n\n```js\nvar $button = $('.J_button');\nvar $commenting = $('#J_commenting');\nvar $filter = $('.J_filter');\nvar $misstionTitle = $('.J_misstion-title');\nvar $description = $('.J_description');\n\n\n$button.on('click', function () {\n    var filterValue = $filter.val();\n    var misstionTitleValue = $misstionTitle.val();\n    var descriptionValue = $description.val();\n    if (filterValue === '0' || misstionTitleValue === '' || descriptionValue === '') {\n        alert('Check if you filled out all the fields required');\n    } else {\n        $commenting.submit();\n    }\n});\n\n$commenting.on('submit', function () {\n    document.domain = 'aa.com';\n    window.addData = function (data) {\n        var dataCode = data.code;\n        var dataMsg = data.message;\n        if (dataCode === 0) {\n            alert('submit success!');\n        } else {\n            alert('submit failed!');\n        }\n    }\n});\n```\n点击提交后，后台返回的数据：\n\n```js\ndocument.domain = \"aa.com\";\nvar data = {\"code\":-2,\"info\":\"please login first\",\"message\":\"please login first\"}; \nif( typeof(parent.window['addData']) == \"function\"){\n    parent.window['addData'](data);\n}else if( typeof(window.top['addData']) == \"function\"){\n    window.top['addData'](data);\n}\n```","slug":"iframe-POST","published":1,"updated":"2017-01-06T15:12:16.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobe001lzrv46ipw71z5","content":"<blockquote>\n<p>以前在面试的时候经常遇到问关于跨域的事儿，所以自己对跨域有一定的概念性了解，知道什么是跨域以及解决跨域的方法，但是具体实际从来没有操作过，直到最近在公司项目中，遇到了一个需要使iframe跨域进行POST提交的实际案例，我才明白具体如何使用iframe进行跨域操作。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>说到跨域，就不得不提起浏览器的同源策略。</p>\n<p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。</p>\n<h2 id=\"源\"><a href=\"#源\" class=\"headerlink\" title=\"源\"></a>源</h2><p>如果协议，端口（如果指定了一个）和主机对于两个页面是相同的，那么这两个页面就具有相同的源。</p>\n<p>从这个定义可以看出，如果两个页面的协议，端口，主机三个只要有一个不一样，就是不同的源，想要相互之间进行交互，就需要进行跨域。</p>\n<h2 id=\"iframe跨域POST无刷新提交\"><a href=\"#iframe跨域POST无刷新提交\" class=\"headerlink\" title=\"iframe跨域POST无刷新提交\"></a>iframe跨域POST无刷新提交</h2><p>跨域的方法有很多，像JSONP、iframe、CORS、postMessage等等，由于项目中用到了iframe进行POST跨域，所以本文主要总结一下如何利用iframe进行POST无刷新提交。</p>\n<p>我们知道一般提交使用form表单进行提交，但是这种提交会导致页面跳转，所以交互效果不是友好，为了实现无刷新提交，我们会使用Ajax，但是此时可能会出现一个问题—-跨域，那么如何解决这个问题呢，可以使用一个隐藏的iframe，我们将要提交的数据提交到这个隐藏的iframe，然后让这个iframe去跳转，这样就可以在视觉上实现页面无跳转刷新（实际上页面还是跳转了，只是iframe被隐藏，我们看不到）。</p>\n<p>在提交后我们还要获取到后台给我们返回回来的数据，所以需要在iframe中进行数据的交互同时拿到返回回来的<code>data</code>。</p>\n<ul>\n<li>为了让数据可以顺利的进行数据交互，我们通常使用<code>document.domain</code>将域设置到顶级域。</li>\n<li>为了拿到返回回来的<code>data</code>，需要使用一个函数，函数名后台已经告知。</li>\n</ul>\n<h2 id=\"附实现代码\"><a href=\"#附实现代码\" class=\"headerlink\" title=\"附实现代码\"></a>附实现代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"You POST Link\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_commenting\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"category\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"select J_filter\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_typeFilter\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"selected\"</span>&gt;</span>Select Category<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>Life<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>People<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span>&gt;</span>Landscape<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span>&gt;</span>Tech<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span>&gt;</span>Others<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"misstion-title J_misstion-title\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"desc\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"misstion-description J_description\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"200\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button J_button\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">name</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $button = $(<span class=\"string\">'.J_button'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $commenting = $(<span class=\"string\">'#J_commenting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $filter = $(<span class=\"string\">'.J_filter'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $misstionTitle = $(<span class=\"string\">'.J_misstion-title'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $description = $(<span class=\"string\">'.J_description'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$button.on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filterValue = $filter.val();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> misstionTitleValue = $misstionTitle.val();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> descriptionValue = $description.val();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filterValue === <span class=\"string\">'0'</span> || misstionTitleValue === <span class=\"string\">''</span> || descriptionValue === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'Check if you filled out all the fields required'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $commenting.submit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$commenting.on(<span class=\"string\">'submit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.domain = <span class=\"string\">'aa.com'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addData = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dataCode = data.code;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dataMsg = data.message;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dataCode === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'submit success!'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'submit failed!'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>点击提交后，后台返回的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">\"aa.com\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"string\">\"code\"</span>:<span class=\"number\">-2</span>,<span class=\"string\">\"info\"</span>:<span class=\"string\">\"please login first\"</span>,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"please login first\"</span>&#125;; </span><br><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(parent.window[<span class=\"string\">'addData'</span>]) == <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">    parent.window[<span class=\"string\">'addData'</span>](data);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(<span class=\"built_in\">window</span>.top[<span class=\"string\">'addData'</span>]) == <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.top[<span class=\"string\">'addData'</span>](data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>以前在面试的时候经常遇到问关于跨域的事儿，所以自己对跨域有一定的概念性了解，知道什么是跨域以及解决跨域的方法，但是具体实际从来没有操作过，直到最近在公司项目中，遇到了一个需要使iframe跨域进行POST提交的实际案例，我才明白具体如何使用iframe进行跨域操作。</p>\n</blockquote>","more":"<p>说到跨域，就不得不提起浏览器的同源策略。</p>\n<p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。</p>\n<h2 id=\"源\"><a href=\"#源\" class=\"headerlink\" title=\"源\"></a>源</h2><p>如果协议，端口（如果指定了一个）和主机对于两个页面是相同的，那么这两个页面就具有相同的源。</p>\n<p>从这个定义可以看出，如果两个页面的协议，端口，主机三个只要有一个不一样，就是不同的源，想要相互之间进行交互，就需要进行跨域。</p>\n<h2 id=\"iframe跨域POST无刷新提交\"><a href=\"#iframe跨域POST无刷新提交\" class=\"headerlink\" title=\"iframe跨域POST无刷新提交\"></a>iframe跨域POST无刷新提交</h2><p>跨域的方法有很多，像JSONP、iframe、CORS、postMessage等等，由于项目中用到了iframe进行POST跨域，所以本文主要总结一下如何利用iframe进行POST无刷新提交。</p>\n<p>我们知道一般提交使用form表单进行提交，但是这种提交会导致页面跳转，所以交互效果不是友好，为了实现无刷新提交，我们会使用Ajax，但是此时可能会出现一个问题—-跨域，那么如何解决这个问题呢，可以使用一个隐藏的iframe，我们将要提交的数据提交到这个隐藏的iframe，然后让这个iframe去跳转，这样就可以在视觉上实现页面无跳转刷新（实际上页面还是跳转了，只是iframe被隐藏，我们看不到）。</p>\n<p>在提交后我们还要获取到后台给我们返回回来的数据，所以需要在iframe中进行数据的交互同时拿到返回回来的<code>data</code>。</p>\n<ul>\n<li>为了让数据可以顺利的进行数据交互，我们通常使用<code>document.domain</code>将域设置到顶级域。</li>\n<li>为了拿到返回回来的<code>data</code>，需要使用一个函数，函数名后台已经告知。</li>\n</ul>\n<h2 id=\"附实现代码\"><a href=\"#附实现代码\" class=\"headerlink\" title=\"附实现代码\"></a>附实现代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"You POST Link\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_commenting\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"category\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"select J_filter\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_typeFilter\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"selected\"</span>&gt;</span>Select Category<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>Life<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>People<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span>&gt;</span>Landscape<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span>&gt;</span>Tech<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span>&gt;</span>Others<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"misstion-title J_misstion-title\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"desc\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"misstion-description J_description\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"200\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button J_button\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">name</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $button = $(<span class=\"string\">'.J_button'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $commenting = $(<span class=\"string\">'#J_commenting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $filter = $(<span class=\"string\">'.J_filter'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $misstionTitle = $(<span class=\"string\">'.J_misstion-title'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> $description = $(<span class=\"string\">'.J_description'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$button.on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filterValue = $filter.val();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> misstionTitleValue = $misstionTitle.val();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> descriptionValue = $description.val();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (filterValue === <span class=\"string\">'0'</span> || misstionTitleValue === <span class=\"string\">''</span> || descriptionValue === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'Check if you filled out all the fields required'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $commenting.submit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$commenting.on(<span class=\"string\">'submit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.domain = <span class=\"string\">'aa.com'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addData = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dataCode = data.code;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dataMsg = data.message;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dataCode === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'submit success!'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'submit failed!'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>点击提交后，后台返回的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.domain = <span class=\"string\">\"aa.com\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"string\">\"code\"</span>:<span class=\"number\">-2</span>,<span class=\"string\">\"info\"</span>:<span class=\"string\">\"please login first\"</span>,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"please login first\"</span>&#125;; </span><br><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(parent.window[<span class=\"string\">'addData'</span>]) == <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">    parent.window[<span class=\"string\">'addData'</span>](data);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(<span class=\"built_in\">window</span>.top[<span class=\"string\">'addData'</span>]) == <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.top[<span class=\"string\">'addData'</span>](data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Javascript中Array方法的总结","date":"2016-08-02T16:01:05.000Z","comments":1,"_content":"> 在ECMAScript中最常用的类型之一就是Array类型，Array类型的方法也有很多，所以在这篇文章中，梳理一下Array类型的方法。\n\n## 新建数组\n\n新建数组的方法有三种：\n\n```js\n/*方法一*/\nvar a = new Array(1,2,3);\n/*方法二*/\nvar b = [1,2,3];\n/*方法三（ES6新增）*/\nvar c = Array.of(1,2,3);\n```\n`Array.of()`是ES6中新增的将一组值转换为数组的方法，该方法的出现时为了弥补构造函数`Array()`因为参数不同导致的不同行为。\n\n```js\nArray()         //[]\nArray(3)        //[ , , ]\nArray(1,2,3)    //[1,2,3]\n```\n从上面可以看出，只有在参数个数不少于2时候，才会返回新的数组。\n<!--more-->\n## 数组的检测\n对于一个网页或者一个全局作用域而言，使用`instanceof`操作符检测，通过返回的`boolean`值可以得出是否为数组，但是这样检测的问题在如果网页中包含两个以上不同的全局作用域，就会从在两个以上不同版本的Array构造函数，如果从一个框架向另一个框架传入一个数组，那么传入的数组与第二个框架中原声创建的数组分别有不同的构造函数。\n在ES5中引入的`Array.isArray()`解决了这个问题，但如果在不支持ES5的浏览器中检测数组，则需要些兼容性方法，所以检测数组的方法如下：\n```js\nfunction checkArray(arr) {\n    if(typeof Array.isArray){\n        return Array.isArray(arr);\n    }else{\n        return Object.prototype.toString.call(arr)==='[object Array]';\n    }\n}\n```\n## 数组中的方法：\n\n### 更改原数组\n\n#### 添加项\n\npush():接收任意数量的参数，逐个将其**添加**至数组**末尾**，返回修改后的**数组的长度**\nunshift():在数组的**前端添加**任意个项并返回新数组的长度\n\n#### 移除项\n\npop():从数组**末尾移除最后**一项，返回移除的项\nshift():**移除**数组中的**第一项**并返回该项\n\n#### 排序\n\nreverse():反转数组项的顺序\n\n```js\nvar values = [1,2,3,4,5];\nvalues.reverse();\nconsole.log(values); // =>5,4,3,2,1\n```\nsort():按照升序排列数组项，但是它在实现排序时会调用每个数组项的`toString()`放法，去比较字符串，所以会出现如下情况\n\n```js\nvar values = [0,1,5,10,15];\nvalues.sort();\nconsole.log(values); // => 0,1,10,15,5\n```\n\n为了在使用`sort()`方法时返回正确的排序，我们需要给`sort()`传入一个比较函数，该比较函数传入两个参数，如果第一个参数应该位于第二个参数之前则返回一个负数，如果两个参数相等返回0，如果第一个参数应该位于第二个参数之后则返回一个正数。\n\n```js\n/*升序\n降序则更改返回值即可*/\nfunction compare(value1,value2){\n    if(value1 < value2){\n        return -1;\n    }else if(value1 > value2){\n        return 1;\n    }else {\n        return 0;\n    }\n}\nvar values = [0,1,5,10,15];\nvalues.sort(compare);\nconsole.log(values);\n```\n对于数值类型或者其`valueOf()`方法会返回数值类型的对象类型，可以使用一个简单的比较函数\n\n```js\nfunction compare(value1,value2){\n    return value2 - value1;\n}\n```\n\n#### 截取\nslice():接受一个或两个参数，要返回的起始位置到结束位置**但不包括结束位置**项，如果只写一个参数则截取数组到最后。**可以接收负数作为参数**\nsplice():做多可以接收三个参数，分别为*起始位置*，*要删除的项目数*，*要插入的任意数量的项*，同个这三个参数是否传入可以实现**删除**，**插入**，**替换**\n\n```js\nvar colors =['red','green','blue'];\nvar removed =colors.splice(0,1);    //删除第一项\nconsole.log(colors);                //green,blue\nconsole.log(removed);               //redm,返回的数组中只包含一项\n\nremoved = colors.splice(1,0,'yellow','orange'); //从位置1开始插入两项\nconsole.log(colors);                //green,yellow,orange,blue\nconsole.log(removed);               //返回的是一个空数组\n\nremoved = color.splice(1,1,'red','purple');  //插入两项，删除一项\nconsole.log(colors);                //green,yellow,purple,orange,blue\nconsole.log(removed);               //返回yellow\n```\n\n#### copyWithin()\n\n参数：\n- target(必需)：从该位置开始替换数据\n- start (可选)：从该位置开始读取数据，默认为0。如果为负值，表示倒数\n- end   (可选)：到**该位置前**停止读取数据，默认等于数组长度。如果为负值表示倒数\n\n在当前数组内部将指定位置的成员复制到其他位置，会覆盖原来的成员。修改原来的数组形成新的数组\n\n```js\nvar a = [1,2,3];\nvar b = a.copyWithin(0);    // =>[1,2,3]\nvar c = a.copyWithin(0,1);  // =>[2,3,3]\nvar d = a.copyWithin(0,1,2);// =>[2,2,3]\n```\n上面例子可以看出，虽然`copyWithin`的后两个参数是可选的，但是需要写第二个参数，否则返回的只是原数组本身。\n\n### 不更改原素组，生成新数组\n\n#### 操作方法\n\nconcat():这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾并返回副本。\n\n```js\nvar a = [1,2,3];\nvar b = a.concat('a','b',['c','d','e']);\nconsole.log(a); // =>1,2,3\nconsole.log(b);\n```\n\n#### 寻找\n\n##### 1.`indexOf()`、`lastIndexOf()`与`includes()`\n\n`indexOf()`与`lastIndexOf()`用于查找数组中是否有该方法，如果有则返回该元素的位置，否则返回`-1`。\n但是这个方法有两个缺点：\n\n1. 不够语义化\n2. 它内部使用严格等于运算符`===`，导致了对`NaN`的误判。所以ES7新增`includes()`去克服这些缺点。\n\n**ES7新增**\nES7中新增`includes()`方法，用于查找数组总是否包含某个元素，返回布尔值，接受两个参数*要查找的元素*和*查找的起始位置*。\n\n##### 2.`find()`和`findIndex()`\n\n参数：*一个回掉函数*\n回调的参数：*当前值*、*当前位置*、*原数组*\n\n`find()`方法用于找出**第一个符合**条件的数组成员。\n`findIndex()`方法返回**第一个符合**条件的数组成员的**位置**，如果所有成员都不符合，则返回-1。\n\n```js\nvar a = [1,4,-5,10];\na.find((n)=> n<0);  // -5\n\nvar b = [1,5,10,15];\nb.findIndex(function(value,index,arr){\n    return value > 9;\n});//=>2\n```\n\n\n#### 迭代方法\n\nES5为数组定义了五个迭代方法\n每个方法都接收两个参数：*要在每一项上运行的函数*和*（可选的）运行该函数的作用域对象*----影响`this`的值。\n传入这些方法中的函数会接收三个参数：*数组项的值*、*该项在数组中的位置*和*数组对象本身*。\n\n- every():对数组中的每一项运行给定的函数，如果该函数对**每一项**都返回`true`,则返回`true`\n- some():对数组中每一项运行给定的函数，如果该函数对**任一项**返回`true`，则返回`true`\n- filter():对数组中每一项运行给定的函数，返回该函数会返回`true`的项组成的**数组**\n- forEach():对数组中的每一项运行给定的函数。没有返回值\n- map():对数组中的每一项运行给定的函数，返回每次调用的结果组成的**数组**\n\n#### 归并方法\n\n##### reduce()\n\n该方法可以传递两个参数：*化简函数*，*传递给函数的初始值（可选）*。\n化简函数的参数：*到目前为止的化简操作累积的结果*，*数组元素*，*元素的索引*，*数组本身*。\n这个方法，可以用于求数组元素的和、积、最大值。\n\n```js\nvar a = [1,2,3,4,5]\n/*求和*/\nvar sum = a.reduce((x,y)=>x+y,0);\n/*求积*/\nvar product = a.reduce((x,y)=>x*y,1);\n/*求最大值*/\nvar max = a.reduce((x,y)=>(x>y)?x:y);\n```\n这个方法的简单用法就是这样，在《javascript高级程序设计》（第三版）中只是介绍了这个用法，但是在《javascript权威指南》（第六版）中提到了`reduce`的**高级用法。**\n例1：求任意数目对象的“并集”\n\n```js\n/*\n返回一个新对象，这个对象同时拥有o和p的属性\n如果o和p中有重名属性，使用p中属性\n*/\nfunction union(o,p){\n    return extend(extend({},o),p);\n}\nvar objects = [{x:1},{y:2},{z:3}];\nvar merged = objects.reduce(union); // =>{x:1,y:2,z:3}\n```\n\n例2：统计字符串中每个字符出现的重复次数\n\n```js\nvar arr = 'abcdabcdadbc';\nvar info = arr.split('').reduce((p,k) => (p[k]++ || (p[k] = 1), p), {});\nconsole.log(info); //=> Object {a: 3, b: 3, c: 3, d: 3}\n```\n\n这两个例子，尤其是第二个例子可以看出，`reduce()`并不单单只是用于数学计算，在第二个例子中可以明显看出在`reduce()`第二个参数传入一个空对象，此时它最终返回的就是一个对象。由于本身传入的初始值是对象，所以返回对象。如果传入一个空数组，则返回数组。所以可以看出，最终`reduce()`函数返回什么，取决于第二个参数的形式。\n\n#### join()\n\n`Array.join()`方法将数组中的所有元素都转化为字符串并连接起来，返回最后生成的字符串。可以指定一个可选的字符串在生成的字符串中分隔数组的各个元素，如不指定，默认用逗号隔开。\n\n#### fill()\n\n参数：*填充项*、*填充的起始位置*、*填充的结束位置*\n`fill()`方法用于使用给定的值填充数组。\n\n```js\nnew Array(3).fill(7); //=>[7,7,7]\n```\n\n## 转换为数组的方法(ES6新增)\n\n#### Array.from();\n\n该方法接收两个参数*要转换的非数组对象*,*对每个元素进行处理的方法（可选）*\n\n在js中，有很多类数组对象（array-like object）和可遍历（iterable）对象（包括ES6新增的数据结构Set和Map），常见的类数组对象包括`document.querySelectorAll()`取到的NodeList，以及函数内部的arguments对象。它们都可以通过`Array.from()`转换为真正的数组，从而使用数组的方法。事实上只要对象具有`length`属性，就可以通过`Array.from()`转换为真正的数组。\n\n```js\nvar a = {\n    0:'li',\n    1:'li',\n    2:'li',\n    length:3\n};\nconsole.log(Array.from(a)); // => ['li','li','li'];\n```\n```js\nArray.from([1,2,3],(x)=>x*x); // =>1,4,9\n```\n\n#### 扩展运算符（...）\n\n```js\n//arguments对象\nfunction foo(){\n    var args = [...arguments];\n}\n//nodelist\n[...document.querySelectorAll('div')];\n```\n","source":"_posts/js-Array.md","raw":"---\ntitle: Javascript中Array方法的总结\ndate: 2016-08-03 00:01:05\ntags: Javascript\ncomments: true\ncategories: \"Javascript\"\n---\n> 在ECMAScript中最常用的类型之一就是Array类型，Array类型的方法也有很多，所以在这篇文章中，梳理一下Array类型的方法。\n\n## 新建数组\n\n新建数组的方法有三种：\n\n```js\n/*方法一*/\nvar a = new Array(1,2,3);\n/*方法二*/\nvar b = [1,2,3];\n/*方法三（ES6新增）*/\nvar c = Array.of(1,2,3);\n```\n`Array.of()`是ES6中新增的将一组值转换为数组的方法，该方法的出现时为了弥补构造函数`Array()`因为参数不同导致的不同行为。\n\n```js\nArray()         //[]\nArray(3)        //[ , , ]\nArray(1,2,3)    //[1,2,3]\n```\n从上面可以看出，只有在参数个数不少于2时候，才会返回新的数组。\n<!--more-->\n## 数组的检测\n对于一个网页或者一个全局作用域而言，使用`instanceof`操作符检测，通过返回的`boolean`值可以得出是否为数组，但是这样检测的问题在如果网页中包含两个以上不同的全局作用域，就会从在两个以上不同版本的Array构造函数，如果从一个框架向另一个框架传入一个数组，那么传入的数组与第二个框架中原声创建的数组分别有不同的构造函数。\n在ES5中引入的`Array.isArray()`解决了这个问题，但如果在不支持ES5的浏览器中检测数组，则需要些兼容性方法，所以检测数组的方法如下：\n```js\nfunction checkArray(arr) {\n    if(typeof Array.isArray){\n        return Array.isArray(arr);\n    }else{\n        return Object.prototype.toString.call(arr)==='[object Array]';\n    }\n}\n```\n## 数组中的方法：\n\n### 更改原数组\n\n#### 添加项\n\npush():接收任意数量的参数，逐个将其**添加**至数组**末尾**，返回修改后的**数组的长度**\nunshift():在数组的**前端添加**任意个项并返回新数组的长度\n\n#### 移除项\n\npop():从数组**末尾移除最后**一项，返回移除的项\nshift():**移除**数组中的**第一项**并返回该项\n\n#### 排序\n\nreverse():反转数组项的顺序\n\n```js\nvar values = [1,2,3,4,5];\nvalues.reverse();\nconsole.log(values); // =>5,4,3,2,1\n```\nsort():按照升序排列数组项，但是它在实现排序时会调用每个数组项的`toString()`放法，去比较字符串，所以会出现如下情况\n\n```js\nvar values = [0,1,5,10,15];\nvalues.sort();\nconsole.log(values); // => 0,1,10,15,5\n```\n\n为了在使用`sort()`方法时返回正确的排序，我们需要给`sort()`传入一个比较函数，该比较函数传入两个参数，如果第一个参数应该位于第二个参数之前则返回一个负数，如果两个参数相等返回0，如果第一个参数应该位于第二个参数之后则返回一个正数。\n\n```js\n/*升序\n降序则更改返回值即可*/\nfunction compare(value1,value2){\n    if(value1 < value2){\n        return -1;\n    }else if(value1 > value2){\n        return 1;\n    }else {\n        return 0;\n    }\n}\nvar values = [0,1,5,10,15];\nvalues.sort(compare);\nconsole.log(values);\n```\n对于数值类型或者其`valueOf()`方法会返回数值类型的对象类型，可以使用一个简单的比较函数\n\n```js\nfunction compare(value1,value2){\n    return value2 - value1;\n}\n```\n\n#### 截取\nslice():接受一个或两个参数，要返回的起始位置到结束位置**但不包括结束位置**项，如果只写一个参数则截取数组到最后。**可以接收负数作为参数**\nsplice():做多可以接收三个参数，分别为*起始位置*，*要删除的项目数*，*要插入的任意数量的项*，同个这三个参数是否传入可以实现**删除**，**插入**，**替换**\n\n```js\nvar colors =['red','green','blue'];\nvar removed =colors.splice(0,1);    //删除第一项\nconsole.log(colors);                //green,blue\nconsole.log(removed);               //redm,返回的数组中只包含一项\n\nremoved = colors.splice(1,0,'yellow','orange'); //从位置1开始插入两项\nconsole.log(colors);                //green,yellow,orange,blue\nconsole.log(removed);               //返回的是一个空数组\n\nremoved = color.splice(1,1,'red','purple');  //插入两项，删除一项\nconsole.log(colors);                //green,yellow,purple,orange,blue\nconsole.log(removed);               //返回yellow\n```\n\n#### copyWithin()\n\n参数：\n- target(必需)：从该位置开始替换数据\n- start (可选)：从该位置开始读取数据，默认为0。如果为负值，表示倒数\n- end   (可选)：到**该位置前**停止读取数据，默认等于数组长度。如果为负值表示倒数\n\n在当前数组内部将指定位置的成员复制到其他位置，会覆盖原来的成员。修改原来的数组形成新的数组\n\n```js\nvar a = [1,2,3];\nvar b = a.copyWithin(0);    // =>[1,2,3]\nvar c = a.copyWithin(0,1);  // =>[2,3,3]\nvar d = a.copyWithin(0,1,2);// =>[2,2,3]\n```\n上面例子可以看出，虽然`copyWithin`的后两个参数是可选的，但是需要写第二个参数，否则返回的只是原数组本身。\n\n### 不更改原素组，生成新数组\n\n#### 操作方法\n\nconcat():这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾并返回副本。\n\n```js\nvar a = [1,2,3];\nvar b = a.concat('a','b',['c','d','e']);\nconsole.log(a); // =>1,2,3\nconsole.log(b);\n```\n\n#### 寻找\n\n##### 1.`indexOf()`、`lastIndexOf()`与`includes()`\n\n`indexOf()`与`lastIndexOf()`用于查找数组中是否有该方法，如果有则返回该元素的位置，否则返回`-1`。\n但是这个方法有两个缺点：\n\n1. 不够语义化\n2. 它内部使用严格等于运算符`===`，导致了对`NaN`的误判。所以ES7新增`includes()`去克服这些缺点。\n\n**ES7新增**\nES7中新增`includes()`方法，用于查找数组总是否包含某个元素，返回布尔值，接受两个参数*要查找的元素*和*查找的起始位置*。\n\n##### 2.`find()`和`findIndex()`\n\n参数：*一个回掉函数*\n回调的参数：*当前值*、*当前位置*、*原数组*\n\n`find()`方法用于找出**第一个符合**条件的数组成员。\n`findIndex()`方法返回**第一个符合**条件的数组成员的**位置**，如果所有成员都不符合，则返回-1。\n\n```js\nvar a = [1,4,-5,10];\na.find((n)=> n<0);  // -5\n\nvar b = [1,5,10,15];\nb.findIndex(function(value,index,arr){\n    return value > 9;\n});//=>2\n```\n\n\n#### 迭代方法\n\nES5为数组定义了五个迭代方法\n每个方法都接收两个参数：*要在每一项上运行的函数*和*（可选的）运行该函数的作用域对象*----影响`this`的值。\n传入这些方法中的函数会接收三个参数：*数组项的值*、*该项在数组中的位置*和*数组对象本身*。\n\n- every():对数组中的每一项运行给定的函数，如果该函数对**每一项**都返回`true`,则返回`true`\n- some():对数组中每一项运行给定的函数，如果该函数对**任一项**返回`true`，则返回`true`\n- filter():对数组中每一项运行给定的函数，返回该函数会返回`true`的项组成的**数组**\n- forEach():对数组中的每一项运行给定的函数。没有返回值\n- map():对数组中的每一项运行给定的函数，返回每次调用的结果组成的**数组**\n\n#### 归并方法\n\n##### reduce()\n\n该方法可以传递两个参数：*化简函数*，*传递给函数的初始值（可选）*。\n化简函数的参数：*到目前为止的化简操作累积的结果*，*数组元素*，*元素的索引*，*数组本身*。\n这个方法，可以用于求数组元素的和、积、最大值。\n\n```js\nvar a = [1,2,3,4,5]\n/*求和*/\nvar sum = a.reduce((x,y)=>x+y,0);\n/*求积*/\nvar product = a.reduce((x,y)=>x*y,1);\n/*求最大值*/\nvar max = a.reduce((x,y)=>(x>y)?x:y);\n```\n这个方法的简单用法就是这样，在《javascript高级程序设计》（第三版）中只是介绍了这个用法，但是在《javascript权威指南》（第六版）中提到了`reduce`的**高级用法。**\n例1：求任意数目对象的“并集”\n\n```js\n/*\n返回一个新对象，这个对象同时拥有o和p的属性\n如果o和p中有重名属性，使用p中属性\n*/\nfunction union(o,p){\n    return extend(extend({},o),p);\n}\nvar objects = [{x:1},{y:2},{z:3}];\nvar merged = objects.reduce(union); // =>{x:1,y:2,z:3}\n```\n\n例2：统计字符串中每个字符出现的重复次数\n\n```js\nvar arr = 'abcdabcdadbc';\nvar info = arr.split('').reduce((p,k) => (p[k]++ || (p[k] = 1), p), {});\nconsole.log(info); //=> Object {a: 3, b: 3, c: 3, d: 3}\n```\n\n这两个例子，尤其是第二个例子可以看出，`reduce()`并不单单只是用于数学计算，在第二个例子中可以明显看出在`reduce()`第二个参数传入一个空对象，此时它最终返回的就是一个对象。由于本身传入的初始值是对象，所以返回对象。如果传入一个空数组，则返回数组。所以可以看出，最终`reduce()`函数返回什么，取决于第二个参数的形式。\n\n#### join()\n\n`Array.join()`方法将数组中的所有元素都转化为字符串并连接起来，返回最后生成的字符串。可以指定一个可选的字符串在生成的字符串中分隔数组的各个元素，如不指定，默认用逗号隔开。\n\n#### fill()\n\n参数：*填充项*、*填充的起始位置*、*填充的结束位置*\n`fill()`方法用于使用给定的值填充数组。\n\n```js\nnew Array(3).fill(7); //=>[7,7,7]\n```\n\n## 转换为数组的方法(ES6新增)\n\n#### Array.from();\n\n该方法接收两个参数*要转换的非数组对象*,*对每个元素进行处理的方法（可选）*\n\n在js中，有很多类数组对象（array-like object）和可遍历（iterable）对象（包括ES6新增的数据结构Set和Map），常见的类数组对象包括`document.querySelectorAll()`取到的NodeList，以及函数内部的arguments对象。它们都可以通过`Array.from()`转换为真正的数组，从而使用数组的方法。事实上只要对象具有`length`属性，就可以通过`Array.from()`转换为真正的数组。\n\n```js\nvar a = {\n    0:'li',\n    1:'li',\n    2:'li',\n    length:3\n};\nconsole.log(Array.from(a)); // => ['li','li','li'];\n```\n```js\nArray.from([1,2,3],(x)=>x*x); // =>1,4,9\n```\n\n#### 扩展运算符（...）\n\n```js\n//arguments对象\nfunction foo(){\n    var args = [...arguments];\n}\n//nodelist\n[...document.querySelectorAll('div')];\n```\n","slug":"js-Array","published":1,"updated":"2016-08-02T08:35:52.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobf001pzrv4npxdf5vk","content":"<blockquote>\n<p>在ECMAScript中最常用的类型之一就是Array类型，Array类型的方法也有很多，所以在这篇文章中，梳理一下Array类型的方法。</p>\n</blockquote>\n<h2 id=\"新建数组\"><a href=\"#新建数组\" class=\"headerlink\" title=\"新建数组\"></a>新建数组</h2><p>新建数组的方法有三种：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*方法一*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">/*方法二*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">/*方法三（ES6新增）*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p><code>Array.of()</code>是ES6中新增的将一组值转换为数组的方法，该方法的出现时为了弥补构造函数<code>Array()</code>因为参数不同导致的不同行为。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>()         <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>)        <span class=\"comment\">//[ , , ]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)    <span class=\"comment\">//[1,2,3]</span></span><br></pre></td></tr></table></figure>\n<p>从上面可以看出，只有在参数个数不少于2时候，才会返回新的数组。<br><a id=\"more\"></a></p>\n<h2 id=\"数组的检测\"><a href=\"#数组的检测\" class=\"headerlink\" title=\"数组的检测\"></a>数组的检测</h2><p>对于一个网页或者一个全局作用域而言，使用<code>instanceof</code>操作符检测，通过返回的<code>boolean</code>值可以得出是否为数组，但是这样检测的问题在如果网页中包含两个以上不同的全局作用域，就会从在两个以上不同版本的Array构造函数，如果从一个框架向另一个框架传入一个数组，那么传入的数组与第二个框架中原声创建的数组分别有不同的构造函数。<br>在ES5中引入的<code>Array.isArray()</code>解决了这个问题，但如果在不支持ES5的浏览器中检测数组，则需要些兼容性方法，所以检测数组的方法如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkArray</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.isArray)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(arr);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(arr)===<span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数组中的方法：\"><a href=\"#数组中的方法：\" class=\"headerlink\" title=\"数组中的方法：\"></a>数组中的方法：</h2><h3 id=\"更改原数组\"><a href=\"#更改原数组\" class=\"headerlink\" title=\"更改原数组\"></a>更改原数组</h3><h4 id=\"添加项\"><a href=\"#添加项\" class=\"headerlink\" title=\"添加项\"></a>添加项</h4><p>push():接收任意数量的参数，逐个将其<strong>添加</strong>至数组<strong>末尾</strong>，返回修改后的<strong>数组的长度</strong><br>unshift():在数组的<strong>前端添加</strong>任意个项并返回新数组的长度</p>\n<h4 id=\"移除项\"><a href=\"#移除项\" class=\"headerlink\" title=\"移除项\"></a>移除项</h4><p>pop():从数组<strong>末尾移除最后</strong>一项，返回移除的项<br>shift():<strong>移除</strong>数组中的<strong>第一项</strong>并返回该项</p>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><p>reverse():反转数组项的顺序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">values.reverse();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// =&gt;5,4,3,2,1</span></span><br></pre></td></tr></table></figure>\n<p>sort():按照升序排列数组项，但是它在实现排序时会调用每个数组项的<code>toString()</code>放法，去比较字符串，所以会出现如下情况</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">values.sort();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// =&gt; 0,1,10,15,5</span></span><br></pre></td></tr></table></figure>\n<p>为了在使用<code>sort()</code>方法时返回正确的排序，我们需要给<code>sort()</code>传入一个比较函数，该比较函数传入两个参数，如果第一个参数应该位于第二个参数之前则返回一个负数，如果两个参数相等返回0，如果第一个参数应该位于第二个参数之后则返回一个正数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*升序</span></span><br><span class=\"line\"><span class=\"comment\">降序则更改返回值即可*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value1 &lt; value2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1 &gt; value2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">values.sort(compare);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(values);</span><br></pre></td></tr></table></figure>\n<p>对于数值类型或者其<code>valueOf()</code>方法会返回数值类型的对象类型，可以使用一个简单的比较函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value2 - value1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"截取\"><a href=\"#截取\" class=\"headerlink\" title=\"截取\"></a>截取</h4><p>slice():接受一个或两个参数，要返回的起始位置到结束位置<strong>但不包括结束位置</strong>项，如果只写一个参数则截取数组到最后。<strong>可以接收负数作为参数</strong><br>splice():做多可以接收三个参数，分别为<em>起始位置</em>，<em>要删除的项目数</em>，<em>要插入的任意数量的项</em>，同个这三个参数是否传入可以实现<strong>删除</strong>，<strong>插入</strong>，<strong>替换</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors =[<span class=\"string\">'red'</span>,<span class=\"string\">'green'</span>,<span class=\"string\">'blue'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> removed =colors.splice(<span class=\"number\">0</span>,<span class=\"number\">1</span>);    <span class=\"comment\">//删除第一项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colors);                <span class=\"comment\">//green,blue</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(removed);               <span class=\"comment\">//redm,返回的数组中只包含一项</span></span><br><span class=\"line\"></span><br><span class=\"line\">removed = colors.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">'yellow'</span>,<span class=\"string\">'orange'</span>); <span class=\"comment\">//从位置1开始插入两项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colors);                <span class=\"comment\">//green,yellow,orange,blue</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(removed);               <span class=\"comment\">//返回的是一个空数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">removed = color.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">'red'</span>,<span class=\"string\">'purple'</span>);  <span class=\"comment\">//插入两项，删除一项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colors);                <span class=\"comment\">//green,yellow,purple,orange,blue</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(removed);               <span class=\"comment\">//返回yellow</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h4><p>参数：</p>\n<ul>\n<li>target(必需)：从该位置开始替换数据</li>\n<li>start (可选)：从该位置开始读取数据，默认为0。如果为负值，表示倒数</li>\n<li>end   (可选)：到<strong>该位置前</strong>停止读取数据，默认等于数组长度。如果为负值表示倒数</li>\n</ul>\n<p>在当前数组内部将指定位置的成员复制到其他位置，会覆盖原来的成员。修改原来的数组形成新的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.copyWithin(<span class=\"number\">0</span>);    <span class=\"comment\">// =&gt;[1,2,3]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.copyWithin(<span class=\"number\">0</span>,<span class=\"number\">1</span>);  <span class=\"comment\">// =&gt;[2,3,3]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = a.copyWithin(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);<span class=\"comment\">// =&gt;[2,2,3]</span></span><br></pre></td></tr></table></figure>\n<p>上面例子可以看出，虽然<code>copyWithin</code>的后两个参数是可选的，但是需要写第二个参数，否则返回的只是原数组本身。</p>\n<h3 id=\"不更改原素组，生成新数组\"><a href=\"#不更改原素组，生成新数组\" class=\"headerlink\" title=\"不更改原素组，生成新数组\"></a>不更改原素组，生成新数组</h3><h4 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h4><p>concat():这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾并返回副本。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.concat(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,[<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// =&gt;1,2,3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n<h4 id=\"寻找\"><a href=\"#寻找\" class=\"headerlink\" title=\"寻找\"></a>寻找</h4><h5 id=\"1-indexOf-、lastIndexOf-与includes\"><a href=\"#1-indexOf-、lastIndexOf-与includes\" class=\"headerlink\" title=\"1.indexOf()、lastIndexOf()与includes()\"></a>1.<code>indexOf()</code>、<code>lastIndexOf()</code>与<code>includes()</code></h5><p><code>indexOf()</code>与<code>lastIndexOf()</code>用于查找数组中是否有该方法，如果有则返回该元素的位置，否则返回<code>-1</code>。<br>但是这个方法有两个缺点：</p>\n<ol>\n<li>不够语义化</li>\n<li>它内部使用严格等于运算符<code>===</code>，导致了对<code>NaN</code>的误判。所以ES7新增<code>includes()</code>去克服这些缺点。</li>\n</ol>\n<p><strong>ES7新增</strong><br>ES7中新增<code>includes()</code>方法，用于查找数组总是否包含某个元素，返回布尔值，接受两个参数<em>要查找的元素</em>和<em>查找的起始位置</em>。</p>\n<h5 id=\"2-find-和findIndex\"><a href=\"#2-find-和findIndex\" class=\"headerlink\" title=\"2.find()和findIndex()\"></a>2.<code>find()</code>和<code>findIndex()</code></h5><p>参数：<em>一个回掉函数</em><br>回调的参数：<em>当前值</em>、<em>当前位置</em>、<em>原数组</em></p>\n<p><code>find()</code>方法用于找出<strong>第一个符合</strong>条件的数组成员。<br><code>findIndex()</code>方法返回<strong>第一个符合</strong>条件的数组成员的<strong>位置</strong>，如果所有成员都不符合，则返回-1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">-5</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\">a.find(<span class=\"function\">(<span class=\"params\">n</span>)=&gt;</span> n&lt;<span class=\"number\">0</span>);  <span class=\"comment\">// -5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">b.findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;);<span class=\"comment\">//=&gt;2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"迭代方法\"><a href=\"#迭代方法\" class=\"headerlink\" title=\"迭代方法\"></a>迭代方法</h4><p>ES5为数组定义了五个迭代方法<br>每个方法都接收两个参数：<em>要在每一项上运行的函数</em>和<em>（可选的）运行该函数的作用域对象</em>—-影响<code>this</code>的值。<br>传入这些方法中的函数会接收三个参数：<em>数组项的值</em>、<em>该项在数组中的位置</em>和<em>数组对象本身</em>。</p>\n<ul>\n<li>every():对数组中的每一项运行给定的函数，如果该函数对<strong>每一项</strong>都返回<code>true</code>,则返回<code>true</code></li>\n<li>some():对数组中每一项运行给定的函数，如果该函数对<strong>任一项</strong>返回<code>true</code>，则返回<code>true</code></li>\n<li>filter():对数组中每一项运行给定的函数，返回该函数会返回<code>true</code>的项组成的<strong>数组</strong></li>\n<li>forEach():对数组中的每一项运行给定的函数。没有返回值</li>\n<li>map():对数组中的每一项运行给定的函数，返回每次调用的结果组成的<strong>数组</strong></li>\n</ul>\n<h4 id=\"归并方法\"><a href=\"#归并方法\" class=\"headerlink\" title=\"归并方法\"></a>归并方法</h4><h5 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h5><p>该方法可以传递两个参数：<em>化简函数</em>，<em>传递给函数的初始值（可选）</em>。<br>化简函数的参数：<em>到目前为止的化简操作累积的结果</em>，<em>数组元素</em>，<em>元素的索引</em>，<em>数组本身</em>。<br>这个方法，可以用于求数组元素的和、积、最大值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">/*求和*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\">(<span class=\"params\">x,y</span>)=&gt;</span>x+y,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">/*求积*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> product = a.reduce(<span class=\"function\">(<span class=\"params\">x,y</span>)=&gt;</span>x*y,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">/*求最大值*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> max = a.reduce(<span class=\"function\">(<span class=\"params\">x,y</span>)=&gt;</span>(x&gt;y)?x:y);</span><br></pre></td></tr></table></figure>\n<p>这个方法的简单用法就是这样，在《javascript高级程序设计》（第三版）中只是介绍了这个用法，但是在《javascript权威指南》（第六版）中提到了<code>reduce</code>的<strong>高级用法。</strong><br>例1：求任意数目对象的“并集”</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">返回一个新对象，这个对象同时拥有o和p的属性</span></span><br><span class=\"line\"><span class=\"comment\">如果o和p中有重名属性，使用p中属性</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">union</span>(<span class=\"params\">o,p</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> extend(extend(&#123;&#125;,o),p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> objects = [&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;,&#123;<span class=\"attr\">z</span>:<span class=\"number\">3</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = objects.reduce(union); <span class=\"comment\">// =&gt;&#123;x:1,y:2,z:3&#125;</span></span><br></pre></td></tr></table></figure>\n<p>例2：统计字符串中每个字符出现的重复次数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"string\">'abcdabcdadbc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> info = arr.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">p,k</span>) =&gt;</span> (p[k]++ || (p[k] = <span class=\"number\">1</span>), p), &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(info); <span class=\"comment\">//=&gt; Object &#123;a: 3, b: 3, c: 3, d: 3&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这两个例子，尤其是第二个例子可以看出，<code>reduce()</code>并不单单只是用于数学计算，在第二个例子中可以明显看出在<code>reduce()</code>第二个参数传入一个空对象，此时它最终返回的就是一个对象。由于本身传入的初始值是对象，所以返回对象。如果传入一个空数组，则返回数组。所以可以看出，最终<code>reduce()</code>函数返回什么，取决于第二个参数的形式。</p>\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h4><p><code>Array.join()</code>方法将数组中的所有元素都转化为字符串并连接起来，返回最后生成的字符串。可以指定一个可选的字符串在生成的字符串中分隔数组的各个元素，如不指定，默认用逗号隔开。</p>\n<h4 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h4><p>参数：<em>填充项</em>、<em>填充的起始位置</em>、<em>填充的结束位置</em><br><code>fill()</code>方法用于使用给定的值填充数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">7</span>); <span class=\"comment\">//=&gt;[7,7,7]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"转换为数组的方法-ES6新增\"><a href=\"#转换为数组的方法-ES6新增\" class=\"headerlink\" title=\"转换为数组的方法(ES6新增)\"></a>转换为数组的方法(ES6新增)</h2><h4 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from();\"></a>Array.from();</h4><p>该方法接收两个参数<em>要转换的非数组对象</em>,<em>对每个元素进行处理的方法（可选）</em></p>\n<p>在js中，有很多类数组对象（array-like object）和可遍历（iterable）对象（包括ES6新增的数据结构Set和Map），常见的类数组对象包括<code>document.querySelectorAll()</code>取到的NodeList，以及函数内部的arguments对象。它们都可以通过<code>Array.from()</code>转换为真正的数组，从而使用数组的方法。事实上只要对象具有<code>length</code>属性，就可以通过<code>Array.from()</code>转换为真正的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">'li'</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>:<span class=\"string\">'li'</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>:<span class=\"string\">'li'</span>,</span><br><span class=\"line\">    length:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(a)); <span class=\"comment\">// =&gt; ['li','li','li'];</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],(x)=&gt;x*x); <span class=\"comment\">// =&gt;1,4,9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"扩展运算符（…）\"><a href=\"#扩展运算符（…）\" class=\"headerlink\" title=\"扩展运算符（…）\"></a>扩展运算符（…）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arguments对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [...arguments];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//nodelist</span></span><br><span class=\"line\">[...document.querySelectorAll(<span class=\"string\">'div'</span>)];</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在ECMAScript中最常用的类型之一就是Array类型，Array类型的方法也有很多，所以在这篇文章中，梳理一下Array类型的方法。</p>\n</blockquote>\n<h2 id=\"新建数组\"><a href=\"#新建数组\" class=\"headerlink\" title=\"新建数组\"></a>新建数组</h2><p>新建数组的方法有三种：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*方法一*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">/*方法二*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">/*方法三（ES6新增）*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p><code>Array.of()</code>是ES6中新增的将一组值转换为数组的方法，该方法的出现时为了弥补构造函数<code>Array()</code>因为参数不同导致的不同行为。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>()         <span class=\"comment\">//[]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>)        <span class=\"comment\">//[ , , ]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)    <span class=\"comment\">//[1,2,3]</span></span><br></pre></td></tr></table></figure>\n<p>从上面可以看出，只有在参数个数不少于2时候，才会返回新的数组。<br>","more":"</p>\n<h2 id=\"数组的检测\"><a href=\"#数组的检测\" class=\"headerlink\" title=\"数组的检测\"></a>数组的检测</h2><p>对于一个网页或者一个全局作用域而言，使用<code>instanceof</code>操作符检测，通过返回的<code>boolean</code>值可以得出是否为数组，但是这样检测的问题在如果网页中包含两个以上不同的全局作用域，就会从在两个以上不同版本的Array构造函数，如果从一个框架向另一个框架传入一个数组，那么传入的数组与第二个框架中原声创建的数组分别有不同的构造函数。<br>在ES5中引入的<code>Array.isArray()</code>解决了这个问题，但如果在不支持ES5的浏览器中检测数组，则需要些兼容性方法，所以检测数组的方法如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkArray</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.isArray)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(arr);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(arr)===<span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数组中的方法：\"><a href=\"#数组中的方法：\" class=\"headerlink\" title=\"数组中的方法：\"></a>数组中的方法：</h2><h3 id=\"更改原数组\"><a href=\"#更改原数组\" class=\"headerlink\" title=\"更改原数组\"></a>更改原数组</h3><h4 id=\"添加项\"><a href=\"#添加项\" class=\"headerlink\" title=\"添加项\"></a>添加项</h4><p>push():接收任意数量的参数，逐个将其<strong>添加</strong>至数组<strong>末尾</strong>，返回修改后的<strong>数组的长度</strong><br>unshift():在数组的<strong>前端添加</strong>任意个项并返回新数组的长度</p>\n<h4 id=\"移除项\"><a href=\"#移除项\" class=\"headerlink\" title=\"移除项\"></a>移除项</h4><p>pop():从数组<strong>末尾移除最后</strong>一项，返回移除的项<br>shift():<strong>移除</strong>数组中的<strong>第一项</strong>并返回该项</p>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><p>reverse():反转数组项的顺序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">values.reverse();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// =&gt;5,4,3,2,1</span></span><br></pre></td></tr></table></figure>\n<p>sort():按照升序排列数组项，但是它在实现排序时会调用每个数组项的<code>toString()</code>放法，去比较字符串，所以会出现如下情况</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">values.sort();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// =&gt; 0,1,10,15,5</span></span><br></pre></td></tr></table></figure>\n<p>为了在使用<code>sort()</code>方法时返回正确的排序，我们需要给<code>sort()</code>传入一个比较函数，该比较函数传入两个参数，如果第一个参数应该位于第二个参数之前则返回一个负数，如果两个参数相等返回0，如果第一个参数应该位于第二个参数之后则返回一个正数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*升序</span></span><br><span class=\"line\"><span class=\"comment\">降序则更改返回值即可*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value1 &lt; value2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1 &gt; value2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">values.sort(compare);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(values);</span><br></pre></td></tr></table></figure>\n<p>对于数值类型或者其<code>valueOf()</code>方法会返回数值类型的对象类型，可以使用一个简单的比较函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value2 - value1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"截取\"><a href=\"#截取\" class=\"headerlink\" title=\"截取\"></a>截取</h4><p>slice():接受一个或两个参数，要返回的起始位置到结束位置<strong>但不包括结束位置</strong>项，如果只写一个参数则截取数组到最后。<strong>可以接收负数作为参数</strong><br>splice():做多可以接收三个参数，分别为<em>起始位置</em>，<em>要删除的项目数</em>，<em>要插入的任意数量的项</em>，同个这三个参数是否传入可以实现<strong>删除</strong>，<strong>插入</strong>，<strong>替换</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors =[<span class=\"string\">'red'</span>,<span class=\"string\">'green'</span>,<span class=\"string\">'blue'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> removed =colors.splice(<span class=\"number\">0</span>,<span class=\"number\">1</span>);    <span class=\"comment\">//删除第一项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colors);                <span class=\"comment\">//green,blue</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(removed);               <span class=\"comment\">//redm,返回的数组中只包含一项</span></span><br><span class=\"line\"></span><br><span class=\"line\">removed = colors.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">'yellow'</span>,<span class=\"string\">'orange'</span>); <span class=\"comment\">//从位置1开始插入两项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colors);                <span class=\"comment\">//green,yellow,orange,blue</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(removed);               <span class=\"comment\">//返回的是一个空数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">removed = color.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">'red'</span>,<span class=\"string\">'purple'</span>);  <span class=\"comment\">//插入两项，删除一项</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colors);                <span class=\"comment\">//green,yellow,purple,orange,blue</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(removed);               <span class=\"comment\">//返回yellow</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h4><p>参数：</p>\n<ul>\n<li>target(必需)：从该位置开始替换数据</li>\n<li>start (可选)：从该位置开始读取数据，默认为0。如果为负值，表示倒数</li>\n<li>end   (可选)：到<strong>该位置前</strong>停止读取数据，默认等于数组长度。如果为负值表示倒数</li>\n</ul>\n<p>在当前数组内部将指定位置的成员复制到其他位置，会覆盖原来的成员。修改原来的数组形成新的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.copyWithin(<span class=\"number\">0</span>);    <span class=\"comment\">// =&gt;[1,2,3]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.copyWithin(<span class=\"number\">0</span>,<span class=\"number\">1</span>);  <span class=\"comment\">// =&gt;[2,3,3]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = a.copyWithin(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);<span class=\"comment\">// =&gt;[2,2,3]</span></span><br></pre></td></tr></table></figure>\n<p>上面例子可以看出，虽然<code>copyWithin</code>的后两个参数是可选的，但是需要写第二个参数，否则返回的只是原数组本身。</p>\n<h3 id=\"不更改原素组，生成新数组\"><a href=\"#不更改原素组，生成新数组\" class=\"headerlink\" title=\"不更改原素组，生成新数组\"></a>不更改原素组，生成新数组</h3><h4 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h4><p>concat():这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾并返回副本。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.concat(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,[<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// =&gt;1,2,3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n<h4 id=\"寻找\"><a href=\"#寻找\" class=\"headerlink\" title=\"寻找\"></a>寻找</h4><h5 id=\"1-indexOf-、lastIndexOf-与includes\"><a href=\"#1-indexOf-、lastIndexOf-与includes\" class=\"headerlink\" title=\"1.indexOf()、lastIndexOf()与includes()\"></a>1.<code>indexOf()</code>、<code>lastIndexOf()</code>与<code>includes()</code></h5><p><code>indexOf()</code>与<code>lastIndexOf()</code>用于查找数组中是否有该方法，如果有则返回该元素的位置，否则返回<code>-1</code>。<br>但是这个方法有两个缺点：</p>\n<ol>\n<li>不够语义化</li>\n<li>它内部使用严格等于运算符<code>===</code>，导致了对<code>NaN</code>的误判。所以ES7新增<code>includes()</code>去克服这些缺点。</li>\n</ol>\n<p><strong>ES7新增</strong><br>ES7中新增<code>includes()</code>方法，用于查找数组总是否包含某个元素，返回布尔值，接受两个参数<em>要查找的元素</em>和<em>查找的起始位置</em>。</p>\n<h5 id=\"2-find-和findIndex\"><a href=\"#2-find-和findIndex\" class=\"headerlink\" title=\"2.find()和findIndex()\"></a>2.<code>find()</code>和<code>findIndex()</code></h5><p>参数：<em>一个回掉函数</em><br>回调的参数：<em>当前值</em>、<em>当前位置</em>、<em>原数组</em></p>\n<p><code>find()</code>方法用于找出<strong>第一个符合</strong>条件的数组成员。<br><code>findIndex()</code>方法返回<strong>第一个符合</strong>条件的数组成员的<strong>位置</strong>，如果所有成员都不符合，则返回-1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">-5</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\">a.find(<span class=\"function\">(<span class=\"params\">n</span>)=&gt;</span> n&lt;<span class=\"number\">0</span>);  <span class=\"comment\">// -5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">b.findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;);<span class=\"comment\">//=&gt;2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"迭代方法\"><a href=\"#迭代方法\" class=\"headerlink\" title=\"迭代方法\"></a>迭代方法</h4><p>ES5为数组定义了五个迭代方法<br>每个方法都接收两个参数：<em>要在每一项上运行的函数</em>和<em>（可选的）运行该函数的作用域对象</em>—-影响<code>this</code>的值。<br>传入这些方法中的函数会接收三个参数：<em>数组项的值</em>、<em>该项在数组中的位置</em>和<em>数组对象本身</em>。</p>\n<ul>\n<li>every():对数组中的每一项运行给定的函数，如果该函数对<strong>每一项</strong>都返回<code>true</code>,则返回<code>true</code></li>\n<li>some():对数组中每一项运行给定的函数，如果该函数对<strong>任一项</strong>返回<code>true</code>，则返回<code>true</code></li>\n<li>filter():对数组中每一项运行给定的函数，返回该函数会返回<code>true</code>的项组成的<strong>数组</strong></li>\n<li>forEach():对数组中的每一项运行给定的函数。没有返回值</li>\n<li>map():对数组中的每一项运行给定的函数，返回每次调用的结果组成的<strong>数组</strong></li>\n</ul>\n<h4 id=\"归并方法\"><a href=\"#归并方法\" class=\"headerlink\" title=\"归并方法\"></a>归并方法</h4><h5 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h5><p>该方法可以传递两个参数：<em>化简函数</em>，<em>传递给函数的初始值（可选）</em>。<br>化简函数的参数：<em>到目前为止的化简操作累积的结果</em>，<em>数组元素</em>，<em>元素的索引</em>，<em>数组本身</em>。<br>这个方法，可以用于求数组元素的和、积、最大值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">/*求和*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = a.reduce(<span class=\"function\">(<span class=\"params\">x,y</span>)=&gt;</span>x+y,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">/*求积*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> product = a.reduce(<span class=\"function\">(<span class=\"params\">x,y</span>)=&gt;</span>x*y,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">/*求最大值*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> max = a.reduce(<span class=\"function\">(<span class=\"params\">x,y</span>)=&gt;</span>(x&gt;y)?x:y);</span><br></pre></td></tr></table></figure>\n<p>这个方法的简单用法就是这样，在《javascript高级程序设计》（第三版）中只是介绍了这个用法，但是在《javascript权威指南》（第六版）中提到了<code>reduce</code>的<strong>高级用法。</strong><br>例1：求任意数目对象的“并集”</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">返回一个新对象，这个对象同时拥有o和p的属性</span></span><br><span class=\"line\"><span class=\"comment\">如果o和p中有重名属性，使用p中属性</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">union</span>(<span class=\"params\">o,p</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> extend(extend(&#123;&#125;,o),p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> objects = [&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;,&#123;<span class=\"attr\">z</span>:<span class=\"number\">3</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = objects.reduce(union); <span class=\"comment\">// =&gt;&#123;x:1,y:2,z:3&#125;</span></span><br></pre></td></tr></table></figure>\n<p>例2：统计字符串中每个字符出现的重复次数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"string\">'abcdabcdadbc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> info = arr.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">p,k</span>) =&gt;</span> (p[k]++ || (p[k] = <span class=\"number\">1</span>), p), &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(info); <span class=\"comment\">//=&gt; Object &#123;a: 3, b: 3, c: 3, d: 3&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这两个例子，尤其是第二个例子可以看出，<code>reduce()</code>并不单单只是用于数学计算，在第二个例子中可以明显看出在<code>reduce()</code>第二个参数传入一个空对象，此时它最终返回的就是一个对象。由于本身传入的初始值是对象，所以返回对象。如果传入一个空数组，则返回数组。所以可以看出，最终<code>reduce()</code>函数返回什么，取决于第二个参数的形式。</p>\n<h4 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h4><p><code>Array.join()</code>方法将数组中的所有元素都转化为字符串并连接起来，返回最后生成的字符串。可以指定一个可选的字符串在生成的字符串中分隔数组的各个元素，如不指定，默认用逗号隔开。</p>\n<h4 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h4><p>参数：<em>填充项</em>、<em>填充的起始位置</em>、<em>填充的结束位置</em><br><code>fill()</code>方法用于使用给定的值填充数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">7</span>); <span class=\"comment\">//=&gt;[7,7,7]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"转换为数组的方法-ES6新增\"><a href=\"#转换为数组的方法-ES6新增\" class=\"headerlink\" title=\"转换为数组的方法(ES6新增)\"></a>转换为数组的方法(ES6新增)</h2><h4 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from();\"></a>Array.from();</h4><p>该方法接收两个参数<em>要转换的非数组对象</em>,<em>对每个元素进行处理的方法（可选）</em></p>\n<p>在js中，有很多类数组对象（array-like object）和可遍历（iterable）对象（包括ES6新增的数据结构Set和Map），常见的类数组对象包括<code>document.querySelectorAll()</code>取到的NodeList，以及函数内部的arguments对象。它们都可以通过<code>Array.from()</code>转换为真正的数组，从而使用数组的方法。事实上只要对象具有<code>length</code>属性，就可以通过<code>Array.from()</code>转换为真正的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">'li'</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>:<span class=\"string\">'li'</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>:<span class=\"string\">'li'</span>,</span><br><span class=\"line\">    length:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(a)); <span class=\"comment\">// =&gt; ['li','li','li'];</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],(x)=&gt;x*x); <span class=\"comment\">// =&gt;1,4,9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"扩展运算符（…）\"><a href=\"#扩展运算符（…）\" class=\"headerlink\" title=\"扩展运算符（…）\"></a>扩展运算符（…）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arguments对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [...arguments];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//nodelist</span></span><br><span class=\"line\">[...document.querySelectorAll(<span class=\"string\">'div'</span>)];</span><br></pre></td></tr></table></figure>"},{"title":"Javascript中字符串方法总结","date":"2016-08-14T08:48:34.000Z","comments":1,"_content":"## 字符方法\n\n### chartAt()与charCodeAt()\n\n参数：*基于**0的字符位置***\n\n**chartAt()**以单字符字符串的形式返回给定位置的那个字符。而**charCodeAt()**返回的是字符编码。\n\n```js\nvar stringValue = 'hello world';\n/*chartAt()*/\nconsole.log(stringValue.chartAt(1));    // 'e'\n```\n<!--more-->\n## 字符串操作方法\n\n### concat()(数组中也有该方法)\n\n参数：*一个或多个字符串*\n\n将一个会多个字符串拼接起来，当然更常用的是使用 “+” 进行拼接\n\n### substring()与slice()(数组中也有此方法)\n\n参数：*指定子字符串的开始位置*，*子字符串到哪里结束*\n\n作用：创建新的子字符串（可以理解为字符串截取）\n\n### substr()\n\n参数：*指定子字符串的开始位置*，*返回的子字符串的字符个数*\n\n作用：创建新的子字符串（可以理解为字符串截取）\n\n### repeat()（ES6新增）\n\n参数：*数字（表示重复的次数）*\n\n作用：将原字符串重复n次\n\n如果传入负数，则报错，传入小数和`NaN`等同于传入0\n\n**substring，slice，substr，repeat均返回子字符串，不会修改原来的字符串**\n\n```js\nvar stringValue = \"hello world\"; \nalert(stringValue.slice(3));          //\"lo world\" \nalert(stringValue.substring(3));      //\"lo world\" \nalert(stringValue.substr(3));         //\"lo world\" \nalert(stringValue.slice(3, 7));       //\"lo w\" \nalert(stringValue.substring(3,7));    //\"lo w\" \nalert(stringValue.substr(3, 7));      //\"lo worl\" \n/*repeat()*/\nvar a = 'he';\nvar b = a.repeat(3);\nconsole.log(`${a}---${b}`); /\t\t  //\"he---hehehe\"\n```\n\n当给这三个方法传入负值的时候，三个的表现不同：\n- slice()会将传入的负值与字符串的长度相加\n- substr()会将**第一个**位置的**负值**参数加上字符串长度后转为正数，而**第二个**位置的**负值**将转化为0\n- substring()会把所有的负参数转化为0\n- repeat()会报错\n\n## 字符串位置方法\n\n### indexOf()和lastIndexOf()(数组中也有该方法)\n\n参数：*要搜索的子字符串*，*开始搜索的位置（可选）*\n\n搜索给定的子字符串，如果找到则返回位置，否则返回-1\n\n```js\nvar stringValue = \"hello world\"; \nalert(stringValue.indexOf(\"o\"));             //4 \nalert(stringValue.lastIndexOf(\"o\"));         //7 \n```\n\n这两个方法在搜索到第一个匹配的子字符串后就停止运行，所以如果想找到字符串中所有的\n子字符串出现的位置，可以循环调用`indexOf`或`lastIndexOf`。\n\n```js\nvar stringValue = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit\"; \nvar positions = new Array(); \nvar pos = stringValue.indexOf(\"e\"); \n \nwhile(pos > -1){ \n    positions.push(pos); \n    pos = stringValue.indexOf(\"e\", pos + 1); \n} \n     \nalert(positions);    //\"3,24,32,35,52\"\n```\n\n### **ES6新增**includes()、startsWith()、endsWith()\n\n- includes()：返回布尔值，表示是否找到了参数字符串\n- startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部\n- endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部\n\n这三个方法的参数与`indexOf()`，`lastIndexOf()`一样\n\n```js\nvar s = 'Hello world';\ns.startsWith('world',6);\t// true\ns.endsWith('Hello',5);\t\t// true\ns.includes('Hello',6);\t\t//false\n```\n\n**注意：**\n使用第2个参数n时，`endsWith`的行为与其他两个方法有所不同。它针对**前面**n个字符，而其他两个方法针对从第n个位置开始直到字符串结束的字符。\n\n## 去空格--trim()\n\nES5中新增`trim()`方法用于去除字符串的左右空格，**该方法会创建一个字符串的副本，不会改变原有的字符串**，此外，Firefox 3.5+、Safari 5+\n和 Chrome 8+还支持非标准的 trimLeft()和 trimRight()方法，分别用于删除字符串开头和末尾的\n空格。\n\n其实去空格可以使用正则去匹配的去掉，这里写一个去空格函数\n\n```js\n/*trim\t去掉空白\nstr要处理的字符串\t\t\n[type] \t类型：l 去除左边的空白\tr去除右边空白\tb去掉两边的空白\t\ta去除所有空白*/\nfunction trim (str,type) {\n\tvar type=type||\"b\";\n\tif(type==\"b\"){\n\t\treturn str.replace(/^\\s*|\\s*$/g,\"\");\n\t}else if(type==\"l\"){\n\t\treturn str.replace(/^\\s*/g,\"\");\n\t}else if(type==\"r\"){\n\t\treturn str.replace(/\\s*$/g,\"\");\n\t}else if(type==\"a\"){\n\t\treturn str.replace(/\\s*/g,\"\");\n\t}\n}\n```\n\n## 字符串大小写转换\n\n### toLowerCase()、toLocaleLowerCase()、toUpperCase()和 toLocaleUpperCase()\n\n## 字符串的模式匹配方法\n\n### match()\n\n参数：*一个正则表达式或RegExp对象*\n\n返回一个数组。在字符串上调用这个方法本质上与调用RegExp的exec()方法相同。\n\n```js\nvar text = \"cat, bat, sat, fat\";  \nvar pattern = /.at/; \n \n//与 pattern.exec(text)相同 \nvar matches = text.match(pattern);         \nalert(matches.index);             //0 \nalert(matches[0]);                 //\"cat\" \nalert(pattern.lastIndex);          //0 \n```\n\n### search()\n\n参数：*一个正则表达式或RegExp对象*\n\n返回字符串中第一个匹配项的索引，如果没有找到，则返回-1\n\n```js\nvar text = \"cat, bat, sat, fat\";  \nvar pos = text.search(/at/); \nalert(pos);   //1 \n```\n\n### replace()\n\n参数：*一个RegExp对象或者一个字符串（这个字符串不会被转换成正则表达式）*，*一个字符串或一个函数*\n\n利用`replace()`进行替换的时候，如果传入的是字符串，则只会替换第一个子字符串，要想替换所有的子字符串，则需要传入一个正则表达式，而且要指定全局（g）标志\n\n```js\nvar text = 'cat , bat , sat , fat';\nvar result = text.replace('at','ond');\nconsole.log(result); // =>'cont , bat , sat , fat'\n\nresult = text.replace(/at/g,'ond');\nconsole.log(result); //=>'cont , bont , sont , font'\n```\n该方法并不改变调用它的字符串本身，只是返回一个新的替换后的字符串。\n\n**当第二个参数为函数时**函数的返回值作为替换字符串。与第二个参数是字符串一样，如果第一个参数是正则表达式，并且全局匹配，则这个函数的方法将被多次调用，每次匹配都会被调用。\n\n该函数的参数：\n- match：匹配的子串\n- p1,p2...：假如`replace()`方法的第一个参数是RegExp对象，则代表第n个括号匹配的字符串。\n- offset：匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串时“bc”，那么这个参数是1）\n- 被匹配的原字符串\n\n```js\nfunction replacer(match , p1 , p2 , p3 , offset , string){\n\t// p1 is nondigits, p2 digits, and p3 non-alphanumerics\n    console.log(`${match}\n\t\t\t\t ${p1}\n\t\t\t\t ${p2}\n\t\t\t\t ${p3}\n\t\t\t\t ${offset}\n\t\t\t\t ${string}`); \n\t/* => abc12345#$*%\n         abc\n         12345\n         #$*%\n         0\n         abc12345#$*%\"\t*/\t\t \n    console.log([p1, p2, p3].join(' - ')); // => \"abc - 12345 - #$*%\"\n    return [p1, p2, p3].join(' - ');\n}\nvar newString = 'abc12345#$*%'.replace(/([^\\d]*)(\\d*)([^\\w]*)/, replacer); // =>\"abc - 12345 - #$*%\"\n```\n\n### split()\n\n参数：*用于分隔字符串的分隔符*，*数字（可选，用于指定数组的大小）*\n\n作用：基于指定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个**数组**中，分隔符可以是字符串，也可以是RegExp对象\n\n```js\nvar color = 'red,blue,yellow,black';\nvar color1 = color.split(',');\t\t// =>['red','blue','yellow','black']\nvar color2 = color.split(',',2);\t// =>['red','blue']\nvar color3 = color.split(/[^\\,]+/); // =>[\"\", \",\", \",\", \",\", \"\"] \n```\n最后一个调用`split`的时候，出现了前后的两个空白，是因为通过正则表达式指定的分隔符出现在了字符串的开头和结尾。\n\n## localeCompare()\n\n这个方法用于比较两个字符串，并返回下列值中的一个：\n\n- 如果字符串在字母表中应该排在字符串参数之前，则返回负数（大多情况下为-1）\n- 如果相等，则返回0\n- 如果排在字符串参数之前，则返回正数（大多数情况下为1）\n\n## fromCharCode()\n\nString构造函数的一个静态方法\n\n参数：*一个或多个字符串编码*\n\n作用：将接收到的一个或多个字符串编码**转换**成一个字符串，这个方法与实例方法`charCodeAt()`执行**相反**的操作。\n\n```js\n/*fromCharCode*/\nString.fromCharCode(104,101,108,108,111);\t// =>hello\n/*charCodeAt*/\nlet s = 'hello';\nfor(let i=0;i<s.length;i++){\n  console.log(`${s[i]}----${s[i].charCodeAt()}`);\n}\n/*\n\"h----104\"\n\"e----101\"\n\"l----108\"\n\"l----108\"\n\"o----111\"\n*/\n```\n\n最后写一个字符串与数组方法应用的一个例子，熟悉它们方法的话很简单，不熟悉就会觉得有点儿乱。\n\n```js\nlet s = 'hello';\nlet news = s.split('').reverse().join('');\nconsole.log(news); // => \"olleh\"\n```\n## 另附js中String和Array方法的总结图：\n![icon](/img/string&Array.png)","source":"_posts/js-String.md","raw":"---\ntitle: Javascript中字符串方法总结\ndate: 2016-08-14 16:48:34\ntags: Javascript\ncomments: true\ncategories: \"Javascript\"\n---\n## 字符方法\n\n### chartAt()与charCodeAt()\n\n参数：*基于**0的字符位置***\n\n**chartAt()**以单字符字符串的形式返回给定位置的那个字符。而**charCodeAt()**返回的是字符编码。\n\n```js\nvar stringValue = 'hello world';\n/*chartAt()*/\nconsole.log(stringValue.chartAt(1));    // 'e'\n```\n<!--more-->\n## 字符串操作方法\n\n### concat()(数组中也有该方法)\n\n参数：*一个或多个字符串*\n\n将一个会多个字符串拼接起来，当然更常用的是使用 “+” 进行拼接\n\n### substring()与slice()(数组中也有此方法)\n\n参数：*指定子字符串的开始位置*，*子字符串到哪里结束*\n\n作用：创建新的子字符串（可以理解为字符串截取）\n\n### substr()\n\n参数：*指定子字符串的开始位置*，*返回的子字符串的字符个数*\n\n作用：创建新的子字符串（可以理解为字符串截取）\n\n### repeat()（ES6新增）\n\n参数：*数字（表示重复的次数）*\n\n作用：将原字符串重复n次\n\n如果传入负数，则报错，传入小数和`NaN`等同于传入0\n\n**substring，slice，substr，repeat均返回子字符串，不会修改原来的字符串**\n\n```js\nvar stringValue = \"hello world\"; \nalert(stringValue.slice(3));          //\"lo world\" \nalert(stringValue.substring(3));      //\"lo world\" \nalert(stringValue.substr(3));         //\"lo world\" \nalert(stringValue.slice(3, 7));       //\"lo w\" \nalert(stringValue.substring(3,7));    //\"lo w\" \nalert(stringValue.substr(3, 7));      //\"lo worl\" \n/*repeat()*/\nvar a = 'he';\nvar b = a.repeat(3);\nconsole.log(`${a}---${b}`); /\t\t  //\"he---hehehe\"\n```\n\n当给这三个方法传入负值的时候，三个的表现不同：\n- slice()会将传入的负值与字符串的长度相加\n- substr()会将**第一个**位置的**负值**参数加上字符串长度后转为正数，而**第二个**位置的**负值**将转化为0\n- substring()会把所有的负参数转化为0\n- repeat()会报错\n\n## 字符串位置方法\n\n### indexOf()和lastIndexOf()(数组中也有该方法)\n\n参数：*要搜索的子字符串*，*开始搜索的位置（可选）*\n\n搜索给定的子字符串，如果找到则返回位置，否则返回-1\n\n```js\nvar stringValue = \"hello world\"; \nalert(stringValue.indexOf(\"o\"));             //4 \nalert(stringValue.lastIndexOf(\"o\"));         //7 \n```\n\n这两个方法在搜索到第一个匹配的子字符串后就停止运行，所以如果想找到字符串中所有的\n子字符串出现的位置，可以循环调用`indexOf`或`lastIndexOf`。\n\n```js\nvar stringValue = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit\"; \nvar positions = new Array(); \nvar pos = stringValue.indexOf(\"e\"); \n \nwhile(pos > -1){ \n    positions.push(pos); \n    pos = stringValue.indexOf(\"e\", pos + 1); \n} \n     \nalert(positions);    //\"3,24,32,35,52\"\n```\n\n### **ES6新增**includes()、startsWith()、endsWith()\n\n- includes()：返回布尔值，表示是否找到了参数字符串\n- startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部\n- endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部\n\n这三个方法的参数与`indexOf()`，`lastIndexOf()`一样\n\n```js\nvar s = 'Hello world';\ns.startsWith('world',6);\t// true\ns.endsWith('Hello',5);\t\t// true\ns.includes('Hello',6);\t\t//false\n```\n\n**注意：**\n使用第2个参数n时，`endsWith`的行为与其他两个方法有所不同。它针对**前面**n个字符，而其他两个方法针对从第n个位置开始直到字符串结束的字符。\n\n## 去空格--trim()\n\nES5中新增`trim()`方法用于去除字符串的左右空格，**该方法会创建一个字符串的副本，不会改变原有的字符串**，此外，Firefox 3.5+、Safari 5+\n和 Chrome 8+还支持非标准的 trimLeft()和 trimRight()方法，分别用于删除字符串开头和末尾的\n空格。\n\n其实去空格可以使用正则去匹配的去掉，这里写一个去空格函数\n\n```js\n/*trim\t去掉空白\nstr要处理的字符串\t\t\n[type] \t类型：l 去除左边的空白\tr去除右边空白\tb去掉两边的空白\t\ta去除所有空白*/\nfunction trim (str,type) {\n\tvar type=type||\"b\";\n\tif(type==\"b\"){\n\t\treturn str.replace(/^\\s*|\\s*$/g,\"\");\n\t}else if(type==\"l\"){\n\t\treturn str.replace(/^\\s*/g,\"\");\n\t}else if(type==\"r\"){\n\t\treturn str.replace(/\\s*$/g,\"\");\n\t}else if(type==\"a\"){\n\t\treturn str.replace(/\\s*/g,\"\");\n\t}\n}\n```\n\n## 字符串大小写转换\n\n### toLowerCase()、toLocaleLowerCase()、toUpperCase()和 toLocaleUpperCase()\n\n## 字符串的模式匹配方法\n\n### match()\n\n参数：*一个正则表达式或RegExp对象*\n\n返回一个数组。在字符串上调用这个方法本质上与调用RegExp的exec()方法相同。\n\n```js\nvar text = \"cat, bat, sat, fat\";  \nvar pattern = /.at/; \n \n//与 pattern.exec(text)相同 \nvar matches = text.match(pattern);         \nalert(matches.index);             //0 \nalert(matches[0]);                 //\"cat\" \nalert(pattern.lastIndex);          //0 \n```\n\n### search()\n\n参数：*一个正则表达式或RegExp对象*\n\n返回字符串中第一个匹配项的索引，如果没有找到，则返回-1\n\n```js\nvar text = \"cat, bat, sat, fat\";  \nvar pos = text.search(/at/); \nalert(pos);   //1 \n```\n\n### replace()\n\n参数：*一个RegExp对象或者一个字符串（这个字符串不会被转换成正则表达式）*，*一个字符串或一个函数*\n\n利用`replace()`进行替换的时候，如果传入的是字符串，则只会替换第一个子字符串，要想替换所有的子字符串，则需要传入一个正则表达式，而且要指定全局（g）标志\n\n```js\nvar text = 'cat , bat , sat , fat';\nvar result = text.replace('at','ond');\nconsole.log(result); // =>'cont , bat , sat , fat'\n\nresult = text.replace(/at/g,'ond');\nconsole.log(result); //=>'cont , bont , sont , font'\n```\n该方法并不改变调用它的字符串本身，只是返回一个新的替换后的字符串。\n\n**当第二个参数为函数时**函数的返回值作为替换字符串。与第二个参数是字符串一样，如果第一个参数是正则表达式，并且全局匹配，则这个函数的方法将被多次调用，每次匹配都会被调用。\n\n该函数的参数：\n- match：匹配的子串\n- p1,p2...：假如`replace()`方法的第一个参数是RegExp对象，则代表第n个括号匹配的字符串。\n- offset：匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串时“bc”，那么这个参数是1）\n- 被匹配的原字符串\n\n```js\nfunction replacer(match , p1 , p2 , p3 , offset , string){\n\t// p1 is nondigits, p2 digits, and p3 non-alphanumerics\n    console.log(`${match}\n\t\t\t\t ${p1}\n\t\t\t\t ${p2}\n\t\t\t\t ${p3}\n\t\t\t\t ${offset}\n\t\t\t\t ${string}`); \n\t/* => abc12345#$*%\n         abc\n         12345\n         #$*%\n         0\n         abc12345#$*%\"\t*/\t\t \n    console.log([p1, p2, p3].join(' - ')); // => \"abc - 12345 - #$*%\"\n    return [p1, p2, p3].join(' - ');\n}\nvar newString = 'abc12345#$*%'.replace(/([^\\d]*)(\\d*)([^\\w]*)/, replacer); // =>\"abc - 12345 - #$*%\"\n```\n\n### split()\n\n参数：*用于分隔字符串的分隔符*，*数字（可选，用于指定数组的大小）*\n\n作用：基于指定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个**数组**中，分隔符可以是字符串，也可以是RegExp对象\n\n```js\nvar color = 'red,blue,yellow,black';\nvar color1 = color.split(',');\t\t// =>['red','blue','yellow','black']\nvar color2 = color.split(',',2);\t// =>['red','blue']\nvar color3 = color.split(/[^\\,]+/); // =>[\"\", \",\", \",\", \",\", \"\"] \n```\n最后一个调用`split`的时候，出现了前后的两个空白，是因为通过正则表达式指定的分隔符出现在了字符串的开头和结尾。\n\n## localeCompare()\n\n这个方法用于比较两个字符串，并返回下列值中的一个：\n\n- 如果字符串在字母表中应该排在字符串参数之前，则返回负数（大多情况下为-1）\n- 如果相等，则返回0\n- 如果排在字符串参数之前，则返回正数（大多数情况下为1）\n\n## fromCharCode()\n\nString构造函数的一个静态方法\n\n参数：*一个或多个字符串编码*\n\n作用：将接收到的一个或多个字符串编码**转换**成一个字符串，这个方法与实例方法`charCodeAt()`执行**相反**的操作。\n\n```js\n/*fromCharCode*/\nString.fromCharCode(104,101,108,108,111);\t// =>hello\n/*charCodeAt*/\nlet s = 'hello';\nfor(let i=0;i<s.length;i++){\n  console.log(`${s[i]}----${s[i].charCodeAt()}`);\n}\n/*\n\"h----104\"\n\"e----101\"\n\"l----108\"\n\"l----108\"\n\"o----111\"\n*/\n```\n\n最后写一个字符串与数组方法应用的一个例子，熟悉它们方法的话很简单，不熟悉就会觉得有点儿乱。\n\n```js\nlet s = 'hello';\nlet news = s.split('').reverse().join('');\nconsole.log(news); // => \"olleh\"\n```\n## 另附js中String和Array方法的总结图：\n![icon](/img/string&Array.png)","slug":"js-String","published":1,"updated":"2016-08-14T00:51:10.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobg001rzrv4p4kxlhy7","content":"<h2 id=\"字符方法\"><a href=\"#字符方法\" class=\"headerlink\" title=\"字符方法\"></a>字符方法</h2><h3 id=\"chartAt-与charCodeAt\"><a href=\"#chartAt-与charCodeAt\" class=\"headerlink\" title=\"chartAt()与charCodeAt()\"></a>chartAt()与charCodeAt()</h3><p>参数：<em>基于<strong>0的字符位置</strong></em></p>\n<p><strong>chartAt()</strong>以单字符字符串的形式返回给定位置的那个字符。而<strong>charCodeAt()</strong>返回的是字符编码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\"><span class=\"comment\">/*chartAt()*/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringValue.chartAt(<span class=\"number\">1</span>));    <span class=\"comment\">// 'e'</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"字符串操作方法\"><a href=\"#字符串操作方法\" class=\"headerlink\" title=\"字符串操作方法\"></a>字符串操作方法</h2><h3 id=\"concat-数组中也有该方法\"><a href=\"#concat-数组中也有该方法\" class=\"headerlink\" title=\"concat()(数组中也有该方法)\"></a>concat()(数组中也有该方法)</h3><p>参数：<em>一个或多个字符串</em></p>\n<p>将一个会多个字符串拼接起来，当然更常用的是使用 “+” 进行拼接</p>\n<h3 id=\"substring-与slice-数组中也有此方法\"><a href=\"#substring-与slice-数组中也有此方法\" class=\"headerlink\" title=\"substring()与slice()(数组中也有此方法)\"></a>substring()与slice()(数组中也有此方法)</h3><p>参数：<em>指定子字符串的开始位置</em>，<em>子字符串到哪里结束</em></p>\n<p>作用：创建新的子字符串（可以理解为字符串截取）</p>\n<h3 id=\"substr\"><a href=\"#substr\" class=\"headerlink\" title=\"substr()\"></a>substr()</h3><p>参数：<em>指定子字符串的开始位置</em>，<em>返回的子字符串的字符个数</em></p>\n<p>作用：创建新的子字符串（可以理解为字符串截取）</p>\n<h3 id=\"repeat-（ES6新增）\"><a href=\"#repeat-（ES6新增）\" class=\"headerlink\" title=\"repeat()（ES6新增）\"></a>repeat()（ES6新增）</h3><p>参数：<em>数字（表示重复的次数）</em></p>\n<p>作用：将原字符串重复n次</p>\n<p>如果传入负数，则报错，传入小数和<code>NaN</code>等同于传入0</p>\n<p><strong>substring，slice，substr，repeat均返回子字符串，不会修改原来的字符串</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">\"hello world\"</span>; </span><br><span class=\"line\">alert(stringValue.slice(<span class=\"number\">3</span>));          <span class=\"comment\">//\"lo world\" </span></span><br><span class=\"line\">alert(stringValue.substring(<span class=\"number\">3</span>));      <span class=\"comment\">//\"lo world\" </span></span><br><span class=\"line\">alert(stringValue.substr(<span class=\"number\">3</span>));         <span class=\"comment\">//\"lo world\" </span></span><br><span class=\"line\">alert(stringValue.slice(<span class=\"number\">3</span>, <span class=\"number\">7</span>));       <span class=\"comment\">//\"lo w\" </span></span><br><span class=\"line\">alert(stringValue.substring(<span class=\"number\">3</span>,<span class=\"number\">7</span>));    <span class=\"comment\">//\"lo w\" </span></span><br><span class=\"line\">alert(stringValue.substr(<span class=\"number\">3</span>, <span class=\"number\">7</span>));      <span class=\"comment\">//\"lo worl\" </span></span><br><span class=\"line\"><span class=\"comment\">/*repeat()*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'he'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.repeat(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span>---<span class=\"subst\">$&#123;b&#125;</span>`</span>); <span class=\"regexp\">/\t\t  /</span><span class=\"regexp\">/\"he---hehehe\"</span></span><br></pre></td></tr></table></figure>\n<p>当给这三个方法传入负值的时候，三个的表现不同：</p>\n<ul>\n<li>slice()会将传入的负值与字符串的长度相加</li>\n<li>substr()会将<strong>第一个</strong>位置的<strong>负值</strong>参数加上字符串长度后转为正数，而<strong>第二个</strong>位置的<strong>负值</strong>将转化为0</li>\n<li>substring()会把所有的负参数转化为0</li>\n<li>repeat()会报错</li>\n</ul>\n<h2 id=\"字符串位置方法\"><a href=\"#字符串位置方法\" class=\"headerlink\" title=\"字符串位置方法\"></a>字符串位置方法</h2><h3 id=\"indexOf-和lastIndexOf-数组中也有该方法\"><a href=\"#indexOf-和lastIndexOf-数组中也有该方法\" class=\"headerlink\" title=\"indexOf()和lastIndexOf()(数组中也有该方法)\"></a>indexOf()和lastIndexOf()(数组中也有该方法)</h3><p>参数：<em>要搜索的子字符串</em>，<em>开始搜索的位置（可选）</em></p>\n<p>搜索给定的子字符串，如果找到则返回位置，否则返回-1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">\"hello world\"</span>; </span><br><span class=\"line\">alert(stringValue.indexOf(<span class=\"string\">\"o\"</span>));             <span class=\"comment\">//4 </span></span><br><span class=\"line\">alert(stringValue.lastIndexOf(<span class=\"string\">\"o\"</span>));         <span class=\"comment\">//7</span></span><br></pre></td></tr></table></figure>\n<p>这两个方法在搜索到第一个匹配的子字符串后就停止运行，所以如果想找到字符串中所有的<br>子字符串出现的位置，可以循环调用<code>indexOf</code>或<code>lastIndexOf</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">\"Lorem ipsum dolor sit amet, consectetur adipisicing elit\"</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> positions = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> pos = stringValue.indexOf(<span class=\"string\">\"e\"</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">while</span>(pos &gt; <span class=\"number\">-1</span>)&#123; </span><br><span class=\"line\">    positions.push(pos); </span><br><span class=\"line\">    pos = stringValue.indexOf(<span class=\"string\">\"e\"</span>, pos + <span class=\"number\">1</span>); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">     </span><br><span class=\"line\">alert(positions);    <span class=\"comment\">//\"3,24,32,35,52\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ES6新增includes-、startsWith-、endsWith\"><a href=\"#ES6新增includes-、startsWith-、endsWith\" class=\"headerlink\" title=\"ES6新增includes()、startsWith()、endsWith()\"></a><strong>ES6新增</strong>includes()、startsWith()、endsWith()</h3><ul>\n<li>includes()：返回布尔值，表示是否找到了参数字符串</li>\n<li>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部</li>\n<li>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部</li>\n</ul>\n<p>这三个方法的参数与<code>indexOf()</code>，<code>lastIndexOf()</code>一样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>,<span class=\"number\">6</span>);\t<span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>,<span class=\"number\">5</span>);\t\t<span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'Hello'</span>,<span class=\"number\">6</span>);\t\t<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong><br>使用第2个参数n时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对<strong>前面</strong>n个字符，而其他两个方法针对从第n个位置开始直到字符串结束的字符。</p>\n<h2 id=\"去空格–trim\"><a href=\"#去空格–trim\" class=\"headerlink\" title=\"去空格–trim()\"></a>去空格–trim()</h2><p>ES5中新增<code>trim()</code>方法用于去除字符串的左右空格，<strong>该方法会创建一个字符串的副本，不会改变原有的字符串</strong>，此外，Firefox 3.5+、Safari 5+<br>和 Chrome 8+还支持非标准的 trimLeft()和 trimRight()方法，分别用于删除字符串开头和末尾的<br>空格。</p>\n<p>其实去空格可以使用正则去匹配的去掉，这里写一个去空格函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*trim\t去掉空白</span></span><br><span class=\"line\"><span class=\"comment\">str要处理的字符串\t\t</span></span><br><span class=\"line\"><span class=\"comment\">[type] \t类型：l 去除左边的空白\tr去除右边空白\tb去掉两边的空白\t\ta去除所有空白*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trim</span> (<span class=\"params\">str,type</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> type=type||<span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(type==<span class=\"string\">\"b\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/^\\s*|\\s*$/g</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"string\">\"l\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/^\\s*/g</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"string\">\"r\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/\\s*$/g</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"string\">\"a\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/\\s*/g</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串大小写转换\"><a href=\"#字符串大小写转换\" class=\"headerlink\" title=\"字符串大小写转换\"></a>字符串大小写转换</h2><h3 id=\"toLowerCase-、toLocaleLowerCase-、toUpperCase-和-toLocaleUpperCase\"><a href=\"#toLowerCase-、toLocaleLowerCase-、toUpperCase-和-toLocaleUpperCase\" class=\"headerlink\" title=\"toLowerCase()、toLocaleLowerCase()、toUpperCase()和 toLocaleUpperCase()\"></a>toLowerCase()、toLocaleLowerCase()、toUpperCase()和 toLocaleUpperCase()</h3><h2 id=\"字符串的模式匹配方法\"><a href=\"#字符串的模式匹配方法\" class=\"headerlink\" title=\"字符串的模式匹配方法\"></a>字符串的模式匹配方法</h2><h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a>match()</h3><p>参数：<em>一个正则表达式或RegExp对象</em></p>\n<p>返回一个数组。在字符串上调用这个方法本质上与调用RegExp的exec()方法相同。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">\"cat, bat, sat, fat\"</span>;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/.at/</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//与 pattern.exec(text)相同 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = text.match(pattern);         </span><br><span class=\"line\">alert(matches.index);             <span class=\"comment\">//0 </span></span><br><span class=\"line\">alert(matches[<span class=\"number\">0</span>]);                 <span class=\"comment\">//\"cat\" </span></span><br><span class=\"line\">alert(pattern.lastIndex);          <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search()\"></a>search()</h3><p>参数：<em>一个正则表达式或RegExp对象</em></p>\n<p>返回字符串中第一个匹配项的索引，如果没有找到，则返回-1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">\"cat, bat, sat, fat\"</span>;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> pos = text.search(<span class=\"regexp\">/at/</span>); </span><br><span class=\"line\">alert(pos);   <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3><p>参数：<em>一个RegExp对象或者一个字符串（这个字符串不会被转换成正则表达式）</em>，<em>一个字符串或一个函数</em></p>\n<p>利用<code>replace()</code>进行替换的时候，如果传入的是字符串，则只会替换第一个子字符串，要想替换所有的子字符串，则需要传入一个正则表达式，而且要指定全局（g）标志</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'cat , bat , sat , fat'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = text.replace(<span class=\"string\">'at'</span>,<span class=\"string\">'ond'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// =&gt;'cont , bat , sat , fat'</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = text.replace(<span class=\"regexp\">/at/g</span>,<span class=\"string\">'ond'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">//=&gt;'cont , bont , sont , font'</span></span><br></pre></td></tr></table></figure>\n<p>该方法并不改变调用它的字符串本身，只是返回一个新的替换后的字符串。</p>\n<p><strong>当第二个参数为函数时</strong>函数的返回值作为替换字符串。与第二个参数是字符串一样，如果第一个参数是正则表达式，并且全局匹配，则这个函数的方法将被多次调用，每次匹配都会被调用。</p>\n<p>该函数的参数：</p>\n<ul>\n<li>match：匹配的子串</li>\n<li>p1,p2…：假如<code>replace()</code>方法的第一个参数是RegExp对象，则代表第n个括号匹配的字符串。</li>\n<li>offset：匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串时“bc”，那么这个参数是1）</li>\n<li>被匹配的原字符串</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replacer</span>(<span class=\"params\">match , p1 , p2 , p3 , offset , string</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// p1 is nondigits, p2 digits, and p3 non-alphanumerics</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;match&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t <span class=\"subst\">$&#123;p1&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t <span class=\"subst\">$&#123;p2&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t <span class=\"subst\">$&#123;p3&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t <span class=\"subst\">$&#123;offset&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t <span class=\"subst\">$&#123;string&#125;</span>`</span>); </span><br><span class=\"line\">\t<span class=\"comment\">/* =&gt; abc12345#$*%</span></span><br><span class=\"line\"><span class=\"comment\">         abc</span></span><br><span class=\"line\"><span class=\"comment\">         12345</span></span><br><span class=\"line\"><span class=\"comment\">         #$*%</span></span><br><span class=\"line\"><span class=\"comment\">         0</span></span><br><span class=\"line\"><span class=\"comment\">         abc12345#$*%\"\t*/</span>\t\t </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([p1, p2, p3].join(<span class=\"string\">' - '</span>)); <span class=\"comment\">// =&gt; \"abc - 12345 - #$*%\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [p1, p2, p3].join(<span class=\"string\">' - '</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newString = <span class=\"string\">'abc12345#$*%'</span>.replace(<span class=\"regexp\">/([^\\d]*)(\\d*)([^\\w]*)/</span>, replacer); <span class=\"comment\">// =&gt;\"abc - 12345 - #$*%\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h3><p>参数：<em>用于分隔字符串的分隔符</em>，<em>数字（可选，用于指定数组的大小）</em></p>\n<p>作用：基于指定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个<strong>数组</strong>中，分隔符可以是字符串，也可以是RegExp对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">'red,blue,yellow,black'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> color1 = color.split(<span class=\"string\">','</span>);\t\t<span class=\"comment\">// =&gt;['red','blue','yellow','black']</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> color2 = color.split(<span class=\"string\">','</span>,<span class=\"number\">2</span>);\t<span class=\"comment\">// =&gt;['red','blue']</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> color3 = color.split(<span class=\"regexp\">/[^\\,]+/</span>); <span class=\"comment\">// =&gt;[\"\", \",\", \",\", \",\", \"\"]</span></span><br></pre></td></tr></table></figure>\n<p>最后一个调用<code>split</code>的时候，出现了前后的两个空白，是因为通过正则表达式指定的分隔符出现在了字符串的开头和结尾。</p>\n<h2 id=\"localeCompare\"><a href=\"#localeCompare\" class=\"headerlink\" title=\"localeCompare()\"></a>localeCompare()</h2><p>这个方法用于比较两个字符串，并返回下列值中的一个：</p>\n<ul>\n<li>如果字符串在字母表中应该排在字符串参数之前，则返回负数（大多情况下为-1）</li>\n<li>如果相等，则返回0</li>\n<li>如果排在字符串参数之前，则返回正数（大多数情况下为1）</li>\n</ul>\n<h2 id=\"fromCharCode\"><a href=\"#fromCharCode\" class=\"headerlink\" title=\"fromCharCode()\"></a>fromCharCode()</h2><p>String构造函数的一个静态方法</p>\n<p>参数：<em>一个或多个字符串编码</em></p>\n<p>作用：将接收到的一个或多个字符串编码<strong>转换</strong>成一个字符串，这个方法与实例方法<code>charCodeAt()</code>执行<strong>相反</strong>的操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*fromCharCode*/</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">104</span>,<span class=\"number\">101</span>,<span class=\"number\">108</span>,<span class=\"number\">108</span>,<span class=\"number\">111</span>);\t<span class=\"comment\">// =&gt;hello</span></span><br><span class=\"line\"><span class=\"comment\">/*charCodeAt*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;s.length;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;s[i]&#125;</span>----<span class=\"subst\">$&#123;s[i].charCodeAt()&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\"h----104\"</span></span><br><span class=\"line\"><span class=\"comment\">\"e----101\"</span></span><br><span class=\"line\"><span class=\"comment\">\"l----108\"</span></span><br><span class=\"line\"><span class=\"comment\">\"l----108\"</span></span><br><span class=\"line\"><span class=\"comment\">\"o----111\"</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>最后写一个字符串与数组方法应用的一个例子，熟悉它们方法的话很简单，不熟悉就会觉得有点儿乱。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> news = s.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(news); <span class=\"comment\">// =&gt; \"olleh\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"另附js中String和Array方法的总结图：\"><a href=\"#另附js中String和Array方法的总结图：\" class=\"headerlink\" title=\"另附js中String和Array方法的总结图：\"></a>另附js中String和Array方法的总结图：</h2><p><img src=\"/img/string&amp;Array.png\" alt=\"icon\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"字符方法\"><a href=\"#字符方法\" class=\"headerlink\" title=\"字符方法\"></a>字符方法</h2><h3 id=\"chartAt-与charCodeAt\"><a href=\"#chartAt-与charCodeAt\" class=\"headerlink\" title=\"chartAt()与charCodeAt()\"></a>chartAt()与charCodeAt()</h3><p>参数：<em>基于<strong>0的字符位置</strong></em></p>\n<p><strong>chartAt()</strong>以单字符字符串的形式返回给定位置的那个字符。而<strong>charCodeAt()</strong>返回的是字符编码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\"><span class=\"comment\">/*chartAt()*/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringValue.chartAt(<span class=\"number\">1</span>));    <span class=\"comment\">// 'e'</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"字符串操作方法\"><a href=\"#字符串操作方法\" class=\"headerlink\" title=\"字符串操作方法\"></a>字符串操作方法</h2><h3 id=\"concat-数组中也有该方法\"><a href=\"#concat-数组中也有该方法\" class=\"headerlink\" title=\"concat()(数组中也有该方法)\"></a>concat()(数组中也有该方法)</h3><p>参数：<em>一个或多个字符串</em></p>\n<p>将一个会多个字符串拼接起来，当然更常用的是使用 “+” 进行拼接</p>\n<h3 id=\"substring-与slice-数组中也有此方法\"><a href=\"#substring-与slice-数组中也有此方法\" class=\"headerlink\" title=\"substring()与slice()(数组中也有此方法)\"></a>substring()与slice()(数组中也有此方法)</h3><p>参数：<em>指定子字符串的开始位置</em>，<em>子字符串到哪里结束</em></p>\n<p>作用：创建新的子字符串（可以理解为字符串截取）</p>\n<h3 id=\"substr\"><a href=\"#substr\" class=\"headerlink\" title=\"substr()\"></a>substr()</h3><p>参数：<em>指定子字符串的开始位置</em>，<em>返回的子字符串的字符个数</em></p>\n<p>作用：创建新的子字符串（可以理解为字符串截取）</p>\n<h3 id=\"repeat-（ES6新增）\"><a href=\"#repeat-（ES6新增）\" class=\"headerlink\" title=\"repeat()（ES6新增）\"></a>repeat()（ES6新增）</h3><p>参数：<em>数字（表示重复的次数）</em></p>\n<p>作用：将原字符串重复n次</p>\n<p>如果传入负数，则报错，传入小数和<code>NaN</code>等同于传入0</p>\n<p><strong>substring，slice，substr，repeat均返回子字符串，不会修改原来的字符串</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">\"hello world\"</span>; </span><br><span class=\"line\">alert(stringValue.slice(<span class=\"number\">3</span>));          <span class=\"comment\">//\"lo world\" </span></span><br><span class=\"line\">alert(stringValue.substring(<span class=\"number\">3</span>));      <span class=\"comment\">//\"lo world\" </span></span><br><span class=\"line\">alert(stringValue.substr(<span class=\"number\">3</span>));         <span class=\"comment\">//\"lo world\" </span></span><br><span class=\"line\">alert(stringValue.slice(<span class=\"number\">3</span>, <span class=\"number\">7</span>));       <span class=\"comment\">//\"lo w\" </span></span><br><span class=\"line\">alert(stringValue.substring(<span class=\"number\">3</span>,<span class=\"number\">7</span>));    <span class=\"comment\">//\"lo w\" </span></span><br><span class=\"line\">alert(stringValue.substr(<span class=\"number\">3</span>, <span class=\"number\">7</span>));      <span class=\"comment\">//\"lo worl\" </span></span><br><span class=\"line\"><span class=\"comment\">/*repeat()*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'he'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.repeat(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span>---<span class=\"subst\">$&#123;b&#125;</span>`</span>); <span class=\"regexp\">/\t\t  /</span><span class=\"regexp\">/\"he---hehehe\"</span></span><br></pre></td></tr></table></figure>\n<p>当给这三个方法传入负值的时候，三个的表现不同：</p>\n<ul>\n<li>slice()会将传入的负值与字符串的长度相加</li>\n<li>substr()会将<strong>第一个</strong>位置的<strong>负值</strong>参数加上字符串长度后转为正数，而<strong>第二个</strong>位置的<strong>负值</strong>将转化为0</li>\n<li>substring()会把所有的负参数转化为0</li>\n<li>repeat()会报错</li>\n</ul>\n<h2 id=\"字符串位置方法\"><a href=\"#字符串位置方法\" class=\"headerlink\" title=\"字符串位置方法\"></a>字符串位置方法</h2><h3 id=\"indexOf-和lastIndexOf-数组中也有该方法\"><a href=\"#indexOf-和lastIndexOf-数组中也有该方法\" class=\"headerlink\" title=\"indexOf()和lastIndexOf()(数组中也有该方法)\"></a>indexOf()和lastIndexOf()(数组中也有该方法)</h3><p>参数：<em>要搜索的子字符串</em>，<em>开始搜索的位置（可选）</em></p>\n<p>搜索给定的子字符串，如果找到则返回位置，否则返回-1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">\"hello world\"</span>; </span><br><span class=\"line\">alert(stringValue.indexOf(<span class=\"string\">\"o\"</span>));             <span class=\"comment\">//4 </span></span><br><span class=\"line\">alert(stringValue.lastIndexOf(<span class=\"string\">\"o\"</span>));         <span class=\"comment\">//7</span></span><br></pre></td></tr></table></figure>\n<p>这两个方法在搜索到第一个匹配的子字符串后就停止运行，所以如果想找到字符串中所有的<br>子字符串出现的位置，可以循环调用<code>indexOf</code>或<code>lastIndexOf</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">\"Lorem ipsum dolor sit amet, consectetur adipisicing elit\"</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> positions = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> pos = stringValue.indexOf(<span class=\"string\">\"e\"</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">while</span>(pos &gt; <span class=\"number\">-1</span>)&#123; </span><br><span class=\"line\">    positions.push(pos); </span><br><span class=\"line\">    pos = stringValue.indexOf(<span class=\"string\">\"e\"</span>, pos + <span class=\"number\">1</span>); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">     </span><br><span class=\"line\">alert(positions);    <span class=\"comment\">//\"3,24,32,35,52\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ES6新增includes-、startsWith-、endsWith\"><a href=\"#ES6新增includes-、startsWith-、endsWith\" class=\"headerlink\" title=\"ES6新增includes()、startsWith()、endsWith()\"></a><strong>ES6新增</strong>includes()、startsWith()、endsWith()</h3><ul>\n<li>includes()：返回布尔值，表示是否找到了参数字符串</li>\n<li>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部</li>\n<li>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部</li>\n</ul>\n<p>这三个方法的参数与<code>indexOf()</code>，<code>lastIndexOf()</code>一样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world'</span>;</span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>,<span class=\"number\">6</span>);\t<span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>,<span class=\"number\">5</span>);\t\t<span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'Hello'</span>,<span class=\"number\">6</span>);\t\t<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong><br>使用第2个参数n时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对<strong>前面</strong>n个字符，而其他两个方法针对从第n个位置开始直到字符串结束的字符。</p>\n<h2 id=\"去空格–trim\"><a href=\"#去空格–trim\" class=\"headerlink\" title=\"去空格–trim()\"></a>去空格–trim()</h2><p>ES5中新增<code>trim()</code>方法用于去除字符串的左右空格，<strong>该方法会创建一个字符串的副本，不会改变原有的字符串</strong>，此外，Firefox 3.5+、Safari 5+<br>和 Chrome 8+还支持非标准的 trimLeft()和 trimRight()方法，分别用于删除字符串开头和末尾的<br>空格。</p>\n<p>其实去空格可以使用正则去匹配的去掉，这里写一个去空格函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*trim\t去掉空白</span></span><br><span class=\"line\"><span class=\"comment\">str要处理的字符串\t\t</span></span><br><span class=\"line\"><span class=\"comment\">[type] \t类型：l 去除左边的空白\tr去除右边空白\tb去掉两边的空白\t\ta去除所有空白*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trim</span> (<span class=\"params\">str,type</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> type=type||<span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(type==<span class=\"string\">\"b\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/^\\s*|\\s*$/g</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"string\">\"l\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/^\\s*/g</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"string\">\"r\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/\\s*$/g</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"string\">\"a\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/\\s*/g</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串大小写转换\"><a href=\"#字符串大小写转换\" class=\"headerlink\" title=\"字符串大小写转换\"></a>字符串大小写转换</h2><h3 id=\"toLowerCase-、toLocaleLowerCase-、toUpperCase-和-toLocaleUpperCase\"><a href=\"#toLowerCase-、toLocaleLowerCase-、toUpperCase-和-toLocaleUpperCase\" class=\"headerlink\" title=\"toLowerCase()、toLocaleLowerCase()、toUpperCase()和 toLocaleUpperCase()\"></a>toLowerCase()、toLocaleLowerCase()、toUpperCase()和 toLocaleUpperCase()</h3><h2 id=\"字符串的模式匹配方法\"><a href=\"#字符串的模式匹配方法\" class=\"headerlink\" title=\"字符串的模式匹配方法\"></a>字符串的模式匹配方法</h2><h3 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a>match()</h3><p>参数：<em>一个正则表达式或RegExp对象</em></p>\n<p>返回一个数组。在字符串上调用这个方法本质上与调用RegExp的exec()方法相同。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">\"cat, bat, sat, fat\"</span>;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/.at/</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//与 pattern.exec(text)相同 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = text.match(pattern);         </span><br><span class=\"line\">alert(matches.index);             <span class=\"comment\">//0 </span></span><br><span class=\"line\">alert(matches[<span class=\"number\">0</span>]);                 <span class=\"comment\">//\"cat\" </span></span><br><span class=\"line\">alert(pattern.lastIndex);          <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search()\"></a>search()</h3><p>参数：<em>一个正则表达式或RegExp对象</em></p>\n<p>返回字符串中第一个匹配项的索引，如果没有找到，则返回-1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">\"cat, bat, sat, fat\"</span>;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> pos = text.search(<span class=\"regexp\">/at/</span>); </span><br><span class=\"line\">alert(pos);   <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3><p>参数：<em>一个RegExp对象或者一个字符串（这个字符串不会被转换成正则表达式）</em>，<em>一个字符串或一个函数</em></p>\n<p>利用<code>replace()</code>进行替换的时候，如果传入的是字符串，则只会替换第一个子字符串，要想替换所有的子字符串，则需要传入一个正则表达式，而且要指定全局（g）标志</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'cat , bat , sat , fat'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = text.replace(<span class=\"string\">'at'</span>,<span class=\"string\">'ond'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// =&gt;'cont , bat , sat , fat'</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = text.replace(<span class=\"regexp\">/at/g</span>,<span class=\"string\">'ond'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">//=&gt;'cont , bont , sont , font'</span></span><br></pre></td></tr></table></figure>\n<p>该方法并不改变调用它的字符串本身，只是返回一个新的替换后的字符串。</p>\n<p><strong>当第二个参数为函数时</strong>函数的返回值作为替换字符串。与第二个参数是字符串一样，如果第一个参数是正则表达式，并且全局匹配，则这个函数的方法将被多次调用，每次匹配都会被调用。</p>\n<p>该函数的参数：</p>\n<ul>\n<li>match：匹配的子串</li>\n<li>p1,p2…：假如<code>replace()</code>方法的第一个参数是RegExp对象，则代表第n个括号匹配的字符串。</li>\n<li>offset：匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串时“bc”，那么这个参数是1）</li>\n<li>被匹配的原字符串</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replacer</span>(<span class=\"params\">match , p1 , p2 , p3 , offset , string</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// p1 is nondigits, p2 digits, and p3 non-alphanumerics</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;match&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t <span class=\"subst\">$&#123;p1&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t <span class=\"subst\">$&#123;p2&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t <span class=\"subst\">$&#123;p3&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t <span class=\"subst\">$&#123;offset&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t <span class=\"subst\">$&#123;string&#125;</span>`</span>); </span><br><span class=\"line\">\t<span class=\"comment\">/* =&gt; abc12345#$*%</span></span><br><span class=\"line\"><span class=\"comment\">         abc</span></span><br><span class=\"line\"><span class=\"comment\">         12345</span></span><br><span class=\"line\"><span class=\"comment\">         #$*%</span></span><br><span class=\"line\"><span class=\"comment\">         0</span></span><br><span class=\"line\"><span class=\"comment\">         abc12345#$*%\"\t*/</span>\t\t </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log([p1, p2, p3].join(<span class=\"string\">' - '</span>)); <span class=\"comment\">// =&gt; \"abc - 12345 - #$*%\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [p1, p2, p3].join(<span class=\"string\">' - '</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newString = <span class=\"string\">'abc12345#$*%'</span>.replace(<span class=\"regexp\">/([^\\d]*)(\\d*)([^\\w]*)/</span>, replacer); <span class=\"comment\">// =&gt;\"abc - 12345 - #$*%\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split()\"></a>split()</h3><p>参数：<em>用于分隔字符串的分隔符</em>，<em>数字（可选，用于指定数组的大小）</em></p>\n<p>作用：基于指定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个<strong>数组</strong>中，分隔符可以是字符串，也可以是RegExp对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">'red,blue,yellow,black'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> color1 = color.split(<span class=\"string\">','</span>);\t\t<span class=\"comment\">// =&gt;['red','blue','yellow','black']</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> color2 = color.split(<span class=\"string\">','</span>,<span class=\"number\">2</span>);\t<span class=\"comment\">// =&gt;['red','blue']</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> color3 = color.split(<span class=\"regexp\">/[^\\,]+/</span>); <span class=\"comment\">// =&gt;[\"\", \",\", \",\", \",\", \"\"]</span></span><br></pre></td></tr></table></figure>\n<p>最后一个调用<code>split</code>的时候，出现了前后的两个空白，是因为通过正则表达式指定的分隔符出现在了字符串的开头和结尾。</p>\n<h2 id=\"localeCompare\"><a href=\"#localeCompare\" class=\"headerlink\" title=\"localeCompare()\"></a>localeCompare()</h2><p>这个方法用于比较两个字符串，并返回下列值中的一个：</p>\n<ul>\n<li>如果字符串在字母表中应该排在字符串参数之前，则返回负数（大多情况下为-1）</li>\n<li>如果相等，则返回0</li>\n<li>如果排在字符串参数之前，则返回正数（大多数情况下为1）</li>\n</ul>\n<h2 id=\"fromCharCode\"><a href=\"#fromCharCode\" class=\"headerlink\" title=\"fromCharCode()\"></a>fromCharCode()</h2><p>String构造函数的一个静态方法</p>\n<p>参数：<em>一个或多个字符串编码</em></p>\n<p>作用：将接收到的一个或多个字符串编码<strong>转换</strong>成一个字符串，这个方法与实例方法<code>charCodeAt()</code>执行<strong>相反</strong>的操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*fromCharCode*/</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">104</span>,<span class=\"number\">101</span>,<span class=\"number\">108</span>,<span class=\"number\">108</span>,<span class=\"number\">111</span>);\t<span class=\"comment\">// =&gt;hello</span></span><br><span class=\"line\"><span class=\"comment\">/*charCodeAt*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;s.length;i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;s[i]&#125;</span>----<span class=\"subst\">$&#123;s[i].charCodeAt()&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\"h----104\"</span></span><br><span class=\"line\"><span class=\"comment\">\"e----101\"</span></span><br><span class=\"line\"><span class=\"comment\">\"l----108\"</span></span><br><span class=\"line\"><span class=\"comment\">\"l----108\"</span></span><br><span class=\"line\"><span class=\"comment\">\"o----111\"</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>最后写一个字符串与数组方法应用的一个例子，熟悉它们方法的话很简单，不熟悉就会觉得有点儿乱。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> news = s.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(news); <span class=\"comment\">// =&gt; \"olleh\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"另附js中String和Array方法的总结图：\"><a href=\"#另附js中String和Array方法的总结图：\" class=\"headerlink\" title=\"另附js中String和Array方法的总结图：\"></a>另附js中String和Array方法的总结图：</h2><p><img src=\"/img/string&amp;Array.png\" alt=\"icon\"></p>"},{"title":"JS中的位置与大小","date":"2016-08-02T16:06:31.000Z","comments":1,"_content":"> 最近事儿比较多，一直没时间写东西，前几天又遇到关于获取元素大小的问题，每次遇到这类问题就翻书，比较费时间，所以总结一下。\n\n### 1.元素的偏移量\n元素的偏移量包括元素在屏幕上占用的所有可见的空间。元素的可见大小由其高度、宽度决定，包括所有内边距、滚动条和边框大小（注意：这里并不包括外边距）。\n\n![icon](/img/js-position/offset_table.PNG)\n<!--more-->\n![icon](/img/js-position/offset.PNG)\n\n### 2.客户区大小\n元素的客户区大小指的是元素内容机器内边距占据空间的大小。\n\n![icon](/img/js-position/client_table.PNG)\n\n![icon](/img/js-position/client.PNG)\n\n要确定浏览器可见窗口的大小，可以使用`document.documentElement`或`document.body`（IE7之前的版本中）。\n\n从以上两个我们可以看出元素偏移量（offset）与客户区大小（client）的区别在于**有没有包含边框**，客户区大小不包含边框。\n### 3.滚动大小\n\n![icon](/img/js-position/scroll_table.PNG)\n\n`scrollWidth`和`scrollHeight`主要用于确定元素内容的实际大小。所以带有垂直滚动条的页面总高度就是`document.documentElement.scrollHeight`。\n\n![icon](/img/js-position/scroll.PNG)\n\n### 4.窗口大小\n在现代主流浏览器中提供了四个属性确定窗口的大小，分别为：`innerWidth`、`innerHeight`、`outerWidth`和`outerHeight`。\n#### 4.1. outerWidth和outerHeight\n返回浏览器窗口本身的尺寸（无论是从外层的window对象还是从某个框架访问）\n#### 4.2. innerWidth和innerHeight\n返回该容器中页面试图去的大小（减去边框宽度）\n\n**注意：**\n\n这里在《javascript高级程序设计》（第三版）中写道在chrome中outer与inner返回的值是一样的，这算是chrome的一个bug，我在chrome 53中已经修复，但是在QQ浏览器中（内核为chromium47）依旧是相等的，这需要注意！\n`clientWidth`和`clientHeight`。\n\n在主流浏览器中，`document.docuementElement.clientWidth`和`document.documentElement.clientHeight`中保存的是页面视口信息。返回的值与`window.innerHeight`，`window.innerWidth`一样。\n但是`window.innerHeight`在IE8及以下浏览器中结果是`undefined`，而`document.documentElement.clientHeight`还有值。所以在各个浏览器下取得页面视口大小的代码如下：\n```js\nvar pageWidth=window.innerWidth,\n    pageHeight=window.innerHeight;\nif(typeof pageWidth !== 'number'){\n    if(document.compatMode === 'CSS1Compat'){\n        pageWidth=document.documentElement.clientWidth;\n        pageHeight=document.documentElement.clientHeight;\n    }else{\n        pageWidth=document.body.clientWidth;\n        pageHeight=document.body.clientHeight;\n    }\n}    \n```\n代码中`document.compatMode`用于判断浏览器处于什么模式，它有两个值：\n`BackCompat`:浏览器处于怪异模式\n`CSS1Compat`:浏览器处于标准模式\n不同模式下，获取浏览器的宽度的方法不同，在代码中已经做了判断。","source":"_posts/js-position.md","raw":"---\ntitle: JS中的位置与大小\ndate: 2016-08-03 00:06:31\ntags: Javascript\ncomments: true\ncategories: \"Javascript\"\n---\n> 最近事儿比较多，一直没时间写东西，前几天又遇到关于获取元素大小的问题，每次遇到这类问题就翻书，比较费时间，所以总结一下。\n\n### 1.元素的偏移量\n元素的偏移量包括元素在屏幕上占用的所有可见的空间。元素的可见大小由其高度、宽度决定，包括所有内边距、滚动条和边框大小（注意：这里并不包括外边距）。\n\n![icon](/img/js-position/offset_table.PNG)\n<!--more-->\n![icon](/img/js-position/offset.PNG)\n\n### 2.客户区大小\n元素的客户区大小指的是元素内容机器内边距占据空间的大小。\n\n![icon](/img/js-position/client_table.PNG)\n\n![icon](/img/js-position/client.PNG)\n\n要确定浏览器可见窗口的大小，可以使用`document.documentElement`或`document.body`（IE7之前的版本中）。\n\n从以上两个我们可以看出元素偏移量（offset）与客户区大小（client）的区别在于**有没有包含边框**，客户区大小不包含边框。\n### 3.滚动大小\n\n![icon](/img/js-position/scroll_table.PNG)\n\n`scrollWidth`和`scrollHeight`主要用于确定元素内容的实际大小。所以带有垂直滚动条的页面总高度就是`document.documentElement.scrollHeight`。\n\n![icon](/img/js-position/scroll.PNG)\n\n### 4.窗口大小\n在现代主流浏览器中提供了四个属性确定窗口的大小，分别为：`innerWidth`、`innerHeight`、`outerWidth`和`outerHeight`。\n#### 4.1. outerWidth和outerHeight\n返回浏览器窗口本身的尺寸（无论是从外层的window对象还是从某个框架访问）\n#### 4.2. innerWidth和innerHeight\n返回该容器中页面试图去的大小（减去边框宽度）\n\n**注意：**\n\n这里在《javascript高级程序设计》（第三版）中写道在chrome中outer与inner返回的值是一样的，这算是chrome的一个bug，我在chrome 53中已经修复，但是在QQ浏览器中（内核为chromium47）依旧是相等的，这需要注意！\n`clientWidth`和`clientHeight`。\n\n在主流浏览器中，`document.docuementElement.clientWidth`和`document.documentElement.clientHeight`中保存的是页面视口信息。返回的值与`window.innerHeight`，`window.innerWidth`一样。\n但是`window.innerHeight`在IE8及以下浏览器中结果是`undefined`，而`document.documentElement.clientHeight`还有值。所以在各个浏览器下取得页面视口大小的代码如下：\n```js\nvar pageWidth=window.innerWidth,\n    pageHeight=window.innerHeight;\nif(typeof pageWidth !== 'number'){\n    if(document.compatMode === 'CSS1Compat'){\n        pageWidth=document.documentElement.clientWidth;\n        pageHeight=document.documentElement.clientHeight;\n    }else{\n        pageWidth=document.body.clientWidth;\n        pageHeight=document.body.clientHeight;\n    }\n}    \n```\n代码中`document.compatMode`用于判断浏览器处于什么模式，它有两个值：\n`BackCompat`:浏览器处于怪异模式\n`CSS1Compat`:浏览器处于标准模式\n不同模式下，获取浏览器的宽度的方法不同，在代码中已经做了判断。","slug":"js-position","published":1,"updated":"2016-08-02T08:35:40.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobi001wzrv4esbo5wh5","content":"<blockquote>\n<p>最近事儿比较多，一直没时间写东西，前几天又遇到关于获取元素大小的问题，每次遇到这类问题就翻书，比较费时间，所以总结一下。</p>\n</blockquote>\n<h3 id=\"1-元素的偏移量\"><a href=\"#1-元素的偏移量\" class=\"headerlink\" title=\"1.元素的偏移量\"></a>1.元素的偏移量</h3><p>元素的偏移量包括元素在屏幕上占用的所有可见的空间。元素的可见大小由其高度、宽度决定，包括所有内边距、滚动条和边框大小（注意：这里并不包括外边距）。</p>\n<p><img src=\"/img/js-position/offset_table.PNG\" alt=\"icon\"><br><a id=\"more\"></a><br><img src=\"/img/js-position/offset.PNG\" alt=\"icon\"></p>\n<h3 id=\"2-客户区大小\"><a href=\"#2-客户区大小\" class=\"headerlink\" title=\"2.客户区大小\"></a>2.客户区大小</h3><p>元素的客户区大小指的是元素内容机器内边距占据空间的大小。</p>\n<p><img src=\"/img/js-position/client_table.PNG\" alt=\"icon\"></p>\n<p><img src=\"/img/js-position/client.PNG\" alt=\"icon\"></p>\n<p>要确定浏览器可见窗口的大小，可以使用<code>document.documentElement</code>或<code>document.body</code>（IE7之前的版本中）。</p>\n<p>从以上两个我们可以看出元素偏移量（offset）与客户区大小（client）的区别在于<strong>有没有包含边框</strong>，客户区大小不包含边框。</p>\n<h3 id=\"3-滚动大小\"><a href=\"#3-滚动大小\" class=\"headerlink\" title=\"3.滚动大小\"></a>3.滚动大小</h3><p><img src=\"/img/js-position/scroll_table.PNG\" alt=\"icon\"></p>\n<p><code>scrollWidth</code>和<code>scrollHeight</code>主要用于确定元素内容的实际大小。所以带有垂直滚动条的页面总高度就是<code>document.documentElement.scrollHeight</code>。</p>\n<p><img src=\"/img/js-position/scroll.PNG\" alt=\"icon\"></p>\n<h3 id=\"4-窗口大小\"><a href=\"#4-窗口大小\" class=\"headerlink\" title=\"4.窗口大小\"></a>4.窗口大小</h3><p>在现代主流浏览器中提供了四个属性确定窗口的大小，分别为：<code>innerWidth</code>、<code>innerHeight</code>、<code>outerWidth</code>和<code>outerHeight</code>。</p>\n<h4 id=\"4-1-outerWidth和outerHeight\"><a href=\"#4-1-outerWidth和outerHeight\" class=\"headerlink\" title=\"4.1. outerWidth和outerHeight\"></a>4.1. outerWidth和outerHeight</h4><p>返回浏览器窗口本身的尺寸（无论是从外层的window对象还是从某个框架访问）</p>\n<h4 id=\"4-2-innerWidth和innerHeight\"><a href=\"#4-2-innerWidth和innerHeight\" class=\"headerlink\" title=\"4.2. innerWidth和innerHeight\"></a>4.2. innerWidth和innerHeight</h4><p>返回该容器中页面试图去的大小（减去边框宽度）</p>\n<p><strong>注意：</strong></p>\n<p>这里在《javascript高级程序设计》（第三版）中写道在chrome中outer与inner返回的值是一样的，这算是chrome的一个bug，我在chrome 53中已经修复，但是在QQ浏览器中（内核为chromium47）依旧是相等的，这需要注意！<br><code>clientWidth</code>和<code>clientHeight</code>。</p>\n<p>在主流浏览器中，<code>document.docuementElement.clientWidth</code>和<code>document.documentElement.clientHeight</code>中保存的是页面视口信息。返回的值与<code>window.innerHeight</code>，<code>window.innerWidth</code>一样。<br>但是<code>window.innerHeight</code>在IE8及以下浏览器中结果是<code>undefined</code>，而<code>document.documentElement.clientHeight</code>还有值。所以在各个浏览器下取得页面视口大小的代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pageWidth=<span class=\"built_in\">window</span>.innerWidth,</span><br><span class=\"line\">    pageHeight=<span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> pageWidth !== <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode === <span class=\"string\">'CSS1Compat'</span>)&#123;</span><br><span class=\"line\">        pageWidth=<span class=\"built_in\">document</span>.documentElement.clientWidth;</span><br><span class=\"line\">        pageHeight=<span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        pageWidth=<span class=\"built_in\">document</span>.body.clientWidth;</span><br><span class=\"line\">        pageHeight=<span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码中<code>document.compatMode</code>用于判断浏览器处于什么模式，它有两个值：<br><code>BackCompat</code>:浏览器处于怪异模式<br><code>CSS1Compat</code>:浏览器处于标准模式<br>不同模式下，获取浏览器的宽度的方法不同，在代码中已经做了判断。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近事儿比较多，一直没时间写东西，前几天又遇到关于获取元素大小的问题，每次遇到这类问题就翻书，比较费时间，所以总结一下。</p>\n</blockquote>\n<h3 id=\"1-元素的偏移量\"><a href=\"#1-元素的偏移量\" class=\"headerlink\" title=\"1.元素的偏移量\"></a>1.元素的偏移量</h3><p>元素的偏移量包括元素在屏幕上占用的所有可见的空间。元素的可见大小由其高度、宽度决定，包括所有内边距、滚动条和边框大小（注意：这里并不包括外边距）。</p>\n<p><img src=\"/img/js-position/offset_table.PNG\" alt=\"icon\"><br>","more":"<br><img src=\"/img/js-position/offset.PNG\" alt=\"icon\"></p>\n<h3 id=\"2-客户区大小\"><a href=\"#2-客户区大小\" class=\"headerlink\" title=\"2.客户区大小\"></a>2.客户区大小</h3><p>元素的客户区大小指的是元素内容机器内边距占据空间的大小。</p>\n<p><img src=\"/img/js-position/client_table.PNG\" alt=\"icon\"></p>\n<p><img src=\"/img/js-position/client.PNG\" alt=\"icon\"></p>\n<p>要确定浏览器可见窗口的大小，可以使用<code>document.documentElement</code>或<code>document.body</code>（IE7之前的版本中）。</p>\n<p>从以上两个我们可以看出元素偏移量（offset）与客户区大小（client）的区别在于<strong>有没有包含边框</strong>，客户区大小不包含边框。</p>\n<h3 id=\"3-滚动大小\"><a href=\"#3-滚动大小\" class=\"headerlink\" title=\"3.滚动大小\"></a>3.滚动大小</h3><p><img src=\"/img/js-position/scroll_table.PNG\" alt=\"icon\"></p>\n<p><code>scrollWidth</code>和<code>scrollHeight</code>主要用于确定元素内容的实际大小。所以带有垂直滚动条的页面总高度就是<code>document.documentElement.scrollHeight</code>。</p>\n<p><img src=\"/img/js-position/scroll.PNG\" alt=\"icon\"></p>\n<h3 id=\"4-窗口大小\"><a href=\"#4-窗口大小\" class=\"headerlink\" title=\"4.窗口大小\"></a>4.窗口大小</h3><p>在现代主流浏览器中提供了四个属性确定窗口的大小，分别为：<code>innerWidth</code>、<code>innerHeight</code>、<code>outerWidth</code>和<code>outerHeight</code>。</p>\n<h4 id=\"4-1-outerWidth和outerHeight\"><a href=\"#4-1-outerWidth和outerHeight\" class=\"headerlink\" title=\"4.1. outerWidth和outerHeight\"></a>4.1. outerWidth和outerHeight</h4><p>返回浏览器窗口本身的尺寸（无论是从外层的window对象还是从某个框架访问）</p>\n<h4 id=\"4-2-innerWidth和innerHeight\"><a href=\"#4-2-innerWidth和innerHeight\" class=\"headerlink\" title=\"4.2. innerWidth和innerHeight\"></a>4.2. innerWidth和innerHeight</h4><p>返回该容器中页面试图去的大小（减去边框宽度）</p>\n<p><strong>注意：</strong></p>\n<p>这里在《javascript高级程序设计》（第三版）中写道在chrome中outer与inner返回的值是一样的，这算是chrome的一个bug，我在chrome 53中已经修复，但是在QQ浏览器中（内核为chromium47）依旧是相等的，这需要注意！<br><code>clientWidth</code>和<code>clientHeight</code>。</p>\n<p>在主流浏览器中，<code>document.docuementElement.clientWidth</code>和<code>document.documentElement.clientHeight</code>中保存的是页面视口信息。返回的值与<code>window.innerHeight</code>，<code>window.innerWidth</code>一样。<br>但是<code>window.innerHeight</code>在IE8及以下浏览器中结果是<code>undefined</code>，而<code>document.documentElement.clientHeight</code>还有值。所以在各个浏览器下取得页面视口大小的代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pageWidth=<span class=\"built_in\">window</span>.innerWidth,</span><br><span class=\"line\">    pageHeight=<span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> pageWidth !== <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode === <span class=\"string\">'CSS1Compat'</span>)&#123;</span><br><span class=\"line\">        pageWidth=<span class=\"built_in\">document</span>.documentElement.clientWidth;</span><br><span class=\"line\">        pageHeight=<span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        pageWidth=<span class=\"built_in\">document</span>.body.clientWidth;</span><br><span class=\"line\">        pageHeight=<span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码中<code>document.compatMode</code>用于判断浏览器处于什么模式，它有两个值：<br><code>BackCompat</code>:浏览器处于怪异模式<br><code>CSS1Compat</code>:浏览器处于标准模式<br>不同模式下，获取浏览器的宽度的方法不同，在代码中已经做了判断。</p>"},{"title":"Linux日常使用总结","date":"2016-10-02T15:33:47.000Z","comments":1,"_content":"> 自己一直对linux充满好奇，这次换了新的工作后，由于使用Mac OS和linux，所以国庆回来，给自己的电脑装了ubuntu来熟悉linux。在安装完成后遇到一些问题，经过谷歌都一一解决了，写这篇博文分享给大家。\n\n<!--more-->\n\n## 1．设置获取root权限\n\n```c\nsudo passwd root //设置root密码\n```\n\n然后输入当前系统账户的密码并设置新的UNIX密码，密码更新成功后在终端输入`su`然后输入刚刚设置好的新的UNIX密码，即可进入root权限，如果想退出，输入`exit`。\n\n\n## ２．在linux下如何安装shadowsocks\n\n因为自己是搞开发的，而且非常喜欢谷歌，所以就需要一个自由的网络环境，博主用的是shadowsocks，在windows下，有客户端，但是现在装了linux，既然装了linux，能用命令行搞定的就尽量用命令行，所以我选择在终端安装shadowsocks客户端，步骤如下：\n\n#### 安装shadowsocks客户端\n\n```c\nsudo apt-get update \nsudo apt-get install python-gevent python-pip\npip install shadowsocks\n```\n\n#### 建立配置文件\n\n打开终端，运行`vim /etc/ss.json`，然后写入json\n\n```json\n{\n\t\"server\" : \"you server\",\n\t\"server_port\" : 0000,\n\t\"local_address\" : \"127.0.0.1\",\n\t\"local_port\" : 1080,\n\t\"password\" : \"you password\",\n\t\"method\" : \"aes-256-cfb\",   //shadowsocks的加密方式\n\t\"fast_open\" : false\n}\n```\n\n#### 开启shadowsocks\n\n```c\nsslocal -c /etc/ss.json\n\n// 开启后显示以下内容，代表开启成功：\n// INFO  loading libcrypto from libcrypto.so.1.0.0\n// INFO  starting local at 127.0.0.1:1080\n```\n#### 设置开机启动\n\n```c\n// 打开图形化开机启动项管理界面\ngnome-session-properties\n// 添加(Add) -> 名称(name)和描述(comment)随便填，命令(Command)填写如下： \nsslocal -c /etc/ss.json\n```\n\n#### 火狐浏览器配置\n\n设置→首选项→高级→网络→链接→设置→手动配置代理→socks主机：127.0.0.1 端口：1080→确定\n\n#### chrome配置\n\n在终端中输入如下命令：\n\n```c\nchromium-browser --proxy-server=socks5://127.0.0.1:1080\n```\n\n进入后安装SwitchyOmega，然后配置此插件：\n\n情景模式→删除原有的情景模式，新建情景模式（原有的情景模式无socks代理）→手动配置→SOCKS代理：127.0.0.1 端口1080→保存 →ok\n\n##### note:\n\n我在这里运行这个命令后依然无法进入，不清楚是怎么回事儿，所以我直接找了个host进行了替换，关于host，我推荐[老d博客中提供的](https://laod.cn/hosts/2016-google-hosts.html)，具体用法他博客中有写。然后才进入的应用商店下载好。\n\n## ３．安装相应的软件\n\n#### 安装Gdebi软件包安装程序\n\n在ubuntu中有自己的软件中心，但是有些软件在里面找不到，需要自己去官网下载客户端然后安装（比如网易云音乐，搜狗拼音等），下载好的安装包大部分都是`.deb`文件，查阅了需要资料，安装这个用`gdebi`比较方便，在软件中心搜索`Gdebi软件包安装程序`安装就好，但是，既然用linux了，就用一下它强大的终端，所以我说一下在终端如何安装\n\n在终端输入\n\n```c\nsudo apt-get install gdebi\n```\n\n但是我在这里输入后，提示我缺少相应的依赖，并让我运行\n\n```c\nsudo apt-get install -f\n```\n\n运行完成这个命令后，相应的依赖就被安装好了，这里的这个命令主要是修复依赖关系（depends）的命令，之后重新运行`sudo apt-get install gdebi`即可。\n\n#### 安装对应的软件\n\n在安装完成这个后，安装软件就方便很多，我比如安装chrome浏览器，直接进入下载好文件的目录，运行\n\n```c\nsudo gdebi chrome.deb //这里是你要安装包的名字\n```\n\n完成后去搜索即可。<font color='red'>在安装时候我发现有的软件在安装完成后需要重启下电脑才会有。</font>\n\n#### 卸载apt-get安装的东西\n\n有时候需要卸载一些`apt-get`安装的东西，需要命令为\n\n```c\nsudo apt-get remove XXX //XXX为要卸载的东西\n```\n\n#### 安装node\n\n做前端开发，node是必不可少的，所以需要安装一下，在windows下都是直接下载安装包安装，我本来也在linux下下了个安装包安装了，但是查了一下发现用nvm安装node的比较多，而且那天在公司老大也说在mac下推荐使用nvm安装，所以自己决定试下。\n\n##### 1.安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：\n\n```c\nnpm ls -g --depth=0 //查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装\nsudo rm -rf /usr/local/lib/node_modules //删除全局 node_modules 目录\nsudo rm /usr/local/bin/node //删除 node\ncd  /usr/local/bin && ls -l | grep \"../lib/node_modules/\" | awk '{print $9}'| xargs rm //删除全局 node 模块注册的软链\n```\n\n话说最后一条命令运行会报rm使用错误，不知道怎么弄...\n\n##### 2.安装[nvm](https://github.com/creationix/nvm)\n\n运行以下两条命令之一\n\n```c\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash\n//or\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash\n```\n\n然后进入(~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc)这些文件，看哪个文件有，在最后一行添加.\n\n```c\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n这里如果不太会改这个的话，可以设置终端从而达到效果，在终端打开`编辑→配置文件首选项→命令`中勾选`以登录shell方式运行命令`。在ubuntu中没有`执行命令时更新登录登录记录`，如果有，一起勾选，然后在终端输入\n\n```c\nnvm\n```\n\n即可看到帮助，之后运行\n\n```c\nnvm install node\n```\n\n就可以安装到最新版本的node，更多关于nvm的用法可参考[node版本管理工具nvm-Mac下安装及使用](https://segmentfault.com/a/1190000004404505)\n\n至此，linux下常用的软件就安装完成...\n","source":"_posts/linux-study.md","raw":"---\ntitle: Linux日常使用总结\ndate: 2016-10-02 23:33:47\ntags: linux\ncomments: true\ncategories: \"linux\"\n---\n> 自己一直对linux充满好奇，这次换了新的工作后，由于使用Mac OS和linux，所以国庆回来，给自己的电脑装了ubuntu来熟悉linux。在安装完成后遇到一些问题，经过谷歌都一一解决了，写这篇博文分享给大家。\n\n<!--more-->\n\n## 1．设置获取root权限\n\n```c\nsudo passwd root //设置root密码\n```\n\n然后输入当前系统账户的密码并设置新的UNIX密码，密码更新成功后在终端输入`su`然后输入刚刚设置好的新的UNIX密码，即可进入root权限，如果想退出，输入`exit`。\n\n\n## ２．在linux下如何安装shadowsocks\n\n因为自己是搞开发的，而且非常喜欢谷歌，所以就需要一个自由的网络环境，博主用的是shadowsocks，在windows下，有客户端，但是现在装了linux，既然装了linux，能用命令行搞定的就尽量用命令行，所以我选择在终端安装shadowsocks客户端，步骤如下：\n\n#### 安装shadowsocks客户端\n\n```c\nsudo apt-get update \nsudo apt-get install python-gevent python-pip\npip install shadowsocks\n```\n\n#### 建立配置文件\n\n打开终端，运行`vim /etc/ss.json`，然后写入json\n\n```json\n{\n\t\"server\" : \"you server\",\n\t\"server_port\" : 0000,\n\t\"local_address\" : \"127.0.0.1\",\n\t\"local_port\" : 1080,\n\t\"password\" : \"you password\",\n\t\"method\" : \"aes-256-cfb\",   //shadowsocks的加密方式\n\t\"fast_open\" : false\n}\n```\n\n#### 开启shadowsocks\n\n```c\nsslocal -c /etc/ss.json\n\n// 开启后显示以下内容，代表开启成功：\n// INFO  loading libcrypto from libcrypto.so.1.0.0\n// INFO  starting local at 127.0.0.1:1080\n```\n#### 设置开机启动\n\n```c\n// 打开图形化开机启动项管理界面\ngnome-session-properties\n// 添加(Add) -> 名称(name)和描述(comment)随便填，命令(Command)填写如下： \nsslocal -c /etc/ss.json\n```\n\n#### 火狐浏览器配置\n\n设置→首选项→高级→网络→链接→设置→手动配置代理→socks主机：127.0.0.1 端口：1080→确定\n\n#### chrome配置\n\n在终端中输入如下命令：\n\n```c\nchromium-browser --proxy-server=socks5://127.0.0.1:1080\n```\n\n进入后安装SwitchyOmega，然后配置此插件：\n\n情景模式→删除原有的情景模式，新建情景模式（原有的情景模式无socks代理）→手动配置→SOCKS代理：127.0.0.1 端口1080→保存 →ok\n\n##### note:\n\n我在这里运行这个命令后依然无法进入，不清楚是怎么回事儿，所以我直接找了个host进行了替换，关于host，我推荐[老d博客中提供的](https://laod.cn/hosts/2016-google-hosts.html)，具体用法他博客中有写。然后才进入的应用商店下载好。\n\n## ３．安装相应的软件\n\n#### 安装Gdebi软件包安装程序\n\n在ubuntu中有自己的软件中心，但是有些软件在里面找不到，需要自己去官网下载客户端然后安装（比如网易云音乐，搜狗拼音等），下载好的安装包大部分都是`.deb`文件，查阅了需要资料，安装这个用`gdebi`比较方便，在软件中心搜索`Gdebi软件包安装程序`安装就好，但是，既然用linux了，就用一下它强大的终端，所以我说一下在终端如何安装\n\n在终端输入\n\n```c\nsudo apt-get install gdebi\n```\n\n但是我在这里输入后，提示我缺少相应的依赖，并让我运行\n\n```c\nsudo apt-get install -f\n```\n\n运行完成这个命令后，相应的依赖就被安装好了，这里的这个命令主要是修复依赖关系（depends）的命令，之后重新运行`sudo apt-get install gdebi`即可。\n\n#### 安装对应的软件\n\n在安装完成这个后，安装软件就方便很多，我比如安装chrome浏览器，直接进入下载好文件的目录，运行\n\n```c\nsudo gdebi chrome.deb //这里是你要安装包的名字\n```\n\n完成后去搜索即可。<font color='red'>在安装时候我发现有的软件在安装完成后需要重启下电脑才会有。</font>\n\n#### 卸载apt-get安装的东西\n\n有时候需要卸载一些`apt-get`安装的东西，需要命令为\n\n```c\nsudo apt-get remove XXX //XXX为要卸载的东西\n```\n\n#### 安装node\n\n做前端开发，node是必不可少的，所以需要安装一下，在windows下都是直接下载安装包安装，我本来也在linux下下了个安装包安装了，但是查了一下发现用nvm安装node的比较多，而且那天在公司老大也说在mac下推荐使用nvm安装，所以自己决定试下。\n\n##### 1.安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：\n\n```c\nnpm ls -g --depth=0 //查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装\nsudo rm -rf /usr/local/lib/node_modules //删除全局 node_modules 目录\nsudo rm /usr/local/bin/node //删除 node\ncd  /usr/local/bin && ls -l | grep \"../lib/node_modules/\" | awk '{print $9}'| xargs rm //删除全局 node 模块注册的软链\n```\n\n话说最后一条命令运行会报rm使用错误，不知道怎么弄...\n\n##### 2.安装[nvm](https://github.com/creationix/nvm)\n\n运行以下两条命令之一\n\n```c\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash\n//or\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash\n```\n\n然后进入(~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc)这些文件，看哪个文件有，在最后一行添加.\n\n```c\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n这里如果不太会改这个的话，可以设置终端从而达到效果，在终端打开`编辑→配置文件首选项→命令`中勾选`以登录shell方式运行命令`。在ubuntu中没有`执行命令时更新登录登录记录`，如果有，一起勾选，然后在终端输入\n\n```c\nnvm\n```\n\n即可看到帮助，之后运行\n\n```c\nnvm install node\n```\n\n就可以安装到最新版本的node，更多关于nvm的用法可参考[node版本管理工具nvm-Mac下安装及使用](https://segmentfault.com/a/1190000004404505)\n\n至此，linux下常用的软件就安装完成...\n","slug":"linux-study","published":1,"updated":"2016-10-08T06:26:38.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobk001zzrv4l3kedorh","content":"<blockquote>\n<p>自己一直对linux充满好奇，这次换了新的工作后，由于使用Mac OS和linux，所以国庆回来，给自己的电脑装了ubuntu来熟悉linux。在安装完成后遇到一些问题，经过谷歌都一一解决了，写这篇博文分享给大家。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"1．设置获取root权限\"><a href=\"#1．设置获取root权限\" class=\"headerlink\" title=\"1．设置获取root权限\"></a>1．设置获取root权限</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo passwd root <span class=\"comment\">//设置root密码</span></span><br></pre></td></tr></table></figure>\n<p>然后输入当前系统账户的密码并设置新的UNIX密码，密码更新成功后在终端输入<code>su</code>然后输入刚刚设置好的新的UNIX密码，即可进入root权限，如果想退出，输入<code>exit</code>。</p>\n<h2 id=\"２．在linux下如何安装shadowsocks\"><a href=\"#２．在linux下如何安装shadowsocks\" class=\"headerlink\" title=\"２．在linux下如何安装shadowsocks\"></a>２．在linux下如何安装shadowsocks</h2><p>因为自己是搞开发的，而且非常喜欢谷歌，所以就需要一个自由的网络环境，博主用的是shadowsocks，在windows下，有客户端，但是现在装了linux，既然装了linux，能用命令行搞定的就尽量用命令行，所以我选择在终端安装shadowsocks客户端，步骤如下：</p>\n<h4 id=\"安装shadowsocks客户端\"><a href=\"#安装shadowsocks客户端\" class=\"headerlink\" title=\"安装shadowsocks客户端\"></a>安装shadowsocks客户端</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update </span><br><span class=\"line\">sudo apt-get install python-gevent python-pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h4 id=\"建立配置文件\"><a href=\"#建立配置文件\" class=\"headerlink\" title=\"建立配置文件\"></a>建立配置文件</h4><p>打开终端，运行<code>vim /etc/ss.json</code>，然后写入json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"server\"</span> : <span class=\"string\">\"you server\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"server_port\"</span> : <span class=\"number\">0000</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_address\"</span> : <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_port\"</span> : <span class=\"number\">1080</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"password\"</span> : <span class=\"string\">\"you password\"</span>,</span><br><span class=\"line\">\t\"method\" : \"aes-256-cfb\",   //shadowsocks的加密方式</span><br><span class=\"line\">\t\"fast_open\" : false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"开启shadowsocks\"><a href=\"#开启shadowsocks\" class=\"headerlink\" title=\"开启shadowsocks\"></a>开启shadowsocks</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sslocal -c /etc/ss.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启后显示以下内容，代表开启成功：</span></span><br><span class=\"line\"><span class=\"comment\">// INFO  loading libcrypto from libcrypto.so.1.0.0</span></span><br><span class=\"line\"><span class=\"comment\">// INFO  starting local at 127.0.0.1:1080</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"设置开机启动\"><a href=\"#设置开机启动\" class=\"headerlink\" title=\"设置开机启动\"></a>设置开机启动</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打开图形化开机启动项管理界面</span></span><br><span class=\"line\">gnome-session-properties</span><br><span class=\"line\"><span class=\"comment\">// 添加(Add) -&gt; 名称(name)和描述(comment)随便填，命令(Command)填写如下： </span></span><br><span class=\"line\">sslocal -c /etc/ss.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"火狐浏览器配置\"><a href=\"#火狐浏览器配置\" class=\"headerlink\" title=\"火狐浏览器配置\"></a>火狐浏览器配置</h4><p>设置→首选项→高级→网络→链接→设置→手动配置代理→socks主机：127.0.0.1 端口：1080→确定</p>\n<h4 id=\"chrome配置\"><a href=\"#chrome配置\" class=\"headerlink\" title=\"chrome配置\"></a>chrome配置</h4><p>在终端中输入如下命令：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chromium-browser --proxy-server=socks5:<span class=\"comment\">//127.0.0.1:1080</span></span><br></pre></td></tr></table></figure>\n<p>进入后安装SwitchyOmega，然后配置此插件：</p>\n<p>情景模式→删除原有的情景模式，新建情景模式（原有的情景模式无socks代理）→手动配置→SOCKS代理：127.0.0.1 端口1080→保存 →ok</p>\n<h5 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note:\"></a>note:</h5><p>我在这里运行这个命令后依然无法进入，不清楚是怎么回事儿，所以我直接找了个host进行了替换，关于host，我推荐<a href=\"https://laod.cn/hosts/2016-google-hosts.html\" target=\"_blank\" rel=\"noopener\">老d博客中提供的</a>，具体用法他博客中有写。然后才进入的应用商店下载好。</p>\n<h2 id=\"３．安装相应的软件\"><a href=\"#３．安装相应的软件\" class=\"headerlink\" title=\"３．安装相应的软件\"></a>３．安装相应的软件</h2><h4 id=\"安装Gdebi软件包安装程序\"><a href=\"#安装Gdebi软件包安装程序\" class=\"headerlink\" title=\"安装Gdebi软件包安装程序\"></a>安装Gdebi软件包安装程序</h4><p>在ubuntu中有自己的软件中心，但是有些软件在里面找不到，需要自己去官网下载客户端然后安装（比如网易云音乐，搜狗拼音等），下载好的安装包大部分都是<code>.deb</code>文件，查阅了需要资料，安装这个用<code>gdebi</code>比较方便，在软件中心搜索<code>Gdebi软件包安装程序</code>安装就好，但是，既然用linux了，就用一下它强大的终端，所以我说一下在终端如何安装</p>\n<p>在终端输入</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gdebi</span><br></pre></td></tr></table></figure>\n<p>但是我在这里输入后，提示我缺少相应的依赖，并让我运行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -f</span><br></pre></td></tr></table></figure>\n<p>运行完成这个命令后，相应的依赖就被安装好了，这里的这个命令主要是修复依赖关系（depends）的命令，之后重新运行<code>sudo apt-get install gdebi</code>即可。</p>\n<h4 id=\"安装对应的软件\"><a href=\"#安装对应的软件\" class=\"headerlink\" title=\"安装对应的软件\"></a>安装对应的软件</h4><p>在安装完成这个后，安装软件就方便很多，我比如安装chrome浏览器，直接进入下载好文件的目录，运行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gdebi chrome.deb <span class=\"comment\">//这里是你要安装包的名字</span></span><br></pre></td></tr></table></figure>\n<p>完成后去搜索即可。<font color=\"red\">在安装时候我发现有的软件在安装完成后需要重启下电脑才会有。</font></p>\n<h4 id=\"卸载apt-get安装的东西\"><a href=\"#卸载apt-get安装的东西\" class=\"headerlink\" title=\"卸载apt-get安装的东西\"></a>卸载apt-get安装的东西</h4><p>有时候需要卸载一些<code>apt-get</code>安装的东西，需要命令为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove XXX <span class=\"comment\">//XXX为要卸载的东西</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h4><p>做前端开发，node是必不可少的，所以需要安装一下，在windows下都是直接下载安装包安装，我本来也在linux下下了个安装包安装了，但是查了一下发现用nvm安装node的比较多，而且那天在公司老大也说在mac下推荐使用nvm安装，所以自己决定试下。</p>\n<h5 id=\"1-安装-nvm-之后最好先删除下已安装的-node-和全局-node-模块：\"><a href=\"#1-安装-nvm-之后最好先删除下已安装的-node-和全局-node-模块：\" class=\"headerlink\" title=\"1.安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：\"></a>1.安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ls -g --depth=<span class=\"number\">0</span> <span class=\"comment\">//查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</span></span><br><span class=\"line\">sudo rm -rf /usr/local/lib/node_modules <span class=\"comment\">//删除全局 node_modules 目录</span></span><br><span class=\"line\">sudo rm /usr/local/bin/node <span class=\"comment\">//删除 node</span></span><br><span class=\"line\">cd  /usr/local/bin &amp;&amp; ls -l | grep \"../lib/node_modules/\" | awk '&#123;print $9&#125;'| xargs rm //删除全局 node 模块注册的软链</span><br></pre></td></tr></table></figure>\n<p>话说最后一条命令运行会报rm使用错误，不知道怎么弄…</p>\n<h5 id=\"2-安装nvm\"><a href=\"#2-安装nvm\" class=\"headerlink\" title=\"2.安装nvm\"></a>2.安装<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a></h5><p>运行以下两条命令之一</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https:<span class=\"comment\">//raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash</span></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">wget -qO- https:<span class=\"comment\">//raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash</span></span><br></pre></td></tr></table></figure>\n<p>然后进入(~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc)这些文件，看哪个文件有，在最后一行添加.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> NVM_DIR=<span class=\"string\">\"$HOME/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"$NVM_DIR/nvm.sh\"</span> ] &amp;&amp; . <span class=\"string\">\"$NVM_DIR/nvm.sh\"</span> # This loads nvm</span><br></pre></td></tr></table></figure>\n<p>这里如果不太会改这个的话，可以设置终端从而达到效果，在终端打开<code>编辑→配置文件首选项→命令</code>中勾选<code>以登录shell方式运行命令</code>。在ubuntu中没有<code>执行命令时更新登录登录记录</code>，如果有，一起勾选，然后在终端输入</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm</span><br></pre></td></tr></table></figure>\n<p>即可看到帮助，之后运行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install node</span><br></pre></td></tr></table></figure>\n<p>就可以安装到最新版本的node，更多关于nvm的用法可参考<a href=\"https://segmentfault.com/a/1190000004404505\" target=\"_blank\" rel=\"noopener\">node版本管理工具nvm-Mac下安装及使用</a></p>\n<p>至此，linux下常用的软件就安装完成…</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>自己一直对linux充满好奇，这次换了新的工作后，由于使用Mac OS和linux，所以国庆回来，给自己的电脑装了ubuntu来熟悉linux。在安装完成后遇到一些问题，经过谷歌都一一解决了，写这篇博文分享给大家。</p>\n</blockquote>","more":"<h2 id=\"1．设置获取root权限\"><a href=\"#1．设置获取root权限\" class=\"headerlink\" title=\"1．设置获取root权限\"></a>1．设置获取root权限</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo passwd root <span class=\"comment\">//设置root密码</span></span><br></pre></td></tr></table></figure>\n<p>然后输入当前系统账户的密码并设置新的UNIX密码，密码更新成功后在终端输入<code>su</code>然后输入刚刚设置好的新的UNIX密码，即可进入root权限，如果想退出，输入<code>exit</code>。</p>\n<h2 id=\"２．在linux下如何安装shadowsocks\"><a href=\"#２．在linux下如何安装shadowsocks\" class=\"headerlink\" title=\"２．在linux下如何安装shadowsocks\"></a>２．在linux下如何安装shadowsocks</h2><p>因为自己是搞开发的，而且非常喜欢谷歌，所以就需要一个自由的网络环境，博主用的是shadowsocks，在windows下，有客户端，但是现在装了linux，既然装了linux，能用命令行搞定的就尽量用命令行，所以我选择在终端安装shadowsocks客户端，步骤如下：</p>\n<h4 id=\"安装shadowsocks客户端\"><a href=\"#安装shadowsocks客户端\" class=\"headerlink\" title=\"安装shadowsocks客户端\"></a>安装shadowsocks客户端</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update </span><br><span class=\"line\">sudo apt-get install python-gevent python-pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h4 id=\"建立配置文件\"><a href=\"#建立配置文件\" class=\"headerlink\" title=\"建立配置文件\"></a>建立配置文件</h4><p>打开终端，运行<code>vim /etc/ss.json</code>，然后写入json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"server\"</span> : <span class=\"string\">\"you server\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"server_port\"</span> : <span class=\"number\">0000</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_address\"</span> : <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_port\"</span> : <span class=\"number\">1080</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"password\"</span> : <span class=\"string\">\"you password\"</span>,</span><br><span class=\"line\">\t\"method\" : \"aes-256-cfb\",   //shadowsocks的加密方式</span><br><span class=\"line\">\t\"fast_open\" : false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"开启shadowsocks\"><a href=\"#开启shadowsocks\" class=\"headerlink\" title=\"开启shadowsocks\"></a>开启shadowsocks</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sslocal -c /etc/ss.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开启后显示以下内容，代表开启成功：</span></span><br><span class=\"line\"><span class=\"comment\">// INFO  loading libcrypto from libcrypto.so.1.0.0</span></span><br><span class=\"line\"><span class=\"comment\">// INFO  starting local at 127.0.0.1:1080</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"设置开机启动\"><a href=\"#设置开机启动\" class=\"headerlink\" title=\"设置开机启动\"></a>设置开机启动</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打开图形化开机启动项管理界面</span></span><br><span class=\"line\">gnome-session-properties</span><br><span class=\"line\"><span class=\"comment\">// 添加(Add) -&gt; 名称(name)和描述(comment)随便填，命令(Command)填写如下： </span></span><br><span class=\"line\">sslocal -c /etc/ss.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"火狐浏览器配置\"><a href=\"#火狐浏览器配置\" class=\"headerlink\" title=\"火狐浏览器配置\"></a>火狐浏览器配置</h4><p>设置→首选项→高级→网络→链接→设置→手动配置代理→socks主机：127.0.0.1 端口：1080→确定</p>\n<h4 id=\"chrome配置\"><a href=\"#chrome配置\" class=\"headerlink\" title=\"chrome配置\"></a>chrome配置</h4><p>在终端中输入如下命令：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chromium-browser --proxy-server=socks5:<span class=\"comment\">//127.0.0.1:1080</span></span><br></pre></td></tr></table></figure>\n<p>进入后安装SwitchyOmega，然后配置此插件：</p>\n<p>情景模式→删除原有的情景模式，新建情景模式（原有的情景模式无socks代理）→手动配置→SOCKS代理：127.0.0.1 端口1080→保存 →ok</p>\n<h5 id=\"note\"><a href=\"#note\" class=\"headerlink\" title=\"note:\"></a>note:</h5><p>我在这里运行这个命令后依然无法进入，不清楚是怎么回事儿，所以我直接找了个host进行了替换，关于host，我推荐<a href=\"https://laod.cn/hosts/2016-google-hosts.html\" target=\"_blank\" rel=\"noopener\">老d博客中提供的</a>，具体用法他博客中有写。然后才进入的应用商店下载好。</p>\n<h2 id=\"３．安装相应的软件\"><a href=\"#３．安装相应的软件\" class=\"headerlink\" title=\"３．安装相应的软件\"></a>３．安装相应的软件</h2><h4 id=\"安装Gdebi软件包安装程序\"><a href=\"#安装Gdebi软件包安装程序\" class=\"headerlink\" title=\"安装Gdebi软件包安装程序\"></a>安装Gdebi软件包安装程序</h4><p>在ubuntu中有自己的软件中心，但是有些软件在里面找不到，需要自己去官网下载客户端然后安装（比如网易云音乐，搜狗拼音等），下载好的安装包大部分都是<code>.deb</code>文件，查阅了需要资料，安装这个用<code>gdebi</code>比较方便，在软件中心搜索<code>Gdebi软件包安装程序</code>安装就好，但是，既然用linux了，就用一下它强大的终端，所以我说一下在终端如何安装</p>\n<p>在终端输入</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gdebi</span><br></pre></td></tr></table></figure>\n<p>但是我在这里输入后，提示我缺少相应的依赖，并让我运行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -f</span><br></pre></td></tr></table></figure>\n<p>运行完成这个命令后，相应的依赖就被安装好了，这里的这个命令主要是修复依赖关系（depends）的命令，之后重新运行<code>sudo apt-get install gdebi</code>即可。</p>\n<h4 id=\"安装对应的软件\"><a href=\"#安装对应的软件\" class=\"headerlink\" title=\"安装对应的软件\"></a>安装对应的软件</h4><p>在安装完成这个后，安装软件就方便很多，我比如安装chrome浏览器，直接进入下载好文件的目录，运行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gdebi chrome.deb <span class=\"comment\">//这里是你要安装包的名字</span></span><br></pre></td></tr></table></figure>\n<p>完成后去搜索即可。<font color=\"red\">在安装时候我发现有的软件在安装完成后需要重启下电脑才会有。</font></p>\n<h4 id=\"卸载apt-get安装的东西\"><a href=\"#卸载apt-get安装的东西\" class=\"headerlink\" title=\"卸载apt-get安装的东西\"></a>卸载apt-get安装的东西</h4><p>有时候需要卸载一些<code>apt-get</code>安装的东西，需要命令为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove XXX <span class=\"comment\">//XXX为要卸载的东西</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h4><p>做前端开发，node是必不可少的，所以需要安装一下，在windows下都是直接下载安装包安装，我本来也在linux下下了个安装包安装了，但是查了一下发现用nvm安装node的比较多，而且那天在公司老大也说在mac下推荐使用nvm安装，所以自己决定试下。</p>\n<h5 id=\"1-安装-nvm-之后最好先删除下已安装的-node-和全局-node-模块：\"><a href=\"#1-安装-nvm-之后最好先删除下已安装的-node-和全局-node-模块：\" class=\"headerlink\" title=\"1.安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：\"></a>1.安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ls -g --depth=<span class=\"number\">0</span> <span class=\"comment\">//查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</span></span><br><span class=\"line\">sudo rm -rf /usr/local/lib/node_modules <span class=\"comment\">//删除全局 node_modules 目录</span></span><br><span class=\"line\">sudo rm /usr/local/bin/node <span class=\"comment\">//删除 node</span></span><br><span class=\"line\">cd  /usr/local/bin &amp;&amp; ls -l | grep \"../lib/node_modules/\" | awk '&#123;print $9&#125;'| xargs rm //删除全局 node 模块注册的软链</span><br></pre></td></tr></table></figure>\n<p>话说最后一条命令运行会报rm使用错误，不知道怎么弄…</p>\n<h5 id=\"2-安装nvm\"><a href=\"#2-安装nvm\" class=\"headerlink\" title=\"2.安装nvm\"></a>2.安装<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a></h5><p>运行以下两条命令之一</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https:<span class=\"comment\">//raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash</span></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">wget -qO- https:<span class=\"comment\">//raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash</span></span><br></pre></td></tr></table></figure>\n<p>然后进入(~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc)这些文件，看哪个文件有，在最后一行添加.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> NVM_DIR=<span class=\"string\">\"$HOME/.nvm\"</span></span><br><span class=\"line\">[ -s <span class=\"string\">\"$NVM_DIR/nvm.sh\"</span> ] &amp;&amp; . <span class=\"string\">\"$NVM_DIR/nvm.sh\"</span> # This loads nvm</span><br></pre></td></tr></table></figure>\n<p>这里如果不太会改这个的话，可以设置终端从而达到效果，在终端打开<code>编辑→配置文件首选项→命令</code>中勾选<code>以登录shell方式运行命令</code>。在ubuntu中没有<code>执行命令时更新登录登录记录</code>，如果有，一起勾选，然后在终端输入</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm</span><br></pre></td></tr></table></figure>\n<p>即可看到帮助，之后运行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install node</span><br></pre></td></tr></table></figure>\n<p>就可以安装到最新版本的node，更多关于nvm的用法可参考<a href=\"https://segmentfault.com/a/1190000004404505\" target=\"_blank\" rel=\"noopener\">node版本管理工具nvm-Mac下安装及使用</a></p>\n<p>至此，linux下常用的软件就安装完成…</p>"},{"title":"MAF项目总结","date":"2018-01-14T12:22:59.000Z","comments":1,"_content":">做了一个多月的售后服务APP在昨天终于上线，期间出现各种问题，反思总结一下，以备后续做项目时候优化流程，更快更好的开发。\n\n<!--more-->\n\n## 团队\n\n### 沟通问题\n\n由于参与开发的前端对后端业务并不是很熟悉，而产品跟后端本身对业务流程存在分歧，所以导致在前端开发过程中，前端根据产品的原型做出页面，在跟后端对接口的时候发现有些数据是给不到的，有些业务流程不是像产品说的那样的，最后，在开始开发一周多后，项目的产品，前端，后端一起开会，共同对了一下关于页面的业务逻辑，数据接口以及可行性！从而导致开发效率很低，很多逻辑/原型图改来改去，接口对来对去。\n\n### 解决\n\n让**所有**参与开发的前端人员参与和产品的会议，如果涉及到后端业务，要和后端一起，在会上确定好业务流程和交互逻辑，从而保证在开发过程中，所有开发人员都对业务有一定的了解。在开发人员充分了解业务和交互的难易程度后再评估工期可能相对更接近实际。\n\n### 团队合作开发问题\n\n#### 交互不统一\n\n开发过程中发现的另一个问题就是大家对有些交互不统一，导致一些细节的问题，其中比较明显的就是在调取扫码的时候要跳转还是在当前页面直接渲染（其实直接跳转新页面更好），但是当做完后发现有的是跳转新页面，有的是在当前页面直接渲染，这导致交互的不统一！\n\n#### 数据结构不统一\n\n项目使用React Native开发，使用Redux管理数据，但是关于在Action和Reducer中应该写什么（比如数据处理放在reducer还是action中）可能会有差异，导致代码并不是很统一，从而导致可维护性下降。\n\n还有一点就是可能需要统一代码中的命名规范，保证代码的统一性\n\n### 解决\n\n#### 统一交互\n\n在开始项目之前前端开发人员应该一起讨论一下页面中的交互逻辑，查找是否有不同人做的相同的交互，一定要保证页面交互的统一性！\n\n#### 定规范\n\n关于Redux中Action和Reducer，应该怎写更合适，要定一个统一的标准，从而保证代码的统一！\n\n## 自己\n\n在开发过程中，也发现了一些自己开发流程上问题，需要更改\n\n1. 总是一拿到原型就开发，并没有先看看，交互是否合理，哪里不明白，这会导致开发了一部分，甚至已经做完了，才会发现这里好像不太合理，然后去改，这样导致工期加长\n2. 在做另一个APP的时候，后端那边少了一个接口，我这边没有发现，这也可能导致工期加长\n\n所以针对以上两个问题总结以后的工作流程：\n\n1. 开发之前要先充分理解原型上的交互逻辑，并考虑交互的合理性\n2. 在对接接口的时候要根据原型图一个个对接，防止遗漏\n\n## 结语\n\n总结上面所提到的，对于自己来说需要做以下几点：\n\n1. 如果自己参与该项目，要积极主动跟产品，后端沟通，如果有必要，可以让产品组织开发一起开会，对一下需求\n2. 积极组织团队成员根据原型对一下交互，看哪里有相同的要统一\n3. 总结一份关于React，Redux的规范的草稿放在GitHub上，然后跟团队成员一起讨论规范的合理性，随时修改\n4. 优化自己的开发流程，先看原型再开发 / 对接口，防止出错","source":"_posts/maf.md","raw":"---\ntitle: MAF项目总结\ndate: 2018-01-14 20:22:59\ntags: \"项目总结\"\ncomments: true\ncategories: \"总结\"\n---\n>做了一个多月的售后服务APP在昨天终于上线，期间出现各种问题，反思总结一下，以备后续做项目时候优化流程，更快更好的开发。\n\n<!--more-->\n\n## 团队\n\n### 沟通问题\n\n由于参与开发的前端对后端业务并不是很熟悉，而产品跟后端本身对业务流程存在分歧，所以导致在前端开发过程中，前端根据产品的原型做出页面，在跟后端对接口的时候发现有些数据是给不到的，有些业务流程不是像产品说的那样的，最后，在开始开发一周多后，项目的产品，前端，后端一起开会，共同对了一下关于页面的业务逻辑，数据接口以及可行性！从而导致开发效率很低，很多逻辑/原型图改来改去，接口对来对去。\n\n### 解决\n\n让**所有**参与开发的前端人员参与和产品的会议，如果涉及到后端业务，要和后端一起，在会上确定好业务流程和交互逻辑，从而保证在开发过程中，所有开发人员都对业务有一定的了解。在开发人员充分了解业务和交互的难易程度后再评估工期可能相对更接近实际。\n\n### 团队合作开发问题\n\n#### 交互不统一\n\n开发过程中发现的另一个问题就是大家对有些交互不统一，导致一些细节的问题，其中比较明显的就是在调取扫码的时候要跳转还是在当前页面直接渲染（其实直接跳转新页面更好），但是当做完后发现有的是跳转新页面，有的是在当前页面直接渲染，这导致交互的不统一！\n\n#### 数据结构不统一\n\n项目使用React Native开发，使用Redux管理数据，但是关于在Action和Reducer中应该写什么（比如数据处理放在reducer还是action中）可能会有差异，导致代码并不是很统一，从而导致可维护性下降。\n\n还有一点就是可能需要统一代码中的命名规范，保证代码的统一性\n\n### 解决\n\n#### 统一交互\n\n在开始项目之前前端开发人员应该一起讨论一下页面中的交互逻辑，查找是否有不同人做的相同的交互，一定要保证页面交互的统一性！\n\n#### 定规范\n\n关于Redux中Action和Reducer，应该怎写更合适，要定一个统一的标准，从而保证代码的统一！\n\n## 自己\n\n在开发过程中，也发现了一些自己开发流程上问题，需要更改\n\n1. 总是一拿到原型就开发，并没有先看看，交互是否合理，哪里不明白，这会导致开发了一部分，甚至已经做完了，才会发现这里好像不太合理，然后去改，这样导致工期加长\n2. 在做另一个APP的时候，后端那边少了一个接口，我这边没有发现，这也可能导致工期加长\n\n所以针对以上两个问题总结以后的工作流程：\n\n1. 开发之前要先充分理解原型上的交互逻辑，并考虑交互的合理性\n2. 在对接接口的时候要根据原型图一个个对接，防止遗漏\n\n## 结语\n\n总结上面所提到的，对于自己来说需要做以下几点：\n\n1. 如果自己参与该项目，要积极主动跟产品，后端沟通，如果有必要，可以让产品组织开发一起开会，对一下需求\n2. 积极组织团队成员根据原型对一下交互，看哪里有相同的要统一\n3. 总结一份关于React，Redux的规范的草稿放在GitHub上，然后跟团队成员一起讨论规范的合理性，随时修改\n4. 优化自己的开发流程，先看原型再开发 / 对接口，防止出错","slug":"maf","published":1,"updated":"2018-04-13T02:51:31.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobm0024zrv45c4v2jr5","content":"<blockquote>\n<p>做了一个多月的售后服务APP在昨天终于上线，期间出现各种问题，反思总结一下，以备后续做项目时候优化流程，更快更好的开发。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"团队\"><a href=\"#团队\" class=\"headerlink\" title=\"团队\"></a>团队</h2><h3 id=\"沟通问题\"><a href=\"#沟通问题\" class=\"headerlink\" title=\"沟通问题\"></a>沟通问题</h3><p>由于参与开发的前端对后端业务并不是很熟悉，而产品跟后端本身对业务流程存在分歧，所以导致在前端开发过程中，前端根据产品的原型做出页面，在跟后端对接口的时候发现有些数据是给不到的，有些业务流程不是像产品说的那样的，最后，在开始开发一周多后，项目的产品，前端，后端一起开会，共同对了一下关于页面的业务逻辑，数据接口以及可行性！从而导致开发效率很低，很多逻辑/原型图改来改去，接口对来对去。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>让<strong>所有</strong>参与开发的前端人员参与和产品的会议，如果涉及到后端业务，要和后端一起，在会上确定好业务流程和交互逻辑，从而保证在开发过程中，所有开发人员都对业务有一定的了解。在开发人员充分了解业务和交互的难易程度后再评估工期可能相对更接近实际。</p>\n<h3 id=\"团队合作开发问题\"><a href=\"#团队合作开发问题\" class=\"headerlink\" title=\"团队合作开发问题\"></a>团队合作开发问题</h3><h4 id=\"交互不统一\"><a href=\"#交互不统一\" class=\"headerlink\" title=\"交互不统一\"></a>交互不统一</h4><p>开发过程中发现的另一个问题就是大家对有些交互不统一，导致一些细节的问题，其中比较明显的就是在调取扫码的时候要跳转还是在当前页面直接渲染（其实直接跳转新页面更好），但是当做完后发现有的是跳转新页面，有的是在当前页面直接渲染，这导致交互的不统一！</p>\n<h4 id=\"数据结构不统一\"><a href=\"#数据结构不统一\" class=\"headerlink\" title=\"数据结构不统一\"></a>数据结构不统一</h4><p>项目使用React Native开发，使用Redux管理数据，但是关于在Action和Reducer中应该写什么（比如数据处理放在reducer还是action中）可能会有差异，导致代码并不是很统一，从而导致可维护性下降。</p>\n<p>还有一点就是可能需要统一代码中的命名规范，保证代码的统一性</p>\n<h3 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h3><h4 id=\"统一交互\"><a href=\"#统一交互\" class=\"headerlink\" title=\"统一交互\"></a>统一交互</h4><p>在开始项目之前前端开发人员应该一起讨论一下页面中的交互逻辑，查找是否有不同人做的相同的交互，一定要保证页面交互的统一性！</p>\n<h4 id=\"定规范\"><a href=\"#定规范\" class=\"headerlink\" title=\"定规范\"></a>定规范</h4><p>关于Redux中Action和Reducer，应该怎写更合适，要定一个统一的标准，从而保证代码的统一！</p>\n<h2 id=\"自己\"><a href=\"#自己\" class=\"headerlink\" title=\"自己\"></a>自己</h2><p>在开发过程中，也发现了一些自己开发流程上问题，需要更改</p>\n<ol>\n<li>总是一拿到原型就开发，并没有先看看，交互是否合理，哪里不明白，这会导致开发了一部分，甚至已经做完了，才会发现这里好像不太合理，然后去改，这样导致工期加长</li>\n<li>在做另一个APP的时候，后端那边少了一个接口，我这边没有发现，这也可能导致工期加长</li>\n</ol>\n<p>所以针对以上两个问题总结以后的工作流程：</p>\n<ol>\n<li>开发之前要先充分理解原型上的交互逻辑，并考虑交互的合理性</li>\n<li>在对接接口的时候要根据原型图一个个对接，防止遗漏</li>\n</ol>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>总结上面所提到的，对于自己来说需要做以下几点：</p>\n<ol>\n<li>如果自己参与该项目，要积极主动跟产品，后端沟通，如果有必要，可以让产品组织开发一起开会，对一下需求</li>\n<li>积极组织团队成员根据原型对一下交互，看哪里有相同的要统一</li>\n<li>总结一份关于React，Redux的规范的草稿放在GitHub上，然后跟团队成员一起讨论规范的合理性，随时修改</li>\n<li>优化自己的开发流程，先看原型再开发 / 对接口，防止出错</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>做了一个多月的售后服务APP在昨天终于上线，期间出现各种问题，反思总结一下，以备后续做项目时候优化流程，更快更好的开发。</p>\n</blockquote>","more":"<h2 id=\"团队\"><a href=\"#团队\" class=\"headerlink\" title=\"团队\"></a>团队</h2><h3 id=\"沟通问题\"><a href=\"#沟通问题\" class=\"headerlink\" title=\"沟通问题\"></a>沟通问题</h3><p>由于参与开发的前端对后端业务并不是很熟悉，而产品跟后端本身对业务流程存在分歧，所以导致在前端开发过程中，前端根据产品的原型做出页面，在跟后端对接口的时候发现有些数据是给不到的，有些业务流程不是像产品说的那样的，最后，在开始开发一周多后，项目的产品，前端，后端一起开会，共同对了一下关于页面的业务逻辑，数据接口以及可行性！从而导致开发效率很低，很多逻辑/原型图改来改去，接口对来对去。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>让<strong>所有</strong>参与开发的前端人员参与和产品的会议，如果涉及到后端业务，要和后端一起，在会上确定好业务流程和交互逻辑，从而保证在开发过程中，所有开发人员都对业务有一定的了解。在开发人员充分了解业务和交互的难易程度后再评估工期可能相对更接近实际。</p>\n<h3 id=\"团队合作开发问题\"><a href=\"#团队合作开发问题\" class=\"headerlink\" title=\"团队合作开发问题\"></a>团队合作开发问题</h3><h4 id=\"交互不统一\"><a href=\"#交互不统一\" class=\"headerlink\" title=\"交互不统一\"></a>交互不统一</h4><p>开发过程中发现的另一个问题就是大家对有些交互不统一，导致一些细节的问题，其中比较明显的就是在调取扫码的时候要跳转还是在当前页面直接渲染（其实直接跳转新页面更好），但是当做完后发现有的是跳转新页面，有的是在当前页面直接渲染，这导致交互的不统一！</p>\n<h4 id=\"数据结构不统一\"><a href=\"#数据结构不统一\" class=\"headerlink\" title=\"数据结构不统一\"></a>数据结构不统一</h4><p>项目使用React Native开发，使用Redux管理数据，但是关于在Action和Reducer中应该写什么（比如数据处理放在reducer还是action中）可能会有差异，导致代码并不是很统一，从而导致可维护性下降。</p>\n<p>还有一点就是可能需要统一代码中的命名规范，保证代码的统一性</p>\n<h3 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h3><h4 id=\"统一交互\"><a href=\"#统一交互\" class=\"headerlink\" title=\"统一交互\"></a>统一交互</h4><p>在开始项目之前前端开发人员应该一起讨论一下页面中的交互逻辑，查找是否有不同人做的相同的交互，一定要保证页面交互的统一性！</p>\n<h4 id=\"定规范\"><a href=\"#定规范\" class=\"headerlink\" title=\"定规范\"></a>定规范</h4><p>关于Redux中Action和Reducer，应该怎写更合适，要定一个统一的标准，从而保证代码的统一！</p>\n<h2 id=\"自己\"><a href=\"#自己\" class=\"headerlink\" title=\"自己\"></a>自己</h2><p>在开发过程中，也发现了一些自己开发流程上问题，需要更改</p>\n<ol>\n<li>总是一拿到原型就开发，并没有先看看，交互是否合理，哪里不明白，这会导致开发了一部分，甚至已经做完了，才会发现这里好像不太合理，然后去改，这样导致工期加长</li>\n<li>在做另一个APP的时候，后端那边少了一个接口，我这边没有发现，这也可能导致工期加长</li>\n</ol>\n<p>所以针对以上两个问题总结以后的工作流程：</p>\n<ol>\n<li>开发之前要先充分理解原型上的交互逻辑，并考虑交互的合理性</li>\n<li>在对接接口的时候要根据原型图一个个对接，防止遗漏</li>\n</ol>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>总结上面所提到的，对于自己来说需要做以下几点：</p>\n<ol>\n<li>如果自己参与该项目，要积极主动跟产品，后端沟通，如果有必要，可以让产品组织开发一起开会，对一下需求</li>\n<li>积极组织团队成员根据原型对一下交互，看哪里有相同的要统一</li>\n<li>总结一份关于React，Redux的规范的草稿放在GitHub上，然后跟团队成员一起讨论规范的合理性，随时修改</li>\n<li>优化自己的开发流程，先看原型再开发 / 对接口，防止出错</li>\n</ol>"},{"title":"再见2017，你好2018","date":"2017-12-31T15:14:24.000Z","comments":1,"_content":">不知不觉中，2017年已经走到尾声，2018年马上要到来了，回想这一年，无论是工作还是生活都发生了很多变化，如果用一个字来总结2017，那么这个字就是“变”,这些事情让我有了更多的想法，这也让我对2018年有了期待。\n\n<!--more-->\n\n## 工作，技术\n\n2017年，自己所在的项目组发生了很大的变化，业务有所调整，所以自己的工作内容也发生了重大的变化。\n\n回看这一年的周报，可以很明显的看到，在2017年上半年，工作内容集中在海外业务，但是到了下半年，工作内容已经开始逐步转向平台业务系统，开始接触很多的好玩儿的技术，像react，react native，vue等等这些框架开始大量使用。业务量的增长，人员的增多，让我的思想开始发生转变。\n\n#### HOW ➡️ WHY\n\n之前，由于业务并不是那么多样化，业务量也不是那么多，所以使用的技术相对单一，自己之前虽然也有学一些新的东西，但是这些东西也仅仅停留在学习如何使用上面，而对于为什么要这么用，可能并不会想太多。\n\n原理的理解让我对那些经常使用的技术有了更深入的理解，如果不理解为什么这么写而仅仅只是知道需要这么写就很容易忘记，而且每次写的时候还需要看看官方demo，这可以说是自己的亲身体会吧。\n\n之前在做完一个react项目再做另一个的时候，我发现我还是需要看官方demo才能记得，那个`connect`怎么写，小括号，花括号怎么放，这让我很无语，这让我开始意识到我该学习一下为什么这里要这么写，所以自己该抽时间学习一下redux的原理，源码，在学习后，感觉写起来要顺利许多，这一点让我感触很深。\n\n还有一点，就是在使用那些新技术的时候，比如像vue，react的时候，最好不要一上来就全家桶，直接redux什么的一起上，最好还是有个渐进的过程，否则对于为什么需要这些库理解可能不会太深。之前做第一个项目的时候，交互虽然复杂，但是并没有用redux，这让我们在做项目的时候，遇到了很多回调，很深的传递，之后在项目中加入redux之后，才对为什么会有这些数据管理库有了更加深入的理解，我觉得这一点也是非常宝贵的，\n\n所以，我觉得今年关于技术思想上变化最大的，也是让我感触最深的是：\n\n1. 要知其然，也要知其所以然，而不是盲目的学完这个学那个，这样的最终结果就是哪个都不是很精，并没有太大用处。\n2. 在学习这些技术的同时要理解这些技术解决了开发中的哪些痛点，理解它们出现的原因，记得之前尤大也说过，vue是渐进式的框架，我觉得学习技术也要渐进式的学习，一个一个网上加，而不是搞大而全，这样才能理解更深入。\n\n#### 意识到团队的重要性，开始注重软实力\n\n之前，由于人员相对较少，所以很多时候，可能是怎么方便怎么来，并不会考虑自己写的这些东西别人用的会不会舒服，自己写的代码别人能不能看懂，但是随着人员的增多，项目的增大，大家合作的越来越多，自己有时候也会负责项目的搭建，自己可能会写一些公共的代码块儿在项目中使用，这些工作的出现让我开始意识到团队合作的重要性，自己弄的东西，如何方便他人的使用，一个项目如何搭建更利于后期维护。\n\n现在的前端发展非常快，各种新技术层出不穷，但是在我们忙着学习新东西的时候，我们是否考虑过自己的代码写的足够健壮，如何写让别人读起来更加舒服，技术在更新，各种框架在变化，但是这些软实力并没有因此而变得不重要，它们依旧是考量一个工程师是否优秀的标准之一。\n\n今年开始，自己开始学着如何让项目的可维护性更高，代码如何写，更加健壮，开始注重修炼内功了，但是这并不是那么简单几天几个月就可以学会的，而是一个长期的过程，年底时候考虑过自己写一份代码规范，相当于一个revew规范吧，如何写代码更加合适，但是由于年底工作的繁忙并没有实现这个，我想这个将会是2018年的要做的头一件事儿了。\n\n关于2017年一年在技术方面让我产生思考，并让我发生转变的的就这两方面了，2018年我将沿着这两方面继续走下去✌️\n\n## 生活\n\n2017年关于生活上的，2017年也发生了很多事儿，尤其是在后半年的一些事儿让我记忆深刻，甚至引发一些思考。\n\n#### 学习英语\n\n英语对于我这种技术人来说其实一直都很重要，因为经常会遇到阅读国外文章，文档的时候，所以英语好对于我来说是非常重要的，所以从2017年下半年开始，我开始再一次拿起英语，我觉得2018年，这也将是重中之重...\n\n#### 开始对金融投资感兴趣\n\n数字货币比特币在2017年底可以说是占尽了风头，在谷歌搜索排行榜达到第一，为什么会这样的呢？因为在2017年，数字货币像比特币，莱特币，以太坊等等可以说是疯长，比特币一路狂飙，一度达到每个十万人民币，要知道这家伙年初的时候也就几千一个，着就说说，如果你持有几十个比特币，基本上离财富自由就不远了。\n\n记得第一次听说比特币是在上大学时候，那时候虽然对这个东西好奇，但是因为是学生，也没什么钱，所以并没有投资这些，之后就渐渐的淡忘了，直到今年年底，新闻开始大量报道比特币疯狂上涨以及各种稀奇古怪的丢失比特币的新闻，比如国外有一哥们儿扔了个硬盘，里面有几千个比特币，找不回来了，估计这哥们儿会后悔一辈子吧，哈哈...\n\n还有就是看到同学开始学着理财，自己也开始尝试，但是只是买了些基金，而且因为不是很懂这些，所以也是在乱买，年底的时候感觉不能这么胡来，得系统学习下这些东西到底是怎么弄的。\n\n这两件事儿让我开始对金融投资产生了兴趣，我觉得2018年我将要认真学习关于金融的东西\n\n#### 参与线下活动\n\n2017年这一年，说实话，参与的活动变得少了，无论是技术还是非技术，相比于2016年少了很多，也许是因为2017年人工智能火爆，而前端相对于2016年热度降低不少，所以很多技术活动都是人工智能方面的，而非技术方面的其他活动，不知道为什么也参加少，可能是没找到好玩儿一点儿的，所以也少了。\n\n2018年还是要多参加活动，这样才能认识更多有意思的人，扩展自己的想法，而不是局限在技术这一个圈子内。\n\n#### 去上海参加Ultra China——人生中第一次参加音乐活动\n\n如果说2016年对于我来说是民谣的一年，那么2017年就是我的电音元年了。2016年年底，开始有意识的听一些电音，开始知道有电音这种音乐风格。\n\n之前虽然也喜欢过各种各样的歌手，但是对于去现场，我并没有多大想法，感觉去不去都一样，没什么意思，直到遇到电音。去参加Ultra，人生中第一次参加音乐节。\n\n2017年初，听说世界顶级电音节之一——Ultra Music Festival要来中国上海了，非常的激动，毕竟自己虽然喜欢电音，但是因为这些音乐节都在国外举行，所以只能看看视频了，并没有去现场看到，这次Ultra来中国，举办首届Ultra China，可以说是必去无疑，虽然是一个人，但是还是决定去一趟。在经过抢票，安排行程住宿后，就盼望着9月8日了。\n\n![Ultra China海报](/img/conclusion/ultra1.jpeg)\n\n经过忙碌的工作，耐心的等待，2017年9月8日终于到来，这两天，全国的顶级raver纷纷乘坐各种交通工具来到上海，参加属于他们的顶级电音节。\n\n![全国的raver赶往上海](/img/conclusion/raver.jpeg)\n\n我记得8号我坐动车去上海，动车给我晚点了，我也是醉了。最终在晚点90分钟后，成功在凌晨抵达上海，也是够艰难的😂。\n\n两天的狂欢即将开始...\n\n![ultra1](/img/conclusion/ultra2.jpeg)\n\n![ultra2](/img/conclusion/ultra3.jpeg)\n\n![ultra3](/img/conclusion/ultra4.jpeg)\n\n![ultra4](/img/conclusion/ultra5.jpeg)\n\n![ultra5](/img/conclusion/ultra6.jpeg)\n\n两天的狂欢可以说是让人精疲力尽，各种腰酸腿疼，但是并不后悔，因为之前对于音乐，从未有过如此喜欢的感觉。虽然难说再见，各种不舍，但是最终还是在9月11日，踏上回京的高铁...\n\n再见Ultra，2018年上海，不见不散...\n\n前几天听说2018年，EDC要来中国上海了，又一大顶级电音节登陆上海，我想说，tomorrowland来中国还远吗？哈哈，看来明年至少去一趟上海了✌️。\n\n附：\n\n[Armin Van Buuren tomorrowland 2017 live](http://music.163.com/#/mv?id=5611744)\n\n[Armin Van Buuren Year Mix 2017](https://www.mixcloud.com/wnmfestofficial/armin-van-buuren-a-state-of-trance-846-year-mix-2017/)\n\n[Martin Garrix tomorrowland 2017 live](http://music.163.com/#/mv?id=5611747)\n\n[Hardwell Year Mix 2017 live](https://www.mixcloud.com/wnmfestofficial/hardwell-hardwell-on-air-off-the-record-034-yearmix-part-2/)\n\n## 结语\n\n此刻，距离2018年还有不到一个小时。今天，对这一年的小确幸送上微笑，也向这一年的遗憾送上拥抱；对这一年坚持过的自己说声“谢谢”，也向这一年放弃过的自己说声“在努力”；为这一年世界的美好点赞，也向这一年流过的泪告别。\n\n再见2017，你好2018...","source":"_posts/hello-2018.md","raw":"---\ntitle: 再见2017，你好2018\ndate: 2017-12-31 23:14:24\ntags: \"年终总结\"\ncomments: true\ncategories: \"总结\"\n---\n>不知不觉中，2017年已经走到尾声，2018年马上要到来了，回想这一年，无论是工作还是生活都发生了很多变化，如果用一个字来总结2017，那么这个字就是“变”,这些事情让我有了更多的想法，这也让我对2018年有了期待。\n\n<!--more-->\n\n## 工作，技术\n\n2017年，自己所在的项目组发生了很大的变化，业务有所调整，所以自己的工作内容也发生了重大的变化。\n\n回看这一年的周报，可以很明显的看到，在2017年上半年，工作内容集中在海外业务，但是到了下半年，工作内容已经开始逐步转向平台业务系统，开始接触很多的好玩儿的技术，像react，react native，vue等等这些框架开始大量使用。业务量的增长，人员的增多，让我的思想开始发生转变。\n\n#### HOW ➡️ WHY\n\n之前，由于业务并不是那么多样化，业务量也不是那么多，所以使用的技术相对单一，自己之前虽然也有学一些新的东西，但是这些东西也仅仅停留在学习如何使用上面，而对于为什么要这么用，可能并不会想太多。\n\n原理的理解让我对那些经常使用的技术有了更深入的理解，如果不理解为什么这么写而仅仅只是知道需要这么写就很容易忘记，而且每次写的时候还需要看看官方demo，这可以说是自己的亲身体会吧。\n\n之前在做完一个react项目再做另一个的时候，我发现我还是需要看官方demo才能记得，那个`connect`怎么写，小括号，花括号怎么放，这让我很无语，这让我开始意识到我该学习一下为什么这里要这么写，所以自己该抽时间学习一下redux的原理，源码，在学习后，感觉写起来要顺利许多，这一点让我感触很深。\n\n还有一点，就是在使用那些新技术的时候，比如像vue，react的时候，最好不要一上来就全家桶，直接redux什么的一起上，最好还是有个渐进的过程，否则对于为什么需要这些库理解可能不会太深。之前做第一个项目的时候，交互虽然复杂，但是并没有用redux，这让我们在做项目的时候，遇到了很多回调，很深的传递，之后在项目中加入redux之后，才对为什么会有这些数据管理库有了更加深入的理解，我觉得这一点也是非常宝贵的，\n\n所以，我觉得今年关于技术思想上变化最大的，也是让我感触最深的是：\n\n1. 要知其然，也要知其所以然，而不是盲目的学完这个学那个，这样的最终结果就是哪个都不是很精，并没有太大用处。\n2. 在学习这些技术的同时要理解这些技术解决了开发中的哪些痛点，理解它们出现的原因，记得之前尤大也说过，vue是渐进式的框架，我觉得学习技术也要渐进式的学习，一个一个网上加，而不是搞大而全，这样才能理解更深入。\n\n#### 意识到团队的重要性，开始注重软实力\n\n之前，由于人员相对较少，所以很多时候，可能是怎么方便怎么来，并不会考虑自己写的这些东西别人用的会不会舒服，自己写的代码别人能不能看懂，但是随着人员的增多，项目的增大，大家合作的越来越多，自己有时候也会负责项目的搭建，自己可能会写一些公共的代码块儿在项目中使用，这些工作的出现让我开始意识到团队合作的重要性，自己弄的东西，如何方便他人的使用，一个项目如何搭建更利于后期维护。\n\n现在的前端发展非常快，各种新技术层出不穷，但是在我们忙着学习新东西的时候，我们是否考虑过自己的代码写的足够健壮，如何写让别人读起来更加舒服，技术在更新，各种框架在变化，但是这些软实力并没有因此而变得不重要，它们依旧是考量一个工程师是否优秀的标准之一。\n\n今年开始，自己开始学着如何让项目的可维护性更高，代码如何写，更加健壮，开始注重修炼内功了，但是这并不是那么简单几天几个月就可以学会的，而是一个长期的过程，年底时候考虑过自己写一份代码规范，相当于一个revew规范吧，如何写代码更加合适，但是由于年底工作的繁忙并没有实现这个，我想这个将会是2018年的要做的头一件事儿了。\n\n关于2017年一年在技术方面让我产生思考，并让我发生转变的的就这两方面了，2018年我将沿着这两方面继续走下去✌️\n\n## 生活\n\n2017年关于生活上的，2017年也发生了很多事儿，尤其是在后半年的一些事儿让我记忆深刻，甚至引发一些思考。\n\n#### 学习英语\n\n英语对于我这种技术人来说其实一直都很重要，因为经常会遇到阅读国外文章，文档的时候，所以英语好对于我来说是非常重要的，所以从2017年下半年开始，我开始再一次拿起英语，我觉得2018年，这也将是重中之重...\n\n#### 开始对金融投资感兴趣\n\n数字货币比特币在2017年底可以说是占尽了风头，在谷歌搜索排行榜达到第一，为什么会这样的呢？因为在2017年，数字货币像比特币，莱特币，以太坊等等可以说是疯长，比特币一路狂飙，一度达到每个十万人民币，要知道这家伙年初的时候也就几千一个，着就说说，如果你持有几十个比特币，基本上离财富自由就不远了。\n\n记得第一次听说比特币是在上大学时候，那时候虽然对这个东西好奇，但是因为是学生，也没什么钱，所以并没有投资这些，之后就渐渐的淡忘了，直到今年年底，新闻开始大量报道比特币疯狂上涨以及各种稀奇古怪的丢失比特币的新闻，比如国外有一哥们儿扔了个硬盘，里面有几千个比特币，找不回来了，估计这哥们儿会后悔一辈子吧，哈哈...\n\n还有就是看到同学开始学着理财，自己也开始尝试，但是只是买了些基金，而且因为不是很懂这些，所以也是在乱买，年底的时候感觉不能这么胡来，得系统学习下这些东西到底是怎么弄的。\n\n这两件事儿让我开始对金融投资产生了兴趣，我觉得2018年我将要认真学习关于金融的东西\n\n#### 参与线下活动\n\n2017年这一年，说实话，参与的活动变得少了，无论是技术还是非技术，相比于2016年少了很多，也许是因为2017年人工智能火爆，而前端相对于2016年热度降低不少，所以很多技术活动都是人工智能方面的，而非技术方面的其他活动，不知道为什么也参加少，可能是没找到好玩儿一点儿的，所以也少了。\n\n2018年还是要多参加活动，这样才能认识更多有意思的人，扩展自己的想法，而不是局限在技术这一个圈子内。\n\n#### 去上海参加Ultra China——人生中第一次参加音乐活动\n\n如果说2016年对于我来说是民谣的一年，那么2017年就是我的电音元年了。2016年年底，开始有意识的听一些电音，开始知道有电音这种音乐风格。\n\n之前虽然也喜欢过各种各样的歌手，但是对于去现场，我并没有多大想法，感觉去不去都一样，没什么意思，直到遇到电音。去参加Ultra，人生中第一次参加音乐节。\n\n2017年初，听说世界顶级电音节之一——Ultra Music Festival要来中国上海了，非常的激动，毕竟自己虽然喜欢电音，但是因为这些音乐节都在国外举行，所以只能看看视频了，并没有去现场看到，这次Ultra来中国，举办首届Ultra China，可以说是必去无疑，虽然是一个人，但是还是决定去一趟。在经过抢票，安排行程住宿后，就盼望着9月8日了。\n\n![Ultra China海报](/img/conclusion/ultra1.jpeg)\n\n经过忙碌的工作，耐心的等待，2017年9月8日终于到来，这两天，全国的顶级raver纷纷乘坐各种交通工具来到上海，参加属于他们的顶级电音节。\n\n![全国的raver赶往上海](/img/conclusion/raver.jpeg)\n\n我记得8号我坐动车去上海，动车给我晚点了，我也是醉了。最终在晚点90分钟后，成功在凌晨抵达上海，也是够艰难的😂。\n\n两天的狂欢即将开始...\n\n![ultra1](/img/conclusion/ultra2.jpeg)\n\n![ultra2](/img/conclusion/ultra3.jpeg)\n\n![ultra3](/img/conclusion/ultra4.jpeg)\n\n![ultra4](/img/conclusion/ultra5.jpeg)\n\n![ultra5](/img/conclusion/ultra6.jpeg)\n\n两天的狂欢可以说是让人精疲力尽，各种腰酸腿疼，但是并不后悔，因为之前对于音乐，从未有过如此喜欢的感觉。虽然难说再见，各种不舍，但是最终还是在9月11日，踏上回京的高铁...\n\n再见Ultra，2018年上海，不见不散...\n\n前几天听说2018年，EDC要来中国上海了，又一大顶级电音节登陆上海，我想说，tomorrowland来中国还远吗？哈哈，看来明年至少去一趟上海了✌️。\n\n附：\n\n[Armin Van Buuren tomorrowland 2017 live](http://music.163.com/#/mv?id=5611744)\n\n[Armin Van Buuren Year Mix 2017](https://www.mixcloud.com/wnmfestofficial/armin-van-buuren-a-state-of-trance-846-year-mix-2017/)\n\n[Martin Garrix tomorrowland 2017 live](http://music.163.com/#/mv?id=5611747)\n\n[Hardwell Year Mix 2017 live](https://www.mixcloud.com/wnmfestofficial/hardwell-hardwell-on-air-off-the-record-034-yearmix-part-2/)\n\n## 结语\n\n此刻，距离2018年还有不到一个小时。今天，对这一年的小确幸送上微笑，也向这一年的遗憾送上拥抱；对这一年坚持过的自己说声“谢谢”，也向这一年放弃过的自己说声“在努力”；为这一年世界的美好点赞，也向这一年流过的泪告别。\n\n再见2017，你好2018...","slug":"hello-2018","published":1,"updated":"2018-04-13T02:51:31.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobn0027zrv4cpdraxvh","content":"<blockquote>\n<p>不知不觉中，2017年已经走到尾声，2018年马上要到来了，回想这一年，无论是工作还是生活都发生了很多变化，如果用一个字来总结2017，那么这个字就是“变”,这些事情让我有了更多的想法，这也让我对2018年有了期待。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"工作，技术\"><a href=\"#工作，技术\" class=\"headerlink\" title=\"工作，技术\"></a>工作，技术</h2><p>2017年，自己所在的项目组发生了很大的变化，业务有所调整，所以自己的工作内容也发生了重大的变化。</p>\n<p>回看这一年的周报，可以很明显的看到，在2017年上半年，工作内容集中在海外业务，但是到了下半年，工作内容已经开始逐步转向平台业务系统，开始接触很多的好玩儿的技术，像react，react native，vue等等这些框架开始大量使用。业务量的增长，人员的增多，让我的思想开始发生转变。</p>\n<h4 id=\"HOW-➡️-WHY\"><a href=\"#HOW-➡️-WHY\" class=\"headerlink\" title=\"HOW ➡️ WHY\"></a>HOW ➡️ WHY</h4><p>之前，由于业务并不是那么多样化，业务量也不是那么多，所以使用的技术相对单一，自己之前虽然也有学一些新的东西，但是这些东西也仅仅停留在学习如何使用上面，而对于为什么要这么用，可能并不会想太多。</p>\n<p>原理的理解让我对那些经常使用的技术有了更深入的理解，如果不理解为什么这么写而仅仅只是知道需要这么写就很容易忘记，而且每次写的时候还需要看看官方demo，这可以说是自己的亲身体会吧。</p>\n<p>之前在做完一个react项目再做另一个的时候，我发现我还是需要看官方demo才能记得，那个<code>connect</code>怎么写，小括号，花括号怎么放，这让我很无语，这让我开始意识到我该学习一下为什么这里要这么写，所以自己该抽时间学习一下redux的原理，源码，在学习后，感觉写起来要顺利许多，这一点让我感触很深。</p>\n<p>还有一点，就是在使用那些新技术的时候，比如像vue，react的时候，最好不要一上来就全家桶，直接redux什么的一起上，最好还是有个渐进的过程，否则对于为什么需要这些库理解可能不会太深。之前做第一个项目的时候，交互虽然复杂，但是并没有用redux，这让我们在做项目的时候，遇到了很多回调，很深的传递，之后在项目中加入redux之后，才对为什么会有这些数据管理库有了更加深入的理解，我觉得这一点也是非常宝贵的，</p>\n<p>所以，我觉得今年关于技术思想上变化最大的，也是让我感触最深的是：</p>\n<ol>\n<li>要知其然，也要知其所以然，而不是盲目的学完这个学那个，这样的最终结果就是哪个都不是很精，并没有太大用处。</li>\n<li>在学习这些技术的同时要理解这些技术解决了开发中的哪些痛点，理解它们出现的原因，记得之前尤大也说过，vue是渐进式的框架，我觉得学习技术也要渐进式的学习，一个一个网上加，而不是搞大而全，这样才能理解更深入。</li>\n</ol>\n<h4 id=\"意识到团队的重要性，开始注重软实力\"><a href=\"#意识到团队的重要性，开始注重软实力\" class=\"headerlink\" title=\"意识到团队的重要性，开始注重软实力\"></a>意识到团队的重要性，开始注重软实力</h4><p>之前，由于人员相对较少，所以很多时候，可能是怎么方便怎么来，并不会考虑自己写的这些东西别人用的会不会舒服，自己写的代码别人能不能看懂，但是随着人员的增多，项目的增大，大家合作的越来越多，自己有时候也会负责项目的搭建，自己可能会写一些公共的代码块儿在项目中使用，这些工作的出现让我开始意识到团队合作的重要性，自己弄的东西，如何方便他人的使用，一个项目如何搭建更利于后期维护。</p>\n<p>现在的前端发展非常快，各种新技术层出不穷，但是在我们忙着学习新东西的时候，我们是否考虑过自己的代码写的足够健壮，如何写让别人读起来更加舒服，技术在更新，各种框架在变化，但是这些软实力并没有因此而变得不重要，它们依旧是考量一个工程师是否优秀的标准之一。</p>\n<p>今年开始，自己开始学着如何让项目的可维护性更高，代码如何写，更加健壮，开始注重修炼内功了，但是这并不是那么简单几天几个月就可以学会的，而是一个长期的过程，年底时候考虑过自己写一份代码规范，相当于一个revew规范吧，如何写代码更加合适，但是由于年底工作的繁忙并没有实现这个，我想这个将会是2018年的要做的头一件事儿了。</p>\n<p>关于2017年一年在技术方面让我产生思考，并让我发生转变的的就这两方面了，2018年我将沿着这两方面继续走下去✌️</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>2017年关于生活上的，2017年也发生了很多事儿，尤其是在后半年的一些事儿让我记忆深刻，甚至引发一些思考。</p>\n<h4 id=\"学习英语\"><a href=\"#学习英语\" class=\"headerlink\" title=\"学习英语\"></a>学习英语</h4><p>英语对于我这种技术人来说其实一直都很重要，因为经常会遇到阅读国外文章，文档的时候，所以英语好对于我来说是非常重要的，所以从2017年下半年开始，我开始再一次拿起英语，我觉得2018年，这也将是重中之重…</p>\n<h4 id=\"开始对金融投资感兴趣\"><a href=\"#开始对金融投资感兴趣\" class=\"headerlink\" title=\"开始对金融投资感兴趣\"></a>开始对金融投资感兴趣</h4><p>数字货币比特币在2017年底可以说是占尽了风头，在谷歌搜索排行榜达到第一，为什么会这样的呢？因为在2017年，数字货币像比特币，莱特币，以太坊等等可以说是疯长，比特币一路狂飙，一度达到每个十万人民币，要知道这家伙年初的时候也就几千一个，着就说说，如果你持有几十个比特币，基本上离财富自由就不远了。</p>\n<p>记得第一次听说比特币是在上大学时候，那时候虽然对这个东西好奇，但是因为是学生，也没什么钱，所以并没有投资这些，之后就渐渐的淡忘了，直到今年年底，新闻开始大量报道比特币疯狂上涨以及各种稀奇古怪的丢失比特币的新闻，比如国外有一哥们儿扔了个硬盘，里面有几千个比特币，找不回来了，估计这哥们儿会后悔一辈子吧，哈哈…</p>\n<p>还有就是看到同学开始学着理财，自己也开始尝试，但是只是买了些基金，而且因为不是很懂这些，所以也是在乱买，年底的时候感觉不能这么胡来，得系统学习下这些东西到底是怎么弄的。</p>\n<p>这两件事儿让我开始对金融投资产生了兴趣，我觉得2018年我将要认真学习关于金融的东西</p>\n<h4 id=\"参与线下活动\"><a href=\"#参与线下活动\" class=\"headerlink\" title=\"参与线下活动\"></a>参与线下活动</h4><p>2017年这一年，说实话，参与的活动变得少了，无论是技术还是非技术，相比于2016年少了很多，也许是因为2017年人工智能火爆，而前端相对于2016年热度降低不少，所以很多技术活动都是人工智能方面的，而非技术方面的其他活动，不知道为什么也参加少，可能是没找到好玩儿一点儿的，所以也少了。</p>\n<p>2018年还是要多参加活动，这样才能认识更多有意思的人，扩展自己的想法，而不是局限在技术这一个圈子内。</p>\n<h4 id=\"去上海参加Ultra-China——人生中第一次参加音乐活动\"><a href=\"#去上海参加Ultra-China——人生中第一次参加音乐活动\" class=\"headerlink\" title=\"去上海参加Ultra China——人生中第一次参加音乐活动\"></a>去上海参加Ultra China——人生中第一次参加音乐活动</h4><p>如果说2016年对于我来说是民谣的一年，那么2017年就是我的电音元年了。2016年年底，开始有意识的听一些电音，开始知道有电音这种音乐风格。</p>\n<p>之前虽然也喜欢过各种各样的歌手，但是对于去现场，我并没有多大想法，感觉去不去都一样，没什么意思，直到遇到电音。去参加Ultra，人生中第一次参加音乐节。</p>\n<p>2017年初，听说世界顶级电音节之一——Ultra Music Festival要来中国上海了，非常的激动，毕竟自己虽然喜欢电音，但是因为这些音乐节都在国外举行，所以只能看看视频了，并没有去现场看到，这次Ultra来中国，举办首届Ultra China，可以说是必去无疑，虽然是一个人，但是还是决定去一趟。在经过抢票，安排行程住宿后，就盼望着9月8日了。</p>\n<p><img src=\"/img/conclusion/ultra1.jpeg\" alt=\"Ultra China海报\"></p>\n<p>经过忙碌的工作，耐心的等待，2017年9月8日终于到来，这两天，全国的顶级raver纷纷乘坐各种交通工具来到上海，参加属于他们的顶级电音节。</p>\n<p><img src=\"/img/conclusion/raver.jpeg\" alt=\"全国的raver赶往上海\"></p>\n<p>我记得8号我坐动车去上海，动车给我晚点了，我也是醉了。最终在晚点90分钟后，成功在凌晨抵达上海，也是够艰难的😂。</p>\n<p>两天的狂欢即将开始…</p>\n<p><img src=\"/img/conclusion/ultra2.jpeg\" alt=\"ultra1\"></p>\n<p><img src=\"/img/conclusion/ultra3.jpeg\" alt=\"ultra2\"></p>\n<p><img src=\"/img/conclusion/ultra4.jpeg\" alt=\"ultra3\"></p>\n<p><img src=\"/img/conclusion/ultra5.jpeg\" alt=\"ultra4\"></p>\n<p><img src=\"/img/conclusion/ultra6.jpeg\" alt=\"ultra5\"></p>\n<p>两天的狂欢可以说是让人精疲力尽，各种腰酸腿疼，但是并不后悔，因为之前对于音乐，从未有过如此喜欢的感觉。虽然难说再见，各种不舍，但是最终还是在9月11日，踏上回京的高铁…</p>\n<p>再见Ultra，2018年上海，不见不散…</p>\n<p>前几天听说2018年，EDC要来中国上海了，又一大顶级电音节登陆上海，我想说，tomorrowland来中国还远吗？哈哈，看来明年至少去一趟上海了✌️。</p>\n<p>附：</p>\n<p><a href=\"http://music.163.com/#/mv?id=5611744\" target=\"_blank\" rel=\"noopener\">Armin Van Buuren tomorrowland 2017 live</a></p>\n<p><a href=\"https://www.mixcloud.com/wnmfestofficial/armin-van-buuren-a-state-of-trance-846-year-mix-2017/\" target=\"_blank\" rel=\"noopener\">Armin Van Buuren Year Mix 2017</a></p>\n<p><a href=\"http://music.163.com/#/mv?id=5611747\" target=\"_blank\" rel=\"noopener\">Martin Garrix tomorrowland 2017 live</a></p>\n<p><a href=\"https://www.mixcloud.com/wnmfestofficial/hardwell-hardwell-on-air-off-the-record-034-yearmix-part-2/\" target=\"_blank\" rel=\"noopener\">Hardwell Year Mix 2017 live</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>此刻，距离2018年还有不到一个小时。今天，对这一年的小确幸送上微笑，也向这一年的遗憾送上拥抱；对这一年坚持过的自己说声“谢谢”，也向这一年放弃过的自己说声“在努力”；为这一年世界的美好点赞，也向这一年流过的泪告别。</p>\n<p>再见2017，你好2018…</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>不知不觉中，2017年已经走到尾声，2018年马上要到来了，回想这一年，无论是工作还是生活都发生了很多变化，如果用一个字来总结2017，那么这个字就是“变”,这些事情让我有了更多的想法，这也让我对2018年有了期待。</p>\n</blockquote>","more":"<h2 id=\"工作，技术\"><a href=\"#工作，技术\" class=\"headerlink\" title=\"工作，技术\"></a>工作，技术</h2><p>2017年，自己所在的项目组发生了很大的变化，业务有所调整，所以自己的工作内容也发生了重大的变化。</p>\n<p>回看这一年的周报，可以很明显的看到，在2017年上半年，工作内容集中在海外业务，但是到了下半年，工作内容已经开始逐步转向平台业务系统，开始接触很多的好玩儿的技术，像react，react native，vue等等这些框架开始大量使用。业务量的增长，人员的增多，让我的思想开始发生转变。</p>\n<h4 id=\"HOW-➡️-WHY\"><a href=\"#HOW-➡️-WHY\" class=\"headerlink\" title=\"HOW ➡️ WHY\"></a>HOW ➡️ WHY</h4><p>之前，由于业务并不是那么多样化，业务量也不是那么多，所以使用的技术相对单一，自己之前虽然也有学一些新的东西，但是这些东西也仅仅停留在学习如何使用上面，而对于为什么要这么用，可能并不会想太多。</p>\n<p>原理的理解让我对那些经常使用的技术有了更深入的理解，如果不理解为什么这么写而仅仅只是知道需要这么写就很容易忘记，而且每次写的时候还需要看看官方demo，这可以说是自己的亲身体会吧。</p>\n<p>之前在做完一个react项目再做另一个的时候，我发现我还是需要看官方demo才能记得，那个<code>connect</code>怎么写，小括号，花括号怎么放，这让我很无语，这让我开始意识到我该学习一下为什么这里要这么写，所以自己该抽时间学习一下redux的原理，源码，在学习后，感觉写起来要顺利许多，这一点让我感触很深。</p>\n<p>还有一点，就是在使用那些新技术的时候，比如像vue，react的时候，最好不要一上来就全家桶，直接redux什么的一起上，最好还是有个渐进的过程，否则对于为什么需要这些库理解可能不会太深。之前做第一个项目的时候，交互虽然复杂，但是并没有用redux，这让我们在做项目的时候，遇到了很多回调，很深的传递，之后在项目中加入redux之后，才对为什么会有这些数据管理库有了更加深入的理解，我觉得这一点也是非常宝贵的，</p>\n<p>所以，我觉得今年关于技术思想上变化最大的，也是让我感触最深的是：</p>\n<ol>\n<li>要知其然，也要知其所以然，而不是盲目的学完这个学那个，这样的最终结果就是哪个都不是很精，并没有太大用处。</li>\n<li>在学习这些技术的同时要理解这些技术解决了开发中的哪些痛点，理解它们出现的原因，记得之前尤大也说过，vue是渐进式的框架，我觉得学习技术也要渐进式的学习，一个一个网上加，而不是搞大而全，这样才能理解更深入。</li>\n</ol>\n<h4 id=\"意识到团队的重要性，开始注重软实力\"><a href=\"#意识到团队的重要性，开始注重软实力\" class=\"headerlink\" title=\"意识到团队的重要性，开始注重软实力\"></a>意识到团队的重要性，开始注重软实力</h4><p>之前，由于人员相对较少，所以很多时候，可能是怎么方便怎么来，并不会考虑自己写的这些东西别人用的会不会舒服，自己写的代码别人能不能看懂，但是随着人员的增多，项目的增大，大家合作的越来越多，自己有时候也会负责项目的搭建，自己可能会写一些公共的代码块儿在项目中使用，这些工作的出现让我开始意识到团队合作的重要性，自己弄的东西，如何方便他人的使用，一个项目如何搭建更利于后期维护。</p>\n<p>现在的前端发展非常快，各种新技术层出不穷，但是在我们忙着学习新东西的时候，我们是否考虑过自己的代码写的足够健壮，如何写让别人读起来更加舒服，技术在更新，各种框架在变化，但是这些软实力并没有因此而变得不重要，它们依旧是考量一个工程师是否优秀的标准之一。</p>\n<p>今年开始，自己开始学着如何让项目的可维护性更高，代码如何写，更加健壮，开始注重修炼内功了，但是这并不是那么简单几天几个月就可以学会的，而是一个长期的过程，年底时候考虑过自己写一份代码规范，相当于一个revew规范吧，如何写代码更加合适，但是由于年底工作的繁忙并没有实现这个，我想这个将会是2018年的要做的头一件事儿了。</p>\n<p>关于2017年一年在技术方面让我产生思考，并让我发生转变的的就这两方面了，2018年我将沿着这两方面继续走下去✌️</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>2017年关于生活上的，2017年也发生了很多事儿，尤其是在后半年的一些事儿让我记忆深刻，甚至引发一些思考。</p>\n<h4 id=\"学习英语\"><a href=\"#学习英语\" class=\"headerlink\" title=\"学习英语\"></a>学习英语</h4><p>英语对于我这种技术人来说其实一直都很重要，因为经常会遇到阅读国外文章，文档的时候，所以英语好对于我来说是非常重要的，所以从2017年下半年开始，我开始再一次拿起英语，我觉得2018年，这也将是重中之重…</p>\n<h4 id=\"开始对金融投资感兴趣\"><a href=\"#开始对金融投资感兴趣\" class=\"headerlink\" title=\"开始对金融投资感兴趣\"></a>开始对金融投资感兴趣</h4><p>数字货币比特币在2017年底可以说是占尽了风头，在谷歌搜索排行榜达到第一，为什么会这样的呢？因为在2017年，数字货币像比特币，莱特币，以太坊等等可以说是疯长，比特币一路狂飙，一度达到每个十万人民币，要知道这家伙年初的时候也就几千一个，着就说说，如果你持有几十个比特币，基本上离财富自由就不远了。</p>\n<p>记得第一次听说比特币是在上大学时候，那时候虽然对这个东西好奇，但是因为是学生，也没什么钱，所以并没有投资这些，之后就渐渐的淡忘了，直到今年年底，新闻开始大量报道比特币疯狂上涨以及各种稀奇古怪的丢失比特币的新闻，比如国外有一哥们儿扔了个硬盘，里面有几千个比特币，找不回来了，估计这哥们儿会后悔一辈子吧，哈哈…</p>\n<p>还有就是看到同学开始学着理财，自己也开始尝试，但是只是买了些基金，而且因为不是很懂这些，所以也是在乱买，年底的时候感觉不能这么胡来，得系统学习下这些东西到底是怎么弄的。</p>\n<p>这两件事儿让我开始对金融投资产生了兴趣，我觉得2018年我将要认真学习关于金融的东西</p>\n<h4 id=\"参与线下活动\"><a href=\"#参与线下活动\" class=\"headerlink\" title=\"参与线下活动\"></a>参与线下活动</h4><p>2017年这一年，说实话，参与的活动变得少了，无论是技术还是非技术，相比于2016年少了很多，也许是因为2017年人工智能火爆，而前端相对于2016年热度降低不少，所以很多技术活动都是人工智能方面的，而非技术方面的其他活动，不知道为什么也参加少，可能是没找到好玩儿一点儿的，所以也少了。</p>\n<p>2018年还是要多参加活动，这样才能认识更多有意思的人，扩展自己的想法，而不是局限在技术这一个圈子内。</p>\n<h4 id=\"去上海参加Ultra-China——人生中第一次参加音乐活动\"><a href=\"#去上海参加Ultra-China——人生中第一次参加音乐活动\" class=\"headerlink\" title=\"去上海参加Ultra China——人生中第一次参加音乐活动\"></a>去上海参加Ultra China——人生中第一次参加音乐活动</h4><p>如果说2016年对于我来说是民谣的一年，那么2017年就是我的电音元年了。2016年年底，开始有意识的听一些电音，开始知道有电音这种音乐风格。</p>\n<p>之前虽然也喜欢过各种各样的歌手，但是对于去现场，我并没有多大想法，感觉去不去都一样，没什么意思，直到遇到电音。去参加Ultra，人生中第一次参加音乐节。</p>\n<p>2017年初，听说世界顶级电音节之一——Ultra Music Festival要来中国上海了，非常的激动，毕竟自己虽然喜欢电音，但是因为这些音乐节都在国外举行，所以只能看看视频了，并没有去现场看到，这次Ultra来中国，举办首届Ultra China，可以说是必去无疑，虽然是一个人，但是还是决定去一趟。在经过抢票，安排行程住宿后，就盼望着9月8日了。</p>\n<p><img src=\"/img/conclusion/ultra1.jpeg\" alt=\"Ultra China海报\"></p>\n<p>经过忙碌的工作，耐心的等待，2017年9月8日终于到来，这两天，全国的顶级raver纷纷乘坐各种交通工具来到上海，参加属于他们的顶级电音节。</p>\n<p><img src=\"/img/conclusion/raver.jpeg\" alt=\"全国的raver赶往上海\"></p>\n<p>我记得8号我坐动车去上海，动车给我晚点了，我也是醉了。最终在晚点90分钟后，成功在凌晨抵达上海，也是够艰难的😂。</p>\n<p>两天的狂欢即将开始…</p>\n<p><img src=\"/img/conclusion/ultra2.jpeg\" alt=\"ultra1\"></p>\n<p><img src=\"/img/conclusion/ultra3.jpeg\" alt=\"ultra2\"></p>\n<p><img src=\"/img/conclusion/ultra4.jpeg\" alt=\"ultra3\"></p>\n<p><img src=\"/img/conclusion/ultra5.jpeg\" alt=\"ultra4\"></p>\n<p><img src=\"/img/conclusion/ultra6.jpeg\" alt=\"ultra5\"></p>\n<p>两天的狂欢可以说是让人精疲力尽，各种腰酸腿疼，但是并不后悔，因为之前对于音乐，从未有过如此喜欢的感觉。虽然难说再见，各种不舍，但是最终还是在9月11日，踏上回京的高铁…</p>\n<p>再见Ultra，2018年上海，不见不散…</p>\n<p>前几天听说2018年，EDC要来中国上海了，又一大顶级电音节登陆上海，我想说，tomorrowland来中国还远吗？哈哈，看来明年至少去一趟上海了✌️。</p>\n<p>附：</p>\n<p><a href=\"http://music.163.com/#/mv?id=5611744\" target=\"_blank\" rel=\"noopener\">Armin Van Buuren tomorrowland 2017 live</a></p>\n<p><a href=\"https://www.mixcloud.com/wnmfestofficial/armin-van-buuren-a-state-of-trance-846-year-mix-2017/\" target=\"_blank\" rel=\"noopener\">Armin Van Buuren Year Mix 2017</a></p>\n<p><a href=\"http://music.163.com/#/mv?id=5611747\" target=\"_blank\" rel=\"noopener\">Martin Garrix tomorrowland 2017 live</a></p>\n<p><a href=\"https://www.mixcloud.com/wnmfestofficial/hardwell-hardwell-on-air-off-the-record-034-yearmix-part-2/\" target=\"_blank\" rel=\"noopener\">Hardwell Year Mix 2017 live</a></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>此刻，距离2018年还有不到一个小时。今天，对这一年的小确幸送上微笑，也向这一年的遗憾送上拥抱；对这一年坚持过的自己说声“谢谢”，也向这一年放弃过的自己说声“在努力”；为这一年世界的美好点赞，也向这一年流过的泪告别。</p>\n<p>再见2017，你好2018…</p>"},{"title":"Nodejs之npm&package.json","date":"2016-11-28T14:25:36.000Z","comments":1,"_content":">一直以来，作为前端开发，在公司都是先写好页面，然后再跟后端合作，将数据填入前端页面中，但是偶尔自己闲来无事，也会看一些框架什么的，然后利用框架做个单页面应用啊，app什么的，这时候页面的数据总是一些假数据，而关于数据请求的部分就没办法做（因为没有后台嘛）。所以我感觉是时候学习一下node了，这对于我以后要学的webpack，前端工程化等也有一定帮助。\n\n<!--more-->\n\n## 如何开始学习node\n\n首先介绍几个我入门的教程：\n\n七天学会nodejs：[https://nqdeng.github.io/7-days-nodejs/](https://nqdeng.github.io/7-days-nodejs/)\n\n菜鸟教程-nodejs教程：[http://www.runoob.com/nodejs/nodejs-tutorial.html](http://www.runoob.com/nodejs/nodejs-tutorial.html)\n\n这两个教程相对比较简单，所以看完这两个教程后，对nodejs就会也只会有一个大致的了解\n\n然后可以看看止水大神的node教程（<font color='red'>需梯子</font>还在更新中...）\n\nnode.js高级编程：[https://www.youtube.com/watch?v=5YpYvrvVJ6Y&list=PLsdWTv8SAAr7_ufM68jgykoOc5WvK97kb](https://www.youtube.com/watch?v=5YpYvrvVJ6Y&list=PLsdWTv8SAAr7_ufM68jgykoOc5WvK97kb)\n\n当初我问很多人如何开始学习nodejs，很多人推荐朴灵的《深入浅出Node.js》，不过说实话，这本书并不适合入门看，难度还是有的，因为这本书会讲到node的很多原理，比较细，所以个人觉得可以配合着看。因为目前我自己也在摸索着学习，所以关于学习node先说到这里。\n\n作为前端，因为经常用到gulp，webpack等工具，所以我们最常见到的是npm和package.json，所以先总结一下它们俩。\n\n## npm\n\n#### 初始化\n\n```shell\n$ npm init\nor\n$ npm init --y \n```\n在做前端开发的时候，我们经常会用到构建工具，例如gulp，webpack等，为了让别人也可以参与进来，我们需要告诉别人项目有些什么依赖包，然后让别人也安装同样的依赖包，而`npm init`产生的package.json就是用来记录我们项目中的依赖的，同样的，在做node开发的时候，也会用刀依赖包，同样需要package.json记录。\n\n在终端输入`npm init`会询问package.json的各种信息，从而确认。如果**全部使用默认值**，可以直接在终端输入`npm init --y`快速生成package.json。\n\n\n#### 安装依赖包\n\n```shell\n$ npm install <package name> <package name> ...\n\n$ npm install <package name> -g\n\n$ npm install <package name> --save\n\n$ npm install <package name> --save-dev\n\n$ npm install <pacakage name>  --O //--save-optional  -B: --save-bundle  -E: --save-exact\n```\n\n`npm install <package name> -g` 表示全局安装，需要注意的是全局模式并不是将一个模块安装包安装为一个全局包的意思，它并不意味着可以从任何地方通过`require()`来引用，`-g`的含义是将一个包安装为全局可用的可执行命令。这意味着，所有通过`-g`安装的包都可以在终端以命令方式运行，例如gulp，webpack等。\n\n`--save`与`--save-dev`的区别在于前者是**生产环境中**项目运行需要的依赖，安装后被记录在package.json中的dependencies关键字下；而后者是**开发**时候需要的依赖，安装后被记录在devDependencies关键字下。\n\n同样`--O/B/E`分别会被记录到对应的关键字下。\n\n#### 更新依赖包\n\n```shell\n$ npm update\n\n$ npm update  -g\n\n$ npm outdated\n\n$ npm outdated -g\n```\n\n在项目目录下运行`npm update`可以升级项目中所用依赖到最新版本，而`npm update -g`则可以升级全局安装的依赖包到最新版。\n\n`npm outdated`用于**检查**模块是否过时并列出。\n\n#### 卸载依赖\n\n```shell\n$ npm uninstall <package name> <package name> ...\n\n$ npm uninstall <package name> -g\n\n$ npm uninstall <package name> --save\n\n$ npm uninstall <package name> --save-dev\n\n```\n使用`npm uninstall`可以卸载依赖，但是卸载后，在package.json中的纪录并不会被删除，要想在卸载依赖的同时删除在package.json中的纪录，需要在卸载的时候使用安装时的所有的选项，例如，如果安装时候使用了`npm install <package name> --save`则卸载的时候，同样使用`npm uninstall <pacakage name> --save`，而如果使用了`--save-dev`，卸载时候也需要加相同的选项。\n\n#### 使用自定义npm命令\n\n在package.json中，有一个`scripts`关键字，只需要在该关键字内写入自定义命令以及对应执行的实际命令即可。\n\n```json\n\"scripts\":{\n    \"test\": \"nonde ./test.js\",\n    \"dev\": \"gulp --gulpfile gulpfile-dev.js\",\n    \"build\": \"gulp --gulpfile gulpfile-build.js\"\n}\n```\n\n上面的配置中，只要我们在终端运行`npm dev`就是运行了`gulp --gulpfile gulpfile-dev.js`，这样就省去了我们在终端输入很长的一段命令，非常方便。\n\n#### 其他\n\n`npm view <pacakage name>`可以查看包的package.json文件，如果只是看包的某个特性，在后面加上相应的key即可，例如`npm v zepto version`就是查看当前安装的zepto的版本，v是view的简写。\n\n`npm ls`可以分析出当前当前项目下能够通过模块路径找到的所有包，并生成依赖树。\n\n`npm doc <package name>`可以打开该依赖包的官网，其实就是打开了package.json中的homepage。\n\n## package.json文件\n\n在运行`npm init`后会生成package.json文件，该文件用于记录项目中所用到的依赖以及项目的配置信息（比如名称、版本、许可证等）。`npm install`命令根据这个配置文件自动下载项目运行和开发所需要的依赖。\n\n一个比较完整的package.json文件如下：\n\n```json\n{\n\t\"name\": \"project\",\n\t\"version\": \"1.0.0\",\n\t\"author\": \"张三\",\n\t\"description\": \"第一个node.js程序\",\n\t\"keywords\":[\"node.js\",\"javascript\"],\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://path/to/url\"\n\t},\n\t\"license\":\"MIT\",\n\t\"engines\": {\"node\": \"0.10.x\"},\n\t\"bugs\":{\"url\":\"http://path/to/bug\",\"email\":\"bug@example.com\"},\n\t\"contributors\":[{\"name\":\"李四\",\"email\":\"lisi@example.com\"}],\n\t\"scripts\": {\n\t\t\"start\": \"node index.js\"\n\t},\n\t\"dependencies\": {\n\t\t\"express\": \"latest\",\n\t\t\"mongoose\": \"~3.8.3\"\n\t},\n\t\"devDependencies\": {\n\t\t\"grunt\": \"~0.4.1\",\n\t\t\"grunt-contrib-concat\": \"~0.3.0\"\n\t}\n}\n```\n\n在package.json中一些关键字的含义：\n\n1.name：包名\n\n2.version：版本号\n\n3.description：包的描述\n\n4.homepage：包的官网url\n\n5.autor：包的作者名字\n\n6.contributors：包的其他贡献者\n\n7.dependencies：依赖包的列表，使用`npm install`可以安装依赖包到node_medule目录下\n\n8.repository：包代码存放的地方，可以是git或者svn\n\n9.keywords：关键字\n\n10.scripts：脚本说明对象。它主要被包管理器用来安装、编译、测试和卸载包，示例如下：\n\n```json\n\n\"scripts\":{\n\n    “install”:\"install.js\",\n\n    \"test\":\"test.js\"\n\n}\n\n```\n\n11.main：模块引入方法require()在引入包时，会优先检查这个字段，并将其作为包中其余模块的入口，如果该字段不存在，则node会检查目录下的index.js，index.node，index.json作为默认入口。\n\n12.devDependencies：一些模块只在开发时需要依赖，配置这个属性，可以提示包的后续开发者安装依赖包\n\n以上就是关于node中npm和package.json的总结。最后在写本文的时候发现阮一峰老师的一个关于js的教程[JavaScript 标准参考教程](http://javascript.ruanyifeng.com/)，应该是阮一峰老师最新的关于js的教程，里面有关于node的讲解，可以看看。","source":"_posts/node-npm-package.md","raw":"---\ntitle: Nodejs之npm&package.json\ndate: 2016-11-28 22:25:36\ntags: Node\ncomments: true\ncategories: \"Node\"\n---\n>一直以来，作为前端开发，在公司都是先写好页面，然后再跟后端合作，将数据填入前端页面中，但是偶尔自己闲来无事，也会看一些框架什么的，然后利用框架做个单页面应用啊，app什么的，这时候页面的数据总是一些假数据，而关于数据请求的部分就没办法做（因为没有后台嘛）。所以我感觉是时候学习一下node了，这对于我以后要学的webpack，前端工程化等也有一定帮助。\n\n<!--more-->\n\n## 如何开始学习node\n\n首先介绍几个我入门的教程：\n\n七天学会nodejs：[https://nqdeng.github.io/7-days-nodejs/](https://nqdeng.github.io/7-days-nodejs/)\n\n菜鸟教程-nodejs教程：[http://www.runoob.com/nodejs/nodejs-tutorial.html](http://www.runoob.com/nodejs/nodejs-tutorial.html)\n\n这两个教程相对比较简单，所以看完这两个教程后，对nodejs就会也只会有一个大致的了解\n\n然后可以看看止水大神的node教程（<font color='red'>需梯子</font>还在更新中...）\n\nnode.js高级编程：[https://www.youtube.com/watch?v=5YpYvrvVJ6Y&list=PLsdWTv8SAAr7_ufM68jgykoOc5WvK97kb](https://www.youtube.com/watch?v=5YpYvrvVJ6Y&list=PLsdWTv8SAAr7_ufM68jgykoOc5WvK97kb)\n\n当初我问很多人如何开始学习nodejs，很多人推荐朴灵的《深入浅出Node.js》，不过说实话，这本书并不适合入门看，难度还是有的，因为这本书会讲到node的很多原理，比较细，所以个人觉得可以配合着看。因为目前我自己也在摸索着学习，所以关于学习node先说到这里。\n\n作为前端，因为经常用到gulp，webpack等工具，所以我们最常见到的是npm和package.json，所以先总结一下它们俩。\n\n## npm\n\n#### 初始化\n\n```shell\n$ npm init\nor\n$ npm init --y \n```\n在做前端开发的时候，我们经常会用到构建工具，例如gulp，webpack等，为了让别人也可以参与进来，我们需要告诉别人项目有些什么依赖包，然后让别人也安装同样的依赖包，而`npm init`产生的package.json就是用来记录我们项目中的依赖的，同样的，在做node开发的时候，也会用刀依赖包，同样需要package.json记录。\n\n在终端输入`npm init`会询问package.json的各种信息，从而确认。如果**全部使用默认值**，可以直接在终端输入`npm init --y`快速生成package.json。\n\n\n#### 安装依赖包\n\n```shell\n$ npm install <package name> <package name> ...\n\n$ npm install <package name> -g\n\n$ npm install <package name> --save\n\n$ npm install <package name> --save-dev\n\n$ npm install <pacakage name>  --O //--save-optional  -B: --save-bundle  -E: --save-exact\n```\n\n`npm install <package name> -g` 表示全局安装，需要注意的是全局模式并不是将一个模块安装包安装为一个全局包的意思，它并不意味着可以从任何地方通过`require()`来引用，`-g`的含义是将一个包安装为全局可用的可执行命令。这意味着，所有通过`-g`安装的包都可以在终端以命令方式运行，例如gulp，webpack等。\n\n`--save`与`--save-dev`的区别在于前者是**生产环境中**项目运行需要的依赖，安装后被记录在package.json中的dependencies关键字下；而后者是**开发**时候需要的依赖，安装后被记录在devDependencies关键字下。\n\n同样`--O/B/E`分别会被记录到对应的关键字下。\n\n#### 更新依赖包\n\n```shell\n$ npm update\n\n$ npm update  -g\n\n$ npm outdated\n\n$ npm outdated -g\n```\n\n在项目目录下运行`npm update`可以升级项目中所用依赖到最新版本，而`npm update -g`则可以升级全局安装的依赖包到最新版。\n\n`npm outdated`用于**检查**模块是否过时并列出。\n\n#### 卸载依赖\n\n```shell\n$ npm uninstall <package name> <package name> ...\n\n$ npm uninstall <package name> -g\n\n$ npm uninstall <package name> --save\n\n$ npm uninstall <package name> --save-dev\n\n```\n使用`npm uninstall`可以卸载依赖，但是卸载后，在package.json中的纪录并不会被删除，要想在卸载依赖的同时删除在package.json中的纪录，需要在卸载的时候使用安装时的所有的选项，例如，如果安装时候使用了`npm install <package name> --save`则卸载的时候，同样使用`npm uninstall <pacakage name> --save`，而如果使用了`--save-dev`，卸载时候也需要加相同的选项。\n\n#### 使用自定义npm命令\n\n在package.json中，有一个`scripts`关键字，只需要在该关键字内写入自定义命令以及对应执行的实际命令即可。\n\n```json\n\"scripts\":{\n    \"test\": \"nonde ./test.js\",\n    \"dev\": \"gulp --gulpfile gulpfile-dev.js\",\n    \"build\": \"gulp --gulpfile gulpfile-build.js\"\n}\n```\n\n上面的配置中，只要我们在终端运行`npm dev`就是运行了`gulp --gulpfile gulpfile-dev.js`，这样就省去了我们在终端输入很长的一段命令，非常方便。\n\n#### 其他\n\n`npm view <pacakage name>`可以查看包的package.json文件，如果只是看包的某个特性，在后面加上相应的key即可，例如`npm v zepto version`就是查看当前安装的zepto的版本，v是view的简写。\n\n`npm ls`可以分析出当前当前项目下能够通过模块路径找到的所有包，并生成依赖树。\n\n`npm doc <package name>`可以打开该依赖包的官网，其实就是打开了package.json中的homepage。\n\n## package.json文件\n\n在运行`npm init`后会生成package.json文件，该文件用于记录项目中所用到的依赖以及项目的配置信息（比如名称、版本、许可证等）。`npm install`命令根据这个配置文件自动下载项目运行和开发所需要的依赖。\n\n一个比较完整的package.json文件如下：\n\n```json\n{\n\t\"name\": \"project\",\n\t\"version\": \"1.0.0\",\n\t\"author\": \"张三\",\n\t\"description\": \"第一个node.js程序\",\n\t\"keywords\":[\"node.js\",\"javascript\"],\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://path/to/url\"\n\t},\n\t\"license\":\"MIT\",\n\t\"engines\": {\"node\": \"0.10.x\"},\n\t\"bugs\":{\"url\":\"http://path/to/bug\",\"email\":\"bug@example.com\"},\n\t\"contributors\":[{\"name\":\"李四\",\"email\":\"lisi@example.com\"}],\n\t\"scripts\": {\n\t\t\"start\": \"node index.js\"\n\t},\n\t\"dependencies\": {\n\t\t\"express\": \"latest\",\n\t\t\"mongoose\": \"~3.8.3\"\n\t},\n\t\"devDependencies\": {\n\t\t\"grunt\": \"~0.4.1\",\n\t\t\"grunt-contrib-concat\": \"~0.3.0\"\n\t}\n}\n```\n\n在package.json中一些关键字的含义：\n\n1.name：包名\n\n2.version：版本号\n\n3.description：包的描述\n\n4.homepage：包的官网url\n\n5.autor：包的作者名字\n\n6.contributors：包的其他贡献者\n\n7.dependencies：依赖包的列表，使用`npm install`可以安装依赖包到node_medule目录下\n\n8.repository：包代码存放的地方，可以是git或者svn\n\n9.keywords：关键字\n\n10.scripts：脚本说明对象。它主要被包管理器用来安装、编译、测试和卸载包，示例如下：\n\n```json\n\n\"scripts\":{\n\n    “install”:\"install.js\",\n\n    \"test\":\"test.js\"\n\n}\n\n```\n\n11.main：模块引入方法require()在引入包时，会优先检查这个字段，并将其作为包中其余模块的入口，如果该字段不存在，则node会检查目录下的index.js，index.node，index.json作为默认入口。\n\n12.devDependencies：一些模块只在开发时需要依赖，配置这个属性，可以提示包的后续开发者安装依赖包\n\n以上就是关于node中npm和package.json的总结。最后在写本文的时候发现阮一峰老师的一个关于js的教程[JavaScript 标准参考教程](http://javascript.ruanyifeng.com/)，应该是阮一峰老师最新的关于js的教程，里面有关于node的讲解，可以看看。","slug":"node-npm-package","published":1,"updated":"2016-11-28T06:29:38.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobo002czrv4229m7pbm","content":"<blockquote>\n<p>一直以来，作为前端开发，在公司都是先写好页面，然后再跟后端合作，将数据填入前端页面中，但是偶尔自己闲来无事，也会看一些框架什么的，然后利用框架做个单页面应用啊，app什么的，这时候页面的数据总是一些假数据，而关于数据请求的部分就没办法做（因为没有后台嘛）。所以我感觉是时候学习一下node了，这对于我以后要学的webpack，前端工程化等也有一定帮助。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"如何开始学习node\"><a href=\"#如何开始学习node\" class=\"headerlink\" title=\"如何开始学习node\"></a>如何开始学习node</h2><p>首先介绍几个我入门的教程：</p>\n<p>七天学会nodejs：<a href=\"https://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"noopener\">https://nqdeng.github.io/7-days-nodejs/</a></p>\n<p>菜鸟教程-nodejs教程：<a href=\"http://www.runoob.com/nodejs/nodejs-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/nodejs/nodejs-tutorial.html</a></p>\n<p>这两个教程相对比较简单，所以看完这两个教程后，对nodejs就会也只会有一个大致的了解</p>\n<p>然后可以看看止水大神的node教程（<font color=\"red\">需梯子</font>还在更新中…）</p>\n<p>node.js高级编程：<a href=\"https://www.youtube.com/watch?v=5YpYvrvVJ6Y&amp;list=PLsdWTv8SAAr7_ufM68jgykoOc5WvK97kb\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=5YpYvrvVJ6Y&amp;list=PLsdWTv8SAAr7_ufM68jgykoOc5WvK97kb</a></p>\n<p>当初我问很多人如何开始学习nodejs，很多人推荐朴灵的《深入浅出Node.js》，不过说实话，这本书并不适合入门看，难度还是有的，因为这本书会讲到node的很多原理，比较细，所以个人觉得可以配合着看。因为目前我自己也在摸索着学习，所以关于学习node先说到这里。</p>\n<p>作为前端，因为经常用到gulp，webpack等工具，所以我们最常见到的是npm和package.json，所以先总结一下它们俩。</p>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm init</span></span><br><span class=\"line\">or</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm init --y</span></span><br></pre></td></tr></table></figure>\n<p>在做前端开发的时候，我们经常会用到构建工具，例如gulp，webpack等，为了让别人也可以参与进来，我们需要告诉别人项目有些什么依赖包，然后让别人也安装同样的依赖包，而<code>npm init</code>产生的package.json就是用来记录我们项目中的依赖的，同样的，在做node开发的时候，也会用刀依赖包，同样需要package.json记录。</p>\n<p>在终端输入<code>npm init</code>会询问package.json的各种信息，从而确认。如果<strong>全部使用默认值</strong>，可以直接在终端输入<code>npm init --y</code>快速生成package.json。</p>\n<h4 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install &lt;package name&gt; &lt;package name&gt; ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install &lt;package name&gt; -g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install &lt;package name&gt; --save</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install &lt;package name&gt; --save-dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install &lt;pacakage name&gt;  --O //--save-optional  -B: --save-bundle  -E: --save-exact</span></span><br></pre></td></tr></table></figure>\n<p><code>npm install &lt;package name&gt; -g</code> 表示全局安装，需要注意的是全局模式并不是将一个模块安装包安装为一个全局包的意思，它并不意味着可以从任何地方通过<code>require()</code>来引用，<code>-g</code>的含义是将一个包安装为全局可用的可执行命令。这意味着，所有通过<code>-g</code>安装的包都可以在终端以命令方式运行，例如gulp，webpack等。</p>\n<p><code>--save</code>与<code>--save-dev</code>的区别在于前者是<strong>生产环境中</strong>项目运行需要的依赖，安装后被记录在package.json中的dependencies关键字下；而后者是<strong>开发</strong>时候需要的依赖，安装后被记录在devDependencies关键字下。</p>\n<p>同样<code>--O/B/E</code>分别会被记录到对应的关键字下。</p>\n<h4 id=\"更新依赖包\"><a href=\"#更新依赖包\" class=\"headerlink\" title=\"更新依赖包\"></a>更新依赖包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm update  -g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm outdated</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm outdated -g</span></span><br></pre></td></tr></table></figure>\n<p>在项目目录下运行<code>npm update</code>可以升级项目中所用依赖到最新版本，而<code>npm update -g</code>则可以升级全局安装的依赖包到最新版。</p>\n<p><code>npm outdated</code>用于<strong>检查</strong>模块是否过时并列出。</p>\n<h4 id=\"卸载依赖\"><a href=\"#卸载依赖\" class=\"headerlink\" title=\"卸载依赖\"></a>卸载依赖</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall &lt;package name&gt; &lt;package name&gt; ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall &lt;package name&gt; -g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall &lt;package name&gt; --save</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall &lt;package name&gt; --save-dev</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>npm uninstall</code>可以卸载依赖，但是卸载后，在package.json中的纪录并不会被删除，要想在卸载依赖的同时删除在package.json中的纪录，需要在卸载的时候使用安装时的所有的选项，例如，如果安装时候使用了<code>npm install &lt;package name&gt; --save</code>则卸载的时候，同样使用<code>npm uninstall &lt;pacakage name&gt; --save</code>，而如果使用了<code>--save-dev</code>，卸载时候也需要加相同的选项。</p>\n<h4 id=\"使用自定义npm命令\"><a href=\"#使用自定义npm命令\" class=\"headerlink\" title=\"使用自定义npm命令\"></a>使用自定义npm命令</h4><p>在package.json中，有一个<code>scripts</code>关键字，只需要在该关键字内写入自定义命令以及对应执行的实际命令即可。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\":&#123;</span><br><span class=\"line\">    \"test\": \"nonde ./test.js\",</span><br><span class=\"line\">    \"dev\": \"gulp --gulpfile gulpfile-dev.js\",</span><br><span class=\"line\">    \"build\": \"gulp --gulpfile gulpfile-build.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的配置中，只要我们在终端运行<code>npm dev</code>就是运行了<code>gulp --gulpfile gulpfile-dev.js</code>，这样就省去了我们在终端输入很长的一段命令，非常方便。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p><code>npm view &lt;pacakage name&gt;</code>可以查看包的package.json文件，如果只是看包的某个特性，在后面加上相应的key即可，例如<code>npm v zepto version</code>就是查看当前安装的zepto的版本，v是view的简写。</p>\n<p><code>npm ls</code>可以分析出当前当前项目下能够通过模块路径找到的所有包，并生成依赖树。</p>\n<p><code>npm doc &lt;package name&gt;</code>可以打开该依赖包的官网，其实就是打开了package.json中的homepage。</p>\n<h2 id=\"package-json文件\"><a href=\"#package-json文件\" class=\"headerlink\" title=\"package.json文件\"></a>package.json文件</h2><p>在运行<code>npm init</code>后会生成package.json文件，该文件用于记录项目中所用到的依赖以及项目的配置信息（比如名称、版本、许可证等）。<code>npm install</code>命令根据这个配置文件自动下载项目运行和开发所需要的依赖。</p>\n<p>一个比较完整的package.json文件如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"project\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"author\"</span>: <span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"description\"</span>: <span class=\"string\">\"第一个node.js程序\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"keywords\"</span>:[<span class=\"string\">\"node.js\"</span>,<span class=\"string\">\"javascript\"</span>],</span><br><span class=\"line\">\t<span class=\"attr\">\"repository\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"url\"</span>: <span class=\"string\">\"https://path/to/url\"</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"license\"</span>:<span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"engines\"</span>: &#123;<span class=\"attr\">\"node\"</span>: <span class=\"string\">\"0.10.x\"</span>&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"bugs\"</span>:&#123;<span class=\"attr\">\"url\"</span>:<span class=\"string\">\"http://path/to/bug\"</span>,<span class=\"attr\">\"email\"</span>:<span class=\"string\">\"bug@example.com\"</span>&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"contributors\"</span>:[&#123;<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"李四\"</span>,<span class=\"attr\">\"email\"</span>:<span class=\"string\">\"lisi@example.com\"</span>&#125;],</span><br><span class=\"line\">\t<span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"start\"</span>: <span class=\"string\">\"node index.js\"</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"express\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"mongoose\"</span>: <span class=\"string\">\"~3.8.3\"</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"grunt\"</span>: <span class=\"string\">\"~0.4.1\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"grunt-contrib-concat\"</span>: <span class=\"string\">\"~0.3.0\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在package.json中一些关键字的含义：</p>\n<p>1.name：包名</p>\n<p>2.version：版本号</p>\n<p>3.description：包的描述</p>\n<p>4.homepage：包的官网url</p>\n<p>5.autor：包的作者名字</p>\n<p>6.contributors：包的其他贡献者</p>\n<p>7.dependencies：依赖包的列表，使用<code>npm install</code>可以安装依赖包到node_medule目录下</p>\n<p>8.repository：包代码存放的地方，可以是git或者svn</p>\n<p>9.keywords：关键字</p>\n<p>10.scripts：脚本说明对象。它主要被包管理器用来安装、编译、测试和卸载包，示例如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\"scripts\":&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    “install”:\"install.js\",</span><br><span class=\"line\"></span><br><span class=\"line\">    \"test\":\"test.js\"</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>11.main：模块引入方法require()在引入包时，会优先检查这个字段，并将其作为包中其余模块的入口，如果该字段不存在，则node会检查目录下的index.js，index.node，index.json作为默认入口。</p>\n<p>12.devDependencies：一些模块只在开发时需要依赖，配置这个属性，可以提示包的后续开发者安装依赖包</p>\n<p>以上就是关于node中npm和package.json的总结。最后在写本文的时候发现阮一峰老师的一个关于js的教程<a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程</a>，应该是阮一峰老师最新的关于js的教程，里面有关于node的讲解，可以看看。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>一直以来，作为前端开发，在公司都是先写好页面，然后再跟后端合作，将数据填入前端页面中，但是偶尔自己闲来无事，也会看一些框架什么的，然后利用框架做个单页面应用啊，app什么的，这时候页面的数据总是一些假数据，而关于数据请求的部分就没办法做（因为没有后台嘛）。所以我感觉是时候学习一下node了，这对于我以后要学的webpack，前端工程化等也有一定帮助。</p>\n</blockquote>","more":"<h2 id=\"如何开始学习node\"><a href=\"#如何开始学习node\" class=\"headerlink\" title=\"如何开始学习node\"></a>如何开始学习node</h2><p>首先介绍几个我入门的教程：</p>\n<p>七天学会nodejs：<a href=\"https://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"noopener\">https://nqdeng.github.io/7-days-nodejs/</a></p>\n<p>菜鸟教程-nodejs教程：<a href=\"http://www.runoob.com/nodejs/nodejs-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/nodejs/nodejs-tutorial.html</a></p>\n<p>这两个教程相对比较简单，所以看完这两个教程后，对nodejs就会也只会有一个大致的了解</p>\n<p>然后可以看看止水大神的node教程（<font color=\"red\">需梯子</font>还在更新中…）</p>\n<p>node.js高级编程：<a href=\"https://www.youtube.com/watch?v=5YpYvrvVJ6Y&amp;list=PLsdWTv8SAAr7_ufM68jgykoOc5WvK97kb\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=5YpYvrvVJ6Y&amp;list=PLsdWTv8SAAr7_ufM68jgykoOc5WvK97kb</a></p>\n<p>当初我问很多人如何开始学习nodejs，很多人推荐朴灵的《深入浅出Node.js》，不过说实话，这本书并不适合入门看，难度还是有的，因为这本书会讲到node的很多原理，比较细，所以个人觉得可以配合着看。因为目前我自己也在摸索着学习，所以关于学习node先说到这里。</p>\n<p>作为前端，因为经常用到gulp，webpack等工具，所以我们最常见到的是npm和package.json，所以先总结一下它们俩。</p>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm init</span></span><br><span class=\"line\">or</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm init --y</span></span><br></pre></td></tr></table></figure>\n<p>在做前端开发的时候，我们经常会用到构建工具，例如gulp，webpack等，为了让别人也可以参与进来，我们需要告诉别人项目有些什么依赖包，然后让别人也安装同样的依赖包，而<code>npm init</code>产生的package.json就是用来记录我们项目中的依赖的，同样的，在做node开发的时候，也会用刀依赖包，同样需要package.json记录。</p>\n<p>在终端输入<code>npm init</code>会询问package.json的各种信息，从而确认。如果<strong>全部使用默认值</strong>，可以直接在终端输入<code>npm init --y</code>快速生成package.json。</p>\n<h4 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install &lt;package name&gt; &lt;package name&gt; ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install &lt;package name&gt; -g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install &lt;package name&gt; --save</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install &lt;package name&gt; --save-dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install &lt;pacakage name&gt;  --O //--save-optional  -B: --save-bundle  -E: --save-exact</span></span><br></pre></td></tr></table></figure>\n<p><code>npm install &lt;package name&gt; -g</code> 表示全局安装，需要注意的是全局模式并不是将一个模块安装包安装为一个全局包的意思，它并不意味着可以从任何地方通过<code>require()</code>来引用，<code>-g</code>的含义是将一个包安装为全局可用的可执行命令。这意味着，所有通过<code>-g</code>安装的包都可以在终端以命令方式运行，例如gulp，webpack等。</p>\n<p><code>--save</code>与<code>--save-dev</code>的区别在于前者是<strong>生产环境中</strong>项目运行需要的依赖，安装后被记录在package.json中的dependencies关键字下；而后者是<strong>开发</strong>时候需要的依赖，安装后被记录在devDependencies关键字下。</p>\n<p>同样<code>--O/B/E</code>分别会被记录到对应的关键字下。</p>\n<h4 id=\"更新依赖包\"><a href=\"#更新依赖包\" class=\"headerlink\" title=\"更新依赖包\"></a>更新依赖包</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm update  -g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm outdated</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm outdated -g</span></span><br></pre></td></tr></table></figure>\n<p>在项目目录下运行<code>npm update</code>可以升级项目中所用依赖到最新版本，而<code>npm update -g</code>则可以升级全局安装的依赖包到最新版。</p>\n<p><code>npm outdated</code>用于<strong>检查</strong>模块是否过时并列出。</p>\n<h4 id=\"卸载依赖\"><a href=\"#卸载依赖\" class=\"headerlink\" title=\"卸载依赖\"></a>卸载依赖</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall &lt;package name&gt; &lt;package name&gt; ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall &lt;package name&gt; -g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall &lt;package name&gt; --save</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm uninstall &lt;package name&gt; --save-dev</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>npm uninstall</code>可以卸载依赖，但是卸载后，在package.json中的纪录并不会被删除，要想在卸载依赖的同时删除在package.json中的纪录，需要在卸载的时候使用安装时的所有的选项，例如，如果安装时候使用了<code>npm install &lt;package name&gt; --save</code>则卸载的时候，同样使用<code>npm uninstall &lt;pacakage name&gt; --save</code>，而如果使用了<code>--save-dev</code>，卸载时候也需要加相同的选项。</p>\n<h4 id=\"使用自定义npm命令\"><a href=\"#使用自定义npm命令\" class=\"headerlink\" title=\"使用自定义npm命令\"></a>使用自定义npm命令</h4><p>在package.json中，有一个<code>scripts</code>关键字，只需要在该关键字内写入自定义命令以及对应执行的实际命令即可。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\":&#123;</span><br><span class=\"line\">    \"test\": \"nonde ./test.js\",</span><br><span class=\"line\">    \"dev\": \"gulp --gulpfile gulpfile-dev.js\",</span><br><span class=\"line\">    \"build\": \"gulp --gulpfile gulpfile-build.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的配置中，只要我们在终端运行<code>npm dev</code>就是运行了<code>gulp --gulpfile gulpfile-dev.js</code>，这样就省去了我们在终端输入很长的一段命令，非常方便。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p><code>npm view &lt;pacakage name&gt;</code>可以查看包的package.json文件，如果只是看包的某个特性，在后面加上相应的key即可，例如<code>npm v zepto version</code>就是查看当前安装的zepto的版本，v是view的简写。</p>\n<p><code>npm ls</code>可以分析出当前当前项目下能够通过模块路径找到的所有包，并生成依赖树。</p>\n<p><code>npm doc &lt;package name&gt;</code>可以打开该依赖包的官网，其实就是打开了package.json中的homepage。</p>\n<h2 id=\"package-json文件\"><a href=\"#package-json文件\" class=\"headerlink\" title=\"package.json文件\"></a>package.json文件</h2><p>在运行<code>npm init</code>后会生成package.json文件，该文件用于记录项目中所用到的依赖以及项目的配置信息（比如名称、版本、许可证等）。<code>npm install</code>命令根据这个配置文件自动下载项目运行和开发所需要的依赖。</p>\n<p>一个比较完整的package.json文件如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"project\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"author\"</span>: <span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"description\"</span>: <span class=\"string\">\"第一个node.js程序\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"keywords\"</span>:[<span class=\"string\">\"node.js\"</span>,<span class=\"string\">\"javascript\"</span>],</span><br><span class=\"line\">\t<span class=\"attr\">\"repository\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"url\"</span>: <span class=\"string\">\"https://path/to/url\"</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"license\"</span>:<span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"engines\"</span>: &#123;<span class=\"attr\">\"node\"</span>: <span class=\"string\">\"0.10.x\"</span>&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"bugs\"</span>:&#123;<span class=\"attr\">\"url\"</span>:<span class=\"string\">\"http://path/to/bug\"</span>,<span class=\"attr\">\"email\"</span>:<span class=\"string\">\"bug@example.com\"</span>&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"contributors\"</span>:[&#123;<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"李四\"</span>,<span class=\"attr\">\"email\"</span>:<span class=\"string\">\"lisi@example.com\"</span>&#125;],</span><br><span class=\"line\">\t<span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"start\"</span>: <span class=\"string\">\"node index.js\"</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"express\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"mongoose\"</span>: <span class=\"string\">\"~3.8.3\"</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"grunt\"</span>: <span class=\"string\">\"~0.4.1\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"grunt-contrib-concat\"</span>: <span class=\"string\">\"~0.3.0\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在package.json中一些关键字的含义：</p>\n<p>1.name：包名</p>\n<p>2.version：版本号</p>\n<p>3.description：包的描述</p>\n<p>4.homepage：包的官网url</p>\n<p>5.autor：包的作者名字</p>\n<p>6.contributors：包的其他贡献者</p>\n<p>7.dependencies：依赖包的列表，使用<code>npm install</code>可以安装依赖包到node_medule目录下</p>\n<p>8.repository：包代码存放的地方，可以是git或者svn</p>\n<p>9.keywords：关键字</p>\n<p>10.scripts：脚本说明对象。它主要被包管理器用来安装、编译、测试和卸载包，示例如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\"scripts\":&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    “install”:\"install.js\",</span><br><span class=\"line\"></span><br><span class=\"line\">    \"test\":\"test.js\"</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>11.main：模块引入方法require()在引入包时，会优先检查这个字段，并将其作为包中其余模块的入口，如果该字段不存在，则node会检查目录下的index.js，index.node，index.json作为默认入口。</p>\n<p>12.devDependencies：一些模块只在开发时需要依赖，配置这个属性，可以提示包的后续开发者安装依赖包</p>\n<p>以上就是关于node中npm和package.json的总结。最后在写本文的时候发现阮一峰老师的一个关于js的教程<a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程</a>，应该是阮一峰老师最新的关于js的教程，里面有关于node的讲解，可以看看。</p>"},{"title":"写一个简单的分页插件","date":"2017-05-07T12:57:48.000Z","comments":1,"_content":"\n前段时间有一个项目需要用一个前端分页，说实话之前自己从来没搞过，这次准备自己搞一下，所以先找了几篇文章看看怎么写，但是网上的文章写分页的都基本看不懂，完全不知所云，所以决定在自己搞定分页后写一下如何弄这个。\n\n<!--more-->\n\n通过看网上的一些例子可以看出，分页基本上都是在html中写一个带id的元素，然后使用js动态添加的html的。\n\n首先确定以下数据\n\n* 总共的数据数——`totalData`\n* 每页的要显示的数据——`totalData`\n* 当超过多少页后分页中出现...——`minPage`\n* 当前后都出现...后，当前页前后有几个分页块——`interval`\n\n确定需要的html结构\n\n```html\n<!--1,2,3,4,5,6,7-->\n<div class=\"xm-pagenavi\">\n    <a class=\"prev disabled\" href=\"javascript:;\">&lt;</a>\n    <a class=\"btn current\" href=\"javascript:;\" data-page=\"1\">1</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"2\">2</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"3\">3</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"4\">4</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"5\">5</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"6\">6</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"7\">7</a>\n    <a class=\"next\" href=\"javascript:;\">&gt;</a>\n</div>\n<!--< 1,2,3,4,5,6,7...11 >-->\n<div class=\"xm-pagenavi\">\n    <a class=\"prev disabled\" href=\"javascript:;\">&lt;</a>\n    <a class=\"btn current\" href=\"javascript:;\" data-page=\"1\">1</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"2\">2</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"3\">3</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"4\">4</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"5\">5</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"6\">6</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"7\">7</a>\n    <b class=\"pn-break\">...</b>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"100\">100</a\n    ><a class=\"next\" href=\"javascript:;\">&gt;</a>\n</div>\n<!--< 1...4,5,6,7,8...11 >-->\n<div class=\"xm-pagenavi\">\n    <a class=\"prev\" href=\"javascript:;\">&lt;</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"1\">1</a>\n    <b class=\"pn-break\">...</b>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"5\">5</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"6\">6</a>\n    <a class=\"btn current\" href=\"javascript:;\" data-page=\"7\">7</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"8\">8</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"9\">9</a>\n    <b class=\"pn-break\">...</b>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"100\">100</a>\n    <a class=\"next\" href=\"javascript:;\">&gt;</a>\n</div>\n<!--< 1...5,6,7,8,9,10,11 >-->\n<div class=\"xm-pagenavi\">\n    <a class=\"prev\" href=\"javascript:;\">&lt;</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"1\">1</a>\n    <b class=\"pn-break\">...</b>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"94\">94</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"95\">95</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"96\">96</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"97\">97</a>\n    <a class=\"btn current\" href=\"javascript:;\" data-page=\"98\">98</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"99\">99</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"100\">100</a>\n    <a class=\"next\" href=\"javascript:;\">&gt;</a>\n</div>\n```\n\n## 初始化页面\n\n根据不同的总页数以及分页块最多有多少个，初始化为两种。\n\n1. 总页数少于分页块最多数时候，此时分页很简单，就是`1,2,3,4,5,6`这类的，此时只需要根据点击的分页块显示出对应的数据即可。\n\n2. 总页数多于分页快儿最多数的时候，此时候分页形式为`< 1,2,3,4,5,6,7...11 >`，此时还需要根据不同的当前页数，变换分页的形式。\n\n所以初始化页面的代码如下：\n\n```JS\nfunction initDraw() {\n    let $pagenaviBox = $('<div>').addClass('xm-pagenavi');\n    $page.append($pagenaviBox);\n    if (pageTotal <= minPage) {\n        $('<a>').addClass('prev disabled').attr('href', 'javascript:;').html('<').appendTo($pagenaviBox);\n        for (let i = 1; i <= pageTotal; i++) {\n            let $btnLink = $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', i).html(i).appendTo($pagenaviBox);\n            if (i == 1) {\n                $btnLink.addClass('current');\n            }\n        }\n        $('<a>').addClass('next').attr('href', 'javascript:;').html('>').appendTo($pagenaviBox);\n    } else {\n        draw($pagenaviBox,1);\n    }\n}\n```\n\n## 根据当前页生成不同的html\n\n这里的`draw()`用于根据不同的当前页生成`< 1,2,3,4,5,6,7...11 >，< 1...5,6,7,8,9,10,11 >，< 1...4,5,6,7,8...11 >`这三种形式的分页。\n\n这里需要判断三种分页展示形式的变换临界点(项目中当前页前后分别有前后两页)\n\n* 如果当前页往前三页的分页与第一页的距离为1，则展示为`< 1,2,3,4,5,6,7...11 >`\n* 如果当前页往后三页的分页与最后一页的距离位1，则展示为`< 1...5,6,7,8,9,10,11 >`\n* 除以上两种情况外的情况展示为`< 1...4,5,6,7,8...11 >`\n\n```js\nfunction draw(pagenaviBox,dataPage) {\n    $('<a>').addClass('prev disabled').attr('href', 'javascript:;').html('<').appendTo(pagenaviBox);\n    $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', 1).html(1).appendTo(pagenaviBox);\n    if (dataPage - 3 <= 1 + 1) {  // < 1,2,3,4,5,6,7...11 >\n        for (let i = 2; i <= minPage - 2; i++) {\n            let $btn = $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', i).html(i).appendTo(pagenaviBox);\n        }\n        $('<b>').addClass('pn-break').html('...').appendTo(pagenaviBox);\n    } else if (dataPage + 3 >= pageTotal - 1) {// < 1...5,6,7,8,9,10,11 >\n        $('<b>').addClass('pn-break').html('...').appendTo(pagenaviBox);\n        for (let i = pageTotal - 6; i <= pageTotal - 1; i++) {\n            $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', i).html(i).appendTo(pagenaviBox);\n        }\n    } else {// < 1...4,5,6,7,8...11 >\n        $('<b>').addClass('pn-break').html('...').appendTo(pagenaviBox);\n        for (let i = dataPage - 2; i <= dataPage + 2; i++) {\n            $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', i).html(i).appendTo(pagenaviBox);\n        }\n        $('<b>').addClass('pn-break').html('...').appendTo(pagenaviBox);\n    }\n    $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', pageTotal).html(pageTotal).appendTo(pagenaviBox);\n    $('<a>').addClass('next').attr('href', 'javascript:;').html('>').appendTo(pagenaviBox);\n    $('.btn').removeClass('current');\n    $('[data-page=\"' + dataPage + '\"]').addClass('current');\n}\n```\n\n## 添加点击事件\n\n需要添加点击事件的有两类按钮，一类是分页按钮`btn`，一类是往前往后一页按钮`prev`，`next`按钮。\n\n```js\nfunction btnClick() {\n    let $pagenaviBox = $('.xm-pagenavi');\n    $pagenaviBox.on('click', function (e) {\n        let $target = $(e.target);\n        let targetClass = $target.attr('class');\n        // 根据不同的class定义不同的事件\n        if (targetClass == 'btn') {\n            let dataPage = parseInt($target.attr('data-page'));\n            if (pageTotal <= minPage) {\n                //1,2,3,4,5,6,7,8,9\n                $('.btn').removeClass('current');\n                $target.addClass('current');\n            } else {\n                // 重新绘制\n                $pagenaviBox.empty();\n                draw($pagenaviBox,dataPage);\n            }\n            let $prev = $('.prev');\n            let $next = $('.next');\n            $prev.removeClass('disabled');\n            $next.removeClass('disabled');\n            if (dataPage == 1) {\n                $prev.addClass('disabled');\n            }\n            if (dataPage == pageTotal) {\n                $next.addClass('disabled');\n            }\n        }\n        if (targetClass == 'prev') {\n            let dataPage = parseInt($('.current').attr('data-page')) - 1;\n            if (pageTotal > minPage) {\n                $pagenaviBox.empty();\n                draw($pagenaviBox,dataPage);\n            }else{\n                $('.btn').removeClass('current');\n                $('[data-page=\"' + dataPage + '\"]').addClass('current');\n            }       \n            let $prev = $('.prev');\n            let $next = $('.next');\n            $prev.removeClass('disabled');\n            $next.removeClass('disabled');\n            \n            if (dataPage == 1) {\n                $prev.addClass('disabled');\n            }\n            if (dataPage == pageTotal) {\n                $next.addClass('disabled');\n            }\n        }\n        if (targetClass == 'next') {\n            let dataPage = parseInt($('.current').attr('data-page')) + 1;\n            if (pageTotal > minPage) {\n                $pagenaviBox.empty();\n                draw($pagenaviBox,dataPage);\n            }else{\n                $('.btn').removeClass('current');\n                $('[data-page=\"' + dataPage + '\"]').addClass('current');\n            }\n            let $prev = $('.prev');\n            let $next = $('.next');\n            $prev.removeClass('disabled');\n            $next.removeClass('disabled');\n            if (dataPage == 1) {\n                $prev.addClass('disabled');\n            }\n            if (dataPage == pageTotal) {\n                $next.addClass('disabled');\n            }\n        }\n    });\n}\n```\n\n## 总结\n\n经过这三步，基本就完成了一个非常简单的分页，在我开始自己写之前参考也曾经看了一些比较好的jquery插件的源码，但是感觉并没有找到思路，反而越看越乱，所以说呢…需要写一个东西，直接上手写是最好的，边写边想即可，如果一味的希望先找到思路，想好各个步骤再写，反正对我来讲，会让我越想越混乱。\n\n最后附代码地址：https://github.com/MrZhang123/Js_Plugin/tree/master/page","source":"_posts/page.md","raw":"---\ntitle: 写一个简单的分页插件\ndate: 2017-05-07 20:57:48\ntags: Javascript\ncomments: true\ncategories: \"Javascript\"\n---\n\n前段时间有一个项目需要用一个前端分页，说实话之前自己从来没搞过，这次准备自己搞一下，所以先找了几篇文章看看怎么写，但是网上的文章写分页的都基本看不懂，完全不知所云，所以决定在自己搞定分页后写一下如何弄这个。\n\n<!--more-->\n\n通过看网上的一些例子可以看出，分页基本上都是在html中写一个带id的元素，然后使用js动态添加的html的。\n\n首先确定以下数据\n\n* 总共的数据数——`totalData`\n* 每页的要显示的数据——`totalData`\n* 当超过多少页后分页中出现...——`minPage`\n* 当前后都出现...后，当前页前后有几个分页块——`interval`\n\n确定需要的html结构\n\n```html\n<!--1,2,3,4,5,6,7-->\n<div class=\"xm-pagenavi\">\n    <a class=\"prev disabled\" href=\"javascript:;\">&lt;</a>\n    <a class=\"btn current\" href=\"javascript:;\" data-page=\"1\">1</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"2\">2</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"3\">3</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"4\">4</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"5\">5</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"6\">6</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"7\">7</a>\n    <a class=\"next\" href=\"javascript:;\">&gt;</a>\n</div>\n<!--< 1,2,3,4,5,6,7...11 >-->\n<div class=\"xm-pagenavi\">\n    <a class=\"prev disabled\" href=\"javascript:;\">&lt;</a>\n    <a class=\"btn current\" href=\"javascript:;\" data-page=\"1\">1</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"2\">2</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"3\">3</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"4\">4</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"5\">5</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"6\">6</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"7\">7</a>\n    <b class=\"pn-break\">...</b>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"100\">100</a\n    ><a class=\"next\" href=\"javascript:;\">&gt;</a>\n</div>\n<!--< 1...4,5,6,7,8...11 >-->\n<div class=\"xm-pagenavi\">\n    <a class=\"prev\" href=\"javascript:;\">&lt;</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"1\">1</a>\n    <b class=\"pn-break\">...</b>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"5\">5</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"6\">6</a>\n    <a class=\"btn current\" href=\"javascript:;\" data-page=\"7\">7</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"8\">8</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"9\">9</a>\n    <b class=\"pn-break\">...</b>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"100\">100</a>\n    <a class=\"next\" href=\"javascript:;\">&gt;</a>\n</div>\n<!--< 1...5,6,7,8,9,10,11 >-->\n<div class=\"xm-pagenavi\">\n    <a class=\"prev\" href=\"javascript:;\">&lt;</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"1\">1</a>\n    <b class=\"pn-break\">...</b>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"94\">94</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"95\">95</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"96\">96</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"97\">97</a>\n    <a class=\"btn current\" href=\"javascript:;\" data-page=\"98\">98</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"99\">99</a>\n    <a class=\"btn\" href=\"javascript:;\" data-page=\"100\">100</a>\n    <a class=\"next\" href=\"javascript:;\">&gt;</a>\n</div>\n```\n\n## 初始化页面\n\n根据不同的总页数以及分页块最多有多少个，初始化为两种。\n\n1. 总页数少于分页块最多数时候，此时分页很简单，就是`1,2,3,4,5,6`这类的，此时只需要根据点击的分页块显示出对应的数据即可。\n\n2. 总页数多于分页快儿最多数的时候，此时候分页形式为`< 1,2,3,4,5,6,7...11 >`，此时还需要根据不同的当前页数，变换分页的形式。\n\n所以初始化页面的代码如下：\n\n```JS\nfunction initDraw() {\n    let $pagenaviBox = $('<div>').addClass('xm-pagenavi');\n    $page.append($pagenaviBox);\n    if (pageTotal <= minPage) {\n        $('<a>').addClass('prev disabled').attr('href', 'javascript:;').html('<').appendTo($pagenaviBox);\n        for (let i = 1; i <= pageTotal; i++) {\n            let $btnLink = $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', i).html(i).appendTo($pagenaviBox);\n            if (i == 1) {\n                $btnLink.addClass('current');\n            }\n        }\n        $('<a>').addClass('next').attr('href', 'javascript:;').html('>').appendTo($pagenaviBox);\n    } else {\n        draw($pagenaviBox,1);\n    }\n}\n```\n\n## 根据当前页生成不同的html\n\n这里的`draw()`用于根据不同的当前页生成`< 1,2,3,4,5,6,7...11 >，< 1...5,6,7,8,9,10,11 >，< 1...4,5,6,7,8...11 >`这三种形式的分页。\n\n这里需要判断三种分页展示形式的变换临界点(项目中当前页前后分别有前后两页)\n\n* 如果当前页往前三页的分页与第一页的距离为1，则展示为`< 1,2,3,4,5,6,7...11 >`\n* 如果当前页往后三页的分页与最后一页的距离位1，则展示为`< 1...5,6,7,8,9,10,11 >`\n* 除以上两种情况外的情况展示为`< 1...4,5,6,7,8...11 >`\n\n```js\nfunction draw(pagenaviBox,dataPage) {\n    $('<a>').addClass('prev disabled').attr('href', 'javascript:;').html('<').appendTo(pagenaviBox);\n    $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', 1).html(1).appendTo(pagenaviBox);\n    if (dataPage - 3 <= 1 + 1) {  // < 1,2,3,4,5,6,7...11 >\n        for (let i = 2; i <= minPage - 2; i++) {\n            let $btn = $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', i).html(i).appendTo(pagenaviBox);\n        }\n        $('<b>').addClass('pn-break').html('...').appendTo(pagenaviBox);\n    } else if (dataPage + 3 >= pageTotal - 1) {// < 1...5,6,7,8,9,10,11 >\n        $('<b>').addClass('pn-break').html('...').appendTo(pagenaviBox);\n        for (let i = pageTotal - 6; i <= pageTotal - 1; i++) {\n            $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', i).html(i).appendTo(pagenaviBox);\n        }\n    } else {// < 1...4,5,6,7,8...11 >\n        $('<b>').addClass('pn-break').html('...').appendTo(pagenaviBox);\n        for (let i = dataPage - 2; i <= dataPage + 2; i++) {\n            $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', i).html(i).appendTo(pagenaviBox);\n        }\n        $('<b>').addClass('pn-break').html('...').appendTo(pagenaviBox);\n    }\n    $('<a>').addClass('btn').attr('href', 'javascript:;').attr('data-page', pageTotal).html(pageTotal).appendTo(pagenaviBox);\n    $('<a>').addClass('next').attr('href', 'javascript:;').html('>').appendTo(pagenaviBox);\n    $('.btn').removeClass('current');\n    $('[data-page=\"' + dataPage + '\"]').addClass('current');\n}\n```\n\n## 添加点击事件\n\n需要添加点击事件的有两类按钮，一类是分页按钮`btn`，一类是往前往后一页按钮`prev`，`next`按钮。\n\n```js\nfunction btnClick() {\n    let $pagenaviBox = $('.xm-pagenavi');\n    $pagenaviBox.on('click', function (e) {\n        let $target = $(e.target);\n        let targetClass = $target.attr('class');\n        // 根据不同的class定义不同的事件\n        if (targetClass == 'btn') {\n            let dataPage = parseInt($target.attr('data-page'));\n            if (pageTotal <= minPage) {\n                //1,2,3,4,5,6,7,8,9\n                $('.btn').removeClass('current');\n                $target.addClass('current');\n            } else {\n                // 重新绘制\n                $pagenaviBox.empty();\n                draw($pagenaviBox,dataPage);\n            }\n            let $prev = $('.prev');\n            let $next = $('.next');\n            $prev.removeClass('disabled');\n            $next.removeClass('disabled');\n            if (dataPage == 1) {\n                $prev.addClass('disabled');\n            }\n            if (dataPage == pageTotal) {\n                $next.addClass('disabled');\n            }\n        }\n        if (targetClass == 'prev') {\n            let dataPage = parseInt($('.current').attr('data-page')) - 1;\n            if (pageTotal > minPage) {\n                $pagenaviBox.empty();\n                draw($pagenaviBox,dataPage);\n            }else{\n                $('.btn').removeClass('current');\n                $('[data-page=\"' + dataPage + '\"]').addClass('current');\n            }       \n            let $prev = $('.prev');\n            let $next = $('.next');\n            $prev.removeClass('disabled');\n            $next.removeClass('disabled');\n            \n            if (dataPage == 1) {\n                $prev.addClass('disabled');\n            }\n            if (dataPage == pageTotal) {\n                $next.addClass('disabled');\n            }\n        }\n        if (targetClass == 'next') {\n            let dataPage = parseInt($('.current').attr('data-page')) + 1;\n            if (pageTotal > minPage) {\n                $pagenaviBox.empty();\n                draw($pagenaviBox,dataPage);\n            }else{\n                $('.btn').removeClass('current');\n                $('[data-page=\"' + dataPage + '\"]').addClass('current');\n            }\n            let $prev = $('.prev');\n            let $next = $('.next');\n            $prev.removeClass('disabled');\n            $next.removeClass('disabled');\n            if (dataPage == 1) {\n                $prev.addClass('disabled');\n            }\n            if (dataPage == pageTotal) {\n                $next.addClass('disabled');\n            }\n        }\n    });\n}\n```\n\n## 总结\n\n经过这三步，基本就完成了一个非常简单的分页，在我开始自己写之前参考也曾经看了一些比较好的jquery插件的源码，但是感觉并没有找到思路，反而越看越乱，所以说呢…需要写一个东西，直接上手写是最好的，边写边想即可，如果一味的希望先找到思路，想好各个步骤再写，反正对我来讲，会让我越想越混乱。\n\n最后附代码地址：https://github.com/MrZhang123/Js_Plugin/tree/master/page","slug":"page","published":1,"updated":"2017-10-18T09:48:31.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobq002fzrv4iodg23fn","content":"<p>前段时间有一个项目需要用一个前端分页，说实话之前自己从来没搞过，这次准备自己搞一下，所以先找了几篇文章看看怎么写，但是网上的文章写分页的都基本看不懂，完全不知所云，所以决定在自己搞定分页后写一下如何弄这个。</p>\n<a id=\"more\"></a>\n<p>通过看网上的一些例子可以看出，分页基本上都是在html中写一个带id的元素，然后使用js动态添加的html的。</p>\n<p>首先确定以下数据</p>\n<ul>\n<li>总共的数据数——<code>totalData</code></li>\n<li>每页的要显示的数据——<code>totalData</code></li>\n<li>当超过多少页后分页中出现…——<code>minPage</code></li>\n<li>当前后都出现…后，当前页前后有几个分页块——<code>interval</code></li>\n</ul>\n<p>确定需要的html结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1,2,3,4,5,6,7--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"xm-pagenavi\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prev disabled\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn current\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"3\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"4\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"5\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"6\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"7\"</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt; 1,2,3,4,5,6,7...11 &gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"xm-pagenavi\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prev disabled\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn current\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"3\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"4\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"5\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"6\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"7\"</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pn-break\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"100\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">a</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt; 1...4,5,6,7,8...11 &gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"xm-pagenavi\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prev\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pn-break\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"5\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"6\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn current\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"7\"</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"8\"</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"9\"</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pn-break\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"100\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt; 1...5,6,7,8,9,10,11 &gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"xm-pagenavi\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prev\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pn-break\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"94\"</span>&gt;</span>94<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"95\"</span>&gt;</span>95<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"96\"</span>&gt;</span>96<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"97\"</span>&gt;</span>97<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn current\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"98\"</span>&gt;</span>98<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"99\"</span>&gt;</span>99<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"100\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化页面\"><a href=\"#初始化页面\" class=\"headerlink\" title=\"初始化页面\"></a>初始化页面</h2><p>根据不同的总页数以及分页块最多有多少个，初始化为两种。</p>\n<ol>\n<li><p>总页数少于分页块最多数时候，此时分页很简单，就是<code>1,2,3,4,5,6</code>这类的，此时只需要根据点击的分页块显示出对应的数据即可。</p>\n</li>\n<li><p>总页数多于分页快儿最多数的时候，此时候分页形式为<code>&lt; 1,2,3,4,5,6,7...11 &gt;</code>，此时还需要根据不同的当前页数，变换分页的形式。</p>\n</li>\n</ol>\n<p>所以初始化页面的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initDraw</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> $pagenaviBox = $(<span class=\"string\">'&lt;div&gt;'</span>).addClass(<span class=\"string\">'xm-pagenavi'</span>);</span><br><span class=\"line\">    $page.append($pagenaviBox);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pageTotal &lt;= minPage) &#123;</span><br><span class=\"line\">        $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'prev disabled'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).html(<span class=\"string\">'&lt;'</span>).appendTo($pagenaviBox);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= pageTotal; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $btnLink = $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, i).html(i).appendTo($pagenaviBox);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                $btnLink.addClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'next'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).html(<span class=\"string\">'&gt;'</span>).appendTo($pagenaviBox);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        draw($pagenaviBox,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"根据当前页生成不同的html\"><a href=\"#根据当前页生成不同的html\" class=\"headerlink\" title=\"根据当前页生成不同的html\"></a>根据当前页生成不同的html</h2><p>这里的<code>draw()</code>用于根据不同的当前页生成<code>&lt; 1,2,3,4,5,6,7...11 &gt;，&lt; 1...5,6,7,8,9,10,11 &gt;，&lt; 1...4,5,6,7,8...11 &gt;</code>这三种形式的分页。</p>\n<p>这里需要判断三种分页展示形式的变换临界点(项目中当前页前后分别有前后两页)</p>\n<ul>\n<li>如果当前页往前三页的分页与第一页的距离为1，则展示为<code>&lt; 1,2,3,4,5,6,7...11 &gt;</code></li>\n<li>如果当前页往后三页的分页与最后一页的距离位1，则展示为<code>&lt; 1...5,6,7,8,9,10,11 &gt;</code></li>\n<li>除以上两种情况外的情况展示为<code>&lt; 1...4,5,6,7,8...11 &gt;</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\">pagenaviBox,dataPage</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'prev disabled'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).html(<span class=\"string\">'&lt;'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">    $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, <span class=\"number\">1</span>).html(<span class=\"number\">1</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dataPage - <span class=\"number\">3</span> &lt;= <span class=\"number\">1</span> + <span class=\"number\">1</span>) &#123;  <span class=\"comment\">// &lt; 1,2,3,4,5,6,7...11 &gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= minPage - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $btn = $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, i).html(i).appendTo(pagenaviBox);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">'&lt;b&gt;'</span>).addClass(<span class=\"string\">'pn-break'</span>).html(<span class=\"string\">'...'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dataPage + <span class=\"number\">3</span> &gt;= pageTotal - <span class=\"number\">1</span>) &#123;<span class=\"comment\">// &lt; 1...5,6,7,8,9,10,11 &gt;</span></span><br><span class=\"line\">        $(<span class=\"string\">'&lt;b&gt;'</span>).addClass(<span class=\"string\">'pn-break'</span>).html(<span class=\"string\">'...'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = pageTotal - <span class=\"number\">6</span>; i &lt;= pageTotal - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, i).html(i).appendTo(pagenaviBox);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// &lt; 1...4,5,6,7,8...11 &gt;</span></span><br><span class=\"line\">        $(<span class=\"string\">'&lt;b&gt;'</span>).addClass(<span class=\"string\">'pn-break'</span>).html(<span class=\"string\">'...'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = dataPage - <span class=\"number\">2</span>; i &lt;= dataPage + <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, i).html(i).appendTo(pagenaviBox);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">'&lt;b&gt;'</span>).addClass(<span class=\"string\">'pn-break'</span>).html(<span class=\"string\">'...'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, pageTotal).html(pageTotal).appendTo(pagenaviBox);</span><br><span class=\"line\">    $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'next'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).html(<span class=\"string\">'&gt;'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">    $(<span class=\"string\">'.btn'</span>).removeClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">    $(<span class=\"string\">'[data-page=\"'</span> + dataPage + <span class=\"string\">'\"]'</span>).addClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加点击事件\"><a href=\"#添加点击事件\" class=\"headerlink\" title=\"添加点击事件\"></a>添加点击事件</h2><p>需要添加点击事件的有两类按钮，一类是分页按钮<code>btn</code>，一类是往前往后一页按钮<code>prev</code>，<code>next</code>按钮。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">btnClick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> $pagenaviBox = $(<span class=\"string\">'.xm-pagenavi'</span>);</span><br><span class=\"line\">    $pagenaviBox.on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> $target = $(e.target);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> targetClass = $target.attr(<span class=\"string\">'class'</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 根据不同的class定义不同的事件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (targetClass == <span class=\"string\">'btn'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> dataPage = <span class=\"built_in\">parseInt</span>($target.attr(<span class=\"string\">'data-page'</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pageTotal &lt;= minPage) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//1,2,3,4,5,6,7,8,9</span></span><br><span class=\"line\">                $(<span class=\"string\">'.btn'</span>).removeClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">                $target.addClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 重新绘制</span></span><br><span class=\"line\">                $pagenaviBox.empty();</span><br><span class=\"line\">                draw($pagenaviBox,dataPage);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $prev = $(<span class=\"string\">'.prev'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $next = $(<span class=\"string\">'.next'</span>);</span><br><span class=\"line\">            $prev.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            $next.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                $prev.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == pageTotal) &#123;</span><br><span class=\"line\">                $next.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (targetClass == <span class=\"string\">'prev'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> dataPage = <span class=\"built_in\">parseInt</span>($(<span class=\"string\">'.current'</span>).attr(<span class=\"string\">'data-page'</span>)) - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pageTotal &gt; minPage) &#123;</span><br><span class=\"line\">                $pagenaviBox.empty();</span><br><span class=\"line\">                draw($pagenaviBox,dataPage);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                $(<span class=\"string\">'.btn'</span>).removeClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">                $(<span class=\"string\">'[data-page=\"'</span> + dataPage + <span class=\"string\">'\"]'</span>).addClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">            &#125;       </span><br><span class=\"line\">            <span class=\"keyword\">let</span> $prev = $(<span class=\"string\">'.prev'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $next = $(<span class=\"string\">'.next'</span>);</span><br><span class=\"line\">            $prev.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            $next.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                $prev.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == pageTotal) &#123;</span><br><span class=\"line\">                $next.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (targetClass == <span class=\"string\">'next'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> dataPage = <span class=\"built_in\">parseInt</span>($(<span class=\"string\">'.current'</span>).attr(<span class=\"string\">'data-page'</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pageTotal &gt; minPage) &#123;</span><br><span class=\"line\">                $pagenaviBox.empty();</span><br><span class=\"line\">                draw($pagenaviBox,dataPage);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                $(<span class=\"string\">'.btn'</span>).removeClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">                $(<span class=\"string\">'[data-page=\"'</span> + dataPage + <span class=\"string\">'\"]'</span>).addClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $prev = $(<span class=\"string\">'.prev'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $next = $(<span class=\"string\">'.next'</span>);</span><br><span class=\"line\">            $prev.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            $next.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                $prev.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == pageTotal) &#123;</span><br><span class=\"line\">                $next.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经过这三步，基本就完成了一个非常简单的分页，在我开始自己写之前参考也曾经看了一些比较好的jquery插件的源码，但是感觉并没有找到思路，反而越看越乱，所以说呢…需要写一个东西，直接上手写是最好的，边写边想即可，如果一味的希望先找到思路，想好各个步骤再写，反正对我来讲，会让我越想越混乱。</p>\n<p>最后附代码地址：<a href=\"https://github.com/MrZhang123/Js_Plugin/tree/master/page\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/Js_Plugin/tree/master/page</a></p>\n","site":{"data":{}},"excerpt":"<p>前段时间有一个项目需要用一个前端分页，说实话之前自己从来没搞过，这次准备自己搞一下，所以先找了几篇文章看看怎么写，但是网上的文章写分页的都基本看不懂，完全不知所云，所以决定在自己搞定分页后写一下如何弄这个。</p>","more":"<p>通过看网上的一些例子可以看出，分页基本上都是在html中写一个带id的元素，然后使用js动态添加的html的。</p>\n<p>首先确定以下数据</p>\n<ul>\n<li>总共的数据数——<code>totalData</code></li>\n<li>每页的要显示的数据——<code>totalData</code></li>\n<li>当超过多少页后分页中出现…——<code>minPage</code></li>\n<li>当前后都出现…后，当前页前后有几个分页块——<code>interval</code></li>\n</ul>\n<p>确定需要的html结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--1,2,3,4,5,6,7--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"xm-pagenavi\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prev disabled\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn current\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"3\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"4\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"5\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"6\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"7\"</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt; 1,2,3,4,5,6,7...11 &gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"xm-pagenavi\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prev disabled\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn current\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"3\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"4\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"5\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"6\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"7\"</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pn-break\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"100\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">a</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt; 1...4,5,6,7,8...11 &gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"xm-pagenavi\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prev\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pn-break\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"5\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"6\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn current\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"7\"</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"8\"</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"9\"</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pn-break\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"100\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&lt; 1...5,6,7,8,9,10,11 &gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"xm-pagenavi\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"prev\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">b</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pn-break\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"94\"</span>&gt;</span>94<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"95\"</span>&gt;</span>95<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"96\"</span>&gt;</span>96<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"97\"</span>&gt;</span>97<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn current\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"98\"</span>&gt;</span>98<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"99\"</span>&gt;</span>99<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">data-page</span>=<span class=\"string\">\"100\"</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"next\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化页面\"><a href=\"#初始化页面\" class=\"headerlink\" title=\"初始化页面\"></a>初始化页面</h2><p>根据不同的总页数以及分页块最多有多少个，初始化为两种。</p>\n<ol>\n<li><p>总页数少于分页块最多数时候，此时分页很简单，就是<code>1,2,3,4,5,6</code>这类的，此时只需要根据点击的分页块显示出对应的数据即可。</p>\n</li>\n<li><p>总页数多于分页快儿最多数的时候，此时候分页形式为<code>&lt; 1,2,3,4,5,6,7...11 &gt;</code>，此时还需要根据不同的当前页数，变换分页的形式。</p>\n</li>\n</ol>\n<p>所以初始化页面的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initDraw</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> $pagenaviBox = $(<span class=\"string\">'&lt;div&gt;'</span>).addClass(<span class=\"string\">'xm-pagenavi'</span>);</span><br><span class=\"line\">    $page.append($pagenaviBox);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pageTotal &lt;= minPage) &#123;</span><br><span class=\"line\">        $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'prev disabled'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).html(<span class=\"string\">'&lt;'</span>).appendTo($pagenaviBox);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= pageTotal; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $btnLink = $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, i).html(i).appendTo($pagenaviBox);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                $btnLink.addClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'next'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).html(<span class=\"string\">'&gt;'</span>).appendTo($pagenaviBox);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        draw($pagenaviBox,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"根据当前页生成不同的html\"><a href=\"#根据当前页生成不同的html\" class=\"headerlink\" title=\"根据当前页生成不同的html\"></a>根据当前页生成不同的html</h2><p>这里的<code>draw()</code>用于根据不同的当前页生成<code>&lt; 1,2,3,4,5,6,7...11 &gt;，&lt; 1...5,6,7,8,9,10,11 &gt;，&lt; 1...4,5,6,7,8...11 &gt;</code>这三种形式的分页。</p>\n<p>这里需要判断三种分页展示形式的变换临界点(项目中当前页前后分别有前后两页)</p>\n<ul>\n<li>如果当前页往前三页的分页与第一页的距离为1，则展示为<code>&lt; 1,2,3,4,5,6,7...11 &gt;</code></li>\n<li>如果当前页往后三页的分页与最后一页的距离位1，则展示为<code>&lt; 1...5,6,7,8,9,10,11 &gt;</code></li>\n<li>除以上两种情况外的情况展示为<code>&lt; 1...4,5,6,7,8...11 &gt;</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\">pagenaviBox,dataPage</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'prev disabled'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).html(<span class=\"string\">'&lt;'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">    $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, <span class=\"number\">1</span>).html(<span class=\"number\">1</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dataPage - <span class=\"number\">3</span> &lt;= <span class=\"number\">1</span> + <span class=\"number\">1</span>) &#123;  <span class=\"comment\">// &lt; 1,2,3,4,5,6,7...11 &gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= minPage - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $btn = $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, i).html(i).appendTo(pagenaviBox);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">'&lt;b&gt;'</span>).addClass(<span class=\"string\">'pn-break'</span>).html(<span class=\"string\">'...'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dataPage + <span class=\"number\">3</span> &gt;= pageTotal - <span class=\"number\">1</span>) &#123;<span class=\"comment\">// &lt; 1...5,6,7,8,9,10,11 &gt;</span></span><br><span class=\"line\">        $(<span class=\"string\">'&lt;b&gt;'</span>).addClass(<span class=\"string\">'pn-break'</span>).html(<span class=\"string\">'...'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = pageTotal - <span class=\"number\">6</span>; i &lt;= pageTotal - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, i).html(i).appendTo(pagenaviBox);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// &lt; 1...4,5,6,7,8...11 &gt;</span></span><br><span class=\"line\">        $(<span class=\"string\">'&lt;b&gt;'</span>).addClass(<span class=\"string\">'pn-break'</span>).html(<span class=\"string\">'...'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = dataPage - <span class=\"number\">2</span>; i &lt;= dataPage + <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, i).html(i).appendTo(pagenaviBox);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $(<span class=\"string\">'&lt;b&gt;'</span>).addClass(<span class=\"string\">'pn-break'</span>).html(<span class=\"string\">'...'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'btn'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).attr(<span class=\"string\">'data-page'</span>, pageTotal).html(pageTotal).appendTo(pagenaviBox);</span><br><span class=\"line\">    $(<span class=\"string\">'&lt;a&gt;'</span>).addClass(<span class=\"string\">'next'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">'javascript:;'</span>).html(<span class=\"string\">'&gt;'</span>).appendTo(pagenaviBox);</span><br><span class=\"line\">    $(<span class=\"string\">'.btn'</span>).removeClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">    $(<span class=\"string\">'[data-page=\"'</span> + dataPage + <span class=\"string\">'\"]'</span>).addClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加点击事件\"><a href=\"#添加点击事件\" class=\"headerlink\" title=\"添加点击事件\"></a>添加点击事件</h2><p>需要添加点击事件的有两类按钮，一类是分页按钮<code>btn</code>，一类是往前往后一页按钮<code>prev</code>，<code>next</code>按钮。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">btnClick</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> $pagenaviBox = $(<span class=\"string\">'.xm-pagenavi'</span>);</span><br><span class=\"line\">    $pagenaviBox.on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> $target = $(e.target);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> targetClass = $target.attr(<span class=\"string\">'class'</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 根据不同的class定义不同的事件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (targetClass == <span class=\"string\">'btn'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> dataPage = <span class=\"built_in\">parseInt</span>($target.attr(<span class=\"string\">'data-page'</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pageTotal &lt;= minPage) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//1,2,3,4,5,6,7,8,9</span></span><br><span class=\"line\">                $(<span class=\"string\">'.btn'</span>).removeClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">                $target.addClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 重新绘制</span></span><br><span class=\"line\">                $pagenaviBox.empty();</span><br><span class=\"line\">                draw($pagenaviBox,dataPage);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $prev = $(<span class=\"string\">'.prev'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $next = $(<span class=\"string\">'.next'</span>);</span><br><span class=\"line\">            $prev.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            $next.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                $prev.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == pageTotal) &#123;</span><br><span class=\"line\">                $next.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (targetClass == <span class=\"string\">'prev'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> dataPage = <span class=\"built_in\">parseInt</span>($(<span class=\"string\">'.current'</span>).attr(<span class=\"string\">'data-page'</span>)) - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pageTotal &gt; minPage) &#123;</span><br><span class=\"line\">                $pagenaviBox.empty();</span><br><span class=\"line\">                draw($pagenaviBox,dataPage);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                $(<span class=\"string\">'.btn'</span>).removeClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">                $(<span class=\"string\">'[data-page=\"'</span> + dataPage + <span class=\"string\">'\"]'</span>).addClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">            &#125;       </span><br><span class=\"line\">            <span class=\"keyword\">let</span> $prev = $(<span class=\"string\">'.prev'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $next = $(<span class=\"string\">'.next'</span>);</span><br><span class=\"line\">            $prev.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            $next.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                $prev.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == pageTotal) &#123;</span><br><span class=\"line\">                $next.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (targetClass == <span class=\"string\">'next'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> dataPage = <span class=\"built_in\">parseInt</span>($(<span class=\"string\">'.current'</span>).attr(<span class=\"string\">'data-page'</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pageTotal &gt; minPage) &#123;</span><br><span class=\"line\">                $pagenaviBox.empty();</span><br><span class=\"line\">                draw($pagenaviBox,dataPage);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                $(<span class=\"string\">'.btn'</span>).removeClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">                $(<span class=\"string\">'[data-page=\"'</span> + dataPage + <span class=\"string\">'\"]'</span>).addClass(<span class=\"string\">'current'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $prev = $(<span class=\"string\">'.prev'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> $next = $(<span class=\"string\">'.next'</span>);</span><br><span class=\"line\">            $prev.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            $next.removeClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                $prev.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dataPage == pageTotal) &#123;</span><br><span class=\"line\">                $next.addClass(<span class=\"string\">'disabled'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经过这三步，基本就完成了一个非常简单的分页，在我开始自己写之前参考也曾经看了一些比较好的jquery插件的源码，但是感觉并没有找到思路，反而越看越乱，所以说呢…需要写一个东西，直接上手写是最好的，边写边想即可，如果一味的希望先找到思路，想好各个步骤再写，反正对我来讲，会让我越想越混乱。</p>\n<p>最后附代码地址：<a href=\"https://github.com/MrZhang123/Js_Plugin/tree/master/page\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/Js_Plugin/tree/master/page</a></p>"},{"title":"Promise－－优雅解决回调嵌套","date":"2016-12-13T14:34:16.000Z","comments":1,"_content":">最近一直在用空余时间研究node，当我写了一个简单的复制一个文件夹中的文件到另一个位置的时候，我看到了所谓的回调地狱，虽然只是四五个回调嵌套，但是这已经让我感到害怕，我写这么简单的一个小demo就写成这样，那稍微复杂点儿还了得？记得在看ES6的时候，里面提到过一种新的解决回调的方式－－－Promise，而且在node中也常用这个解决大量嵌套，所以这几天花了点儿时间看了看Promise，让我对Promise的认识更加清晰，所以写一些东西总结一下。\n\n<!--more-->\n\n## Promise状态的理解\n\n用`new Promise`实例化的Promise对象有三个状态：\n\n- “has-resolution” - Fulfilled\n\n+ reslove(成功时)，调用`onFulfilled`\n\n- \"has-rejection\" - Rejected\n\n+ reject(失败时)。调用`Rejected`\n\n- \"unresolve\" - Pending\n\n+ 既不是resolve也不是reject状态，也就是Promise刚刚被创建后的初始化状态。\n\n![图１](/img/promise/promise-states.png)\n\n1. 在Chrome中输出`resolve`可以得到`Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}`，可以看出`[[PromiseStatus]]`中存储的就是Promise的状态，但是并没有公开访问`[[PromiseStatus]]`的用户API，所以暂时还无法查询其内部状态。\n\n2. Promise中的`then`的回调只会被调用一次，因为Promise的状态只会从Pending变为Fulfilled或者Rejected，不可逆。\n\n## Promise的使用\n\n在使用Promise实现有序执行异步的基本格式如下：\n\n```js\n//defined Promise async function\nfunction asyncFun(){\n    return new Promise((reslove,reject)=>{\n        if(reslove){\n            reslove(/*reslove parameter*/);\n        }else{\n            reject(new Error(/*Error*/));\n        }\n    })\n}\n\n//use Promise&then\nasyncFun().then(/*function*/).then(/*function*/)...\n```\n\n`reslove`方法的参数就是要传给回调函数的参数，即`resolve`将运行得到的结果传出来，而`then`接受该参数给回调继续执行后面的，如果这个`then`的中的函数还会返回Promise，则会重复执行该步骤直到结束。\n\n`reject`方法的参数一般是包含了reject原因的Error对象。`reject`和`resolve`一样，也会将自己的参数传出去，接收该参数的是`then`的第二个fun或者是`catch`。其实`.catch`只是`Promise.then(onFulfilled,onRejected)`的别名而已。\n\n## 快捷创建Promise\n\n一般情况下我们会使用`new Promise`来创建prmise对象，除此之外我们也可以使用`Promise.reslove`和`Promise.reject`来直接创建，例如`Promise.resolve(42)`可以认为是以下代码的语法糖\n\n```js\nnew Promise((reslove)=>{\n    reslove(42);\n});\n```\n\n这段代码可以让这个Promise对象立即进入resolve状态，并将42传递给后面then里所指定的`onFulfilled`函数。此外`Promise.resolve`还有一个作用，就是将非Promise对象转换为Promise对象。\n\n`Promise.reject(value)`与之类似。\n\n## Promise.then()异步调用带来的思考\n\n```js\nvar promise = new Promise(function (resolve){\n    console.log(\"inner promise\"); // 1\n    resolve(42);\n});\npromise.then(function(value){\n    console.log(value); // 3\n});\nconsole.log(\"outer promise\"); // 2\n\n/*输出：\n\"inner promise\"\n\"outer promise\"\n42\n*/\n```\n\n从以上的这段代码我们可以看出`Promise.then()`是异步调用的，这也是Promise设计上规定的，其原因在于**同步调用和异步调用同时存在会导致混乱**。\n\n以上那段代码如果在**调用onReady之前DOM已经载入的话**，对回调函数进行**同步**调用，如果在**调用onReady之前DOM还没有载入的话**，通过注册`DOMContentLoader`事件监听器来对回调进行**异步**调用。这会导致该代码在源文件中不同位置输出不同的结果，关于这个现象，有如下几点：\n\n- 绝对不能对异步函数（即使在数据已经就绪）进行同步调用\n- 如果对异步回调函数进行同步调用，处理顺序可能会与预期不符，带来意外的结果\n- 对异步回调函数进行同步调用，还可能导致栈溢出或者异常处理错乱等问题\n- 如果想在将来的某个时刻调用异步回调，可以使用`setTimeout`等异步API\n\n所以以上代码应该使用` setTimeout(fn, 0)`进行调用。\n\n```js\nfunction onReady(fn) {\n    var readyState = document.readyState;\n    if (readyState === 'interactive' || readyState === 'complete') {\n        setTimeout(fn, 0);\n    } else {\n        window.addEventListener('DOMContentLoaded', fn);\n    }\n}\nonReady(function () {\n    console.log('DOM fully loaded and parsed');\n});\nconsole.log('==Starting==');\n```\n\n所以在Promise中`then`是异步的。\n\n## Promise链式调用\n\n#### 各个Task相互独立\n\n如果想实现Promise的链式调用，要求每次链式调用都返回Promise。所以每个异步执行都需要使用Promise包装，这里有一个<font color='red'>**误区：**</font>每个`then`，`catch`会返回也会反回一个新的Promise，但是**这仅仅实现了链式调用**，如果不将异步操作用Promise进行包装，依然不行。下面的例子就是<font color='red'>**错误的**</font>。\n\n```js\nfunction pro1(){\n    return new Promise((reslove,reject)=>{\n        if(reslove){\n            setTimeout(()=>{console.log(1000)},1000);\n            reslove();\n        }\n    })\n}\n\nfunction pro2(){\n    setTimeout(()=>{console.log(2000)},2000);\n}\n\nfunction pro3(){\n    setTimeout(()=>{console.log(3000)},3000);\n}\n\npro1().then(pro2).then(pro3);\n\nfunction pro1(){\n    setTimeout(()=>{console.log(1000)},1000);\n}\n\nPromise.resolve().then(pro1).then(pro2).then(pro3);\n```\n\n上面的写法有两处错误：\n\n1. 虽然在第一个函数返回了一个Promise，但是由于后面的异步操作并没有被Promise包装，所以并不会起任何作用，**正确的做法是每一个异步操作都要被Promise包装**\n\n2. `resolve()`调用的时机不对，`resolve`需要在异步操作执行完成后调用，所以需要写在异步操作内部，如果像上面那样写在异步操作外面，则不会起作用。\n\n所以正确写法如下：\n\n```js\n//直接返回Promise\nfunction pro1(){\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{console.log(1000);resolve();},1000);\n        \n    })\n}\nfunction pro2(){\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{console.log(5000);resolve();},5000);\n        \n    });\n}\nfunction pro3(){\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{console.log(500);resolve();},500);\n    })\n}\npro1().then(pro2).then(pro3);\n\n//or使用Promise.reslove()\n\nfunction pro1(cb){setTimeout(()=>{console.log(1000);cb()},1000)};\nfunction pro2(cb){setTimeout(()=>{console.log(3000);cb()},3000)};\nfunction pro3(cb){setTimeout(()=>{console.log(500);cb()},500)};\n\n\nPromise.resolve()\n       .then(()=>new Promise(resolve=>pro1(resolve)))\n       .then(()=>new Promise(resolve=>pro2(resolve)))\n       .then(()=>new Promise(resolve=>pro3(resolve)));\n```\n\n#### 各个Task需要参数的传递\n\n在Promise的链式调用中，有可能各个task之间存在相互依赖，例如TaskA想给TaskB传递一个参数，像下面这样：\n\n```js\n/*例1.使用Promise.resolve()启动*/\nlet task1 = (value1)=>value1+1;\nlet task2 = (value2)=>value2+2;\nlet task3 = (value3)=>{console.log(value3+3)};\n\nPromise.resolve(1).then(task1).then(task2).then(task3);//console => 7\n\n\n/*例2.普通的返回一个Promise*/\nfunction task1(value1){\n  return new Promise((resolve,reject)=>{\n    if(resolve){\n      resolve(value1+1);\n    }else{\n      throw new Error(\"throw Error @ task1\");\n    }\n  });\n}\n\nfunction task2(value2){\n  return new Promise((resolve,reject)=>{\n    if(resolve){\n      resolve(value2+2);\n    }else{\n      throw new Error(\"throw Error @ task1\");\n    }\n  });\n}\nfunction task3(value3){\n  return new Promise((resolve,reject)=>{\n    if(resolve){\n      console.log(value3+3);\n    }else{\n      throw new Error(\"throw Error @ task1\");\n    }\n  });\n}\n\ntask1(1).then(task2).then(task3);//console => 7\n```\n关于`reslove`与`reject`有以下两点说明：\n\n- `reslove`函数的作用是将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将**异步操作的结果作为参数传递出去**；\n\n- `reject`函数的作用是将Promise对象状态从“未完成”变为“失败”（即从Pending变为Rejected），在异步操作失败时候调用，并将**异步操作报出的错误作为参数传递出去**；\n\n所以从上面的例子和它们的用法可以看出，如果想要传递给后面task有两种方法：\n\n- 如果使用`Promise.resolve()`启动Promise，则像例1中那样在需要传递的参数前面加`return`即可。\n\n- 如果是利用Promise包装了任务，则把想要传递给下一个task的参数传入`resolve()`即可。\n\n**特别说明：如果需要`resolve()`往后传递多个参数，不能直接写`resolve(a1,a2,a3)`，这样只能拿到第一个要传的参数，需要以数组或对象去传递**\n\n```js\nlet obj = {a1:a1,a2:a2,a3:a3};\nresolve(obj)\n//or\nlet arr =[a1,a2,a3];\nresolve(arr);\n```\n\n## `then`与`catch`返回新的Promise\n\n在Promise中无论是`then`还是`catch`方法，都会返回返回一个新的Promise对象。\n\n![图２](/img/promise/then_catch.png)\n\n```js\nvar aPromise = new Promise(function (resolve) {\n    resolve(100);\n});\nvar thenPromise = aPromise.then(function (value) {\n    console.log(value);\n});\nvar catchPromise = thenPromise.catch(function (error) {\n    console.error(error);\n});\nconsole.log(aPromise !== thenPromise); // => true\nconsole.log(thenPromise !== catchPromise);// => true\n```\n\n所以像下面这样将链式调用分开写是不成功的\n\n```js\n// 1: 对同一个promise对象同时调用 `then` 方法\nvar aPromise = new Promise(function (resolve) {\n    resolve(100);\n});\naPromise.then(function (value) {\n    return value * 2;\n});\naPromise.then(function (value) {\n    return value * 2;\n});\naPromise.then(function (value) {\n    console.log(\"1: \" + value); // => 100\n});\n```\n\n由于每次调用`then`方法都会返回一个新的Promise，所以导致最终输出100而不是100 * 2 * 2。\n\n## Promise.all()的使用\n\n有时候需要多个彼此没有关联的多个异步任务全部执行完成后再执行后面的操作，这时候就需要用到`Promise.all()`，它接收一个Promise的对象的数组作为参数，当这个数组里的所有Promise对象全部变成resolve或者reject的时候，它才会去调用后面的`.then()`。\n\n这里需要说明一点，两个彼此无关的异步操作会同时执行，每个Promise的结果（即每个返回的Promise的resolve或reject时传递的参数）和传递给`Promise.all`的Promise数组的顺序一致。也就是说，假设有两个异步操作TaskA和TaskB，如果传入顺序为`Promise.all([TaskA,TaskB])`，则执行完成后传给`.then`的顺序为[TaskA,TaskB]。\n\n```js\nfunction setTime(time){\n  return new Promise((resolve)=>{\n    setTimeout(()=>resolve(time),time);\n  })\n}\n\nlet startTime = Date.now();\n\nPromise.all([setTime(1),setTime(100),setTime(200)])\n       .then((value)=>{\n         console.log(value);    //[1,100,200]\n         console.log(Date.now() - startTime); //203\n       });\n```\n\n从上面函数的输出值可以看出`Promise.all()`里的异步操作是同时执行的而且传给`.then()`的顺序和`Promise.all()`里的顺序一样。最终执行时间约为200ms，为什么不是200ms，这里涉及到关于`setTimeout`的精准问题，不在这里讨论。\n\n## Promise.race()的使用\n\n`Promise.rance()`的用法与`Promise.all()`类似，不同的地方在于`Promise.all()`是在接收到的所有Promise都变为FulFilled或者Rejected状态之后才会继续进行后面的处理，而`Promise.rance()`只要有一个Promise对象进入FullFilled或者Rejected状态，就会继续进行后续处理。这相当于`Promise.rance()`进行“且”运算而`Promise.rance()`进行`或`运算。但是这里有一点需要注意一下：\n\n```js\nvar taskA = new Promise(function (resolve) {\n        setTimeout(function () {\n            console.log('this is taskA');\n            resolve('this is taskA');\n        }, 4);\n    });\nvar taskB = new Promise(function (resolve) {\n        setTimeout(function () {\n            console.log('this is taskB');\n            resolve('this is taskB');\n        }, 1000);\n    });\n\nPromise.race([winnerPromise, loserPromise]).then(function (value) {\n    console.log(value);\n});\n\n/*\n输出结果：\nthis is taskA\nthis is taskA\nthis is taskB\n*/\n```\n\n从这里可以看出，在第一个Promise变为FulFiled状态运行then里的回调后，后面的Promise并没有停止运行，而是接续执行。也就是说， `Promise.race` 在第一个promise对象变为Fulfilled之后，并不会取消其他promise对象的执行。\n\n## Promise的reject和异步操作error的理解\n\n```js\nfunction ReadEveryFiles(file){\n    return new Promise((resolve,reject)=>{\n        if(resolve){\n            fs.readFile(`${__dirname}/jQuery/${file}`,(err,data)=>{\n                if(err){\n                    console.log(err);\n                }else{\n                    let obj = {data:data,file:file};\n                    resolve(obj);\n                }\n            });\n        }else{\n            //promise reject error\n        }\n    });\n}\n```\n\n这里的readFile的error和Promise的reject不一样，一个是readFile过程中导致的错误，而另一个是Promise做处理的时候导致的错误，可以这样理解，假设读取文件成功了，但是Promise还需要讲这个异步操作得到的数据拿到处理，在Promise做这些操作的时候可能出错。\n\n## 写在最后\n\n这几天开始用Promise写了一些东西，发现其实如果用Promise，会使得代码量加大，因为每一个异步都要被Promise封装，但是这样换来的却是更加容易的维护，所以还是值得的，当代码写完后，我们很容易就能看出代码的执行过程，相对于原来用嵌套去写要直观许多，而如果想要解决Promise的代码量过大的问题，我们可以使用Generator函数，另外，在ES7标准中推出了更加牛的异步解决方案**Async/Await**，关于它们，我将会在随后继续深入。\n\n## 参考\n\n[JavaScript Promise迷你书（中文版）](http://liubin.org/promises-book/#introduction)\n[ECMAScript 6 入门---Promise对象](http://es6.ruanyifeng.com/#docs/promise)\n","source":"_posts/promise.md","raw":"---\ntitle: Promise－－优雅解决回调嵌套\ndate: 2016-12-13 22:34:16\ntags: Javascript\ncomments: true\ncategories: \"Javascript\" \n---\n>最近一直在用空余时间研究node，当我写了一个简单的复制一个文件夹中的文件到另一个位置的时候，我看到了所谓的回调地狱，虽然只是四五个回调嵌套，但是这已经让我感到害怕，我写这么简单的一个小demo就写成这样，那稍微复杂点儿还了得？记得在看ES6的时候，里面提到过一种新的解决回调的方式－－－Promise，而且在node中也常用这个解决大量嵌套，所以这几天花了点儿时间看了看Promise，让我对Promise的认识更加清晰，所以写一些东西总结一下。\n\n<!--more-->\n\n## Promise状态的理解\n\n用`new Promise`实例化的Promise对象有三个状态：\n\n- “has-resolution” - Fulfilled\n\n+ reslove(成功时)，调用`onFulfilled`\n\n- \"has-rejection\" - Rejected\n\n+ reject(失败时)。调用`Rejected`\n\n- \"unresolve\" - Pending\n\n+ 既不是resolve也不是reject状态，也就是Promise刚刚被创建后的初始化状态。\n\n![图１](/img/promise/promise-states.png)\n\n1. 在Chrome中输出`resolve`可以得到`Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}`，可以看出`[[PromiseStatus]]`中存储的就是Promise的状态，但是并没有公开访问`[[PromiseStatus]]`的用户API，所以暂时还无法查询其内部状态。\n\n2. Promise中的`then`的回调只会被调用一次，因为Promise的状态只会从Pending变为Fulfilled或者Rejected，不可逆。\n\n## Promise的使用\n\n在使用Promise实现有序执行异步的基本格式如下：\n\n```js\n//defined Promise async function\nfunction asyncFun(){\n    return new Promise((reslove,reject)=>{\n        if(reslove){\n            reslove(/*reslove parameter*/);\n        }else{\n            reject(new Error(/*Error*/));\n        }\n    })\n}\n\n//use Promise&then\nasyncFun().then(/*function*/).then(/*function*/)...\n```\n\n`reslove`方法的参数就是要传给回调函数的参数，即`resolve`将运行得到的结果传出来，而`then`接受该参数给回调继续执行后面的，如果这个`then`的中的函数还会返回Promise，则会重复执行该步骤直到结束。\n\n`reject`方法的参数一般是包含了reject原因的Error对象。`reject`和`resolve`一样，也会将自己的参数传出去，接收该参数的是`then`的第二个fun或者是`catch`。其实`.catch`只是`Promise.then(onFulfilled,onRejected)`的别名而已。\n\n## 快捷创建Promise\n\n一般情况下我们会使用`new Promise`来创建prmise对象，除此之外我们也可以使用`Promise.reslove`和`Promise.reject`来直接创建，例如`Promise.resolve(42)`可以认为是以下代码的语法糖\n\n```js\nnew Promise((reslove)=>{\n    reslove(42);\n});\n```\n\n这段代码可以让这个Promise对象立即进入resolve状态，并将42传递给后面then里所指定的`onFulfilled`函数。此外`Promise.resolve`还有一个作用，就是将非Promise对象转换为Promise对象。\n\n`Promise.reject(value)`与之类似。\n\n## Promise.then()异步调用带来的思考\n\n```js\nvar promise = new Promise(function (resolve){\n    console.log(\"inner promise\"); // 1\n    resolve(42);\n});\npromise.then(function(value){\n    console.log(value); // 3\n});\nconsole.log(\"outer promise\"); // 2\n\n/*输出：\n\"inner promise\"\n\"outer promise\"\n42\n*/\n```\n\n从以上的这段代码我们可以看出`Promise.then()`是异步调用的，这也是Promise设计上规定的，其原因在于**同步调用和异步调用同时存在会导致混乱**。\n\n以上那段代码如果在**调用onReady之前DOM已经载入的话**，对回调函数进行**同步**调用，如果在**调用onReady之前DOM还没有载入的话**，通过注册`DOMContentLoader`事件监听器来对回调进行**异步**调用。这会导致该代码在源文件中不同位置输出不同的结果，关于这个现象，有如下几点：\n\n- 绝对不能对异步函数（即使在数据已经就绪）进行同步调用\n- 如果对异步回调函数进行同步调用，处理顺序可能会与预期不符，带来意外的结果\n- 对异步回调函数进行同步调用，还可能导致栈溢出或者异常处理错乱等问题\n- 如果想在将来的某个时刻调用异步回调，可以使用`setTimeout`等异步API\n\n所以以上代码应该使用` setTimeout(fn, 0)`进行调用。\n\n```js\nfunction onReady(fn) {\n    var readyState = document.readyState;\n    if (readyState === 'interactive' || readyState === 'complete') {\n        setTimeout(fn, 0);\n    } else {\n        window.addEventListener('DOMContentLoaded', fn);\n    }\n}\nonReady(function () {\n    console.log('DOM fully loaded and parsed');\n});\nconsole.log('==Starting==');\n```\n\n所以在Promise中`then`是异步的。\n\n## Promise链式调用\n\n#### 各个Task相互独立\n\n如果想实现Promise的链式调用，要求每次链式调用都返回Promise。所以每个异步执行都需要使用Promise包装，这里有一个<font color='red'>**误区：**</font>每个`then`，`catch`会返回也会反回一个新的Promise，但是**这仅仅实现了链式调用**，如果不将异步操作用Promise进行包装，依然不行。下面的例子就是<font color='red'>**错误的**</font>。\n\n```js\nfunction pro1(){\n    return new Promise((reslove,reject)=>{\n        if(reslove){\n            setTimeout(()=>{console.log(1000)},1000);\n            reslove();\n        }\n    })\n}\n\nfunction pro2(){\n    setTimeout(()=>{console.log(2000)},2000);\n}\n\nfunction pro3(){\n    setTimeout(()=>{console.log(3000)},3000);\n}\n\npro1().then(pro2).then(pro3);\n\nfunction pro1(){\n    setTimeout(()=>{console.log(1000)},1000);\n}\n\nPromise.resolve().then(pro1).then(pro2).then(pro3);\n```\n\n上面的写法有两处错误：\n\n1. 虽然在第一个函数返回了一个Promise，但是由于后面的异步操作并没有被Promise包装，所以并不会起任何作用，**正确的做法是每一个异步操作都要被Promise包装**\n\n2. `resolve()`调用的时机不对，`resolve`需要在异步操作执行完成后调用，所以需要写在异步操作内部，如果像上面那样写在异步操作外面，则不会起作用。\n\n所以正确写法如下：\n\n```js\n//直接返回Promise\nfunction pro1(){\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{console.log(1000);resolve();},1000);\n        \n    })\n}\nfunction pro2(){\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{console.log(5000);resolve();},5000);\n        \n    });\n}\nfunction pro3(){\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{console.log(500);resolve();},500);\n    })\n}\npro1().then(pro2).then(pro3);\n\n//or使用Promise.reslove()\n\nfunction pro1(cb){setTimeout(()=>{console.log(1000);cb()},1000)};\nfunction pro2(cb){setTimeout(()=>{console.log(3000);cb()},3000)};\nfunction pro3(cb){setTimeout(()=>{console.log(500);cb()},500)};\n\n\nPromise.resolve()\n       .then(()=>new Promise(resolve=>pro1(resolve)))\n       .then(()=>new Promise(resolve=>pro2(resolve)))\n       .then(()=>new Promise(resolve=>pro3(resolve)));\n```\n\n#### 各个Task需要参数的传递\n\n在Promise的链式调用中，有可能各个task之间存在相互依赖，例如TaskA想给TaskB传递一个参数，像下面这样：\n\n```js\n/*例1.使用Promise.resolve()启动*/\nlet task1 = (value1)=>value1+1;\nlet task2 = (value2)=>value2+2;\nlet task3 = (value3)=>{console.log(value3+3)};\n\nPromise.resolve(1).then(task1).then(task2).then(task3);//console => 7\n\n\n/*例2.普通的返回一个Promise*/\nfunction task1(value1){\n  return new Promise((resolve,reject)=>{\n    if(resolve){\n      resolve(value1+1);\n    }else{\n      throw new Error(\"throw Error @ task1\");\n    }\n  });\n}\n\nfunction task2(value2){\n  return new Promise((resolve,reject)=>{\n    if(resolve){\n      resolve(value2+2);\n    }else{\n      throw new Error(\"throw Error @ task1\");\n    }\n  });\n}\nfunction task3(value3){\n  return new Promise((resolve,reject)=>{\n    if(resolve){\n      console.log(value3+3);\n    }else{\n      throw new Error(\"throw Error @ task1\");\n    }\n  });\n}\n\ntask1(1).then(task2).then(task3);//console => 7\n```\n关于`reslove`与`reject`有以下两点说明：\n\n- `reslove`函数的作用是将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将**异步操作的结果作为参数传递出去**；\n\n- `reject`函数的作用是将Promise对象状态从“未完成”变为“失败”（即从Pending变为Rejected），在异步操作失败时候调用，并将**异步操作报出的错误作为参数传递出去**；\n\n所以从上面的例子和它们的用法可以看出，如果想要传递给后面task有两种方法：\n\n- 如果使用`Promise.resolve()`启动Promise，则像例1中那样在需要传递的参数前面加`return`即可。\n\n- 如果是利用Promise包装了任务，则把想要传递给下一个task的参数传入`resolve()`即可。\n\n**特别说明：如果需要`resolve()`往后传递多个参数，不能直接写`resolve(a1,a2,a3)`，这样只能拿到第一个要传的参数，需要以数组或对象去传递**\n\n```js\nlet obj = {a1:a1,a2:a2,a3:a3};\nresolve(obj)\n//or\nlet arr =[a1,a2,a3];\nresolve(arr);\n```\n\n## `then`与`catch`返回新的Promise\n\n在Promise中无论是`then`还是`catch`方法，都会返回返回一个新的Promise对象。\n\n![图２](/img/promise/then_catch.png)\n\n```js\nvar aPromise = new Promise(function (resolve) {\n    resolve(100);\n});\nvar thenPromise = aPromise.then(function (value) {\n    console.log(value);\n});\nvar catchPromise = thenPromise.catch(function (error) {\n    console.error(error);\n});\nconsole.log(aPromise !== thenPromise); // => true\nconsole.log(thenPromise !== catchPromise);// => true\n```\n\n所以像下面这样将链式调用分开写是不成功的\n\n```js\n// 1: 对同一个promise对象同时调用 `then` 方法\nvar aPromise = new Promise(function (resolve) {\n    resolve(100);\n});\naPromise.then(function (value) {\n    return value * 2;\n});\naPromise.then(function (value) {\n    return value * 2;\n});\naPromise.then(function (value) {\n    console.log(\"1: \" + value); // => 100\n});\n```\n\n由于每次调用`then`方法都会返回一个新的Promise，所以导致最终输出100而不是100 * 2 * 2。\n\n## Promise.all()的使用\n\n有时候需要多个彼此没有关联的多个异步任务全部执行完成后再执行后面的操作，这时候就需要用到`Promise.all()`，它接收一个Promise的对象的数组作为参数，当这个数组里的所有Promise对象全部变成resolve或者reject的时候，它才会去调用后面的`.then()`。\n\n这里需要说明一点，两个彼此无关的异步操作会同时执行，每个Promise的结果（即每个返回的Promise的resolve或reject时传递的参数）和传递给`Promise.all`的Promise数组的顺序一致。也就是说，假设有两个异步操作TaskA和TaskB，如果传入顺序为`Promise.all([TaskA,TaskB])`，则执行完成后传给`.then`的顺序为[TaskA,TaskB]。\n\n```js\nfunction setTime(time){\n  return new Promise((resolve)=>{\n    setTimeout(()=>resolve(time),time);\n  })\n}\n\nlet startTime = Date.now();\n\nPromise.all([setTime(1),setTime(100),setTime(200)])\n       .then((value)=>{\n         console.log(value);    //[1,100,200]\n         console.log(Date.now() - startTime); //203\n       });\n```\n\n从上面函数的输出值可以看出`Promise.all()`里的异步操作是同时执行的而且传给`.then()`的顺序和`Promise.all()`里的顺序一样。最终执行时间约为200ms，为什么不是200ms，这里涉及到关于`setTimeout`的精准问题，不在这里讨论。\n\n## Promise.race()的使用\n\n`Promise.rance()`的用法与`Promise.all()`类似，不同的地方在于`Promise.all()`是在接收到的所有Promise都变为FulFilled或者Rejected状态之后才会继续进行后面的处理，而`Promise.rance()`只要有一个Promise对象进入FullFilled或者Rejected状态，就会继续进行后续处理。这相当于`Promise.rance()`进行“且”运算而`Promise.rance()`进行`或`运算。但是这里有一点需要注意一下：\n\n```js\nvar taskA = new Promise(function (resolve) {\n        setTimeout(function () {\n            console.log('this is taskA');\n            resolve('this is taskA');\n        }, 4);\n    });\nvar taskB = new Promise(function (resolve) {\n        setTimeout(function () {\n            console.log('this is taskB');\n            resolve('this is taskB');\n        }, 1000);\n    });\n\nPromise.race([winnerPromise, loserPromise]).then(function (value) {\n    console.log(value);\n});\n\n/*\n输出结果：\nthis is taskA\nthis is taskA\nthis is taskB\n*/\n```\n\n从这里可以看出，在第一个Promise变为FulFiled状态运行then里的回调后，后面的Promise并没有停止运行，而是接续执行。也就是说， `Promise.race` 在第一个promise对象变为Fulfilled之后，并不会取消其他promise对象的执行。\n\n## Promise的reject和异步操作error的理解\n\n```js\nfunction ReadEveryFiles(file){\n    return new Promise((resolve,reject)=>{\n        if(resolve){\n            fs.readFile(`${__dirname}/jQuery/${file}`,(err,data)=>{\n                if(err){\n                    console.log(err);\n                }else{\n                    let obj = {data:data,file:file};\n                    resolve(obj);\n                }\n            });\n        }else{\n            //promise reject error\n        }\n    });\n}\n```\n\n这里的readFile的error和Promise的reject不一样，一个是readFile过程中导致的错误，而另一个是Promise做处理的时候导致的错误，可以这样理解，假设读取文件成功了，但是Promise还需要讲这个异步操作得到的数据拿到处理，在Promise做这些操作的时候可能出错。\n\n## 写在最后\n\n这几天开始用Promise写了一些东西，发现其实如果用Promise，会使得代码量加大，因为每一个异步都要被Promise封装，但是这样换来的却是更加容易的维护，所以还是值得的，当代码写完后，我们很容易就能看出代码的执行过程，相对于原来用嵌套去写要直观许多，而如果想要解决Promise的代码量过大的问题，我们可以使用Generator函数，另外，在ES7标准中推出了更加牛的异步解决方案**Async/Await**，关于它们，我将会在随后继续深入。\n\n## 参考\n\n[JavaScript Promise迷你书（中文版）](http://liubin.org/promises-book/#introduction)\n[ECMAScript 6 入门---Promise对象](http://es6.ruanyifeng.com/#docs/promise)\n","slug":"promise","published":1,"updated":"2016-12-25T05:57:36.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobr002jzrv4rm3i041n","content":"<blockquote>\n<p>最近一直在用空余时间研究node，当我写了一个简单的复制一个文件夹中的文件到另一个位置的时候，我看到了所谓的回调地狱，虽然只是四五个回调嵌套，但是这已经让我感到害怕，我写这么简单的一个小demo就写成这样，那稍微复杂点儿还了得？记得在看ES6的时候，里面提到过一种新的解决回调的方式－－－Promise，而且在node中也常用这个解决大量嵌套，所以这几天花了点儿时间看了看Promise，让我对Promise的认识更加清晰，所以写一些东西总结一下。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Promise状态的理解\"><a href=\"#Promise状态的理解\" class=\"headerlink\" title=\"Promise状态的理解\"></a>Promise状态的理解</h2><p>用<code>new Promise</code>实例化的Promise对象有三个状态：</p>\n<ul>\n<li>“has-resolution” - Fulfilled</li>\n</ul>\n<ul>\n<li>reslove(成功时)，调用<code>onFulfilled</code></li>\n</ul>\n<ul>\n<li>“has-rejection” - Rejected</li>\n</ul>\n<ul>\n<li>reject(失败时)。调用<code>Rejected</code></li>\n</ul>\n<ul>\n<li>“unresolve” - Pending</li>\n</ul>\n<ul>\n<li>既不是resolve也不是reject状态，也就是Promise刚刚被创建后的初始化状态。</li>\n</ul>\n<p><img src=\"/img/promise/promise-states.png\" alt=\"图１\"></p>\n<ol>\n<li><p>在Chrome中输出<code>resolve</code>可以得到<code>Promise {[[PromiseStatus]]: &quot;pending&quot;, [[PromiseValue]]: undefined}</code>，可以看出<code>[[PromiseStatus]]</code>中存储的就是Promise的状态，但是并没有公开访问<code>[[PromiseStatus]]</code>的用户API，所以暂时还无法查询其内部状态。</p>\n</li>\n<li><p>Promise中的<code>then</code>的回调只会被调用一次，因为Promise的状态只会从Pending变为Fulfilled或者Rejected，不可逆。</p>\n</li>\n</ol>\n<h2 id=\"Promise的使用\"><a href=\"#Promise的使用\" class=\"headerlink\" title=\"Promise的使用\"></a>Promise的使用</h2><p>在使用Promise实现有序执行异步的基本格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//defined Promise async function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncFun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reslove)&#123;</span><br><span class=\"line\">            reslove(<span class=\"comment\">/*reslove parameter*/</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"comment\">/*Error*/</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//use Promise&amp;then</span></span><br><span class=\"line\">asyncFun().then(<span class=\"comment\">/*function*/</span>).then(<span class=\"comment\">/*function*/</span>)...</span><br></pre></td></tr></table></figure>\n<p><code>reslove</code>方法的参数就是要传给回调函数的参数，即<code>resolve</code>将运行得到的结果传出来，而<code>then</code>接受该参数给回调继续执行后面的，如果这个<code>then</code>的中的函数还会返回Promise，则会重复执行该步骤直到结束。</p>\n<p><code>reject</code>方法的参数一般是包含了reject原因的Error对象。<code>reject</code>和<code>resolve</code>一样，也会将自己的参数传出去，接收该参数的是<code>then</code>的第二个fun或者是<code>catch</code>。其实<code>.catch</code>只是<code>Promise.then(onFulfilled,onRejected)</code>的别名而已。</p>\n<h2 id=\"快捷创建Promise\"><a href=\"#快捷创建Promise\" class=\"headerlink\" title=\"快捷创建Promise\"></a>快捷创建Promise</h2><p>一般情况下我们会使用<code>new Promise</code>来创建prmise对象，除此之外我们也可以使用<code>Promise.reslove</code>和<code>Promise.reject</code>来直接创建，例如<code>Promise.resolve(42)</code>可以认为是以下代码的语法糖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    reslove(<span class=\"number\">42</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这段代码可以让这个Promise对象立即进入resolve状态，并将42传递给后面then里所指定的<code>onFulfilled</code>函数。此外<code>Promise.resolve</code>还有一个作用，就是将非Promise对象转换为Promise对象。</p>\n<p><code>Promise.reject(value)</code>与之类似。</p>\n<h2 id=\"Promise-then-异步调用带来的思考\"><a href=\"#Promise-then-异步调用带来的思考\" class=\"headerlink\" title=\"Promise.then()异步调用带来的思考\"></a>Promise.then()异步调用带来的思考</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"inner promise\"</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">    resolve(<span class=\"number\">42</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"outer promise\"</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*输出：</span></span><br><span class=\"line\"><span class=\"comment\">\"inner promise\"</span></span><br><span class=\"line\"><span class=\"comment\">\"outer promise\"</span></span><br><span class=\"line\"><span class=\"comment\">42</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>从以上的这段代码我们可以看出<code>Promise.then()</code>是异步调用的，这也是Promise设计上规定的，其原因在于<strong>同步调用和异步调用同时存在会导致混乱</strong>。</p>\n<p>以上那段代码如果在<strong>调用onReady之前DOM已经载入的话</strong>，对回调函数进行<strong>同步</strong>调用，如果在<strong>调用onReady之前DOM还没有载入的话</strong>，通过注册<code>DOMContentLoader</code>事件监听器来对回调进行<strong>异步</strong>调用。这会导致该代码在源文件中不同位置输出不同的结果，关于这个现象，有如下几点：</p>\n<ul>\n<li>绝对不能对异步函数（即使在数据已经就绪）进行同步调用</li>\n<li>如果对异步回调函数进行同步调用，处理顺序可能会与预期不符，带来意外的结果</li>\n<li>对异步回调函数进行同步调用，还可能导致栈溢出或者异常处理错乱等问题</li>\n<li>如果想在将来的某个时刻调用异步回调，可以使用<code>setTimeout</code>等异步API</li>\n</ul>\n<p>所以以上代码应该使用<code>setTimeout(fn, 0)</code>进行调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReady</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> readyState = <span class=\"built_in\">document</span>.readyState;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (readyState === <span class=\"string\">'interactive'</span> || readyState === <span class=\"string\">'complete'</span>) &#123;</span><br><span class=\"line\">        setTimeout(fn, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">onReady(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM fully loaded and parsed'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'==Starting=='</span>);</span><br></pre></td></tr></table></figure>\n<p>所以在Promise中<code>then</code>是异步的。</p>\n<h2 id=\"Promise链式调用\"><a href=\"#Promise链式调用\" class=\"headerlink\" title=\"Promise链式调用\"></a>Promise链式调用</h2><h4 id=\"各个Task相互独立\"><a href=\"#各个Task相互独立\" class=\"headerlink\" title=\"各个Task相互独立\"></a>各个Task相互独立</h4><p>如果想实现Promise的链式调用，要求每次链式调用都返回Promise。所以每个异步执行都需要使用Promise包装，这里有一个<font color=\"red\"><strong>误区：</strong></font>每个<code>then</code>，<code>catch</code>会返回也会反回一个新的Promise，但是<strong>这仅仅实现了链式调用</strong>，如果不将异步操作用Promise进行包装，依然不行。下面的例子就是<font color=\"red\"><strong>错误的</strong></font>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reslove)&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1000</span>)&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">            reslove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2000</span>)&#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">3000</span>)&#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pro1().then(pro2).then(pro3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1000</span>)&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(pro1).then(pro2).then(pro3);</span><br></pre></td></tr></table></figure>\n<p>上面的写法有两处错误：</p>\n<ol>\n<li><p>虽然在第一个函数返回了一个Promise，但是由于后面的异步操作并没有被Promise包装，所以并不会起任何作用，<strong>正确的做法是每一个异步操作都要被Promise包装</strong></p>\n</li>\n<li><p><code>resolve()</code>调用的时机不对，<code>resolve</code>需要在异步操作执行完成后调用，所以需要写在异步操作内部，如果像上面那样写在异步操作外面，则不会起作用。</p>\n</li>\n</ol>\n<p>所以正确写法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接返回Promise</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1000</span>);resolve();&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">5000</span>);resolve();&#125;,<span class=\"number\">5000</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">500</span>);resolve();&#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pro1().then(pro2).then(pro3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or使用Promise.reslove()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro1</span>(<span class=\"params\">cb</span>)</span>&#123;setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1000</span>);cb()&#125;,<span class=\"number\">1000</span>)&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro2</span>(<span class=\"params\">cb</span>)</span>&#123;setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">3000</span>);cb()&#125;,<span class=\"number\">3000</span>)&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro3</span>(<span class=\"params\">cb</span>)</span>&#123;setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">500</span>);cb()&#125;,<span class=\"number\">500</span>)&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">       .then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>pro1(resolve)))</span><br><span class=\"line\">       .then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>pro2(resolve)))</span><br><span class=\"line\">       .then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>pro3(resolve)));</span><br></pre></td></tr></table></figure>\n<h4 id=\"各个Task需要参数的传递\"><a href=\"#各个Task需要参数的传递\" class=\"headerlink\" title=\"各个Task需要参数的传递\"></a>各个Task需要参数的传递</h4><p>在Promise的链式调用中，有可能各个task之间存在相互依赖，例如TaskA想给TaskB传递一个参数，像下面这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*例1.使用Promise.resolve()启动*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> task1 = <span class=\"function\">(<span class=\"params\">value1</span>)=&gt;</span>value1+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> task2 = <span class=\"function\">(<span class=\"params\">value2</span>)=&gt;</span>value2+<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> task3 = <span class=\"function\">(<span class=\"params\">value3</span>)=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(value3+<span class=\"number\">3</span>)&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>).then(task1).then(task2).then(task3);<span class=\"comment\">//console =&gt; 7</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*例2.普通的返回一个Promise*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">task1</span>(<span class=\"params\">value1</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(resolve)&#123;</span><br><span class=\"line\">      resolve(value1+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"throw Error @ task1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">task2</span>(<span class=\"params\">value2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(resolve)&#123;</span><br><span class=\"line\">      resolve(value2+<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"throw Error @ task1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">task3</span>(<span class=\"params\">value3</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(resolve)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(value3+<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"throw Error @ task1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task1(<span class=\"number\">1</span>).then(task2).then(task3);<span class=\"comment\">//console =&gt; 7</span></span><br></pre></td></tr></table></figure>\n<p>关于<code>reslove</code>与<code>reject</code>有以下两点说明：</p>\n<ul>\n<li><p><code>reslove</code>函数的作用是将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将<strong>异步操作的结果作为参数传递出去</strong>；</p>\n</li>\n<li><p><code>reject</code>函数的作用是将Promise对象状态从“未完成”变为“失败”（即从Pending变为Rejected），在异步操作失败时候调用，并将<strong>异步操作报出的错误作为参数传递出去</strong>；</p>\n</li>\n</ul>\n<p>所以从上面的例子和它们的用法可以看出，如果想要传递给后面task有两种方法：</p>\n<ul>\n<li><p>如果使用<code>Promise.resolve()</code>启动Promise，则像例1中那样在需要传递的参数前面加<code>return</code>即可。</p>\n</li>\n<li><p>如果是利用Promise包装了任务，则把想要传递给下一个task的参数传入<code>resolve()</code>即可。</p>\n</li>\n</ul>\n<p><strong>特别说明：如果需要<code>resolve()</code>往后传递多个参数，不能直接写<code>resolve(a1,a2,a3)</code>，这样只能拿到第一个要传的参数，需要以数组或对象去传递</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a1</span>:a1,<span class=\"attr\">a2</span>:a2,<span class=\"attr\">a3</span>:a3&#125;;</span><br><span class=\"line\">resolve(obj)</span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr =[a1,a2,a3];</span><br><span class=\"line\">resolve(arr);</span><br></pre></td></tr></table></figure>\n<h2 id=\"then与catch返回新的Promise\"><a href=\"#then与catch返回新的Promise\" class=\"headerlink\" title=\"then与catch返回新的Promise\"></a><code>then</code>与<code>catch</code>返回新的Promise</h2><p>在Promise中无论是<code>then</code>还是<code>catch</code>方法，都会返回返回一个新的Promise对象。</p>\n<p><img src=\"/img/promise/then_catch.png\" alt=\"图２\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> thenPromise = aPromise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> catchPromise = thenPromise.catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aPromise !== thenPromise); <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(thenPromise !== catchPromise);<span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>所以像下面这样将链式调用分开写是不成功的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1: 对同一个promise对象同时调用 `then` 方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> aPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">aPromise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">aPromise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">aPromise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1: \"</span> + value); <span class=\"comment\">// =&gt; 100</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>由于每次调用<code>then</code>方法都会返回一个新的Promise，所以导致最终输出100而不是100 <em> 2 </em> 2。</p>\n<h2 id=\"Promise-all-的使用\"><a href=\"#Promise-all-的使用\" class=\"headerlink\" title=\"Promise.all()的使用\"></a>Promise.all()的使用</h2><p>有时候需要多个彼此没有关联的多个异步任务全部执行完成后再执行后面的操作，这时候就需要用到<code>Promise.all()</code>，它接收一个Promise的对象的数组作为参数，当这个数组里的所有Promise对象全部变成resolve或者reject的时候，它才会去调用后面的<code>.then()</code>。</p>\n<p>这里需要说明一点，两个彼此无关的异步操作会同时执行，每个Promise的结果（即每个返回的Promise的resolve或reject时传递的参数）和传递给<code>Promise.all</code>的Promise数组的顺序一致。也就是说，假设有两个异步操作TaskA和TaskB，如果传入顺序为<code>Promise.all([TaskA,TaskB])</code>，则执行完成后传给<code>.then</code>的顺序为[TaskA,TaskB]。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTime</span>(<span class=\"params\">time</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>resolve(time),time);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> startTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([setTime(<span class=\"number\">1</span>),setTime(<span class=\"number\">100</span>),setTime(<span class=\"number\">200</span>)])</span><br><span class=\"line\">       .then(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(value);    <span class=\"comment\">//[1,100,200]</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Date</span>.now() - startTime); <span class=\"comment\">//203</span></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<p>从上面函数的输出值可以看出<code>Promise.all()</code>里的异步操作是同时执行的而且传给<code>.then()</code>的顺序和<code>Promise.all()</code>里的顺序一样。最终执行时间约为200ms，为什么不是200ms，这里涉及到关于<code>setTimeout</code>的精准问题，不在这里讨论。</p>\n<h2 id=\"Promise-race-的使用\"><a href=\"#Promise-race-的使用\" class=\"headerlink\" title=\"Promise.race()的使用\"></a>Promise.race()的使用</h2><p><code>Promise.rance()</code>的用法与<code>Promise.all()</code>类似，不同的地方在于<code>Promise.all()</code>是在接收到的所有Promise都变为FulFilled或者Rejected状态之后才会继续进行后面的处理，而<code>Promise.rance()</code>只要有一个Promise对象进入FullFilled或者Rejected状态，就会继续进行后续处理。这相当于<code>Promise.rance()</code>进行“且”运算而<code>Promise.rance()</code>进行<code>或</code>运算。但是这里有一点需要注意一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> taskA = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is taskA'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'this is taskA'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> taskB = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is taskB'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'this is taskB'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([winnerPromise, loserPromise]).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">this is taskA</span></span><br><span class=\"line\"><span class=\"comment\">this is taskA</span></span><br><span class=\"line\"><span class=\"comment\">this is taskB</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>从这里可以看出，在第一个Promise变为FulFiled状态运行then里的回调后，后面的Promise并没有停止运行，而是接续执行。也就是说， <code>Promise.race</code> 在第一个promise对象变为Fulfilled之后，并不会取消其他promise对象的执行。</p>\n<h2 id=\"Promise的reject和异步操作error的理解\"><a href=\"#Promise的reject和异步操作error的理解\" class=\"headerlink\" title=\"Promise的reject和异步操作error的理解\"></a>Promise的reject和异步操作error的理解</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ReadEveryFiles</span>(<span class=\"params\">file</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resolve)&#123;</span><br><span class=\"line\">            fs.readFile(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/jQuery/<span class=\"subst\">$&#123;file&#125;</span>`</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">data</span>:data,<span class=\"attr\">file</span>:file&#125;;</span><br><span class=\"line\">                    resolve(obj);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//promise reject error</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的readFile的error和Promise的reject不一样，一个是readFile过程中导致的错误，而另一个是Promise做处理的时候导致的错误，可以这样理解，假设读取文件成功了，但是Promise还需要讲这个异步操作得到的数据拿到处理，在Promise做这些操作的时候可能出错。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>这几天开始用Promise写了一些东西，发现其实如果用Promise，会使得代码量加大，因为每一个异步都要被Promise封装，但是这样换来的却是更加容易的维护，所以还是值得的，当代码写完后，我们很容易就能看出代码的执行过程，相对于原来用嵌套去写要直观许多，而如果想要解决Promise的代码量过大的问题，我们可以使用Generator函数，另外，在ES7标准中推出了更加牛的异步解决方案<strong>Async/Await</strong>，关于它们，我将会在随后继续深入。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://liubin.org/promises-book/#introduction\" target=\"_blank\" rel=\"noopener\">JavaScript Promise迷你书（中文版）</a><br><a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">ECMAScript 6 入门—Promise对象</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近一直在用空余时间研究node，当我写了一个简单的复制一个文件夹中的文件到另一个位置的时候，我看到了所谓的回调地狱，虽然只是四五个回调嵌套，但是这已经让我感到害怕，我写这么简单的一个小demo就写成这样，那稍微复杂点儿还了得？记得在看ES6的时候，里面提到过一种新的解决回调的方式－－－Promise，而且在node中也常用这个解决大量嵌套，所以这几天花了点儿时间看了看Promise，让我对Promise的认识更加清晰，所以写一些东西总结一下。</p>\n</blockquote>","more":"<h2 id=\"Promise状态的理解\"><a href=\"#Promise状态的理解\" class=\"headerlink\" title=\"Promise状态的理解\"></a>Promise状态的理解</h2><p>用<code>new Promise</code>实例化的Promise对象有三个状态：</p>\n<ul>\n<li>“has-resolution” - Fulfilled</li>\n</ul>\n<ul>\n<li>reslove(成功时)，调用<code>onFulfilled</code></li>\n</ul>\n<ul>\n<li>“has-rejection” - Rejected</li>\n</ul>\n<ul>\n<li>reject(失败时)。调用<code>Rejected</code></li>\n</ul>\n<ul>\n<li>“unresolve” - Pending</li>\n</ul>\n<ul>\n<li>既不是resolve也不是reject状态，也就是Promise刚刚被创建后的初始化状态。</li>\n</ul>\n<p><img src=\"/img/promise/promise-states.png\" alt=\"图１\"></p>\n<ol>\n<li><p>在Chrome中输出<code>resolve</code>可以得到<code>Promise {[[PromiseStatus]]: &quot;pending&quot;, [[PromiseValue]]: undefined}</code>，可以看出<code>[[PromiseStatus]]</code>中存储的就是Promise的状态，但是并没有公开访问<code>[[PromiseStatus]]</code>的用户API，所以暂时还无法查询其内部状态。</p>\n</li>\n<li><p>Promise中的<code>then</code>的回调只会被调用一次，因为Promise的状态只会从Pending变为Fulfilled或者Rejected，不可逆。</p>\n</li>\n</ol>\n<h2 id=\"Promise的使用\"><a href=\"#Promise的使用\" class=\"headerlink\" title=\"Promise的使用\"></a>Promise的使用</h2><p>在使用Promise实现有序执行异步的基本格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//defined Promise async function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncFun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reslove)&#123;</span><br><span class=\"line\">            reslove(<span class=\"comment\">/*reslove parameter*/</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"comment\">/*Error*/</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//use Promise&amp;then</span></span><br><span class=\"line\">asyncFun().then(<span class=\"comment\">/*function*/</span>).then(<span class=\"comment\">/*function*/</span>)...</span><br></pre></td></tr></table></figure>\n<p><code>reslove</code>方法的参数就是要传给回调函数的参数，即<code>resolve</code>将运行得到的结果传出来，而<code>then</code>接受该参数给回调继续执行后面的，如果这个<code>then</code>的中的函数还会返回Promise，则会重复执行该步骤直到结束。</p>\n<p><code>reject</code>方法的参数一般是包含了reject原因的Error对象。<code>reject</code>和<code>resolve</code>一样，也会将自己的参数传出去，接收该参数的是<code>then</code>的第二个fun或者是<code>catch</code>。其实<code>.catch</code>只是<code>Promise.then(onFulfilled,onRejected)</code>的别名而已。</p>\n<h2 id=\"快捷创建Promise\"><a href=\"#快捷创建Promise\" class=\"headerlink\" title=\"快捷创建Promise\"></a>快捷创建Promise</h2><p>一般情况下我们会使用<code>new Promise</code>来创建prmise对象，除此之外我们也可以使用<code>Promise.reslove</code>和<code>Promise.reject</code>来直接创建，例如<code>Promise.resolve(42)</code>可以认为是以下代码的语法糖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    reslove(<span class=\"number\">42</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这段代码可以让这个Promise对象立即进入resolve状态，并将42传递给后面then里所指定的<code>onFulfilled</code>函数。此外<code>Promise.resolve</code>还有一个作用，就是将非Promise对象转换为Promise对象。</p>\n<p><code>Promise.reject(value)</code>与之类似。</p>\n<h2 id=\"Promise-then-异步调用带来的思考\"><a href=\"#Promise-then-异步调用带来的思考\" class=\"headerlink\" title=\"Promise.then()异步调用带来的思考\"></a>Promise.then()异步调用带来的思考</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"inner promise\"</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">    resolve(<span class=\"number\">42</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"outer promise\"</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*输出：</span></span><br><span class=\"line\"><span class=\"comment\">\"inner promise\"</span></span><br><span class=\"line\"><span class=\"comment\">\"outer promise\"</span></span><br><span class=\"line\"><span class=\"comment\">42</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>从以上的这段代码我们可以看出<code>Promise.then()</code>是异步调用的，这也是Promise设计上规定的，其原因在于<strong>同步调用和异步调用同时存在会导致混乱</strong>。</p>\n<p>以上那段代码如果在<strong>调用onReady之前DOM已经载入的话</strong>，对回调函数进行<strong>同步</strong>调用，如果在<strong>调用onReady之前DOM还没有载入的话</strong>，通过注册<code>DOMContentLoader</code>事件监听器来对回调进行<strong>异步</strong>调用。这会导致该代码在源文件中不同位置输出不同的结果，关于这个现象，有如下几点：</p>\n<ul>\n<li>绝对不能对异步函数（即使在数据已经就绪）进行同步调用</li>\n<li>如果对异步回调函数进行同步调用，处理顺序可能会与预期不符，带来意外的结果</li>\n<li>对异步回调函数进行同步调用，还可能导致栈溢出或者异常处理错乱等问题</li>\n<li>如果想在将来的某个时刻调用异步回调，可以使用<code>setTimeout</code>等异步API</li>\n</ul>\n<p>所以以上代码应该使用<code>setTimeout(fn, 0)</code>进行调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReady</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> readyState = <span class=\"built_in\">document</span>.readyState;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (readyState === <span class=\"string\">'interactive'</span> || readyState === <span class=\"string\">'complete'</span>) &#123;</span><br><span class=\"line\">        setTimeout(fn, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">onReady(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'DOM fully loaded and parsed'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'==Starting=='</span>);</span><br></pre></td></tr></table></figure>\n<p>所以在Promise中<code>then</code>是异步的。</p>\n<h2 id=\"Promise链式调用\"><a href=\"#Promise链式调用\" class=\"headerlink\" title=\"Promise链式调用\"></a>Promise链式调用</h2><h4 id=\"各个Task相互独立\"><a href=\"#各个Task相互独立\" class=\"headerlink\" title=\"各个Task相互独立\"></a>各个Task相互独立</h4><p>如果想实现Promise的链式调用，要求每次链式调用都返回Promise。所以每个异步执行都需要使用Promise包装，这里有一个<font color=\"red\"><strong>误区：</strong></font>每个<code>then</code>，<code>catch</code>会返回也会反回一个新的Promise，但是<strong>这仅仅实现了链式调用</strong>，如果不将异步操作用Promise进行包装，依然不行。下面的例子就是<font color=\"red\"><strong>错误的</strong></font>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reslove)&#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1000</span>)&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">            reslove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2000</span>)&#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">3000</span>)&#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pro1().then(pro2).then(pro3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1000</span>)&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(pro1).then(pro2).then(pro3);</span><br></pre></td></tr></table></figure>\n<p>上面的写法有两处错误：</p>\n<ol>\n<li><p>虽然在第一个函数返回了一个Promise，但是由于后面的异步操作并没有被Promise包装，所以并不会起任何作用，<strong>正确的做法是每一个异步操作都要被Promise包装</strong></p>\n</li>\n<li><p><code>resolve()</code>调用的时机不对，<code>resolve</code>需要在异步操作执行完成后调用，所以需要写在异步操作内部，如果像上面那样写在异步操作外面，则不会起作用。</p>\n</li>\n</ol>\n<p>所以正确写法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接返回Promise</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1000</span>);resolve();&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">5000</span>);resolve();&#125;,<span class=\"number\">5000</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">500</span>);resolve();&#125;,<span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pro1().then(pro2).then(pro3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or使用Promise.reslove()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro1</span>(<span class=\"params\">cb</span>)</span>&#123;setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1000</span>);cb()&#125;,<span class=\"number\">1000</span>)&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro2</span>(<span class=\"params\">cb</span>)</span>&#123;setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">3000</span>);cb()&#125;,<span class=\"number\">3000</span>)&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pro3</span>(<span class=\"params\">cb</span>)</span>&#123;setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">500</span>);cb()&#125;,<span class=\"number\">500</span>)&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">       .then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>pro1(resolve)))</span><br><span class=\"line\">       .then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>pro2(resolve)))</span><br><span class=\"line\">       .then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>pro3(resolve)));</span><br></pre></td></tr></table></figure>\n<h4 id=\"各个Task需要参数的传递\"><a href=\"#各个Task需要参数的传递\" class=\"headerlink\" title=\"各个Task需要参数的传递\"></a>各个Task需要参数的传递</h4><p>在Promise的链式调用中，有可能各个task之间存在相互依赖，例如TaskA想给TaskB传递一个参数，像下面这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*例1.使用Promise.resolve()启动*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> task1 = <span class=\"function\">(<span class=\"params\">value1</span>)=&gt;</span>value1+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> task2 = <span class=\"function\">(<span class=\"params\">value2</span>)=&gt;</span>value2+<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> task3 = <span class=\"function\">(<span class=\"params\">value3</span>)=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(value3+<span class=\"number\">3</span>)&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>).then(task1).then(task2).then(task3);<span class=\"comment\">//console =&gt; 7</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*例2.普通的返回一个Promise*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">task1</span>(<span class=\"params\">value1</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(resolve)&#123;</span><br><span class=\"line\">      resolve(value1+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"throw Error @ task1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">task2</span>(<span class=\"params\">value2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(resolve)&#123;</span><br><span class=\"line\">      resolve(value2+<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"throw Error @ task1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">task3</span>(<span class=\"params\">value3</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(resolve)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(value3+<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"throw Error @ task1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task1(<span class=\"number\">1</span>).then(task2).then(task3);<span class=\"comment\">//console =&gt; 7</span></span><br></pre></td></tr></table></figure>\n<p>关于<code>reslove</code>与<code>reject</code>有以下两点说明：</p>\n<ul>\n<li><p><code>reslove</code>函数的作用是将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将<strong>异步操作的结果作为参数传递出去</strong>；</p>\n</li>\n<li><p><code>reject</code>函数的作用是将Promise对象状态从“未完成”变为“失败”（即从Pending变为Rejected），在异步操作失败时候调用，并将<strong>异步操作报出的错误作为参数传递出去</strong>；</p>\n</li>\n</ul>\n<p>所以从上面的例子和它们的用法可以看出，如果想要传递给后面task有两种方法：</p>\n<ul>\n<li><p>如果使用<code>Promise.resolve()</code>启动Promise，则像例1中那样在需要传递的参数前面加<code>return</code>即可。</p>\n</li>\n<li><p>如果是利用Promise包装了任务，则把想要传递给下一个task的参数传入<code>resolve()</code>即可。</p>\n</li>\n</ul>\n<p><strong>特别说明：如果需要<code>resolve()</code>往后传递多个参数，不能直接写<code>resolve(a1,a2,a3)</code>，这样只能拿到第一个要传的参数，需要以数组或对象去传递</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a1</span>:a1,<span class=\"attr\">a2</span>:a2,<span class=\"attr\">a3</span>:a3&#125;;</span><br><span class=\"line\">resolve(obj)</span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr =[a1,a2,a3];</span><br><span class=\"line\">resolve(arr);</span><br></pre></td></tr></table></figure>\n<h2 id=\"then与catch返回新的Promise\"><a href=\"#then与catch返回新的Promise\" class=\"headerlink\" title=\"then与catch返回新的Promise\"></a><code>then</code>与<code>catch</code>返回新的Promise</h2><p>在Promise中无论是<code>then</code>还是<code>catch</code>方法，都会返回返回一个新的Promise对象。</p>\n<p><img src=\"/img/promise/then_catch.png\" alt=\"图２\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> thenPromise = aPromise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> catchPromise = thenPromise.catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aPromise !== thenPromise); <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(thenPromise !== catchPromise);<span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>所以像下面这样将链式调用分开写是不成功的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1: 对同一个promise对象同时调用 `then` 方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> aPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">aPromise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">aPromise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">aPromise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"1: \"</span> + value); <span class=\"comment\">// =&gt; 100</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>由于每次调用<code>then</code>方法都会返回一个新的Promise，所以导致最终输出100而不是100 <em> 2 </em> 2。</p>\n<h2 id=\"Promise-all-的使用\"><a href=\"#Promise-all-的使用\" class=\"headerlink\" title=\"Promise.all()的使用\"></a>Promise.all()的使用</h2><p>有时候需要多个彼此没有关联的多个异步任务全部执行完成后再执行后面的操作，这时候就需要用到<code>Promise.all()</code>，它接收一个Promise的对象的数组作为参数，当这个数组里的所有Promise对象全部变成resolve或者reject的时候，它才会去调用后面的<code>.then()</code>。</p>\n<p>这里需要说明一点，两个彼此无关的异步操作会同时执行，每个Promise的结果（即每个返回的Promise的resolve或reject时传递的参数）和传递给<code>Promise.all</code>的Promise数组的顺序一致。也就是说，假设有两个异步操作TaskA和TaskB，如果传入顺序为<code>Promise.all([TaskA,TaskB])</code>，则执行完成后传给<code>.then</code>的顺序为[TaskA,TaskB]。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTime</span>(<span class=\"params\">time</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>resolve(time),time);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> startTime = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([setTime(<span class=\"number\">1</span>),setTime(<span class=\"number\">100</span>),setTime(<span class=\"number\">200</span>)])</span><br><span class=\"line\">       .then(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(value);    <span class=\"comment\">//[1,100,200]</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Date</span>.now() - startTime); <span class=\"comment\">//203</span></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<p>从上面函数的输出值可以看出<code>Promise.all()</code>里的异步操作是同时执行的而且传给<code>.then()</code>的顺序和<code>Promise.all()</code>里的顺序一样。最终执行时间约为200ms，为什么不是200ms，这里涉及到关于<code>setTimeout</code>的精准问题，不在这里讨论。</p>\n<h2 id=\"Promise-race-的使用\"><a href=\"#Promise-race-的使用\" class=\"headerlink\" title=\"Promise.race()的使用\"></a>Promise.race()的使用</h2><p><code>Promise.rance()</code>的用法与<code>Promise.all()</code>类似，不同的地方在于<code>Promise.all()</code>是在接收到的所有Promise都变为FulFilled或者Rejected状态之后才会继续进行后面的处理，而<code>Promise.rance()</code>只要有一个Promise对象进入FullFilled或者Rejected状态，就会继续进行后续处理。这相当于<code>Promise.rance()</code>进行“且”运算而<code>Promise.rance()</code>进行<code>或</code>运算。但是这里有一点需要注意一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> taskA = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is taskA'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'this is taskA'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> taskB = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is taskB'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'this is taskB'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([winnerPromise, loserPromise]).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">this is taskA</span></span><br><span class=\"line\"><span class=\"comment\">this is taskA</span></span><br><span class=\"line\"><span class=\"comment\">this is taskB</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>从这里可以看出，在第一个Promise变为FulFiled状态运行then里的回调后，后面的Promise并没有停止运行，而是接续执行。也就是说， <code>Promise.race</code> 在第一个promise对象变为Fulfilled之后，并不会取消其他promise对象的执行。</p>\n<h2 id=\"Promise的reject和异步操作error的理解\"><a href=\"#Promise的reject和异步操作error的理解\" class=\"headerlink\" title=\"Promise的reject和异步操作error的理解\"></a>Promise的reject和异步操作error的理解</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ReadEveryFiles</span>(<span class=\"params\">file</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resolve)&#123;</span><br><span class=\"line\">            fs.readFile(<span class=\"string\">`<span class=\"subst\">$&#123;__dirname&#125;</span>/jQuery/<span class=\"subst\">$&#123;file&#125;</span>`</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">data</span>:data,<span class=\"attr\">file</span>:file&#125;;</span><br><span class=\"line\">                    resolve(obj);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//promise reject error</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的readFile的error和Promise的reject不一样，一个是readFile过程中导致的错误，而另一个是Promise做处理的时候导致的错误，可以这样理解，假设读取文件成功了，但是Promise还需要讲这个异步操作得到的数据拿到处理，在Promise做这些操作的时候可能出错。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>这几天开始用Promise写了一些东西，发现其实如果用Promise，会使得代码量加大，因为每一个异步都要被Promise封装，但是这样换来的却是更加容易的维护，所以还是值得的，当代码写完后，我们很容易就能看出代码的执行过程，相对于原来用嵌套去写要直观许多，而如果想要解决Promise的代码量过大的问题，我们可以使用Generator函数，另外，在ES7标准中推出了更加牛的异步解决方案<strong>Async/Await</strong>，关于它们，我将会在随后继续深入。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://liubin.org/promises-book/#introduction\" target=\"_blank\" rel=\"noopener\">JavaScript Promise迷你书（中文版）</a><br><a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">ECMAScript 6 入门—Promise对象</a></p>"},{"title":"小记：React操作真实DOM实现动态吸底部","date":"2017-10-22T09:23:11.000Z","comments":1,"_content":"\n动态吸底：开始时fixed在页面上，当页面滚动到距离底部一定距离的时fixed部分固定。\n\n<!--more-->\n\n这个是需要计算页面滚动距离的，如果使用Jquery或者原生js实现是非常好实现的，但是由于使用react并不推崇操作DOM，但是如果使用virtual DOM的话是无法实现该效果的，所以还是要引入js去直接获取DOM进行操作。\n\nreact在`componentDidMount`之后页面渲染完成，所以可以在这里面直接用js原生方法获取DOM元素，进而进行操作。\n\n```js\ncomponentDidMount() {\n  this.changeFixed()\n}\n\n//計算高度\nchangeFixed(){\n  //getDOMNode\n  const layoutNode = document.querySelectorAll('.page-layout')[0];\n  const orderPriceNode = document.querySelectorAll('.test-price')[0];\n\n  window.addEventListener('scroll', function (e) {\n    const windowInnerHeight = window.innerHeight;\n    const layoutNodeHeight = layoutNode.offsetHeight;\n    //滚动超出视野距离\n    let scrollTop = window.pageYOffset|| document.documentElement.scrollTop || document.body.scrollTop;\n    const distanceBottom = layoutNodeHeight - scrollTop - windowInnerHeight;\n    //120的时候吸底\n    if(distanceBottom <= 120){\n      orderPriceNode.classList.remove('fixed');\n    }else{\n      orderPriceNode.classList.add('fixed');\n    }\n  })\n}\n```\n\n这样就实现了当距离底部120的时候吸底","source":"_posts/reactDOM.md","raw":"---\ntitle: 小记：React操作真实DOM实现动态吸底部\ndate: 2017-10-22 17:23:11\ntags: Javascript\ncomments: true\ncategories: \"Javascript\" \n---\n\n动态吸底：开始时fixed在页面上，当页面滚动到距离底部一定距离的时fixed部分固定。\n\n<!--more-->\n\n这个是需要计算页面滚动距离的，如果使用Jquery或者原生js实现是非常好实现的，但是由于使用react并不推崇操作DOM，但是如果使用virtual DOM的话是无法实现该效果的，所以还是要引入js去直接获取DOM进行操作。\n\nreact在`componentDidMount`之后页面渲染完成，所以可以在这里面直接用js原生方法获取DOM元素，进而进行操作。\n\n```js\ncomponentDidMount() {\n  this.changeFixed()\n}\n\n//計算高度\nchangeFixed(){\n  //getDOMNode\n  const layoutNode = document.querySelectorAll('.page-layout')[0];\n  const orderPriceNode = document.querySelectorAll('.test-price')[0];\n\n  window.addEventListener('scroll', function (e) {\n    const windowInnerHeight = window.innerHeight;\n    const layoutNodeHeight = layoutNode.offsetHeight;\n    //滚动超出视野距离\n    let scrollTop = window.pageYOffset|| document.documentElement.scrollTop || document.body.scrollTop;\n    const distanceBottom = layoutNodeHeight - scrollTop - windowInnerHeight;\n    //120的时候吸底\n    if(distanceBottom <= 120){\n      orderPriceNode.classList.remove('fixed');\n    }else{\n      orderPriceNode.classList.add('fixed');\n    }\n  })\n}\n```\n\n这样就实现了当距离底部120的时候吸底","slug":"reactDOM","published":1,"updated":"2017-10-27T04:37:42.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobs002mzrv4x2h8ltp4","content":"<p>动态吸底：开始时fixed在页面上，当页面滚动到距离底部一定距离的时fixed部分固定。</p>\n<a id=\"more\"></a>\n<p>这个是需要计算页面滚动距离的，如果使用Jquery或者原生js实现是非常好实现的，但是由于使用react并不推崇操作DOM，但是如果使用virtual DOM的话是无法实现该效果的，所以还是要引入js去直接获取DOM进行操作。</p>\n<p>react在<code>componentDidMount</code>之后页面渲染完成，所以可以在这里面直接用js原生方法获取DOM元素，进而进行操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.changeFixed()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//計算高度</span></span><br><span class=\"line\">changeFixed()&#123;</span><br><span class=\"line\">  <span class=\"comment\">//getDOMNode</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> layoutNode = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.page-layout'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> orderPriceNode = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.test-price'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> windowInnerHeight = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> layoutNodeHeight = layoutNode.offsetHeight;</span><br><span class=\"line\">    <span class=\"comment\">//滚动超出视野距离</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> scrollTop = <span class=\"built_in\">window</span>.pageYOffset|| <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> distanceBottom = layoutNodeHeight - scrollTop - windowInnerHeight;</span><br><span class=\"line\">    <span class=\"comment\">//120的时候吸底</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(distanceBottom &lt;= <span class=\"number\">120</span>)&#123;</span><br><span class=\"line\">      orderPriceNode.classList.remove(<span class=\"string\">'fixed'</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      orderPriceNode.classList.add(<span class=\"string\">'fixed'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就实现了当距离底部120的时候吸底</p>\n","site":{"data":{}},"excerpt":"<p>动态吸底：开始时fixed在页面上，当页面滚动到距离底部一定距离的时fixed部分固定。</p>","more":"<p>这个是需要计算页面滚动距离的，如果使用Jquery或者原生js实现是非常好实现的，但是由于使用react并不推崇操作DOM，但是如果使用virtual DOM的话是无法实现该效果的，所以还是要引入js去直接获取DOM进行操作。</p>\n<p>react在<code>componentDidMount</code>之后页面渲染完成，所以可以在这里面直接用js原生方法获取DOM元素，进而进行操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.changeFixed()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//計算高度</span></span><br><span class=\"line\">changeFixed()&#123;</span><br><span class=\"line\">  <span class=\"comment\">//getDOMNode</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> layoutNode = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.page-layout'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> orderPriceNode = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.test-price'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> windowInnerHeight = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> layoutNodeHeight = layoutNode.offsetHeight;</span><br><span class=\"line\">    <span class=\"comment\">//滚动超出视野距离</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> scrollTop = <span class=\"built_in\">window</span>.pageYOffset|| <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> distanceBottom = layoutNodeHeight - scrollTop - windowInnerHeight;</span><br><span class=\"line\">    <span class=\"comment\">//120的时候吸底</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(distanceBottom &lt;= <span class=\"number\">120</span>)&#123;</span><br><span class=\"line\">      orderPriceNode.classList.remove(<span class=\"string\">'fixed'</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      orderPriceNode.classList.add(<span class=\"string\">'fixed'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就实现了当距离底部120的时候吸底</p>"},{"title":"CSS变量污染解决及CSS Modules在React中的应用","date":"2018-04-13T06:32:17.000Z","comments":1,"_content":"由于CSS是全局的，所以在写组件的时候，经常会遇到CSS命名重复导致样式覆盖（冲突），所以我们在写CSS的时候一般会这么处理\n\n* 写复杂的class名，降低冲突的概率\n* 给组件最外层元素添加一个class，限制范围\n\n<!--more-->\n\n但是这样做也不一定可以保证不会冲突，而且还导致class名字太复杂，嵌套太深，可维护性差，那么是否可以将CSS也像JS那样，实现模块化呢？答案是肯定的。CSS模块化方案很多，但是主要的就三类：\n\n#### 命名约定\n\n比较常用的有[BEM](http://mrzhang123.github.io/2017/04/05/BEM/)，SMACSS和OOCSS，但是存在以下问题：\n\n* JS CSS之间依旧没有打通变量和选择器\n* 命名太复杂\n\n#### CSS in JS\n\n直接在JS中写CSS并内联样式，例如aphrodite，babel-plugin-css-in-js等（[点击查看所有CSS in JS的解决方案](http://michelebertoli.github.io/css-in-js/)）但是存在以下问题：\n\n* 样式代码可能会重复出现\n* 写法上已经和传统的CSS不再相似（例如[aphrodite](https://github.com/Khan/aphrodite)，写法类似于React Native中样式的写法）\n* 不能利用成熟的CSS预处理器（或后处理器）\n\n#### 使用JS来管理CSS模块\n\n使用JS编译原生CSS文件，使其具有模块化，典型的就是[CSS Modules](https://github.com/css-modules/css-modules)。只要使用到webpack，就会使用到css-loader，在webpack中稍加配置即可使用\n\n### 使用CSS Modules\n\n配置css-loader启动css modules\n\n```js\n// webpack.config.js\n  {\n    test: /\\.css$/,\n    use: ExtractTextPlugin.extract({\n      fallback: 'style-loader',\n      use: {\n        loader: 'css-loader',\n        options:{\n          modules: true,\n          minimize: true,\n          localIdentName: '[path][name]__[local]--[hash:base64:5]'\n        }\n      }\n    })\n  },\n```\n\n```css\n// Button.css\n.button{\n  font-size: 10px;\n}\n```\n\n```js\n// Button.js\nimport styles from './Button.css'\nconsole.log(styles)\nbuttonElement.outerHTML = `<div class=${styles.button}>Button</div>`\n```\n\nconsole出来的styles如下：\n\n```js\n{\n button:\"src-components-Button-index__button--1mmZb\"\n large:\"src-components-Button-index__large--2atzR\"\n normall:\"src-components-Button-index__normall--3prnh\"\n small:\"src-components-Button-index__small--34Wrr\"\n}\n```\n\n通过以上配置，css loader为我们生成如上class名字，其中`1mmZb`是按照`[hash:base64:5]`生成的，大大降低了命名冲突的概率。\n\n通过这些简单的处理，CSS Modules 实现了以下几点：\n\n* 所有样式都是局部作用域的，解决了全局污染问题\n* class 名生成规则配置灵活，可以此来压缩 class 名\n* 只需引用组件的 JS 就能搞定组件所有的 JS 和 CSS\n* 依然是熟悉的CSS，学习成本低\n\n### 在React中使用CSS Modules\n\n直接在className处使用css中的class名即可\n\n```js\nimport React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport styles from './index.css'\n\nclass Button extends Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    console.log(styles)\n    let buttonClass = ''\n    switch (size) {\n      case 'large':\n        buttonClass = styles.large\n        break\n\n      case 'small':\n        buttonClass = styles.small\n        break\n\n      default:\n        buttonClass = styles.normall\n        break\n    }\n    return (\n      <button className={buttonClass}>确定</button>\n    )\n  }\n}\n\nexport default Button\n```\n\n注\n\n1.使用CSS Modules时发现，它只支持单独的class名字，不能像我们写css的时候一级一级的写，例如：`.a .b .c`，在CSS Modules中就是一步到位`.c`。\n\n2.CSS Modules提供了compose组合方法实现样式的复用，代码如下：\n\n```css\n.font {\n line-height: 12px;\n font-size: 12px;\n}\n\n.title-font {\n composes: font;\n font-size: 24px;\n}\n```\n\n#### React CSS Modules\n\n但是有一个问题，我们在写样式的时候，需要频繁使用 styles.xxx，如何能够方便的直接写入class名字呢？可以使用[React CSS Modules](https://github.com/gajus/react-css-modules)，它以高阶函数的形式生成className\n\n```js\nimport React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport CSSModules from 'react-css-modules'\nimport styles from './index.css'\n\nclass Button extends Component {\n  render() {\n    return (\n      <button styleName='normall'}>确定</button>\n    )\n  }\n}\n\nexport default CSSModules(Button, styles)\n```\n\n可以看到，react-css-modules是运行时的依赖，而且需要在运行时获取className，性能损耗比较大，可否把获取className前置到编译阶段？答案是可以的，可以使用[babel-plugin-react-css-modules](https://github.com/gajus/babel-plugin-react-css-modules)\n\n#### babel-plugin-react-css-modules\n\nbabel-plugin-react-css-modules插件可以实现用styleName属性自动加载CSS模块，通过babel插件来进行语法树解析并最终生成className，写的时候，只需要将我们原来写的className替换成styleName即可。\n\n```js\nimport React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport styles from './index.css'\n\nclass Button extends Component {\n  render() {\n    return (\n      <button styleName='normall'}>确定</button>\n    )\n  }\n}\n\nexport default Button\n```\n\n具体配置可以查看[文档](https://github.com/gajus/babel-plugin-react-css-modules#babel-plugin-react-css-modules)","source":"_posts/react-css-modules.md","raw":"---\ntitle: CSS变量污染解决及CSS Modules在React中的应用\ndate: 2018-04-13 14:32:17\ntags: React\ncomments: true\ncategories: \"React\"\n---\n由于CSS是全局的，所以在写组件的时候，经常会遇到CSS命名重复导致样式覆盖（冲突），所以我们在写CSS的时候一般会这么处理\n\n* 写复杂的class名，降低冲突的概率\n* 给组件最外层元素添加一个class，限制范围\n\n<!--more-->\n\n但是这样做也不一定可以保证不会冲突，而且还导致class名字太复杂，嵌套太深，可维护性差，那么是否可以将CSS也像JS那样，实现模块化呢？答案是肯定的。CSS模块化方案很多，但是主要的就三类：\n\n#### 命名约定\n\n比较常用的有[BEM](http://mrzhang123.github.io/2017/04/05/BEM/)，SMACSS和OOCSS，但是存在以下问题：\n\n* JS CSS之间依旧没有打通变量和选择器\n* 命名太复杂\n\n#### CSS in JS\n\n直接在JS中写CSS并内联样式，例如aphrodite，babel-plugin-css-in-js等（[点击查看所有CSS in JS的解决方案](http://michelebertoli.github.io/css-in-js/)）但是存在以下问题：\n\n* 样式代码可能会重复出现\n* 写法上已经和传统的CSS不再相似（例如[aphrodite](https://github.com/Khan/aphrodite)，写法类似于React Native中样式的写法）\n* 不能利用成熟的CSS预处理器（或后处理器）\n\n#### 使用JS来管理CSS模块\n\n使用JS编译原生CSS文件，使其具有模块化，典型的就是[CSS Modules](https://github.com/css-modules/css-modules)。只要使用到webpack，就会使用到css-loader，在webpack中稍加配置即可使用\n\n### 使用CSS Modules\n\n配置css-loader启动css modules\n\n```js\n// webpack.config.js\n  {\n    test: /\\.css$/,\n    use: ExtractTextPlugin.extract({\n      fallback: 'style-loader',\n      use: {\n        loader: 'css-loader',\n        options:{\n          modules: true,\n          minimize: true,\n          localIdentName: '[path][name]__[local]--[hash:base64:5]'\n        }\n      }\n    })\n  },\n```\n\n```css\n// Button.css\n.button{\n  font-size: 10px;\n}\n```\n\n```js\n// Button.js\nimport styles from './Button.css'\nconsole.log(styles)\nbuttonElement.outerHTML = `<div class=${styles.button}>Button</div>`\n```\n\nconsole出来的styles如下：\n\n```js\n{\n button:\"src-components-Button-index__button--1mmZb\"\n large:\"src-components-Button-index__large--2atzR\"\n normall:\"src-components-Button-index__normall--3prnh\"\n small:\"src-components-Button-index__small--34Wrr\"\n}\n```\n\n通过以上配置，css loader为我们生成如上class名字，其中`1mmZb`是按照`[hash:base64:5]`生成的，大大降低了命名冲突的概率。\n\n通过这些简单的处理，CSS Modules 实现了以下几点：\n\n* 所有样式都是局部作用域的，解决了全局污染问题\n* class 名生成规则配置灵活，可以此来压缩 class 名\n* 只需引用组件的 JS 就能搞定组件所有的 JS 和 CSS\n* 依然是熟悉的CSS，学习成本低\n\n### 在React中使用CSS Modules\n\n直接在className处使用css中的class名即可\n\n```js\nimport React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport styles from './index.css'\n\nclass Button extends Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    console.log(styles)\n    let buttonClass = ''\n    switch (size) {\n      case 'large':\n        buttonClass = styles.large\n        break\n\n      case 'small':\n        buttonClass = styles.small\n        break\n\n      default:\n        buttonClass = styles.normall\n        break\n    }\n    return (\n      <button className={buttonClass}>确定</button>\n    )\n  }\n}\n\nexport default Button\n```\n\n注\n\n1.使用CSS Modules时发现，它只支持单独的class名字，不能像我们写css的时候一级一级的写，例如：`.a .b .c`，在CSS Modules中就是一步到位`.c`。\n\n2.CSS Modules提供了compose组合方法实现样式的复用，代码如下：\n\n```css\n.font {\n line-height: 12px;\n font-size: 12px;\n}\n\n.title-font {\n composes: font;\n font-size: 24px;\n}\n```\n\n#### React CSS Modules\n\n但是有一个问题，我们在写样式的时候，需要频繁使用 styles.xxx，如何能够方便的直接写入class名字呢？可以使用[React CSS Modules](https://github.com/gajus/react-css-modules)，它以高阶函数的形式生成className\n\n```js\nimport React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport CSSModules from 'react-css-modules'\nimport styles from './index.css'\n\nclass Button extends Component {\n  render() {\n    return (\n      <button styleName='normall'}>确定</button>\n    )\n  }\n}\n\nexport default CSSModules(Button, styles)\n```\n\n可以看到，react-css-modules是运行时的依赖，而且需要在运行时获取className，性能损耗比较大，可否把获取className前置到编译阶段？答案是可以的，可以使用[babel-plugin-react-css-modules](https://github.com/gajus/babel-plugin-react-css-modules)\n\n#### babel-plugin-react-css-modules\n\nbabel-plugin-react-css-modules插件可以实现用styleName属性自动加载CSS模块，通过babel插件来进行语法树解析并最终生成className，写的时候，只需要将我们原来写的className替换成styleName即可。\n\n```js\nimport React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport styles from './index.css'\n\nclass Button extends Component {\n  render() {\n    return (\n      <button styleName='normall'}>确定</button>\n    )\n  }\n}\n\nexport default Button\n```\n\n具体配置可以查看[文档](https://github.com/gajus/babel-plugin-react-css-modules#babel-plugin-react-css-modules)","slug":"react-css-modules","published":1,"updated":"2018-04-13T06:34:14.000Z","_id":"cjfxktobu002pzrv46prae6rw","layout":"post","photos":[],"link":"","content":"<p>由于CSS是全局的，所以在写组件的时候，经常会遇到CSS命名重复导致样式覆盖（冲突），所以我们在写CSS的时候一般会这么处理</p>\n<ul>\n<li>写复杂的class名，降低冲突的概率</li>\n<li>给组件最外层元素添加一个class，限制范围</li>\n</ul>\n<a id=\"more\"></a>\n<p>但是这样做也不一定可以保证不会冲突，而且还导致class名字太复杂，嵌套太深，可维护性差，那么是否可以将CSS也像JS那样，实现模块化呢？答案是肯定的。CSS模块化方案很多，但是主要的就三类：</p>\n<h4 id=\"命名约定\"><a href=\"#命名约定\" class=\"headerlink\" title=\"命名约定\"></a>命名约定</h4><p>比较常用的有<a href=\"http://mrzhang123.github.io/2017/04/05/BEM/\">BEM</a>，SMACSS和OOCSS，但是存在以下问题：</p>\n<ul>\n<li>JS CSS之间依旧没有打通变量和选择器</li>\n<li>命名太复杂</li>\n</ul>\n<h4 id=\"CSS-in-JS\"><a href=\"#CSS-in-JS\" class=\"headerlink\" title=\"CSS in JS\"></a>CSS in JS</h4><p>直接在JS中写CSS并内联样式，例如aphrodite，babel-plugin-css-in-js等（<a href=\"http://michelebertoli.github.io/css-in-js/\" target=\"_blank\" rel=\"noopener\">点击查看所有CSS in JS的解决方案</a>）但是存在以下问题：</p>\n<ul>\n<li>样式代码可能会重复出现</li>\n<li>写法上已经和传统的CSS不再相似（例如<a href=\"https://github.com/Khan/aphrodite\" target=\"_blank\" rel=\"noopener\">aphrodite</a>，写法类似于React Native中样式的写法）</li>\n<li>不能利用成熟的CSS预处理器（或后处理器）</li>\n</ul>\n<h4 id=\"使用JS来管理CSS模块\"><a href=\"#使用JS来管理CSS模块\" class=\"headerlink\" title=\"使用JS来管理CSS模块\"></a>使用JS来管理CSS模块</h4><p>使用JS编译原生CSS文件，使其具有模块化，典型的就是<a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"noopener\">CSS Modules</a>。只要使用到webpack，就会使用到css-loader，在webpack中稍加配置即可使用</p>\n<h3 id=\"使用CSS-Modules\"><a href=\"#使用CSS-Modules\" class=\"headerlink\" title=\"使用CSS Modules\"></a>使用CSS Modules</h3><p>配置css-loader启动css modules</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">      fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">      use: &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">        options:&#123;</span><br><span class=\"line\">          modules: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          minimize: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          localIdentName: <span class=\"string\">'[path][name]__[local]--[hash:base64:5]'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Button.css</span><br><span class=\"line\"><span class=\"selector-class\">.button</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Button.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./Button.css'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(styles)</span><br><span class=\"line\">buttonElement.outerHTML = <span class=\"string\">`&lt;div class=<span class=\"subst\">$&#123;styles.button&#125;</span>&gt;Button&lt;/div&gt;`</span></span><br></pre></td></tr></table></figure>\n<p>console出来的styles如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> button:<span class=\"string\">\"src-components-Button-index__button--1mmZb\"</span></span><br><span class=\"line\"> large:<span class=\"string\">\"src-components-Button-index__large--2atzR\"</span></span><br><span class=\"line\"> normall:<span class=\"string\">\"src-components-Button-index__normall--3prnh\"</span></span><br><span class=\"line\"> small:<span class=\"string\">\"src-components-Button-index__small--34Wrr\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过以上配置，css loader为我们生成如上class名字，其中<code>1mmZb</code>是按照<code>[hash:base64:5]</code>生成的，大大降低了命名冲突的概率。</p>\n<p>通过这些简单的处理，CSS Modules 实现了以下几点：</p>\n<ul>\n<li>所有样式都是局部作用域的，解决了全局污染问题</li>\n<li>class 名生成规则配置灵活，可以此来压缩 class 名</li>\n<li>只需引用组件的 JS 就能搞定组件所有的 JS 和 CSS</li>\n<li>依然是熟悉的CSS，学习成本低</li>\n</ul>\n<h3 id=\"在React中使用CSS-Modules\"><a href=\"#在React中使用CSS-Modules\" class=\"headerlink\" title=\"在React中使用CSS Modules\"></a>在React中使用CSS Modules</h3><p>直接在className处使用css中的class名即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(styles)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> buttonClass = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (size) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'large'</span>:</span><br><span class=\"line\">        buttonClass = styles.large</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'small'</span>:</span><br><span class=\"line\">        buttonClass = styles.small</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        buttonClass = styles.normall</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button className=&#123;buttonClass&#125;&gt;确定&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Button</span></span><br></pre></td></tr></table></figure>\n<p>注</p>\n<p>1.使用CSS Modules时发现，它只支持单独的class名字，不能像我们写css的时候一级一级的写，例如：<code>.a .b .c</code>，在CSS Modules中就是一步到位<code>.c</code>。</p>\n<p>2.CSS Modules提供了compose组合方法实现样式的复用，代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.font</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.title-font</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">composes</span>: font;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"React-CSS-Modules\"><a href=\"#React-CSS-Modules\" class=\"headerlink\" title=\"React CSS Modules\"></a>React CSS Modules</h4><p>但是有一个问题，我们在写样式的时候，需要频繁使用 styles.xxx，如何能够方便的直接写入class名字呢？可以使用<a href=\"https://github.com/gajus/react-css-modules\" target=\"_blank\" rel=\"noopener\">React CSS Modules</a>，它以高阶函数的形式生成className</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> CSSModules <span class=\"keyword\">from</span> <span class=\"string\">'react-css-modules'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button styleName=<span class=\"string\">'normall'</span>&#125;&gt;确定&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default CSSModules(Button, styles)</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，react-css-modules是运行时的依赖，而且需要在运行时获取className，性能损耗比较大，可否把获取className前置到编译阶段？答案是可以的，可以使用<a href=\"https://github.com/gajus/babel-plugin-react-css-modules\" target=\"_blank\" rel=\"noopener\">babel-plugin-react-css-modules</a></p>\n<h4 id=\"babel-plugin-react-css-modules\"><a href=\"#babel-plugin-react-css-modules\" class=\"headerlink\" title=\"babel-plugin-react-css-modules\"></a>babel-plugin-react-css-modules</h4><p>babel-plugin-react-css-modules插件可以实现用styleName属性自动加载CSS模块，通过babel插件来进行语法树解析并最终生成className，写的时候，只需要将我们原来写的className替换成styleName即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button styleName=<span class=\"string\">'normall'</span>&#125;&gt;确定&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Button</span></span><br></pre></td></tr></table></figure>\n<p>具体配置可以查看<a href=\"https://github.com/gajus/babel-plugin-react-css-modules#babel-plugin-react-css-modules\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n","site":{"data":{}},"excerpt":"<p>由于CSS是全局的，所以在写组件的时候，经常会遇到CSS命名重复导致样式覆盖（冲突），所以我们在写CSS的时候一般会这么处理</p>\n<ul>\n<li>写复杂的class名，降低冲突的概率</li>\n<li>给组件最外层元素添加一个class，限制范围</li>\n</ul>","more":"<p>但是这样做也不一定可以保证不会冲突，而且还导致class名字太复杂，嵌套太深，可维护性差，那么是否可以将CSS也像JS那样，实现模块化呢？答案是肯定的。CSS模块化方案很多，但是主要的就三类：</p>\n<h4 id=\"命名约定\"><a href=\"#命名约定\" class=\"headerlink\" title=\"命名约定\"></a>命名约定</h4><p>比较常用的有<a href=\"http://mrzhang123.github.io/2017/04/05/BEM/\">BEM</a>，SMACSS和OOCSS，但是存在以下问题：</p>\n<ul>\n<li>JS CSS之间依旧没有打通变量和选择器</li>\n<li>命名太复杂</li>\n</ul>\n<h4 id=\"CSS-in-JS\"><a href=\"#CSS-in-JS\" class=\"headerlink\" title=\"CSS in JS\"></a>CSS in JS</h4><p>直接在JS中写CSS并内联样式，例如aphrodite，babel-plugin-css-in-js等（<a href=\"http://michelebertoli.github.io/css-in-js/\" target=\"_blank\" rel=\"noopener\">点击查看所有CSS in JS的解决方案</a>）但是存在以下问题：</p>\n<ul>\n<li>样式代码可能会重复出现</li>\n<li>写法上已经和传统的CSS不再相似（例如<a href=\"https://github.com/Khan/aphrodite\" target=\"_blank\" rel=\"noopener\">aphrodite</a>，写法类似于React Native中样式的写法）</li>\n<li>不能利用成熟的CSS预处理器（或后处理器）</li>\n</ul>\n<h4 id=\"使用JS来管理CSS模块\"><a href=\"#使用JS来管理CSS模块\" class=\"headerlink\" title=\"使用JS来管理CSS模块\"></a>使用JS来管理CSS模块</h4><p>使用JS编译原生CSS文件，使其具有模块化，典型的就是<a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"noopener\">CSS Modules</a>。只要使用到webpack，就会使用到css-loader，在webpack中稍加配置即可使用</p>\n<h3 id=\"使用CSS-Modules\"><a href=\"#使用CSS-Modules\" class=\"headerlink\" title=\"使用CSS Modules\"></a>使用CSS Modules</h3><p>配置css-loader启动css modules</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">    use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">      fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">      use: &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">        options:&#123;</span><br><span class=\"line\">          modules: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          minimize: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          localIdentName: <span class=\"string\">'[path][name]__[local]--[hash:base64:5]'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Button.css</span><br><span class=\"line\"><span class=\"selector-class\">.button</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Button.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./Button.css'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(styles)</span><br><span class=\"line\">buttonElement.outerHTML = <span class=\"string\">`&lt;div class=<span class=\"subst\">$&#123;styles.button&#125;</span>&gt;Button&lt;/div&gt;`</span></span><br></pre></td></tr></table></figure>\n<p>console出来的styles如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> button:<span class=\"string\">\"src-components-Button-index__button--1mmZb\"</span></span><br><span class=\"line\"> large:<span class=\"string\">\"src-components-Button-index__large--2atzR\"</span></span><br><span class=\"line\"> normall:<span class=\"string\">\"src-components-Button-index__normall--3prnh\"</span></span><br><span class=\"line\"> small:<span class=\"string\">\"src-components-Button-index__small--34Wrr\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过以上配置，css loader为我们生成如上class名字，其中<code>1mmZb</code>是按照<code>[hash:base64:5]</code>生成的，大大降低了命名冲突的概率。</p>\n<p>通过这些简单的处理，CSS Modules 实现了以下几点：</p>\n<ul>\n<li>所有样式都是局部作用域的，解决了全局污染问题</li>\n<li>class 名生成规则配置灵活，可以此来压缩 class 名</li>\n<li>只需引用组件的 JS 就能搞定组件所有的 JS 和 CSS</li>\n<li>依然是熟悉的CSS，学习成本低</li>\n</ul>\n<h3 id=\"在React中使用CSS-Modules\"><a href=\"#在React中使用CSS-Modules\" class=\"headerlink\" title=\"在React中使用CSS Modules\"></a>在React中使用CSS Modules</h3><p>直接在className处使用css中的class名即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(styles)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> buttonClass = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (size) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'large'</span>:</span><br><span class=\"line\">        buttonClass = styles.large</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'small'</span>:</span><br><span class=\"line\">        buttonClass = styles.small</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        buttonClass = styles.normall</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button className=&#123;buttonClass&#125;&gt;确定&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Button</span></span><br></pre></td></tr></table></figure>\n<p>注</p>\n<p>1.使用CSS Modules时发现，它只支持单独的class名字，不能像我们写css的时候一级一级的写，例如：<code>.a .b .c</code>，在CSS Modules中就是一步到位<code>.c</code>。</p>\n<p>2.CSS Modules提供了compose组合方法实现样式的复用，代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.font</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">line-height</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.title-font</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">composes</span>: font;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"React-CSS-Modules\"><a href=\"#React-CSS-Modules\" class=\"headerlink\" title=\"React CSS Modules\"></a>React CSS Modules</h4><p>但是有一个问题，我们在写样式的时候，需要频繁使用 styles.xxx，如何能够方便的直接写入class名字呢？可以使用<a href=\"https://github.com/gajus/react-css-modules\" target=\"_blank\" rel=\"noopener\">React CSS Modules</a>，它以高阶函数的形式生成className</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> CSSModules <span class=\"keyword\">from</span> <span class=\"string\">'react-css-modules'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button styleName=<span class=\"string\">'normall'</span>&#125;&gt;确定&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default CSSModules(Button, styles)</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，react-css-modules是运行时的依赖，而且需要在运行时获取className，性能损耗比较大，可否把获取className前置到编译阶段？答案是可以的，可以使用<a href=\"https://github.com/gajus/babel-plugin-react-css-modules\" target=\"_blank\" rel=\"noopener\">babel-plugin-react-css-modules</a></p>\n<h4 id=\"babel-plugin-react-css-modules\"><a href=\"#babel-plugin-react-css-modules\" class=\"headerlink\" title=\"babel-plugin-react-css-modules\"></a>babel-plugin-react-css-modules</h4><p>babel-plugin-react-css-modules插件可以实现用styleName属性自动加载CSS模块，通过babel插件来进行语法树解析并最终生成className，写的时候，只需要将我们原来写的className替换成styleName即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button styleName=<span class=\"string\">'normall'</span>&#125;&gt;确定&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Button</span></span><br></pre></td></tr></table></figure>\n<p>具体配置可以查看<a href=\"https://github.com/gajus/babel-plugin-react-css-modules#babel-plugin-react-css-modules\" target=\"_blank\" rel=\"noopener\">文档</a></p>"},{"title":"React使用小记","date":"2017-08-13T14:57:48.000Z","comments":1,"_content":"\n>最近一段时间一直在使用react ／ react native结合redux做一些东西，所以总结一下在使用这些东西的时候自己遇到的一些问题\n\n<!--more-->\n\n## setState是异步的\n\n在react中，`setState`是非常常见的，有时候想要在`setState`之后再执行某些操作，可能会这样写：\n\n```js\nthis.setState({xxState})\nif(this.state.xxState){ ... }\n```\n\n当执行时候发现，`this.state.xxState`并没有被改变，原因在于`setState`是异步的，而js执行代码的顺序是`同步 => 异步 => 回调`，所以会先执行if的语句，如果想要在设置完`state`之后再执行后面的语句，代码如下：\n\n```js\nthis.setState({xxState},()=>{\n  if(this.state.xxState){\n    ...\n  }\n})\n```\n\n## 对redux中action变量命名的理解\n\n在redux中有`action`，`reducer`和`store`，我们在写的时候分别写在三个文件夹中，每个模块对应一个`action`，`reducer`，但是最终在运行应用的时候会组和在一起，将所有的`action`合并成一个文件，通过action去找到对应模块的`reducer`，从而找到正确的方法。\n\n如果把redux比做一本书的话，`action`是一本书的目录，而`reducer`则相当于书的每一章的内容，书的目录是不能重复的，否则会导致在寻找内容的时候出现找到两处对应的内容，这在redux中是不允许的。如下图所示：\n\n![react_redux](/img/react/react_redux.jpg)\n\n所以<span style=\"color:red\">action中的常量名在整个项目中是不能重复的</span>，否则会在执行当前模块的reducer时候同时执行其他模块的`reducer`，导致数据的混乱。\n\n##使用react router进行页面传值\n\n首先说明一下，router的跳页方式有两种，一种是直接写`Link`，另一种是使用`hashHistory.push`：\n\n```js\nimport { Router,Route,hashHistory} from 'react-router'\n<Link to=\"/a/b\">链接</Link>\n//or\nclickFun(){\n  hashHistory.push(\"/a/b\")\n}\n<div onClick={()=>this.clickFun()}></div>\n```\n\n有时候需要在跳页的时候给下一个页面传递数据，使用react router有三种方式可以实现该需求：\n\n### props.params\n\n我们可以给`<Route>`指定一个`path`，然后指定通配符可以携带参数到指定的`path`：\n\n```js\nimport { Router,Route,hashHistory} from 'react-router'\nclass App extends React.Component {\n  render() {\n    return (\n        <Router history={hashHistory}>\n            <Route path='/a/:params' component={UserPage}></Route>\n        </Router>\n    )\n  }\n}\n//取值\nexport default class UserPage extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(<div>this.props.params.name</div>)\n    }\n}\n```\n\n上面的方法可以传递一个或多个值，但是每个值的类型都是字符串，没法传递一个对象,如果传递的话可以将json对象转换为字符串，然后传递过去，传递过去之后再将json字符串转换为对象将数据取出来。\n\n### query\n\n使用`query`可以像get方式一样显示传递数据\n\n```js\nlet data = {a:3,b:'b',c:36};\nlet path = {\n  pathname:'/user',\n  query:data,\n}\n<Link to={path}>跳转</Link>\n//or\nhashHistory.push(path)\n//取值\nconst {a,b,c} = this.props.location.query\n```\n\n### state\n\n`state`传递数据方式类似于`post`，使用方式与`query`类似，取值的时候使用`this.props.location.state`\n\n## Object.assign()的使用\n\n在reducer中，使用`Object.assign`将新的`state`与默认的`state`进行合并\n\n```js\nconst initState = {\n  ajaxState:false,\n  orderData: {\n    current_page: 0,\n    per_page_count: 0,\n    total_count:0,\n    total_page:0,\n    data_list: [],\n  }\n}\nexport default (state = initState , action) => {\n  const {type , ajaxState , orderData = {}} = action;\n  switch(type){\n    case ORDERDATA:\n      return Object.assign({},state,{orderData})\n  }\n}\n```\n\n这里`initState`相当于一个默认值，拿到新的state时候就将原有的覆盖掉。\n\n但是在做项目时候遇到一个问题，如果传递部分数据（比如`orderData`只传递传递了`current_page`和`per_page_count`），没有传递的希望保持默认，这样使用`Object.assign`合并会导致合并的结果中未传递的部分直接丢失。\n\n`Object.assign`在合并对象的时候，可以合并简单对象的元素，但是如果对象中在嵌套对象，则子对象不会合并而会直接覆盖，代码如下：\n\n```js\nconst obj = {\n  a:1,\n  b:2\n}\nconst init = {\n  name:'',\n  obj:{\n    a:'',\n    b:'',\n    c:'',\n  }\n}\nObject.assign({},init,obj) \n/*结果\n[object Object] {\n  obj: [object Object] {\n    a: 1,\n    b: 2,\n  },\n  name: \"\"\n}\n*/\n```\n\n所以，如果要让不传递的数据使用默认值，就需要在`reducer`开始拿到传递到的数据时候，将没有传递过来的数据加到传过来的数据上，就需要使用两次`Object.assign`，分别对子对象和对象进行\n\n```js\nexport default (state = initState , action) => {\n  const {type , ajaxState , orderData = {}} = action;\n  //将没有传递过来的数据的默认值加到传过来的state中\n  const defaultOrderData = Object.assign({},initState.orderData,{orderData})\n  switch(type){\n    case ORDERDATA:\n      return Object.assign({},state,{orderData:defaultOrderData})\n  }\n}\n```\n\n这样就可以实现传递部分数据，不传递的使用默认值\n\n从该例子中可以看出，在reducer中，尽量不要使用嵌套对象，因为每嵌套一层，就需要`Object.assign`一次\n\n以上就是最近做react项目的一些总结…","source":"_posts/reactsum.md","raw":"---\ntitle: React使用小记\ndate: 2017-08-13 22:57:48\ntags: React\ncomments: true\ncategories: \"React\"\n---\n\n>最近一段时间一直在使用react ／ react native结合redux做一些东西，所以总结一下在使用这些东西的时候自己遇到的一些问题\n\n<!--more-->\n\n## setState是异步的\n\n在react中，`setState`是非常常见的，有时候想要在`setState`之后再执行某些操作，可能会这样写：\n\n```js\nthis.setState({xxState})\nif(this.state.xxState){ ... }\n```\n\n当执行时候发现，`this.state.xxState`并没有被改变，原因在于`setState`是异步的，而js执行代码的顺序是`同步 => 异步 => 回调`，所以会先执行if的语句，如果想要在设置完`state`之后再执行后面的语句，代码如下：\n\n```js\nthis.setState({xxState},()=>{\n  if(this.state.xxState){\n    ...\n  }\n})\n```\n\n## 对redux中action变量命名的理解\n\n在redux中有`action`，`reducer`和`store`，我们在写的时候分别写在三个文件夹中，每个模块对应一个`action`，`reducer`，但是最终在运行应用的时候会组和在一起，将所有的`action`合并成一个文件，通过action去找到对应模块的`reducer`，从而找到正确的方法。\n\n如果把redux比做一本书的话，`action`是一本书的目录，而`reducer`则相当于书的每一章的内容，书的目录是不能重复的，否则会导致在寻找内容的时候出现找到两处对应的内容，这在redux中是不允许的。如下图所示：\n\n![react_redux](/img/react/react_redux.jpg)\n\n所以<span style=\"color:red\">action中的常量名在整个项目中是不能重复的</span>，否则会在执行当前模块的reducer时候同时执行其他模块的`reducer`，导致数据的混乱。\n\n##使用react router进行页面传值\n\n首先说明一下，router的跳页方式有两种，一种是直接写`Link`，另一种是使用`hashHistory.push`：\n\n```js\nimport { Router,Route,hashHistory} from 'react-router'\n<Link to=\"/a/b\">链接</Link>\n//or\nclickFun(){\n  hashHistory.push(\"/a/b\")\n}\n<div onClick={()=>this.clickFun()}></div>\n```\n\n有时候需要在跳页的时候给下一个页面传递数据，使用react router有三种方式可以实现该需求：\n\n### props.params\n\n我们可以给`<Route>`指定一个`path`，然后指定通配符可以携带参数到指定的`path`：\n\n```js\nimport { Router,Route,hashHistory} from 'react-router'\nclass App extends React.Component {\n  render() {\n    return (\n        <Router history={hashHistory}>\n            <Route path='/a/:params' component={UserPage}></Route>\n        </Router>\n    )\n  }\n}\n//取值\nexport default class UserPage extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(<div>this.props.params.name</div>)\n    }\n}\n```\n\n上面的方法可以传递一个或多个值，但是每个值的类型都是字符串，没法传递一个对象,如果传递的话可以将json对象转换为字符串，然后传递过去，传递过去之后再将json字符串转换为对象将数据取出来。\n\n### query\n\n使用`query`可以像get方式一样显示传递数据\n\n```js\nlet data = {a:3,b:'b',c:36};\nlet path = {\n  pathname:'/user',\n  query:data,\n}\n<Link to={path}>跳转</Link>\n//or\nhashHistory.push(path)\n//取值\nconst {a,b,c} = this.props.location.query\n```\n\n### state\n\n`state`传递数据方式类似于`post`，使用方式与`query`类似，取值的时候使用`this.props.location.state`\n\n## Object.assign()的使用\n\n在reducer中，使用`Object.assign`将新的`state`与默认的`state`进行合并\n\n```js\nconst initState = {\n  ajaxState:false,\n  orderData: {\n    current_page: 0,\n    per_page_count: 0,\n    total_count:0,\n    total_page:0,\n    data_list: [],\n  }\n}\nexport default (state = initState , action) => {\n  const {type , ajaxState , orderData = {}} = action;\n  switch(type){\n    case ORDERDATA:\n      return Object.assign({},state,{orderData})\n  }\n}\n```\n\n这里`initState`相当于一个默认值，拿到新的state时候就将原有的覆盖掉。\n\n但是在做项目时候遇到一个问题，如果传递部分数据（比如`orderData`只传递传递了`current_page`和`per_page_count`），没有传递的希望保持默认，这样使用`Object.assign`合并会导致合并的结果中未传递的部分直接丢失。\n\n`Object.assign`在合并对象的时候，可以合并简单对象的元素，但是如果对象中在嵌套对象，则子对象不会合并而会直接覆盖，代码如下：\n\n```js\nconst obj = {\n  a:1,\n  b:2\n}\nconst init = {\n  name:'',\n  obj:{\n    a:'',\n    b:'',\n    c:'',\n  }\n}\nObject.assign({},init,obj) \n/*结果\n[object Object] {\n  obj: [object Object] {\n    a: 1,\n    b: 2,\n  },\n  name: \"\"\n}\n*/\n```\n\n所以，如果要让不传递的数据使用默认值，就需要在`reducer`开始拿到传递到的数据时候，将没有传递过来的数据加到传过来的数据上，就需要使用两次`Object.assign`，分别对子对象和对象进行\n\n```js\nexport default (state = initState , action) => {\n  const {type , ajaxState , orderData = {}} = action;\n  //将没有传递过来的数据的默认值加到传过来的state中\n  const defaultOrderData = Object.assign({},initState.orderData,{orderData})\n  switch(type){\n    case ORDERDATA:\n      return Object.assign({},state,{orderData:defaultOrderData})\n  }\n}\n```\n\n这样就可以实现传递部分数据，不传递的使用默认值\n\n从该例子中可以看出，在reducer中，尽量不要使用嵌套对象，因为每嵌套一层，就需要`Object.assign`一次\n\n以上就是最近做react项目的一些总结…","slug":"reactsum","published":1,"updated":"2017-10-18T09:50:11.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktobw002uzrv4gl87p9xl","content":"<blockquote>\n<p>最近一段时间一直在使用react ／ react native结合redux做一些东西，所以总结一下在使用这些东西的时候自己遇到的一些问题</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"setState是异步的\"><a href=\"#setState是异步的\" class=\"headerlink\" title=\"setState是异步的\"></a>setState是异步的</h2><p>在react中，<code>setState</code>是非常常见的，有时候想要在<code>setState</code>之后再执行某些操作，可能会这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;xxState&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state.xxState)&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>当执行时候发现，<code>this.state.xxState</code>并没有被改变，原因在于<code>setState</code>是异步的，而js执行代码的顺序是<code>同步 =&gt; 异步 =&gt; 回调</code>，所以会先执行if的语句，如果想要在设置完<code>state</code>之后再执行后面的语句，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;xxState&#125;,()=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state.xxState)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"对redux中action变量命名的理解\"><a href=\"#对redux中action变量命名的理解\" class=\"headerlink\" title=\"对redux中action变量命名的理解\"></a>对redux中action变量命名的理解</h2><p>在redux中有<code>action</code>，<code>reducer</code>和<code>store</code>，我们在写的时候分别写在三个文件夹中，每个模块对应一个<code>action</code>，<code>reducer</code>，但是最终在运行应用的时候会组和在一起，将所有的<code>action</code>合并成一个文件，通过action去找到对应模块的<code>reducer</code>，从而找到正确的方法。</p>\n<p>如果把redux比做一本书的话，<code>action</code>是一本书的目录，而<code>reducer</code>则相当于书的每一章的内容，书的目录是不能重复的，否则会导致在寻找内容的时候出现找到两处对应的内容，这在redux中是不允许的。如下图所示：</p>\n<p><img src=\"/img/react/react_redux.jpg\" alt=\"react_redux\"></p>\n<p>所以<span style=\"color:red\">action中的常量名在整个项目中是不能重复的</span>，否则会在执行当前模块的reducer时候同时执行其他模块的<code>reducer</code>，导致数据的混乱。</p>\n<p>##使用react router进行页面传值</p>\n<p>首先说明一下，router的跳页方式有两种，一种是直接写<code>Link</code>，另一种是使用<code>hashHistory.push</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router,Route,hashHistory&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></span><br><span class=\"line\">&lt;Link to=<span class=\"string\">\"/a/b\"</span>&gt;链接&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/or</span></span><br><span class=\"line\"><span class=\"regexp\">clickFun()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  hashHistory.push(\"/</span>a/b<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;div onClick=&#123;()=&gt;this.clickFun()&#125;&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>有时候需要在跳页的时候给下一个页面传递数据，使用react router有三种方式可以实现该需求：</p>\n<h3 id=\"props-params\"><a href=\"#props-params\" class=\"headerlink\" title=\"props.params\"></a>props.params</h3><p>我们可以给<code>&lt;Route&gt;</code>指定一个<code>path</code>，然后指定通配符可以携带参数到指定的<code>path</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router,Route,hashHistory&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">'/a/:params'</span> component=&#123;UserPage&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/取值</span></span><br><span class=\"line\"><span class=\"regexp\">export default class UserPage extends React.Component&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    constructor(props)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        super(props);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    render()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return(&lt;div&gt;this.props.params.name&lt;/</span>div&gt;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的方法可以传递一个或多个值，但是每个值的类型都是字符串，没法传递一个对象,如果传递的话可以将json对象转换为字符串，然后传递过去，传递过去之后再将json字符串转换为对象将数据取出来。</p>\n<h3 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h3><p>使用<code>query</code>可以像get方式一样显示传递数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>,<span class=\"attr\">b</span>:<span class=\"string\">'b'</span>,<span class=\"attr\">c</span>:<span class=\"number\">36</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> path = &#123;</span><br><span class=\"line\">  pathname:<span class=\"string\">'/user'</span>,</span><br><span class=\"line\">  query:data,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;Link to=&#123;path&#125;&gt;跳转&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/or</span></span><br><span class=\"line\"><span class=\"regexp\">hashHistory.push(path)</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/取值</span></span><br><span class=\"line\"><span class=\"regexp\">const &#123;a,b,c&#125; = this.props.location.query</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h3><p><code>state</code>传递数据方式类似于<code>post</code>，使用方式与<code>query</code>类似，取值的时候使用<code>this.props.location.state</code></p>\n<h2 id=\"Object-assign-的使用\"><a href=\"#Object-assign-的使用\" class=\"headerlink\" title=\"Object.assign()的使用\"></a>Object.assign()的使用</h2><p>在reducer中，使用<code>Object.assign</code>将新的<code>state</code>与默认的<code>state</code>进行合并</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initState = &#123;</span><br><span class=\"line\">  ajaxState:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  orderData: &#123;</span><br><span class=\"line\">    current_page: <span class=\"number\">0</span>,</span><br><span class=\"line\">    per_page_count: <span class=\"number\">0</span>,</span><br><span class=\"line\">    total_count:<span class=\"number\">0</span>,</span><br><span class=\"line\">    total_page:<span class=\"number\">0</span>,</span><br><span class=\"line\">    data_list: [],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = initState , action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;type , ajaxState , orderData = &#123;&#125;&#125; = action;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ORDERDATA:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;,state,&#123;orderData&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里<code>initState</code>相当于一个默认值，拿到新的state时候就将原有的覆盖掉。</p>\n<p>但是在做项目时候遇到一个问题，如果传递部分数据（比如<code>orderData</code>只传递传递了<code>current_page</code>和<code>per_page_count</code>），没有传递的希望保持默认，这样使用<code>Object.assign</code>合并会导致合并的结果中未传递的部分直接丢失。</p>\n<p><code>Object.assign</code>在合并对象的时候，可以合并简单对象的元素，但是如果对象中在嵌套对象，则子对象不会合并而会直接覆盖，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  a:<span class=\"number\">1</span>,</span><br><span class=\"line\">  b:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> init = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">''</span>,</span><br><span class=\"line\">  obj:&#123;</span><br><span class=\"line\">    a:<span class=\"string\">''</span>,</span><br><span class=\"line\">    b:<span class=\"string\">''</span>,</span><br><span class=\"line\">    c:<span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;&#125;,init,obj) </span><br><span class=\"line\"><span class=\"comment\">/*结果</span></span><br><span class=\"line\"><span class=\"comment\">[object Object] &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  obj: [object Object] &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    a: 1,</span></span><br><span class=\"line\"><span class=\"comment\">    b: 2,</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  name: \"\"</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>所以，如果要让不传递的数据使用默认值，就需要在<code>reducer</code>开始拿到传递到的数据时候，将没有传递过来的数据加到传过来的数据上，就需要使用两次<code>Object.assign</code>，分别对子对象和对象进行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = initState , action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;type , ajaxState , orderData = &#123;&#125;&#125; = action;</span><br><span class=\"line\">  <span class=\"comment\">//将没有传递过来的数据的默认值加到传过来的state中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultOrderData = <span class=\"built_in\">Object</span>.assign(&#123;&#125;,initState.orderData,&#123;orderData&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ORDERDATA:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;,state,&#123;<span class=\"attr\">orderData</span>:defaultOrderData&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以实现传递部分数据，不传递的使用默认值</p>\n<p>从该例子中可以看出，在reducer中，尽量不要使用嵌套对象，因为每嵌套一层，就需要<code>Object.assign</code>一次</p>\n<p>以上就是最近做react项目的一些总结…</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近一段时间一直在使用react ／ react native结合redux做一些东西，所以总结一下在使用这些东西的时候自己遇到的一些问题</p>\n</blockquote>","more":"<h2 id=\"setState是异步的\"><a href=\"#setState是异步的\" class=\"headerlink\" title=\"setState是异步的\"></a>setState是异步的</h2><p>在react中，<code>setState</code>是非常常见的，有时候想要在<code>setState</code>之后再执行某些操作，可能会这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;xxState&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state.xxState)&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>当执行时候发现，<code>this.state.xxState</code>并没有被改变，原因在于<code>setState</code>是异步的，而js执行代码的顺序是<code>同步 =&gt; 异步 =&gt; 回调</code>，所以会先执行if的语句，如果想要在设置完<code>state</code>之后再执行后面的语句，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;xxState&#125;,()=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state.xxState)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"对redux中action变量命名的理解\"><a href=\"#对redux中action变量命名的理解\" class=\"headerlink\" title=\"对redux中action变量命名的理解\"></a>对redux中action变量命名的理解</h2><p>在redux中有<code>action</code>，<code>reducer</code>和<code>store</code>，我们在写的时候分别写在三个文件夹中，每个模块对应一个<code>action</code>，<code>reducer</code>，但是最终在运行应用的时候会组和在一起，将所有的<code>action</code>合并成一个文件，通过action去找到对应模块的<code>reducer</code>，从而找到正确的方法。</p>\n<p>如果把redux比做一本书的话，<code>action</code>是一本书的目录，而<code>reducer</code>则相当于书的每一章的内容，书的目录是不能重复的，否则会导致在寻找内容的时候出现找到两处对应的内容，这在redux中是不允许的。如下图所示：</p>\n<p><img src=\"/img/react/react_redux.jpg\" alt=\"react_redux\"></p>\n<p>所以<span style=\"color:red\">action中的常量名在整个项目中是不能重复的</span>，否则会在执行当前模块的reducer时候同时执行其他模块的<code>reducer</code>，导致数据的混乱。</p>\n<p>##使用react router进行页面传值</p>\n<p>首先说明一下，router的跳页方式有两种，一种是直接写<code>Link</code>，另一种是使用<code>hashHistory.push</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router,Route,hashHistory&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></span><br><span class=\"line\">&lt;Link to=<span class=\"string\">\"/a/b\"</span>&gt;链接&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/or</span></span><br><span class=\"line\"><span class=\"regexp\">clickFun()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  hashHistory.push(\"/</span>a/b<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;div onClick=&#123;()=&gt;this.clickFun()&#125;&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>有时候需要在跳页的时候给下一个页面传递数据，使用react router有三种方式可以实现该需求：</p>\n<h3 id=\"props-params\"><a href=\"#props-params\" class=\"headerlink\" title=\"props.params\"></a>props.params</h3><p>我们可以给<code>&lt;Route&gt;</code>指定一个<code>path</code>，然后指定通配符可以携带参数到指定的<code>path</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router,Route,hashHistory&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class=\"line\">            &lt;Route path=<span class=\"string\">'/a/:params'</span> component=&#123;UserPage&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Route</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/取值</span></span><br><span class=\"line\"><span class=\"regexp\">export default class UserPage extends React.Component&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    constructor(props)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        super(props);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    render()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return(&lt;div&gt;this.props.params.name&lt;/</span>div&gt;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的方法可以传递一个或多个值，但是每个值的类型都是字符串，没法传递一个对象,如果传递的话可以将json对象转换为字符串，然后传递过去，传递过去之后再将json字符串转换为对象将数据取出来。</p>\n<h3 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h3><p>使用<code>query</code>可以像get方式一样显示传递数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>,<span class=\"attr\">b</span>:<span class=\"string\">'b'</span>,<span class=\"attr\">c</span>:<span class=\"number\">36</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> path = &#123;</span><br><span class=\"line\">  pathname:<span class=\"string\">'/user'</span>,</span><br><span class=\"line\">  query:data,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;Link to=&#123;path&#125;&gt;跳转&lt;<span class=\"regexp\">/Link&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/or</span></span><br><span class=\"line\"><span class=\"regexp\">hashHistory.push(path)</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/取值</span></span><br><span class=\"line\"><span class=\"regexp\">const &#123;a,b,c&#125; = this.props.location.query</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h3><p><code>state</code>传递数据方式类似于<code>post</code>，使用方式与<code>query</code>类似，取值的时候使用<code>this.props.location.state</code></p>\n<h2 id=\"Object-assign-的使用\"><a href=\"#Object-assign-的使用\" class=\"headerlink\" title=\"Object.assign()的使用\"></a>Object.assign()的使用</h2><p>在reducer中，使用<code>Object.assign</code>将新的<code>state</code>与默认的<code>state</code>进行合并</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initState = &#123;</span><br><span class=\"line\">  ajaxState:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  orderData: &#123;</span><br><span class=\"line\">    current_page: <span class=\"number\">0</span>,</span><br><span class=\"line\">    per_page_count: <span class=\"number\">0</span>,</span><br><span class=\"line\">    total_count:<span class=\"number\">0</span>,</span><br><span class=\"line\">    total_page:<span class=\"number\">0</span>,</span><br><span class=\"line\">    data_list: [],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = initState , action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;type , ajaxState , orderData = &#123;&#125;&#125; = action;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ORDERDATA:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;,state,&#123;orderData&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里<code>initState</code>相当于一个默认值，拿到新的state时候就将原有的覆盖掉。</p>\n<p>但是在做项目时候遇到一个问题，如果传递部分数据（比如<code>orderData</code>只传递传递了<code>current_page</code>和<code>per_page_count</code>），没有传递的希望保持默认，这样使用<code>Object.assign</code>合并会导致合并的结果中未传递的部分直接丢失。</p>\n<p><code>Object.assign</code>在合并对象的时候，可以合并简单对象的元素，但是如果对象中在嵌套对象，则子对象不会合并而会直接覆盖，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  a:<span class=\"number\">1</span>,</span><br><span class=\"line\">  b:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> init = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">''</span>,</span><br><span class=\"line\">  obj:&#123;</span><br><span class=\"line\">    a:<span class=\"string\">''</span>,</span><br><span class=\"line\">    b:<span class=\"string\">''</span>,</span><br><span class=\"line\">    c:<span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;&#125;,init,obj) </span><br><span class=\"line\"><span class=\"comment\">/*结果</span></span><br><span class=\"line\"><span class=\"comment\">[object Object] &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  obj: [object Object] &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    a: 1,</span></span><br><span class=\"line\"><span class=\"comment\">    b: 2,</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  name: \"\"</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>所以，如果要让不传递的数据使用默认值，就需要在<code>reducer</code>开始拿到传递到的数据时候，将没有传递过来的数据加到传过来的数据上，就需要使用两次<code>Object.assign</code>，分别对子对象和对象进行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = initState , action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;type , ajaxState , orderData = &#123;&#125;&#125; = action;</span><br><span class=\"line\">  <span class=\"comment\">//将没有传递过来的数据的默认值加到传过来的state中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultOrderData = <span class=\"built_in\">Object</span>.assign(&#123;&#125;,initState.orderData,&#123;orderData&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(type)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ORDERDATA:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;,state,&#123;<span class=\"attr\">orderData</span>:defaultOrderData&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以实现传递部分数据，不传递的使用默认值</p>\n<p>从该例子中可以看出，在reducer中，尽量不要使用嵌套对象，因为每嵌套一层，就需要<code>Object.assign</code>一次</p>\n<p>以上就是最近做react项目的一些总结…</p>"},{"title":"RN Webview与Web的通信与调试","date":"2017-12-20T11:24:07.000Z","comments":1,"_content":"> React Native Version:0.51\n\nRN 在 0.37 版本中加入了`WebView`功能，所以想要在使用`WebView`,版本必须>=0.37，发送的 message 只能是字符串，所以需要将其他格式的数据转换成字符串，在接收到后再转换回去，其实直接用`JSON.stringify`和`JSON.parse`就可以\n\n<!--more-->\n\n## 加载 html\n\n`source`属性用于指定加载的 html，可以加载在线的页面，也可以加载本地的页面，代码如下：\n\n```js\n// 加载线上页面\n<Webview\n\tsource={{uri: 'http://www.mi.com'}}\n/>\n// 加载本地html文件\n<WebView\n\tsource={require('../src/html/index.html')}\n/>\n```\n\n#### 注意 ⚠️\n\n在 RN 中可以加载 WebView，但是**无法调试，也不能使用 alert 来验证代码 js 代码是否运行成功**，只能通过往 html 写入东西（innerHTML）来验证 js 是否运行成功\n\n## WebView 与 html 的通信\n\n#### webview 发送信息到 html\n\nWebView 给 html 发送信息需要使用`postMessage`，而 html 接收 RN 发过来的信息需要监听`message`事件，代码如下：\n\n```js\n// RN\nclass WebViewExample extends Component {\n  onLoadEnd = () => {\n    this.refs.webview.postMessage = 'this is RN msg'\n  }\n  render() {\n    return (\n      <WebView\n        ref=\"webview\"\n        source={require('../html/index.html')}\n        onLoadEnd={this.onLoadEnd}\n      />\n    )\n  }\n}\nexport default WebViewExample\n// web\nwindow.document.addEventListener('message', function(e) {\n  const message = e.data\n})\n```\n\n**这里需要注意一点**\n\n`postMessage`需要在 webview 加载完成之后再去 post，如果放在`commponentWillMount`里由于页面没有加载完成就 post 信息，会导致 html 端无法监听到 message 事件。\n\n#### html 发送信息到 webview\n\n```js\n// RN\nclass WebViewExample extends Component {\n  handleMessage = e => {\n    const message = e.nativeEvent.data\n  }\n  render() {\n    return (\n      <WebView\n        ref=\"webview\"\n        source={require('../html/index.html')}\n        onMessage={e => this.handleMessage(e)}\n      />\n    )\n  }\n}\nexport default WebViewExample\n\n// web\nwindow.postMessage('this is html msg')\n```\n\n## debug\n\nRN 中 debug webview 和安卓开发中看起来是差不多的，连接好设备后，在 chrome 中输入\n\n```sh\nchrome://inspect\n```\n\n就可以看到安卓设备上正在运行的 webview 了，点击**inspect**就会开启一个调试页面，就可以进行 debug 了，RN 似乎默认开启了 debug 调试，直接就可以看到 webview 中输出的信息。\n\n![webview_debug](/img/rn/webview_debug.jpg)\n\n但是我发现我打开的调试界面是一个错乱的界面，不知道为什么，无奈--！\n\n![debug](/img/rn/debug.jpeg)\n\n### 注意 ⚠️\n\n这里需要注意一点的，由于安卓版本的差异，所以内部的 webview 对 js 的支持程度也不同，**为了保证兼容性，如果使用了 ES6，请转成 ES5，否则会报错**\n\n","source":"_posts/rn-webview.md","raw":"---\ntitle: RN Webview与Web的通信与调试\ndate: 2017-12-20 19:24:07\ntags: React Native\ncomments: true\ncategories: \"React Native\"\n---\n> React Native Version:0.51\n\nRN 在 0.37 版本中加入了`WebView`功能，所以想要在使用`WebView`,版本必须>=0.37，发送的 message 只能是字符串，所以需要将其他格式的数据转换成字符串，在接收到后再转换回去，其实直接用`JSON.stringify`和`JSON.parse`就可以\n\n<!--more-->\n\n## 加载 html\n\n`source`属性用于指定加载的 html，可以加载在线的页面，也可以加载本地的页面，代码如下：\n\n```js\n// 加载线上页面\n<Webview\n\tsource={{uri: 'http://www.mi.com'}}\n/>\n// 加载本地html文件\n<WebView\n\tsource={require('../src/html/index.html')}\n/>\n```\n\n#### 注意 ⚠️\n\n在 RN 中可以加载 WebView，但是**无法调试，也不能使用 alert 来验证代码 js 代码是否运行成功**，只能通过往 html 写入东西（innerHTML）来验证 js 是否运行成功\n\n## WebView 与 html 的通信\n\n#### webview 发送信息到 html\n\nWebView 给 html 发送信息需要使用`postMessage`，而 html 接收 RN 发过来的信息需要监听`message`事件，代码如下：\n\n```js\n// RN\nclass WebViewExample extends Component {\n  onLoadEnd = () => {\n    this.refs.webview.postMessage = 'this is RN msg'\n  }\n  render() {\n    return (\n      <WebView\n        ref=\"webview\"\n        source={require('../html/index.html')}\n        onLoadEnd={this.onLoadEnd}\n      />\n    )\n  }\n}\nexport default WebViewExample\n// web\nwindow.document.addEventListener('message', function(e) {\n  const message = e.data\n})\n```\n\n**这里需要注意一点**\n\n`postMessage`需要在 webview 加载完成之后再去 post，如果放在`commponentWillMount`里由于页面没有加载完成就 post 信息，会导致 html 端无法监听到 message 事件。\n\n#### html 发送信息到 webview\n\n```js\n// RN\nclass WebViewExample extends Component {\n  handleMessage = e => {\n    const message = e.nativeEvent.data\n  }\n  render() {\n    return (\n      <WebView\n        ref=\"webview\"\n        source={require('../html/index.html')}\n        onMessage={e => this.handleMessage(e)}\n      />\n    )\n  }\n}\nexport default WebViewExample\n\n// web\nwindow.postMessage('this is html msg')\n```\n\n## debug\n\nRN 中 debug webview 和安卓开发中看起来是差不多的，连接好设备后，在 chrome 中输入\n\n```sh\nchrome://inspect\n```\n\n就可以看到安卓设备上正在运行的 webview 了，点击**inspect**就会开启一个调试页面，就可以进行 debug 了，RN 似乎默认开启了 debug 调试，直接就可以看到 webview 中输出的信息。\n\n![webview_debug](/img/rn/webview_debug.jpg)\n\n但是我发现我打开的调试界面是一个错乱的界面，不知道为什么，无奈--！\n\n![debug](/img/rn/debug.jpeg)\n\n### 注意 ⚠️\n\n这里需要注意一点的，由于安卓版本的差异，所以内部的 webview 对 js 的支持程度也不同，**为了保证兼容性，如果使用了 ES6，请转成 ES5，否则会报错**\n\n","slug":"rn-webview","published":1,"updated":"2017-12-20T12:00:45.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoby002xzrv4t4dnav4n","content":"<blockquote>\n<p>React Native Version:0.51</p>\n</blockquote>\n<p>RN 在 0.37 版本中加入了<code>WebView</code>功能，所以想要在使用<code>WebView</code>,版本必须&gt;=0.37，发送的 message 只能是字符串，所以需要将其他格式的数据转换成字符串，在接收到后再转换回去，其实直接用<code>JSON.stringify</code>和<code>JSON.parse</code>就可以</p>\n<a id=\"more\"></a>\n<h2 id=\"加载-html\"><a href=\"#加载-html\" class=\"headerlink\" title=\"加载 html\"></a>加载 html</h2><p><code>source</code>属性用于指定加载的 html，可以加载在线的页面，也可以加载本地的页面，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载线上页面</span></span><br><span class=\"line\">&lt;Webview</span><br><span class=\"line\">\tsource=&#123;&#123;<span class=\"attr\">uri</span>: <span class=\"string\">'http://www.mi.com'</span>&#125;&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"><span class=\"comment\">// 加载本地html文件</span></span><br><span class=\"line\">&lt;WebView</span><br><span class=\"line\">\tsource=&#123;<span class=\"built_in\">require</span>(<span class=\"string\">'../src/html/index.html'</span>)&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意-⚠️\"><a href=\"#注意-⚠️\" class=\"headerlink\" title=\"注意 ⚠️\"></a>注意 ⚠️</h4><p>在 RN 中可以加载 WebView，但是<strong>无法调试，也不能使用 alert 来验证代码 js 代码是否运行成功</strong>，只能通过往 html 写入东西（innerHTML）来验证 js 是否运行成功</p>\n<h2 id=\"WebView-与-html-的通信\"><a href=\"#WebView-与-html-的通信\" class=\"headerlink\" title=\"WebView 与 html 的通信\"></a>WebView 与 html 的通信</h2><h4 id=\"webview-发送信息到-html\"><a href=\"#webview-发送信息到-html\" class=\"headerlink\" title=\"webview 发送信息到 html\"></a>webview 发送信息到 html</h4><p>WebView 给 html 发送信息需要使用<code>postMessage</code>，而 html 接收 RN 发过来的信息需要监听<code>message</code>事件，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RN</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebViewExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  onLoadEnd = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refs.webview.postMessage = <span class=\"string\">'this is RN msg'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;WebView</span><br><span class=\"line\">        ref=<span class=\"string\">\"webview\"</span></span><br><span class=\"line\">        source=&#123;<span class=\"built_in\">require</span>(<span class=\"string\">'../html/index.html'</span>)&#125;</span><br><span class=\"line\">        onLoadEnd=&#123;<span class=\"keyword\">this</span>.onLoadEnd&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> WebViewExample</span><br><span class=\"line\"><span class=\"comment\">// web</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.document.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = e.data</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>这里需要注意一点</strong></p>\n<p><code>postMessage</code>需要在 webview 加载完成之后再去 post，如果放在<code>commponentWillMount</code>里由于页面没有加载完成就 post 信息，会导致 html 端无法监听到 message 事件。</p>\n<h4 id=\"html-发送信息到-webview\"><a href=\"#html-发送信息到-webview\" class=\"headerlink\" title=\"html 发送信息到 webview\"></a>html 发送信息到 webview</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RN</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebViewExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleMessage = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = e.nativeEvent.data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;WebView</span><br><span class=\"line\">        ref=<span class=\"string\">\"webview\"</span></span><br><span class=\"line\">        source=&#123;<span class=\"built_in\">require</span>(<span class=\"string\">'../html/index.html'</span>)&#125;</span><br><span class=\"line\">        onMessage=&#123;e =&gt; <span class=\"keyword\">this</span>.handleMessage(e)&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> WebViewExample</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// web</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.postMessage(<span class=\"string\">'this is html msg'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><p>RN 中 debug webview 和安卓开发中看起来是差不多的，连接好设备后，在 chrome 中输入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome://inspect</span><br></pre></td></tr></table></figure>\n<p>就可以看到安卓设备上正在运行的 webview 了，点击<strong>inspect</strong>就会开启一个调试页面，就可以进行 debug 了，RN 似乎默认开启了 debug 调试，直接就可以看到 webview 中输出的信息。</p>\n<p><img src=\"/img/rn/webview_debug.jpg\" alt=\"webview_debug\"></p>\n<p>但是我发现我打开的调试界面是一个错乱的界面，不知道为什么，无奈–！</p>\n<p><img src=\"/img/rn/debug.jpeg\" alt=\"debug\"></p>\n<h3 id=\"注意-⚠️-1\"><a href=\"#注意-⚠️-1\" class=\"headerlink\" title=\"注意 ⚠️\"></a>注意 ⚠️</h3><p>这里需要注意一点的，由于安卓版本的差异，所以内部的 webview 对 js 的支持程度也不同，<strong>为了保证兼容性，如果使用了 ES6，请转成 ES5，否则会报错</strong></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>React Native Version:0.51</p>\n</blockquote>\n<p>RN 在 0.37 版本中加入了<code>WebView</code>功能，所以想要在使用<code>WebView</code>,版本必须&gt;=0.37，发送的 message 只能是字符串，所以需要将其他格式的数据转换成字符串，在接收到后再转换回去，其实直接用<code>JSON.stringify</code>和<code>JSON.parse</code>就可以</p>","more":"<h2 id=\"加载-html\"><a href=\"#加载-html\" class=\"headerlink\" title=\"加载 html\"></a>加载 html</h2><p><code>source</code>属性用于指定加载的 html，可以加载在线的页面，也可以加载本地的页面，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载线上页面</span></span><br><span class=\"line\">&lt;Webview</span><br><span class=\"line\">\tsource=&#123;&#123;<span class=\"attr\">uri</span>: <span class=\"string\">'http://www.mi.com'</span>&#125;&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"><span class=\"comment\">// 加载本地html文件</span></span><br><span class=\"line\">&lt;WebView</span><br><span class=\"line\">\tsource=&#123;<span class=\"built_in\">require</span>(<span class=\"string\">'../src/html/index.html'</span>)&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意-⚠️\"><a href=\"#注意-⚠️\" class=\"headerlink\" title=\"注意 ⚠️\"></a>注意 ⚠️</h4><p>在 RN 中可以加载 WebView，但是<strong>无法调试，也不能使用 alert 来验证代码 js 代码是否运行成功</strong>，只能通过往 html 写入东西（innerHTML）来验证 js 是否运行成功</p>\n<h2 id=\"WebView-与-html-的通信\"><a href=\"#WebView-与-html-的通信\" class=\"headerlink\" title=\"WebView 与 html 的通信\"></a>WebView 与 html 的通信</h2><h4 id=\"webview-发送信息到-html\"><a href=\"#webview-发送信息到-html\" class=\"headerlink\" title=\"webview 发送信息到 html\"></a>webview 发送信息到 html</h4><p>WebView 给 html 发送信息需要使用<code>postMessage</code>，而 html 接收 RN 发过来的信息需要监听<code>message</code>事件，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RN</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebViewExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  onLoadEnd = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refs.webview.postMessage = <span class=\"string\">'this is RN msg'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;WebView</span><br><span class=\"line\">        ref=<span class=\"string\">\"webview\"</span></span><br><span class=\"line\">        source=&#123;<span class=\"built_in\">require</span>(<span class=\"string\">'../html/index.html'</span>)&#125;</span><br><span class=\"line\">        onLoadEnd=&#123;<span class=\"keyword\">this</span>.onLoadEnd&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> WebViewExample</span><br><span class=\"line\"><span class=\"comment\">// web</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.document.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = e.data</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>这里需要注意一点</strong></p>\n<p><code>postMessage</code>需要在 webview 加载完成之后再去 post，如果放在<code>commponentWillMount</code>里由于页面没有加载完成就 post 信息，会导致 html 端无法监听到 message 事件。</p>\n<h4 id=\"html-发送信息到-webview\"><a href=\"#html-发送信息到-webview\" class=\"headerlink\" title=\"html 发送信息到 webview\"></a>html 发送信息到 webview</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RN</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebViewExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  handleMessage = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = e.nativeEvent.data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;WebView</span><br><span class=\"line\">        ref=<span class=\"string\">\"webview\"</span></span><br><span class=\"line\">        source=&#123;<span class=\"built_in\">require</span>(<span class=\"string\">'../html/index.html'</span>)&#125;</span><br><span class=\"line\">        onMessage=&#123;e =&gt; <span class=\"keyword\">this</span>.handleMessage(e)&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> WebViewExample</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// web</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.postMessage(<span class=\"string\">'this is html msg'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h2><p>RN 中 debug webview 和安卓开发中看起来是差不多的，连接好设备后，在 chrome 中输入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chrome://inspect</span><br></pre></td></tr></table></figure>\n<p>就可以看到安卓设备上正在运行的 webview 了，点击<strong>inspect</strong>就会开启一个调试页面，就可以进行 debug 了，RN 似乎默认开启了 debug 调试，直接就可以看到 webview 中输出的信息。</p>\n<p><img src=\"/img/rn/webview_debug.jpg\" alt=\"webview_debug\"></p>\n<p>但是我发现我打开的调试界面是一个错乱的界面，不知道为什么，无奈–！</p>\n<p><img src=\"/img/rn/debug.jpeg\" alt=\"debug\"></p>\n<h3 id=\"注意-⚠️-1\"><a href=\"#注意-⚠️-1\" class=\"headerlink\" title=\"注意 ⚠️\"></a>注意 ⚠️</h3><p>这里需要注意一点的，由于安卓版本的差异，所以内部的 webview 对 js 的支持程度也不同，<strong>为了保证兼容性，如果使用了 ES6，请转成 ES5，否则会报错</strong></p>"},{"title":"六月总结","date":"2016-06-29T16:03:50.000Z","comments":1,"_content":"> 不知不觉中，六月已经过去，七月悄悄到来，写这篇文章，总结六月，并给七月做一些计划。在未来，每个月都会做一次总结，无论得失，都记录下来，记录自己的成长。\n\n&emsp;&emsp;六月结束，2016年也已过去一半。六月收获很多，无论是工作还是生活。在2015年年底的时候我曾经计划，在2016年要学习新的编程上的技术，每天跑步，学吉他，多读书。在六月，我终于全部开始做了。\n<!--more-->\n### 技能\n&emsp;&emsp;六月上旬的时候，因为公司没什么事儿，我又开始研究vuejs，其实关于vuejs，我很早的时候就知道了，记得去年的时候我关注勾三股四大神的微博，第一次知道vue，后来有看过vuejs的官方文档，但是由于自己在之前没有接触过MVVM框架，所以看起来非常吃力，根本看不懂官方的教程在说什么。前前后后看过也有那么两三次了，期间我也有意无意的关注过关于MVVM的一些概念什么的，并在[掘金](http://gold.xitu.io/#/)和[segmentfault](https://segmentfault.com/)上面关注关于vue的文章，现在vue很火，所以文章也比较好找很多了，另外这两个网站不错，推荐给大家。\n&emsp;&emsp;这个月开始研究vue的时候，在segmentfault上面看到两篇关于vue的非常基础的文章，分别是[从零开始学Vue](https://segmentfault.com/a/1190000005041030)和[组件改变生活_揭开Vue组件的神秘面纱](https://segmentfault.com/a/1190000005045219)。正是这两篇文章让我开始真正的走进vue，而[vue + webpack 起手式](https://segmentfault.com/a/1190000005363030)，让我开始了解webpack与vue是怎么配合从而实现利用vue写组件。正是这三篇文章，开始让我对vue和webpack有了了解并开始写一些demo，我把demo上传到了github，[我的demo地址](https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo)。\n&emsp;&emsp;其实我公司的业务没有用到vue，那为什么我去学呢，其实我觉得我自己学一些东西，就是好奇，现在的前端，模块儿化，MVVM，双向数据绑定等等一些东西的出现，让我感觉很好奇，我想知道为什么这些东西很受欢迎，为什么会火，所以才去慢慢的了解它，选择一个代表去学习它，当然了，如果将来有机会，我会把vue用到公司的项目中，给公司的前端技术带来新的东西（说实话现在我们公司依然用传统的前端开发模式让我觉得有点儿low了，哈哈）。正是这种好奇心驱使着我不断去探索一些对我来说的新东西，而前端变化太快，总有一些新东西可以让我去探索，这也是我选择前端，喜欢前端的重要原因。貌似扯的有点儿远了，哈哈。对了，就在上午，CTO让我下周分享vuejs的一些用法和心得，我很荣幸可以去给公司分享这些东西，只是我得认真准备一下啦，这个比较麻烦一点儿，嘿嘿。\n&emsp;&emsp;六月中旬的时候，我决定买把吉他玩，因为那时候我迷上了民谣，听赵雷的歌，像南方姑娘，未给姐姐寄出的信等等，决定买一个，其实我以前也听一些纯音乐，像钢琴，小提琴，吉他等等，但是为什么我选择吉他呢，因为吉他便宜，哈哈哈。我自己是程序员，我认为码代码是我的工作，但不能是我生活的全部，我不能一天到晚码代码，所以我搞了把吉他玩儿，在此之前从未对音乐这么认真过，小时候上过音乐课，但是和没上过一样，原因大家应该都懂的，哈哈。说实话，学吉他可不简单，自己本身有点儿胖，指头上的肉也不少，刚开始按的时候真的是，非常疼啊，不过我既然决定要学了，就要学会它，这半个月来，几乎每天都会抽出点儿时间来去练习，我的第一个目标就是能弹唱《南方姑娘》，为了这个目标，我得努力了。\n### 成长\n&emsp;&emsp;六月开始我每天看会儿书，这个书不是编程的书，而是一些其他的书。其实我本身并不爱看书，小时候觉得看不看无所谓，我想看就看看，不想看就不看，没什么，但是越长大越觉得确实应该多读书，读书可以让我看到不一样的世界，不是有人说过么“现代人的问题在于读书太少而想的太多”，我想这也是烦恼的最大的来源，有时候我也很烦，所以我要努力做一个读书多的人。读的书越多，接触到的就越多，懂的也就越多。努力多读书，学会做人做事，这是我的目标。\n&emsp;&emsp;六月月底的时候，因为粗心在合并代码的时候把别人的给覆盖了，这让我们测试很生气，虽然并没有骂，但是看的出来，很生气，我也知道确实是自己的问题，所以不知道该说什么，只能默默的把原来的代码拷贝出来，然后把自己的功能加进去。事后在回家的路上我给我们测试发了QQ信息，给他道歉，我们测试也接受了我的道歉。六月底的时候我开始读卡耐基的《人性的弱点》，虽热在写本文的时候还没读完，但是我从前面的几个章节看得出来，它其实想告诉人们，做人最重要的是真诚，真心，错了就是错了，不需要辩解，给别人造成麻烦了，就要道歉，这是我悟到的一个道理，也算是一次成长吧。\n### 新计划\n&emsp;&emsp;七月开始了，计划在这个月依旧学习vue，并改造公司移动端的项目，同时继续学习ES6，之前虽然学过，但是并没学完，七月继续。同时要每天跑步，说是跑步，不如说是对自己的一种在意志上的一种锻炼，一种坚持做一件事的态度。吉他练得虽然手疼吧，但是既然想学，就学好。从六月开始每个月都总结一下，记录自己一步步的成长，记录得与失，活出精彩，做最好的自己。\n","source":"_posts/summarize-June.md","raw":"---\ntitle: 六月总结\ndate: 2016-06-30 00:03:50\ntags: 生活\ncomments: true\ncategories: \"生活\"\n---\n> 不知不觉中，六月已经过去，七月悄悄到来，写这篇文章，总结六月，并给七月做一些计划。在未来，每个月都会做一次总结，无论得失，都记录下来，记录自己的成长。\n\n&emsp;&emsp;六月结束，2016年也已过去一半。六月收获很多，无论是工作还是生活。在2015年年底的时候我曾经计划，在2016年要学习新的编程上的技术，每天跑步，学吉他，多读书。在六月，我终于全部开始做了。\n<!--more-->\n### 技能\n&emsp;&emsp;六月上旬的时候，因为公司没什么事儿，我又开始研究vuejs，其实关于vuejs，我很早的时候就知道了，记得去年的时候我关注勾三股四大神的微博，第一次知道vue，后来有看过vuejs的官方文档，但是由于自己在之前没有接触过MVVM框架，所以看起来非常吃力，根本看不懂官方的教程在说什么。前前后后看过也有那么两三次了，期间我也有意无意的关注过关于MVVM的一些概念什么的，并在[掘金](http://gold.xitu.io/#/)和[segmentfault](https://segmentfault.com/)上面关注关于vue的文章，现在vue很火，所以文章也比较好找很多了，另外这两个网站不错，推荐给大家。\n&emsp;&emsp;这个月开始研究vue的时候，在segmentfault上面看到两篇关于vue的非常基础的文章，分别是[从零开始学Vue](https://segmentfault.com/a/1190000005041030)和[组件改变生活_揭开Vue组件的神秘面纱](https://segmentfault.com/a/1190000005045219)。正是这两篇文章让我开始真正的走进vue，而[vue + webpack 起手式](https://segmentfault.com/a/1190000005363030)，让我开始了解webpack与vue是怎么配合从而实现利用vue写组件。正是这三篇文章，开始让我对vue和webpack有了了解并开始写一些demo，我把demo上传到了github，[我的demo地址](https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo)。\n&emsp;&emsp;其实我公司的业务没有用到vue，那为什么我去学呢，其实我觉得我自己学一些东西，就是好奇，现在的前端，模块儿化，MVVM，双向数据绑定等等一些东西的出现，让我感觉很好奇，我想知道为什么这些东西很受欢迎，为什么会火，所以才去慢慢的了解它，选择一个代表去学习它，当然了，如果将来有机会，我会把vue用到公司的项目中，给公司的前端技术带来新的东西（说实话现在我们公司依然用传统的前端开发模式让我觉得有点儿low了，哈哈）。正是这种好奇心驱使着我不断去探索一些对我来说的新东西，而前端变化太快，总有一些新东西可以让我去探索，这也是我选择前端，喜欢前端的重要原因。貌似扯的有点儿远了，哈哈。对了，就在上午，CTO让我下周分享vuejs的一些用法和心得，我很荣幸可以去给公司分享这些东西，只是我得认真准备一下啦，这个比较麻烦一点儿，嘿嘿。\n&emsp;&emsp;六月中旬的时候，我决定买把吉他玩，因为那时候我迷上了民谣，听赵雷的歌，像南方姑娘，未给姐姐寄出的信等等，决定买一个，其实我以前也听一些纯音乐，像钢琴，小提琴，吉他等等，但是为什么我选择吉他呢，因为吉他便宜，哈哈哈。我自己是程序员，我认为码代码是我的工作，但不能是我生活的全部，我不能一天到晚码代码，所以我搞了把吉他玩儿，在此之前从未对音乐这么认真过，小时候上过音乐课，但是和没上过一样，原因大家应该都懂的，哈哈。说实话，学吉他可不简单，自己本身有点儿胖，指头上的肉也不少，刚开始按的时候真的是，非常疼啊，不过我既然决定要学了，就要学会它，这半个月来，几乎每天都会抽出点儿时间来去练习，我的第一个目标就是能弹唱《南方姑娘》，为了这个目标，我得努力了。\n### 成长\n&emsp;&emsp;六月开始我每天看会儿书，这个书不是编程的书，而是一些其他的书。其实我本身并不爱看书，小时候觉得看不看无所谓，我想看就看看，不想看就不看，没什么，但是越长大越觉得确实应该多读书，读书可以让我看到不一样的世界，不是有人说过么“现代人的问题在于读书太少而想的太多”，我想这也是烦恼的最大的来源，有时候我也很烦，所以我要努力做一个读书多的人。读的书越多，接触到的就越多，懂的也就越多。努力多读书，学会做人做事，这是我的目标。\n&emsp;&emsp;六月月底的时候，因为粗心在合并代码的时候把别人的给覆盖了，这让我们测试很生气，虽然并没有骂，但是看的出来，很生气，我也知道确实是自己的问题，所以不知道该说什么，只能默默的把原来的代码拷贝出来，然后把自己的功能加进去。事后在回家的路上我给我们测试发了QQ信息，给他道歉，我们测试也接受了我的道歉。六月底的时候我开始读卡耐基的《人性的弱点》，虽热在写本文的时候还没读完，但是我从前面的几个章节看得出来，它其实想告诉人们，做人最重要的是真诚，真心，错了就是错了，不需要辩解，给别人造成麻烦了，就要道歉，这是我悟到的一个道理，也算是一次成长吧。\n### 新计划\n&emsp;&emsp;七月开始了，计划在这个月依旧学习vue，并改造公司移动端的项目，同时继续学习ES6，之前虽然学过，但是并没学完，七月继续。同时要每天跑步，说是跑步，不如说是对自己的一种在意志上的一种锻炼，一种坚持做一件事的态度。吉他练得虽然手疼吧，但是既然想学，就学好。从六月开始每个月都总结一下，记录自己一步步的成长，记录得与失，活出精彩，做最好的自己。\n","slug":"summarize-June","published":1,"updated":"2016-07-13T19:18:22.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoc00032zrv47ju1yai3","content":"<blockquote>\n<p>不知不觉中，六月已经过去，七月悄悄到来，写这篇文章，总结六月，并给七月做一些计划。在未来，每个月都会做一次总结，无论得失，都记录下来，记录自己的成长。</p>\n</blockquote>\n<p>&emsp;&emsp;六月结束，2016年也已过去一半。六月收获很多，无论是工作还是生活。在2015年年底的时候我曾经计划，在2016年要学习新的编程上的技术，每天跑步，学吉他，多读书。在六月，我终于全部开始做了。<br><a id=\"more\"></a></p>\n<h3 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h3><p>&emsp;&emsp;六月上旬的时候，因为公司没什么事儿，我又开始研究vuejs，其实关于vuejs，我很早的时候就知道了，记得去年的时候我关注勾三股四大神的微博，第一次知道vue，后来有看过vuejs的官方文档，但是由于自己在之前没有接触过MVVM框架，所以看起来非常吃力，根本看不懂官方的教程在说什么。前前后后看过也有那么两三次了，期间我也有意无意的关注过关于MVVM的一些概念什么的，并在<a href=\"http://gold.xitu.io/#/\" target=\"_blank\" rel=\"noopener\">掘金</a>和<a href=\"https://segmentfault.com/\" target=\"_blank\" rel=\"noopener\">segmentfault</a>上面关注关于vue的文章，现在vue很火，所以文章也比较好找很多了，另外这两个网站不错，推荐给大家。<br>&emsp;&emsp;这个月开始研究vue的时候，在segmentfault上面看到两篇关于vue的非常基础的文章，分别是<a href=\"https://segmentfault.com/a/1190000005041030\" target=\"_blank\" rel=\"noopener\">从零开始学Vue</a>和<a href=\"https://segmentfault.com/a/1190000005045219\" target=\"_blank\" rel=\"noopener\">组件改变生活_揭开Vue组件的神秘面纱</a>。正是这两篇文章让我开始真正的走进vue，而<a href=\"https://segmentfault.com/a/1190000005363030\" target=\"_blank\" rel=\"noopener\">vue + webpack 起手式</a>，让我开始了解webpack与vue是怎么配合从而实现利用vue写组件。正是这三篇文章，开始让我对vue和webpack有了了解并开始写一些demo，我把demo上传到了github，<a href=\"https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo\" target=\"_blank\" rel=\"noopener\">我的demo地址</a>。<br>&emsp;&emsp;其实我公司的业务没有用到vue，那为什么我去学呢，其实我觉得我自己学一些东西，就是好奇，现在的前端，模块儿化，MVVM，双向数据绑定等等一些东西的出现，让我感觉很好奇，我想知道为什么这些东西很受欢迎，为什么会火，所以才去慢慢的了解它，选择一个代表去学习它，当然了，如果将来有机会，我会把vue用到公司的项目中，给公司的前端技术带来新的东西（说实话现在我们公司依然用传统的前端开发模式让我觉得有点儿low了，哈哈）。正是这种好奇心驱使着我不断去探索一些对我来说的新东西，而前端变化太快，总有一些新东西可以让我去探索，这也是我选择前端，喜欢前端的重要原因。貌似扯的有点儿远了，哈哈。对了，就在上午，CTO让我下周分享vuejs的一些用法和心得，我很荣幸可以去给公司分享这些东西，只是我得认真准备一下啦，这个比较麻烦一点儿，嘿嘿。<br>&emsp;&emsp;六月中旬的时候，我决定买把吉他玩，因为那时候我迷上了民谣，听赵雷的歌，像南方姑娘，未给姐姐寄出的信等等，决定买一个，其实我以前也听一些纯音乐，像钢琴，小提琴，吉他等等，但是为什么我选择吉他呢，因为吉他便宜，哈哈哈。我自己是程序员，我认为码代码是我的工作，但不能是我生活的全部，我不能一天到晚码代码，所以我搞了把吉他玩儿，在此之前从未对音乐这么认真过，小时候上过音乐课，但是和没上过一样，原因大家应该都懂的，哈哈。说实话，学吉他可不简单，自己本身有点儿胖，指头上的肉也不少，刚开始按的时候真的是，非常疼啊，不过我既然决定要学了，就要学会它，这半个月来，几乎每天都会抽出点儿时间来去练习，我的第一个目标就是能弹唱《南方姑娘》，为了这个目标，我得努力了。</p>\n<h3 id=\"成长\"><a href=\"#成长\" class=\"headerlink\" title=\"成长\"></a>成长</h3><p>&emsp;&emsp;六月开始我每天看会儿书，这个书不是编程的书，而是一些其他的书。其实我本身并不爱看书，小时候觉得看不看无所谓，我想看就看看，不想看就不看，没什么，但是越长大越觉得确实应该多读书，读书可以让我看到不一样的世界，不是有人说过么“现代人的问题在于读书太少而想的太多”，我想这也是烦恼的最大的来源，有时候我也很烦，所以我要努力做一个读书多的人。读的书越多，接触到的就越多，懂的也就越多。努力多读书，学会做人做事，这是我的目标。<br>&emsp;&emsp;六月月底的时候，因为粗心在合并代码的时候把别人的给覆盖了，这让我们测试很生气，虽然并没有骂，但是看的出来，很生气，我也知道确实是自己的问题，所以不知道该说什么，只能默默的把原来的代码拷贝出来，然后把自己的功能加进去。事后在回家的路上我给我们测试发了QQ信息，给他道歉，我们测试也接受了我的道歉。六月底的时候我开始读卡耐基的《人性的弱点》，虽热在写本文的时候还没读完，但是我从前面的几个章节看得出来，它其实想告诉人们，做人最重要的是真诚，真心，错了就是错了，不需要辩解，给别人造成麻烦了，就要道歉，这是我悟到的一个道理，也算是一次成长吧。</p>\n<h3 id=\"新计划\"><a href=\"#新计划\" class=\"headerlink\" title=\"新计划\"></a>新计划</h3><p>&emsp;&emsp;七月开始了，计划在这个月依旧学习vue，并改造公司移动端的项目，同时继续学习ES6，之前虽然学过，但是并没学完，七月继续。同时要每天跑步，说是跑步，不如说是对自己的一种在意志上的一种锻炼，一种坚持做一件事的态度。吉他练得虽然手疼吧，但是既然想学，就学好。从六月开始每个月都总结一下，记录自己一步步的成长，记录得与失，活出精彩，做最好的自己。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>不知不觉中，六月已经过去，七月悄悄到来，写这篇文章，总结六月，并给七月做一些计划。在未来，每个月都会做一次总结，无论得失，都记录下来，记录自己的成长。</p>\n</blockquote>\n<p>&emsp;&emsp;六月结束，2016年也已过去一半。六月收获很多，无论是工作还是生活。在2015年年底的时候我曾经计划，在2016年要学习新的编程上的技术，每天跑步，学吉他，多读书。在六月，我终于全部开始做了。<br>","more":"</p>\n<h3 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h3><p>&emsp;&emsp;六月上旬的时候，因为公司没什么事儿，我又开始研究vuejs，其实关于vuejs，我很早的时候就知道了，记得去年的时候我关注勾三股四大神的微博，第一次知道vue，后来有看过vuejs的官方文档，但是由于自己在之前没有接触过MVVM框架，所以看起来非常吃力，根本看不懂官方的教程在说什么。前前后后看过也有那么两三次了，期间我也有意无意的关注过关于MVVM的一些概念什么的，并在<a href=\"http://gold.xitu.io/#/\" target=\"_blank\" rel=\"noopener\">掘金</a>和<a href=\"https://segmentfault.com/\" target=\"_blank\" rel=\"noopener\">segmentfault</a>上面关注关于vue的文章，现在vue很火，所以文章也比较好找很多了，另外这两个网站不错，推荐给大家。<br>&emsp;&emsp;这个月开始研究vue的时候，在segmentfault上面看到两篇关于vue的非常基础的文章，分别是<a href=\"https://segmentfault.com/a/1190000005041030\" target=\"_blank\" rel=\"noopener\">从零开始学Vue</a>和<a href=\"https://segmentfault.com/a/1190000005045219\" target=\"_blank\" rel=\"noopener\">组件改变生活_揭开Vue组件的神秘面纱</a>。正是这两篇文章让我开始真正的走进vue，而<a href=\"https://segmentfault.com/a/1190000005363030\" target=\"_blank\" rel=\"noopener\">vue + webpack 起手式</a>，让我开始了解webpack与vue是怎么配合从而实现利用vue写组件。正是这三篇文章，开始让我对vue和webpack有了了解并开始写一些demo，我把demo上传到了github，<a href=\"https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo\" target=\"_blank\" rel=\"noopener\">我的demo地址</a>。<br>&emsp;&emsp;其实我公司的业务没有用到vue，那为什么我去学呢，其实我觉得我自己学一些东西，就是好奇，现在的前端，模块儿化，MVVM，双向数据绑定等等一些东西的出现，让我感觉很好奇，我想知道为什么这些东西很受欢迎，为什么会火，所以才去慢慢的了解它，选择一个代表去学习它，当然了，如果将来有机会，我会把vue用到公司的项目中，给公司的前端技术带来新的东西（说实话现在我们公司依然用传统的前端开发模式让我觉得有点儿low了，哈哈）。正是这种好奇心驱使着我不断去探索一些对我来说的新东西，而前端变化太快，总有一些新东西可以让我去探索，这也是我选择前端，喜欢前端的重要原因。貌似扯的有点儿远了，哈哈。对了，就在上午，CTO让我下周分享vuejs的一些用法和心得，我很荣幸可以去给公司分享这些东西，只是我得认真准备一下啦，这个比较麻烦一点儿，嘿嘿。<br>&emsp;&emsp;六月中旬的时候，我决定买把吉他玩，因为那时候我迷上了民谣，听赵雷的歌，像南方姑娘，未给姐姐寄出的信等等，决定买一个，其实我以前也听一些纯音乐，像钢琴，小提琴，吉他等等，但是为什么我选择吉他呢，因为吉他便宜，哈哈哈。我自己是程序员，我认为码代码是我的工作，但不能是我生活的全部，我不能一天到晚码代码，所以我搞了把吉他玩儿，在此之前从未对音乐这么认真过，小时候上过音乐课，但是和没上过一样，原因大家应该都懂的，哈哈。说实话，学吉他可不简单，自己本身有点儿胖，指头上的肉也不少，刚开始按的时候真的是，非常疼啊，不过我既然决定要学了，就要学会它，这半个月来，几乎每天都会抽出点儿时间来去练习，我的第一个目标就是能弹唱《南方姑娘》，为了这个目标，我得努力了。</p>\n<h3 id=\"成长\"><a href=\"#成长\" class=\"headerlink\" title=\"成长\"></a>成长</h3><p>&emsp;&emsp;六月开始我每天看会儿书，这个书不是编程的书，而是一些其他的书。其实我本身并不爱看书，小时候觉得看不看无所谓，我想看就看看，不想看就不看，没什么，但是越长大越觉得确实应该多读书，读书可以让我看到不一样的世界，不是有人说过么“现代人的问题在于读书太少而想的太多”，我想这也是烦恼的最大的来源，有时候我也很烦，所以我要努力做一个读书多的人。读的书越多，接触到的就越多，懂的也就越多。努力多读书，学会做人做事，这是我的目标。<br>&emsp;&emsp;六月月底的时候，因为粗心在合并代码的时候把别人的给覆盖了，这让我们测试很生气，虽然并没有骂，但是看的出来，很生气，我也知道确实是自己的问题，所以不知道该说什么，只能默默的把原来的代码拷贝出来，然后把自己的功能加进去。事后在回家的路上我给我们测试发了QQ信息，给他道歉，我们测试也接受了我的道歉。六月底的时候我开始读卡耐基的《人性的弱点》，虽热在写本文的时候还没读完，但是我从前面的几个章节看得出来，它其实想告诉人们，做人最重要的是真诚，真心，错了就是错了，不需要辩解，给别人造成麻烦了，就要道歉，这是我悟到的一个道理，也算是一次成长吧。</p>\n<h3 id=\"新计划\"><a href=\"#新计划\" class=\"headerlink\" title=\"新计划\"></a>新计划</h3><p>&emsp;&emsp;七月开始了，计划在这个月依旧学习vue，并改造公司移动端的项目，同时继续学习ES6，之前虽然学过，但是并没学完，七月继续。同时要每天跑步，说是跑步，不如说是对自己的一种在意志上的一种锻炼，一种坚持做一件事的态度。吉他练得虽然手疼吧，但是既然想学，就学好。从六月开始每个月都总结一下，记录自己一步步的成长，记录得与失，活出精彩，做最好的自己。</p>"},{"title":"Vuejs的一些总结","date":"2016-07-13T16:07:45.000Z","comments":1,"_content":"> 最近一段时间忙着工作的一些事情，同时自己也在试着把项目中的一些移动端页面试着用vuejs重写，所以没时间写文章，今天终于有空可以写一下，由于页面并没有写完，所以就将自己这几天做页面的时候遇到的一些问题总结了一下。其实很多在官网都能找到，但是我们只看官网教程不去写，很难理解到底是什么意思，这里我把我用到的列出来。\n\n文章中提到的很多东西都在我的demo中用到，[demo地址](https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo)\n<!--more-->\n## 1.Vuejs组件\nvuejs构建组件使用\n```js\nVue.component('componentName',{ /*component*/ })；\n```\n这里注意一点，组件要先注册再使用，也就是说：\n```js\nVue.component('mine',{\n           template:'#mineTpl',\n           props:['name','title','city','content']\n        });\n\n var v=new Vue({\n      el:'#vueInstance',\n      data:{\n          name:'zhang',\n          title:'this is title',\n         city:'Beijing',\n         content:'these are some desc about Blog'\n     }\n});\n```\n如果反过来会报错，因为反过来代表先使用了组件的，但是组件却没注册。\n> webpack报错后，使用`webpack --display-error-details`可以排错\n\n## 2.指令keep-alive\n在看demo的时候看到在vue-router写着`keep-alive`，`keep-alive`的含义：\n如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个keep-alive指令\n```js\n<component :is='curremtView' keep-alive></component>\n```\n## 3.如何让css只在当前组件中起作用\n在每一个vue组件中都可以定义各自的css，js，如果希望组件内写的css只对当前组件起作用，只需要在`style`中写入`scoped`，即：\n```css\n<style scoped></style>\n```\n## 4.vuejs循环插入图片\n在写循环的时候，写入如下代码：\n```html\n<div class=\"bio-slide\" v-for=\"item in items\">   \n    <img src=\"{{item.image}}\">\n</div>\n```\n此时在控制台会出现警告\n`[Vue Warn]: src=\"{{item.image}}\": interpolation in \"src\" attribute will cause a 404 request. Use v-bind:src instead.`这里意思是在“src”属性插值将导致404请求。使用v-bind：src代替。\n所以替换成如下：\n```html\n<div class=\"bio-slide\" v-for=\"item in items\">   \n    <img v-bind:src=\"item.image\">\n</div>\n```\n这里需要主要，v-bind在写的时候不能再用双花括号，根据官方的说法：\n```html\n<a v-bind:href=\"url\"></a>\n```\n> 这里` href `是参数，它告诉 `v-bind `指令将元素的 `href `特性跟表达式 url 的值绑定。可能你已注意到可以用特性插值` href=\"{{url}}\"` 获得同样的结果：这样没错，并且实际上在内部特性插值会转为` v-bind` 绑定。\n\n## 5.绑定value到Vue实例的一个动态属性上\n对于单选按钮，勾选框及选择框选项，`v-model`绑定的value通常是静态字符串（对于勾选框是逻辑值）：\n```html\n<!-- `toggle` 为 true 或 false -->\n<input type=\"checkbox\" v-model=\"toggle\">\n```\n但是有时候想绑定value到vue实例的一个动态属性上，这时可以用`v-bind`实现，并且这个属性的值可以不是字符串。例如绑定Checkbox的value到vue实例的一个动态属性：\n```html\n<input \n\ttype=\"checkbox\"\n\tv-model=\"toggle\"\n\tv-bind:true-value=\"a\"\n\tv-bind:false-value=\"b\">\n<p>{{toggle}}</p>\n```\n这里绑定后，并不是说就可以点击后由`true`,`false`的切换变为`a`,`b`的切换，因为这里定义的动态a，b是scope上的a,b，并不能直接显示出来，此时\n```js\n//当选中时\nvm.toggle === vm.a\n//当没选中时\nvm.toggle === vm.b\n```\n所以此时需要在data中定义a,b，即：\n```js\nnew Vue({\n    el:'...',\n    data:{\n        a:'a',\n        b:'b'    \n    }\n});\n```\n## 6.片段实例\n下面几种情况会让实例变成一个片断实例：\n1. 模板包含多个顶级元素。\n2. 模板只包含普通文本。\n3. 模板只包含其它组件（其它组件可能是一个片段实例）。\n4. 模板只包含一个元素指令，如`<partial>` 或` vue-router` 的 `<router-view>`。\n5. 模板根节点有一个流程控制指令，如` v-if `或` v-for`。\n\n这些情况让实例有未知数量的顶级元素，它将把它的 DOM 内容当作片断。片断实例仍然会正确地渲染内容。不过，它**没有**一个根节点，它的`$el` 指向一个锚节点，即一个空的文本节点（在开发模式下是一个注释节点）。\n但是更重要的是，**组件元素上的非流程控制指令，非 prop 特性和过渡将被忽略**，因为没有根元素供绑定：\n```html\n<!-- 不可以，因为没有根元素 -->\n<example v-show=\"ok\" transition=\"fade\"></example>\n \n<!-- props 可以 -->\n<example :prop=\"someData\"></example>\n \n<!-- 流程控制可以，但是不能有过渡 -->\n<example v-if=\"ok\"></example>\n```\n**片段实例**也有用处，但是通常情况下组件有一个根节点比较好，它会保证组件元素上的指令和特性能正确的转换，同时性能也稍微好些。\n\n## 7.路由嵌套\n**路由嵌套会将其他组件渲染到该组件内，而不是进行整个页面跳转**`router-view`本身就是将组件渲染到该位置，想要进行页面跳转，就要将页面渲染到根组件，在起始配置路由时候写到：\n```js\nvar App = Vue.extend({ root });\nrouter.start(App,'#app');\n```\n这里首先将根组件注册进来，用于将路由中配置好的各个页面渲染出来，然后将根组件挂载到与#app匹配的元素上。\n\n## 8.实现多个根据不同条件显示不同文字的方法\n`v-if`,`v-else`可以实现条件选择，但是如果是多个连续的条件选择，则需要用到计算属性`computed`。例如实现当输入框中什么都没写的时候显示字符串‘empty’,否则显示输入框中的内容，代码如下：\n```html\n<div id=\"test\">\n  <input type=\"text\" v-model=\"inputValue\">\n  <h1>{{changeVaule}}</h1>\n</div>\n```\n```js\nnew Vue({\n  el:'#test',\n  data:{\n    changeVaule:'123'\n  },\n  computed :{\n    changeVaule:function(){\n      if(this.inputValue!==''){\n        return this.inputValue;\n      }else{\n        return 'empty';\n      }\n    }\n  }\n});\n```\n\n## 9.Vuejs在变化检测问题\n#### 1.检测数组\n由于javascript的限制，vuejs不能检测到下面数组的变化：\n1. 直接索引设置元素，如`vm.item[0]={}`;\n2. 修改数据的长度，如`vm.item.length`。\n\n为了解决问题1，Vuejs扩展了观察数组，为它添加一个`$set()`方法：\n```js\n// 与 `example1.items[0] = ...` 相同，但是能触发视图更新\nexample1.items.$set(0, { childMsg: 'Changed!'})\n```\n问题2，需要一个空数组替换`items`。\n\n除了`$set()`，vuejs也为观察数组添加了`$remove()`方法，用于从目标数组中查找并删除元素，在内部调用了`splice()`。因此，不必：\n```js\nvar index = this.items.indexOf(item)\nif (index !== -1) {\n  this.items.splice(index, 1)\n}\n```\n只需：\n```js\nthis.items.$remove(item);\n```\n\n#### 2.检测对象\n受ES5的显示，Vuejs**不能检测到对象属性的添加或删除**。因为Vuejs在初始化时候将属性转化为`getter/setter`，所以属性必须在`data`对象才能让Vuejs转换它，才能让它是响应的，例如：\n```js\nvar data = { a: 1 }\nvar vm = new Vue({\n  data: data\n})\n// `vm.a` 和 `data.a` 现在是响应的\n \nvm.b = 2\n// `vm.b` 不是响应的\n \ndata.b = 2\n// `data.b` 不是响应的\n```\n不过，有办法在实例创建之后添加属性并且让它是响应的。对于Vue实例，可以使用`$set(key,value)`实例方法：\n```js\nvm.$set('b', 2)\n// `vm.b` 和 `data.b` 现在是响应的\n```\n对于普通数据对象，可以使用全局方法`Vue.set(object, key, value)`:\n```js\nVue.set(data, 'c', 3)\n// `vm.c` 和 `data.c` 现在是响应的\n```\n有时你想向已有对象上添加一些属性，例如使用 `Object.assign()` 或 `_.extend()` 添加属性。但是，添加到对象上的新属性不会触发更新。这时可以创建一个新的对象，包含原对象的属性和新的属性：\n```js\n// 不使用 `Object.assign(this.someObject, { a: 1, b: 2 })`\nthis.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 })\n```\n## 10.关于vuejs页面闪烁`{{message}}`\n在vuejs指令中有`v-cloak`，这个指令保持在元素上直到关联实例结束编译。和CSS规则如`[v-cloak]{display:none}`一起用时，这个指令可以隐藏未编译的Mustache标签直到实例准备完毕。用法如下：\n```css\n[v-cloak]{\n    display:none;\n}\n```\n```html\n<div v-cloak>{{message}}</div>\n```\n这样`<div>`不会显示，直到编译结束\n## 11.关于在`v-for`循环时候`v-model`的使用\n有时候需要循环生成`input`，用`v-model`绑定后，利用vuejs操作它，此时我们可以在`v-model`中写一个数组`selected[$index]`，这样就可以给不同的input绑定不同的`v-model`，从而分别操作他们。这个我在demo中的dataBind.vue中用到。\n## 12.vuejs中过渡动画\n在vuejs中，css定义动画：\n```css\n  .zoom-transition{\n        width:60%;\n        height:auto;\n        position: absolute;\n        left:50%;\n        top:50%;\n        transform: translate(-50%,-50%);\n        -webkit-transition: all .3s ease;\n        transition: all .3s ease;\n    }\n    .zoom-enter, .zoom-leave{\n        width:150px;\n        height:auto;\n        position: absolute;\n        left:20px;\n        top:20px;\n        transform: translate(0,0);\n    }\n```\n其中动画在定的时候要注意上下对应，上面有什么，下面有什么，都要变化的，如果有不变化的，应该抽离出去，作为公共css样式，在上面的css中，如果我只写` transform: translate(-50%,-50%);`而不写下面的`transform: translate(0,0);`则会导致上面的`transform: translate(-50%,-50%);`被添加到下面，认为这个是不变的。","source":"_posts/summarize-vue.md","raw":"---\ntitle: Vuejs的一些总结\ndate: 2016-07-14 00:07:45\ntags: vue\ncomments: true\ncategories: \"Vue\"\n---\n> 最近一段时间忙着工作的一些事情，同时自己也在试着把项目中的一些移动端页面试着用vuejs重写，所以没时间写文章，今天终于有空可以写一下，由于页面并没有写完，所以就将自己这几天做页面的时候遇到的一些问题总结了一下。其实很多在官网都能找到，但是我们只看官网教程不去写，很难理解到底是什么意思，这里我把我用到的列出来。\n\n文章中提到的很多东西都在我的demo中用到，[demo地址](https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo)\n<!--more-->\n## 1.Vuejs组件\nvuejs构建组件使用\n```js\nVue.component('componentName',{ /*component*/ })；\n```\n这里注意一点，组件要先注册再使用，也就是说：\n```js\nVue.component('mine',{\n           template:'#mineTpl',\n           props:['name','title','city','content']\n        });\n\n var v=new Vue({\n      el:'#vueInstance',\n      data:{\n          name:'zhang',\n          title:'this is title',\n         city:'Beijing',\n         content:'these are some desc about Blog'\n     }\n});\n```\n如果反过来会报错，因为反过来代表先使用了组件的，但是组件却没注册。\n> webpack报错后，使用`webpack --display-error-details`可以排错\n\n## 2.指令keep-alive\n在看demo的时候看到在vue-router写着`keep-alive`，`keep-alive`的含义：\n如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个keep-alive指令\n```js\n<component :is='curremtView' keep-alive></component>\n```\n## 3.如何让css只在当前组件中起作用\n在每一个vue组件中都可以定义各自的css，js，如果希望组件内写的css只对当前组件起作用，只需要在`style`中写入`scoped`，即：\n```css\n<style scoped></style>\n```\n## 4.vuejs循环插入图片\n在写循环的时候，写入如下代码：\n```html\n<div class=\"bio-slide\" v-for=\"item in items\">   \n    <img src=\"{{item.image}}\">\n</div>\n```\n此时在控制台会出现警告\n`[Vue Warn]: src=\"{{item.image}}\": interpolation in \"src\" attribute will cause a 404 request. Use v-bind:src instead.`这里意思是在“src”属性插值将导致404请求。使用v-bind：src代替。\n所以替换成如下：\n```html\n<div class=\"bio-slide\" v-for=\"item in items\">   \n    <img v-bind:src=\"item.image\">\n</div>\n```\n这里需要主要，v-bind在写的时候不能再用双花括号，根据官方的说法：\n```html\n<a v-bind:href=\"url\"></a>\n```\n> 这里` href `是参数，它告诉 `v-bind `指令将元素的 `href `特性跟表达式 url 的值绑定。可能你已注意到可以用特性插值` href=\"{{url}}\"` 获得同样的结果：这样没错，并且实际上在内部特性插值会转为` v-bind` 绑定。\n\n## 5.绑定value到Vue实例的一个动态属性上\n对于单选按钮，勾选框及选择框选项，`v-model`绑定的value通常是静态字符串（对于勾选框是逻辑值）：\n```html\n<!-- `toggle` 为 true 或 false -->\n<input type=\"checkbox\" v-model=\"toggle\">\n```\n但是有时候想绑定value到vue实例的一个动态属性上，这时可以用`v-bind`实现，并且这个属性的值可以不是字符串。例如绑定Checkbox的value到vue实例的一个动态属性：\n```html\n<input \n\ttype=\"checkbox\"\n\tv-model=\"toggle\"\n\tv-bind:true-value=\"a\"\n\tv-bind:false-value=\"b\">\n<p>{{toggle}}</p>\n```\n这里绑定后，并不是说就可以点击后由`true`,`false`的切换变为`a`,`b`的切换，因为这里定义的动态a，b是scope上的a,b，并不能直接显示出来，此时\n```js\n//当选中时\nvm.toggle === vm.a\n//当没选中时\nvm.toggle === vm.b\n```\n所以此时需要在data中定义a,b，即：\n```js\nnew Vue({\n    el:'...',\n    data:{\n        a:'a',\n        b:'b'    \n    }\n});\n```\n## 6.片段实例\n下面几种情况会让实例变成一个片断实例：\n1. 模板包含多个顶级元素。\n2. 模板只包含普通文本。\n3. 模板只包含其它组件（其它组件可能是一个片段实例）。\n4. 模板只包含一个元素指令，如`<partial>` 或` vue-router` 的 `<router-view>`。\n5. 模板根节点有一个流程控制指令，如` v-if `或` v-for`。\n\n这些情况让实例有未知数量的顶级元素，它将把它的 DOM 内容当作片断。片断实例仍然会正确地渲染内容。不过，它**没有**一个根节点，它的`$el` 指向一个锚节点，即一个空的文本节点（在开发模式下是一个注释节点）。\n但是更重要的是，**组件元素上的非流程控制指令，非 prop 特性和过渡将被忽略**，因为没有根元素供绑定：\n```html\n<!-- 不可以，因为没有根元素 -->\n<example v-show=\"ok\" transition=\"fade\"></example>\n \n<!-- props 可以 -->\n<example :prop=\"someData\"></example>\n \n<!-- 流程控制可以，但是不能有过渡 -->\n<example v-if=\"ok\"></example>\n```\n**片段实例**也有用处，但是通常情况下组件有一个根节点比较好，它会保证组件元素上的指令和特性能正确的转换，同时性能也稍微好些。\n\n## 7.路由嵌套\n**路由嵌套会将其他组件渲染到该组件内，而不是进行整个页面跳转**`router-view`本身就是将组件渲染到该位置，想要进行页面跳转，就要将页面渲染到根组件，在起始配置路由时候写到：\n```js\nvar App = Vue.extend({ root });\nrouter.start(App,'#app');\n```\n这里首先将根组件注册进来，用于将路由中配置好的各个页面渲染出来，然后将根组件挂载到与#app匹配的元素上。\n\n## 8.实现多个根据不同条件显示不同文字的方法\n`v-if`,`v-else`可以实现条件选择，但是如果是多个连续的条件选择，则需要用到计算属性`computed`。例如实现当输入框中什么都没写的时候显示字符串‘empty’,否则显示输入框中的内容，代码如下：\n```html\n<div id=\"test\">\n  <input type=\"text\" v-model=\"inputValue\">\n  <h1>{{changeVaule}}</h1>\n</div>\n```\n```js\nnew Vue({\n  el:'#test',\n  data:{\n    changeVaule:'123'\n  },\n  computed :{\n    changeVaule:function(){\n      if(this.inputValue!==''){\n        return this.inputValue;\n      }else{\n        return 'empty';\n      }\n    }\n  }\n});\n```\n\n## 9.Vuejs在变化检测问题\n#### 1.检测数组\n由于javascript的限制，vuejs不能检测到下面数组的变化：\n1. 直接索引设置元素，如`vm.item[0]={}`;\n2. 修改数据的长度，如`vm.item.length`。\n\n为了解决问题1，Vuejs扩展了观察数组，为它添加一个`$set()`方法：\n```js\n// 与 `example1.items[0] = ...` 相同，但是能触发视图更新\nexample1.items.$set(0, { childMsg: 'Changed!'})\n```\n问题2，需要一个空数组替换`items`。\n\n除了`$set()`，vuejs也为观察数组添加了`$remove()`方法，用于从目标数组中查找并删除元素，在内部调用了`splice()`。因此，不必：\n```js\nvar index = this.items.indexOf(item)\nif (index !== -1) {\n  this.items.splice(index, 1)\n}\n```\n只需：\n```js\nthis.items.$remove(item);\n```\n\n#### 2.检测对象\n受ES5的显示，Vuejs**不能检测到对象属性的添加或删除**。因为Vuejs在初始化时候将属性转化为`getter/setter`，所以属性必须在`data`对象才能让Vuejs转换它，才能让它是响应的，例如：\n```js\nvar data = { a: 1 }\nvar vm = new Vue({\n  data: data\n})\n// `vm.a` 和 `data.a` 现在是响应的\n \nvm.b = 2\n// `vm.b` 不是响应的\n \ndata.b = 2\n// `data.b` 不是响应的\n```\n不过，有办法在实例创建之后添加属性并且让它是响应的。对于Vue实例，可以使用`$set(key,value)`实例方法：\n```js\nvm.$set('b', 2)\n// `vm.b` 和 `data.b` 现在是响应的\n```\n对于普通数据对象，可以使用全局方法`Vue.set(object, key, value)`:\n```js\nVue.set(data, 'c', 3)\n// `vm.c` 和 `data.c` 现在是响应的\n```\n有时你想向已有对象上添加一些属性，例如使用 `Object.assign()` 或 `_.extend()` 添加属性。但是，添加到对象上的新属性不会触发更新。这时可以创建一个新的对象，包含原对象的属性和新的属性：\n```js\n// 不使用 `Object.assign(this.someObject, { a: 1, b: 2 })`\nthis.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 })\n```\n## 10.关于vuejs页面闪烁`{{message}}`\n在vuejs指令中有`v-cloak`，这个指令保持在元素上直到关联实例结束编译。和CSS规则如`[v-cloak]{display:none}`一起用时，这个指令可以隐藏未编译的Mustache标签直到实例准备完毕。用法如下：\n```css\n[v-cloak]{\n    display:none;\n}\n```\n```html\n<div v-cloak>{{message}}</div>\n```\n这样`<div>`不会显示，直到编译结束\n## 11.关于在`v-for`循环时候`v-model`的使用\n有时候需要循环生成`input`，用`v-model`绑定后，利用vuejs操作它，此时我们可以在`v-model`中写一个数组`selected[$index]`，这样就可以给不同的input绑定不同的`v-model`，从而分别操作他们。这个我在demo中的dataBind.vue中用到。\n## 12.vuejs中过渡动画\n在vuejs中，css定义动画：\n```css\n  .zoom-transition{\n        width:60%;\n        height:auto;\n        position: absolute;\n        left:50%;\n        top:50%;\n        transform: translate(-50%,-50%);\n        -webkit-transition: all .3s ease;\n        transition: all .3s ease;\n    }\n    .zoom-enter, .zoom-leave{\n        width:150px;\n        height:auto;\n        position: absolute;\n        left:20px;\n        top:20px;\n        transform: translate(0,0);\n    }\n```\n其中动画在定的时候要注意上下对应，上面有什么，下面有什么，都要变化的，如果有不变化的，应该抽离出去，作为公共css样式，在上面的css中，如果我只写` transform: translate(-50%,-50%);`而不写下面的`transform: translate(0,0);`则会导致上面的`transform: translate(-50%,-50%);`被添加到下面，认为这个是不变的。","slug":"summarize-vue","published":1,"updated":"2016-07-13T20:00:50.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoc10035zrv417r25jbm","content":"<blockquote>\n<p>最近一段时间忙着工作的一些事情，同时自己也在试着把项目中的一些移动端页面试着用vuejs重写，所以没时间写文章，今天终于有空可以写一下，由于页面并没有写完，所以就将自己这几天做页面的时候遇到的一些问题总结了一下。其实很多在官网都能找到，但是我们只看官网教程不去写，很难理解到底是什么意思，这里我把我用到的列出来。</p>\n</blockquote>\n<p>文章中提到的很多东西都在我的demo中用到，<a href=\"https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo\" target=\"_blank\" rel=\"noopener\">demo地址</a><br><a id=\"more\"></a></p>\n<h2 id=\"1-Vuejs组件\"><a href=\"#1-Vuejs组件\" class=\"headerlink\" title=\"1.Vuejs组件\"></a>1.Vuejs组件</h2><p>vuejs构建组件使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'componentName'</span>,&#123; <span class=\"comment\">/*component*/</span> &#125;)；</span><br></pre></td></tr></table></figure></p>\n<p>这里注意一点，组件要先注册再使用，也就是说：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'mine'</span>,&#123;</span><br><span class=\"line\">           template:<span class=\"string\">'#mineTpl'</span>,</span><br><span class=\"line\">           props:[<span class=\"string\">'name'</span>,<span class=\"string\">'title'</span>,<span class=\"string\">'city'</span>,<span class=\"string\">'content'</span>]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> v=<span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el:<span class=\"string\">'#vueInstance'</span>,</span><br><span class=\"line\">      data:&#123;</span><br><span class=\"line\">          name:<span class=\"string\">'zhang'</span>,</span><br><span class=\"line\">          title:<span class=\"string\">'this is title'</span>,</span><br><span class=\"line\">         city:<span class=\"string\">'Beijing'</span>,</span><br><span class=\"line\">         content:<span class=\"string\">'these are some desc about Blog'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果反过来会报错，因为反过来代表先使用了组件的，但是组件却没注册。</p>\n<blockquote>\n<p>webpack报错后，使用<code>webpack --display-error-details</code>可以排错</p>\n</blockquote>\n<h2 id=\"2-指令keep-alive\"><a href=\"#2-指令keep-alive\" class=\"headerlink\" title=\"2.指令keep-alive\"></a>2.指令keep-alive</h2><p>在看demo的时候看到在vue-router写着<code>keep-alive</code>，<code>keep-alive</code>的含义：<br>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个keep-alive指令<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component :is=<span class=\"string\">'curremtView'</span> keep-alive&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-如何让css只在当前组件中起作用\"><a href=\"#3-如何让css只在当前组件中起作用\" class=\"headerlink\" title=\"3.如何让css只在当前组件中起作用\"></a>3.如何让css只在当前组件中起作用</h2><p>在每一个vue组件中都可以定义各自的css，js，如果希望组件内写的css只对当前组件起作用，只需要在<code>style</code>中写入<code>scoped</code>，即：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-vuejs循环插入图片\"><a href=\"#4-vuejs循环插入图片\" class=\"headerlink\" title=\"4.vuejs循环插入图片\"></a>4.vuejs循环插入图片</h2><p>在写循环的时候，写入如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bio-slide\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;item.image&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>此时在控制台会出现警告<br><code>[Vue Warn]: src=&quot;&quot;: interpolation in &quot;src&quot; attribute will cause a 404 request. Use v-bind:src instead.</code>这里意思是在“src”属性插值将导致404请求。使用v-bind：src代替。<br>所以替换成如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bio-slide\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"item.image\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里需要主要，v-bind在写的时候不能再用双花括号，根据官方的说法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里<code>href</code>是参数，它告诉 <code>v-bind</code>指令将元素的 <code>href</code>特性跟表达式 url 的值绑定。可能你已注意到可以用特性插值<code>href=&quot;&quot;</code> 获得同样的结果：这样没错，并且实际上在内部特性插值会转为<code>v-bind</code> 绑定。</p>\n</blockquote>\n<h2 id=\"5-绑定value到Vue实例的一个动态属性上\"><a href=\"#5-绑定value到Vue实例的一个动态属性上\" class=\"headerlink\" title=\"5.绑定value到Vue实例的一个动态属性上\"></a>5.绑定value到Vue实例的一个动态属性上</h2><p>对于单选按钮，勾选框及选择框选项，<code>v-model</code>绑定的value通常是静态字符串（对于勾选框是逻辑值）：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- `toggle` 为 true 或 false --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>但是有时候想绑定value到vue实例的一个动态属性上，这时可以用<code>v-bind</code>实现，并且这个属性的值可以不是字符串。例如绑定Checkbox的value到vue实例的一个动态属性：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">v-bind:true-value</span>=<span class=\"string\">\"a\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">v-bind:false-value</span>=<span class=\"string\">\"b\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;toggle&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里绑定后，并不是说就可以点击后由<code>true</code>,<code>false</code>的切换变为<code>a</code>,<code>b</code>的切换，因为这里定义的动态a，b是scope上的a,b，并不能直接显示出来，此时<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当选中时</span></span><br><span class=\"line\">vm.toggle === vm.a</span><br><span class=\"line\"><span class=\"comment\">//当没选中时</span></span><br><span class=\"line\">vm.toggle === vm.b</span><br></pre></td></tr></table></figure></p>\n<p>所以此时需要在data中定义a,b，即：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'...'</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        a:<span class=\"string\">'a'</span>,</span><br><span class=\"line\">        b:<span class=\"string\">'b'</span>    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-片段实例\"><a href=\"#6-片段实例\" class=\"headerlink\" title=\"6.片段实例\"></a>6.片段实例</h2><p>下面几种情况会让实例变成一个片断实例：</p>\n<ol>\n<li>模板包含多个顶级元素。</li>\n<li>模板只包含普通文本。</li>\n<li>模板只包含其它组件（其它组件可能是一个片段实例）。</li>\n<li>模板只包含一个元素指令，如<code>&lt;partial&gt;</code> 或<code>vue-router</code> 的 <code>&lt;router-view&gt;</code>。</li>\n<li>模板根节点有一个流程控制指令，如<code>v-if</code>或<code>v-for</code>。</li>\n</ol>\n<p>这些情况让实例有未知数量的顶级元素，它将把它的 DOM 内容当作片断。片断实例仍然会正确地渲染内容。不过，它<strong>没有</strong>一个根节点，它的<code>$el</code> 指向一个锚节点，即一个空的文本节点（在开发模式下是一个注释节点）。<br>但是更重要的是，<strong>组件元素上的非流程控制指令，非 prop 特性和过渡将被忽略</strong>，因为没有根元素供绑定：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 不可以，因为没有根元素 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">example</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"fade\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">example</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- props 可以 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">example</span> <span class=\"attr\">:prop</span>=<span class=\"string\">\"someData\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">example</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流程控制可以，但是不能有过渡 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">example</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">example</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>片段实例</strong>也有用处，但是通常情况下组件有一个根节点比较好，它会保证组件元素上的指令和特性能正确的转换，同时性能也稍微好些。</p>\n<h2 id=\"7-路由嵌套\"><a href=\"#7-路由嵌套\" class=\"headerlink\" title=\"7.路由嵌套\"></a>7.路由嵌套</h2><p><strong>路由嵌套会将其他组件渲染到该组件内，而不是进行整个页面跳转</strong><code>router-view</code>本身就是将组件渲染到该位置，想要进行页面跳转，就要将页面渲染到根组件，在起始配置路由时候写到：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> App = Vue.extend(&#123; root &#125;);</span><br><span class=\"line\">router.start(App,<span class=\"string\">'#app'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这里首先将根组件注册进来，用于将路由中配置好的各个页面渲染出来，然后将根组件挂载到与#app匹配的元素上。</p>\n<h2 id=\"8-实现多个根据不同条件显示不同文字的方法\"><a href=\"#8-实现多个根据不同条件显示不同文字的方法\" class=\"headerlink\" title=\"8.实现多个根据不同条件显示不同文字的方法\"></a>8.实现多个根据不同条件显示不同文字的方法</h2><p><code>v-if</code>,<code>v-else</code>可以实现条件选择，但是如果是多个连续的条件选择，则需要用到计算属性<code>computed</code>。例如实现当输入框中什么都没写的时候显示字符串‘empty’,否则显示输入框中的内容，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"inputValue\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;changeVaule&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">'#test'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    changeVaule:<span class=\"string\">'123'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed :&#123;</span><br><span class=\"line\">    changeVaule:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.inputValue!==<span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inputValue;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'empty'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-Vuejs在变化检测问题\"><a href=\"#9-Vuejs在变化检测问题\" class=\"headerlink\" title=\"9.Vuejs在变化检测问题\"></a>9.Vuejs在变化检测问题</h2><h4 id=\"1-检测数组\"><a href=\"#1-检测数组\" class=\"headerlink\" title=\"1.检测数组\"></a>1.检测数组</h4><p>由于javascript的限制，vuejs不能检测到下面数组的变化：</p>\n<ol>\n<li>直接索引设置元素，如<code>vm.item[0]={}</code>;</li>\n<li>修改数据的长度，如<code>vm.item.length</code>。</li>\n</ol>\n<p>为了解决问题1，Vuejs扩展了观察数组，为它添加一个<code>$set()</code>方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 与 `example1.items[0] = ...` 相同，但是能触发视图更新</span></span><br><span class=\"line\">example1.items.$set(<span class=\"number\">0</span>, &#123; <span class=\"attr\">childMsg</span>: <span class=\"string\">'Changed!'</span>&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>问题2，需要一个空数组替换<code>items</code>。</p>\n<p>除了<code>$set()</code>，vuejs也为观察数组添加了<code>$remove()</code>方法，用于从目标数组中查找并删除元素，在内部调用了<code>splice()</code>。因此，不必：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.items.indexOf(item)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (index !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.items.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>只需：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.items.$remove(item);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-检测对象\"><a href=\"#2-检测对象\" class=\"headerlink\" title=\"2.检测对象\"></a>2.检测对象</h4><p>受ES5的显示，Vuejs<strong>不能检测到对象属性的添加或删除</strong>。因为Vuejs在初始化时候将属性转化为<code>getter/setter</code>，所以属性必须在<code>data</code>对象才能让Vuejs转换它，才能让它是响应的，例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// `vm.a` 和 `data.a` 现在是响应的</span></span><br><span class=\"line\"> </span><br><span class=\"line\">vm.b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">// `vm.b` 不是响应的</span></span><br><span class=\"line\"> </span><br><span class=\"line\">data.b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">// `data.b` 不是响应的</span></span><br></pre></td></tr></table></figure></p>\n<p>不过，有办法在实例创建之后添加属性并且让它是响应的。对于Vue实例，可以使用<code>$set(key,value)</code>实例方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.$set(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// `vm.b` 和 `data.b` 现在是响应的</span></span><br></pre></td></tr></table></figure></p>\n<p>对于普通数据对象，可以使用全局方法<code>Vue.set(object, key, value)</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(data, <span class=\"string\">'c'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// `vm.c` 和 `data.c` 现在是响应的</span></span><br></pre></td></tr></table></figure></p>\n<p>有时你想向已有对象上添加一些属性，例如使用 <code>Object.assign()</code> 或 <code>_.extend()</code> 添加属性。但是，添加到对象上的新属性不会触发更新。这时可以创建一个新的对象，包含原对象的属性和新的属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不使用 `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.someObject = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.someObject, &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-关于vuejs页面闪烁-lt-￼27-gt\"><a href=\"#10-关于vuejs页面闪烁-lt-￼27-gt\" class=\"headerlink\" title=\"10.关于vuejs页面闪烁\"></a>10.关于vuejs页面闪烁<code></code></h2><p>在vuejs指令中有<code>v-cloak</code>，这个指令保持在元素上直到关联实例结束编译。和CSS规则如<code>[v-cloak]{display:none}</code>一起用时，这个指令可以隐藏未编译的Mustache标签直到实例准备完毕。用法如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[v-cloak]</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样<code>&lt;div&gt;</code>不会显示，直到编译结束</p>\n<h2 id=\"11-关于在v-for循环时候v-model的使用\"><a href=\"#11-关于在v-for循环时候v-model的使用\" class=\"headerlink\" title=\"11.关于在v-for循环时候v-model的使用\"></a>11.关于在<code>v-for</code>循环时候<code>v-model</code>的使用</h2><p>有时候需要循环生成<code>input</code>，用<code>v-model</code>绑定后，利用vuejs操作它，此时我们可以在<code>v-model</code>中写一个数组<code>selected[$index]</code>，这样就可以给不同的input绑定不同的<code>v-model</code>，从而分别操作他们。这个我在demo中的dataBind.vue中用到。</p>\n<h2 id=\"12-vuejs中过渡动画\"><a href=\"#12-vuejs中过渡动画\" class=\"headerlink\" title=\"12.vuejs中过渡动画\"></a>12.vuejs中过渡动画</h2><p>在vuejs中，css定义动画：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.zoom-transition</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>:<span class=\"number\">60%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>:auto;</span><br><span class=\"line\">      <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">      <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">      <span class=\"attribute\">-webkit-transition</span>: all .<span class=\"number\">3s</span> ease;</span><br><span class=\"line\">      <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span> ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.zoom-enter</span>, <span class=\"selector-class\">.zoom-leave</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>:<span class=\"number\">150px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>:auto;</span><br><span class=\"line\">      <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">      <span class=\"attribute\">left</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">top</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0,0);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中动画在定的时候要注意上下对应，上面有什么，下面有什么，都要变化的，如果有不变化的，应该抽离出去，作为公共css样式，在上面的css中，如果我只写<code>transform: translate(-50%,-50%);</code>而不写下面的<code>transform: translate(0,0);</code>则会导致上面的<code>transform: translate(-50%,-50%);</code>被添加到下面，认为这个是不变的。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近一段时间忙着工作的一些事情，同时自己也在试着把项目中的一些移动端页面试着用vuejs重写，所以没时间写文章，今天终于有空可以写一下，由于页面并没有写完，所以就将自己这几天做页面的时候遇到的一些问题总结了一下。其实很多在官网都能找到，但是我们只看官网教程不去写，很难理解到底是什么意思，这里我把我用到的列出来。</p>\n</blockquote>\n<p>文章中提到的很多东西都在我的demo中用到，<a href=\"https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo\" target=\"_blank\" rel=\"noopener\">demo地址</a><br>","more":"</p>\n<h2 id=\"1-Vuejs组件\"><a href=\"#1-Vuejs组件\" class=\"headerlink\" title=\"1.Vuejs组件\"></a>1.Vuejs组件</h2><p>vuejs构建组件使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'componentName'</span>,&#123; <span class=\"comment\">/*component*/</span> &#125;)；</span><br></pre></td></tr></table></figure></p>\n<p>这里注意一点，组件要先注册再使用，也就是说：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'mine'</span>,&#123;</span><br><span class=\"line\">           template:<span class=\"string\">'#mineTpl'</span>,</span><br><span class=\"line\">           props:[<span class=\"string\">'name'</span>,<span class=\"string\">'title'</span>,<span class=\"string\">'city'</span>,<span class=\"string\">'content'</span>]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> v=<span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el:<span class=\"string\">'#vueInstance'</span>,</span><br><span class=\"line\">      data:&#123;</span><br><span class=\"line\">          name:<span class=\"string\">'zhang'</span>,</span><br><span class=\"line\">          title:<span class=\"string\">'this is title'</span>,</span><br><span class=\"line\">         city:<span class=\"string\">'Beijing'</span>,</span><br><span class=\"line\">         content:<span class=\"string\">'these are some desc about Blog'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果反过来会报错，因为反过来代表先使用了组件的，但是组件却没注册。</p>\n<blockquote>\n<p>webpack报错后，使用<code>webpack --display-error-details</code>可以排错</p>\n</blockquote>\n<h2 id=\"2-指令keep-alive\"><a href=\"#2-指令keep-alive\" class=\"headerlink\" title=\"2.指令keep-alive\"></a>2.指令keep-alive</h2><p>在看demo的时候看到在vue-router写着<code>keep-alive</code>，<code>keep-alive</code>的含义：<br>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个keep-alive指令<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component :is=<span class=\"string\">'curremtView'</span> keep-alive&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-如何让css只在当前组件中起作用\"><a href=\"#3-如何让css只在当前组件中起作用\" class=\"headerlink\" title=\"3.如何让css只在当前组件中起作用\"></a>3.如何让css只在当前组件中起作用</h2><p>在每一个vue组件中都可以定义各自的css，js，如果希望组件内写的css只对当前组件起作用，只需要在<code>style</code>中写入<code>scoped</code>，即：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-vuejs循环插入图片\"><a href=\"#4-vuejs循环插入图片\" class=\"headerlink\" title=\"4.vuejs循环插入图片\"></a>4.vuejs循环插入图片</h2><p>在写循环的时候，写入如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bio-slide\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;item.image&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>此时在控制台会出现警告<br><code>[Vue Warn]: src=&quot;&quot;: interpolation in &quot;src&quot; attribute will cause a 404 request. Use v-bind:src instead.</code>这里意思是在“src”属性插值将导致404请求。使用v-bind：src代替。<br>所以替换成如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bio-slide\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"item.image\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里需要主要，v-bind在写的时候不能再用双花括号，根据官方的说法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里<code>href</code>是参数，它告诉 <code>v-bind</code>指令将元素的 <code>href</code>特性跟表达式 url 的值绑定。可能你已注意到可以用特性插值<code>href=&quot;&quot;</code> 获得同样的结果：这样没错，并且实际上在内部特性插值会转为<code>v-bind</code> 绑定。</p>\n</blockquote>\n<h2 id=\"5-绑定value到Vue实例的一个动态属性上\"><a href=\"#5-绑定value到Vue实例的一个动态属性上\" class=\"headerlink\" title=\"5.绑定value到Vue实例的一个动态属性上\"></a>5.绑定value到Vue实例的一个动态属性上</h2><p>对于单选按钮，勾选框及选择框选项，<code>v-model</code>绑定的value通常是静态字符串（对于勾选框是逻辑值）：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- `toggle` 为 true 或 false --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>但是有时候想绑定value到vue实例的一个动态属性上，这时可以用<code>v-bind</code>实现，并且这个属性的值可以不是字符串。例如绑定Checkbox的value到vue实例的一个动态属性：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">v-model</span>=<span class=\"string\">\"toggle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">v-bind:true-value</span>=<span class=\"string\">\"a\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">v-bind:false-value</span>=<span class=\"string\">\"b\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;toggle&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里绑定后，并不是说就可以点击后由<code>true</code>,<code>false</code>的切换变为<code>a</code>,<code>b</code>的切换，因为这里定义的动态a，b是scope上的a,b，并不能直接显示出来，此时<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当选中时</span></span><br><span class=\"line\">vm.toggle === vm.a</span><br><span class=\"line\"><span class=\"comment\">//当没选中时</span></span><br><span class=\"line\">vm.toggle === vm.b</span><br></pre></td></tr></table></figure></p>\n<p>所以此时需要在data中定义a,b，即：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'...'</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        a:<span class=\"string\">'a'</span>,</span><br><span class=\"line\">        b:<span class=\"string\">'b'</span>    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-片段实例\"><a href=\"#6-片段实例\" class=\"headerlink\" title=\"6.片段实例\"></a>6.片段实例</h2><p>下面几种情况会让实例变成一个片断实例：</p>\n<ol>\n<li>模板包含多个顶级元素。</li>\n<li>模板只包含普通文本。</li>\n<li>模板只包含其它组件（其它组件可能是一个片段实例）。</li>\n<li>模板只包含一个元素指令，如<code>&lt;partial&gt;</code> 或<code>vue-router</code> 的 <code>&lt;router-view&gt;</code>。</li>\n<li>模板根节点有一个流程控制指令，如<code>v-if</code>或<code>v-for</code>。</li>\n</ol>\n<p>这些情况让实例有未知数量的顶级元素，它将把它的 DOM 内容当作片断。片断实例仍然会正确地渲染内容。不过，它<strong>没有</strong>一个根节点，它的<code>$el</code> 指向一个锚节点，即一个空的文本节点（在开发模式下是一个注释节点）。<br>但是更重要的是，<strong>组件元素上的非流程控制指令，非 prop 特性和过渡将被忽略</strong>，因为没有根元素供绑定：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 不可以，因为没有根元素 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">example</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"fade\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">example</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- props 可以 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">example</span> <span class=\"attr\">:prop</span>=<span class=\"string\">\"someData\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">example</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流程控制可以，但是不能有过渡 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">example</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">example</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>片段实例</strong>也有用处，但是通常情况下组件有一个根节点比较好，它会保证组件元素上的指令和特性能正确的转换，同时性能也稍微好些。</p>\n<h2 id=\"7-路由嵌套\"><a href=\"#7-路由嵌套\" class=\"headerlink\" title=\"7.路由嵌套\"></a>7.路由嵌套</h2><p><strong>路由嵌套会将其他组件渲染到该组件内，而不是进行整个页面跳转</strong><code>router-view</code>本身就是将组件渲染到该位置，想要进行页面跳转，就要将页面渲染到根组件，在起始配置路由时候写到：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> App = Vue.extend(&#123; root &#125;);</span><br><span class=\"line\">router.start(App,<span class=\"string\">'#app'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这里首先将根组件注册进来，用于将路由中配置好的各个页面渲染出来，然后将根组件挂载到与#app匹配的元素上。</p>\n<h2 id=\"8-实现多个根据不同条件显示不同文字的方法\"><a href=\"#8-实现多个根据不同条件显示不同文字的方法\" class=\"headerlink\" title=\"8.实现多个根据不同条件显示不同文字的方法\"></a>8.实现多个根据不同条件显示不同文字的方法</h2><p><code>v-if</code>,<code>v-else</code>可以实现条件选择，但是如果是多个连续的条件选择，则需要用到计算属性<code>computed</code>。例如实现当输入框中什么都没写的时候显示字符串‘empty’,否则显示输入框中的内容，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"inputValue\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;changeVaule&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">'#test'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    changeVaule:<span class=\"string\">'123'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed :&#123;</span><br><span class=\"line\">    changeVaule:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.inputValue!==<span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inputValue;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'empty'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-Vuejs在变化检测问题\"><a href=\"#9-Vuejs在变化检测问题\" class=\"headerlink\" title=\"9.Vuejs在变化检测问题\"></a>9.Vuejs在变化检测问题</h2><h4 id=\"1-检测数组\"><a href=\"#1-检测数组\" class=\"headerlink\" title=\"1.检测数组\"></a>1.检测数组</h4><p>由于javascript的限制，vuejs不能检测到下面数组的变化：</p>\n<ol>\n<li>直接索引设置元素，如<code>vm.item[0]={}</code>;</li>\n<li>修改数据的长度，如<code>vm.item.length</code>。</li>\n</ol>\n<p>为了解决问题1，Vuejs扩展了观察数组，为它添加一个<code>$set()</code>方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 与 `example1.items[0] = ...` 相同，但是能触发视图更新</span></span><br><span class=\"line\">example1.items.$set(<span class=\"number\">0</span>, &#123; <span class=\"attr\">childMsg</span>: <span class=\"string\">'Changed!'</span>&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>问题2，需要一个空数组替换<code>items</code>。</p>\n<p>除了<code>$set()</code>，vuejs也为观察数组添加了<code>$remove()</code>方法，用于从目标数组中查找并删除元素，在内部调用了<code>splice()</code>。因此，不必：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.items.indexOf(item)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (index !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.items.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>只需：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.items.$remove(item);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-检测对象\"><a href=\"#2-检测对象\" class=\"headerlink\" title=\"2.检测对象\"></a>2.检测对象</h4><p>受ES5的显示，Vuejs<strong>不能检测到对象属性的添加或删除</strong>。因为Vuejs在初始化时候将属性转化为<code>getter/setter</code>，所以属性必须在<code>data</code>对象才能让Vuejs转换它，才能让它是响应的，例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: data</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// `vm.a` 和 `data.a` 现在是响应的</span></span><br><span class=\"line\"> </span><br><span class=\"line\">vm.b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">// `vm.b` 不是响应的</span></span><br><span class=\"line\"> </span><br><span class=\"line\">data.b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">// `data.b` 不是响应的</span></span><br></pre></td></tr></table></figure></p>\n<p>不过，有办法在实例创建之后添加属性并且让它是响应的。对于Vue实例，可以使用<code>$set(key,value)</code>实例方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.$set(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// `vm.b` 和 `data.b` 现在是响应的</span></span><br></pre></td></tr></table></figure></p>\n<p>对于普通数据对象，可以使用全局方法<code>Vue.set(object, key, value)</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.set(data, <span class=\"string\">'c'</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// `vm.c` 和 `data.c` 现在是响应的</span></span><br></pre></td></tr></table></figure></p>\n<p>有时你想向已有对象上添加一些属性，例如使用 <code>Object.assign()</code> 或 <code>_.extend()</code> 添加属性。但是，添加到对象上的新属性不会触发更新。这时可以创建一个新的对象，包含原对象的属性和新的属性：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不使用 `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.someObject = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.someObject, &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-关于vuejs页面闪烁-lt-￼27-gt\"><a href=\"#10-关于vuejs页面闪烁-lt-￼27-gt\" class=\"headerlink\" title=\"10.关于vuejs页面闪烁\"></a>10.关于vuejs页面闪烁<code></code></h2><p>在vuejs指令中有<code>v-cloak</code>，这个指令保持在元素上直到关联实例结束编译。和CSS规则如<code>[v-cloak]{display:none}</code>一起用时，这个指令可以隐藏未编译的Mustache标签直到实例准备完毕。用法如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[v-cloak]</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样<code>&lt;div&gt;</code>不会显示，直到编译结束</p>\n<h2 id=\"11-关于在v-for循环时候v-model的使用\"><a href=\"#11-关于在v-for循环时候v-model的使用\" class=\"headerlink\" title=\"11.关于在v-for循环时候v-model的使用\"></a>11.关于在<code>v-for</code>循环时候<code>v-model</code>的使用</h2><p>有时候需要循环生成<code>input</code>，用<code>v-model</code>绑定后，利用vuejs操作它，此时我们可以在<code>v-model</code>中写一个数组<code>selected[$index]</code>，这样就可以给不同的input绑定不同的<code>v-model</code>，从而分别操作他们。这个我在demo中的dataBind.vue中用到。</p>\n<h2 id=\"12-vuejs中过渡动画\"><a href=\"#12-vuejs中过渡动画\" class=\"headerlink\" title=\"12.vuejs中过渡动画\"></a>12.vuejs中过渡动画</h2><p>在vuejs中，css定义动画：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.zoom-transition</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>:<span class=\"number\">60%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>:auto;</span><br><span class=\"line\">      <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">      <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">      <span class=\"attribute\">-webkit-transition</span>: all .<span class=\"number\">3s</span> ease;</span><br><span class=\"line\">      <span class=\"attribute\">transition</span>: all .<span class=\"number\">3s</span> ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.zoom-enter</span>, <span class=\"selector-class\">.zoom-leave</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>:<span class=\"number\">150px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>:auto;</span><br><span class=\"line\">      <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">      <span class=\"attribute\">left</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">top</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(0,0);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中动画在定的时候要注意上下对应，上面有什么，下面有什么，都要变化的，如果有不变化的，应该抽离出去，作为公共css样式，在上面的css中，如果我只写<code>transform: translate(-50%,-50%);</code>而不写下面的<code>transform: translate(0,0);</code>则会导致上面的<code>transform: translate(-50%,-50%);</code>被添加到下面，认为这个是不变的。</p>"},{"title":"jquery插件开发","date":"2016-03-21T15:04:53.000Z","comments":1,"_content":"由于公司需要写一个功能，而公司的中使用的框架是jquery，所以想到了开发jquery框架。\n#### 1.jQuery插件开发方式\njQuery插件开发方式主要有三种：\n通过$.extend（），通过$.fn向jQuery添加新的方法，通过$weight（）应用jQueryUI的部件工厂方式创建\n#### 2.插件中的this\n在插件名字定义的这个函数内部，this指代的是在调用该插件时，用jQuery选择器选中的元素。这里的this已经是jQuery元素，无需再用美元符包装。\n#### 3.jQuery链式调用\njQuery支持链式调用，要让插件不打破这个链式调用，只需要return一下，实例如下\n```javascript\n$.fn.myPlugin = function(){\n    //这里面this指的是jquery选中的元素\n    this.css('color','red');\n    return this.each(function(){\n        //对每个元素进行操作\n        $(this).append(' '+$(this).attr('href'));\n    })\n}\n```\n<!--more-->\n#### 4.让插件接受参数\n在处理插件参数的接收上，通常用jQuery的extend方法，当给extend传递单个对象时，这个对象会合并到jquery身上，直接可以调用，当给extend方法传递一个以上参数时，它会将所有参数对象合并到\n```javascript\n$.fn.myPlugin = function(){\n    var defaults = {\n        'color':'red',\n        'fontSize':'12px'\n    };\n    var setting = $.extend(defaults,options);\n    return this.css({\n        'color':setting.color,\n        'fontSize':setting.fontSize\n    });\n}\n\n```","source":"_posts/tec-1.md","raw":"---\ntitle: jquery插件开发\ndate: 2016-03-21 23:04:53\ntags: jQuery\ncomments: true\ncategories: \"jQuery\"\n---\n由于公司需要写一个功能，而公司的中使用的框架是jquery，所以想到了开发jquery框架。\n#### 1.jQuery插件开发方式\njQuery插件开发方式主要有三种：\n通过$.extend（），通过$.fn向jQuery添加新的方法，通过$weight（）应用jQueryUI的部件工厂方式创建\n#### 2.插件中的this\n在插件名字定义的这个函数内部，this指代的是在调用该插件时，用jQuery选择器选中的元素。这里的this已经是jQuery元素，无需再用美元符包装。\n#### 3.jQuery链式调用\njQuery支持链式调用，要让插件不打破这个链式调用，只需要return一下，实例如下\n```javascript\n$.fn.myPlugin = function(){\n    //这里面this指的是jquery选中的元素\n    this.css('color','red');\n    return this.each(function(){\n        //对每个元素进行操作\n        $(this).append(' '+$(this).attr('href'));\n    })\n}\n```\n<!--more-->\n#### 4.让插件接受参数\n在处理插件参数的接收上，通常用jQuery的extend方法，当给extend传递单个对象时，这个对象会合并到jquery身上，直接可以调用，当给extend方法传递一个以上参数时，它会将所有参数对象合并到\n```javascript\n$.fn.myPlugin = function(){\n    var defaults = {\n        'color':'red',\n        'fontSize':'12px'\n    };\n    var setting = $.extend(defaults,options);\n    return this.css({\n        'color':setting.color,\n        'fontSize':setting.fontSize\n    });\n}\n\n```","slug":"tec-1","published":1,"updated":"2016-08-02T08:39:44.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoc2003azrv4w4sr632t","content":"<p>由于公司需要写一个功能，而公司的中使用的框架是jquery，所以想到了开发jquery框架。</p>\n<h4 id=\"1-jQuery插件开发方式\"><a href=\"#1-jQuery插件开发方式\" class=\"headerlink\" title=\"1.jQuery插件开发方式\"></a>1.jQuery插件开发方式</h4><p>jQuery插件开发方式主要有三种：<br>通过$.extend（），通过$.fn向jQuery添加新的方法，通过$weight（）应用jQueryUI的部件工厂方式创建</p>\n<h4 id=\"2-插件中的this\"><a href=\"#2-插件中的this\" class=\"headerlink\" title=\"2.插件中的this\"></a>2.插件中的this</h4><p>在插件名字定义的这个函数内部，this指代的是在调用该插件时，用jQuery选择器选中的元素。这里的this已经是jQuery元素，无需再用美元符包装。</p>\n<h4 id=\"3-jQuery链式调用\"><a href=\"#3-jQuery链式调用\" class=\"headerlink\" title=\"3.jQuery链式调用\"></a>3.jQuery链式调用</h4><p>jQuery支持链式调用，要让插件不打破这个链式调用，只需要return一下，实例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.fn.myPlugin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里面this指的是jquery选中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.css(<span class=\"string\">'color'</span>,<span class=\"string\">'red'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//对每个元素进行操作</span></span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>).append(<span class=\"string\">' '</span>+$(<span class=\"keyword\">this</span>).attr(<span class=\"string\">'href'</span>));</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h4 id=\"4-让插件接受参数\"><a href=\"#4-让插件接受参数\" class=\"headerlink\" title=\"4.让插件接受参数\"></a>4.让插件接受参数</h4><p>在处理插件参数的接收上，通常用jQuery的extend方法，当给extend传递单个对象时，这个对象会合并到jquery身上，直接可以调用，当给extend方法传递一个以上参数时，它会将所有参数对象合并到<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.fn.myPlugin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> defaults = &#123;</span><br><span class=\"line\">        <span class=\"string\">'color'</span>:<span class=\"string\">'red'</span>,</span><br><span class=\"line\">        <span class=\"string\">'fontSize'</span>:<span class=\"string\">'12px'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> setting = $.extend(defaults,options);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.css(&#123;</span><br><span class=\"line\">        <span class=\"string\">'color'</span>:setting.color,</span><br><span class=\"line\">        <span class=\"string\">'fontSize'</span>:setting.fontSize</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>由于公司需要写一个功能，而公司的中使用的框架是jquery，所以想到了开发jquery框架。</p>\n<h4 id=\"1-jQuery插件开发方式\"><a href=\"#1-jQuery插件开发方式\" class=\"headerlink\" title=\"1.jQuery插件开发方式\"></a>1.jQuery插件开发方式</h4><p>jQuery插件开发方式主要有三种：<br>通过$.extend（），通过$.fn向jQuery添加新的方法，通过$weight（）应用jQueryUI的部件工厂方式创建</p>\n<h4 id=\"2-插件中的this\"><a href=\"#2-插件中的this\" class=\"headerlink\" title=\"2.插件中的this\"></a>2.插件中的this</h4><p>在插件名字定义的这个函数内部，this指代的是在调用该插件时，用jQuery选择器选中的元素。这里的this已经是jQuery元素，无需再用美元符包装。</p>\n<h4 id=\"3-jQuery链式调用\"><a href=\"#3-jQuery链式调用\" class=\"headerlink\" title=\"3.jQuery链式调用\"></a>3.jQuery链式调用</h4><p>jQuery支持链式调用，要让插件不打破这个链式调用，只需要return一下，实例如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.fn.myPlugin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里面this指的是jquery选中的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.css(<span class=\"string\">'color'</span>,<span class=\"string\">'red'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//对每个元素进行操作</span></span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>).append(<span class=\"string\">' '</span>+$(<span class=\"keyword\">this</span>).attr(<span class=\"string\">'href'</span>));</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<h4 id=\"4-让插件接受参数\"><a href=\"#4-让插件接受参数\" class=\"headerlink\" title=\"4.让插件接受参数\"></a>4.让插件接受参数</h4><p>在处理插件参数的接收上，通常用jQuery的extend方法，当给extend传递单个对象时，这个对象会合并到jquery身上，直接可以调用，当给extend方法传递一个以上参数时，它会将所有参数对象合并到<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.fn.myPlugin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> defaults = &#123;</span><br><span class=\"line\">        <span class=\"string\">'color'</span>:<span class=\"string\">'red'</span>,</span><br><span class=\"line\">        <span class=\"string\">'fontSize'</span>:<span class=\"string\">'12px'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> setting = $.extend(defaults,options);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.css(&#123;</span><br><span class=\"line\">        <span class=\"string\">'color'</span>:setting.color,</span><br><span class=\"line\">        <span class=\"string\">'fontSize'</span>:setting.fontSize</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"H5 Canvas实现图片格式的转换","date":"2016-03-22T15:46:18.000Z","comments":1,"_content":"&emsp;&emsp;今天早上到公司，看到CTO要求调查关于前端如何实现图片格式转换，自己上网找了下关于canvas如何实现图片格式转换，其实还是蛮简单的，但是因为网上的教程着实写的简单，而且都一样，我也是醉了，所以写下这篇博客，以记录今天的调查结果。\n#### 使用Javasript将图片写入画布\n```javascript\nfunction convertImageToCanvas(image) {\n\tvar canvas = document.createElement(\"canvas\");\n\tcanvas.width = image.width;\n\tcanvas.height = image.height;\n\tcanvas.getContext(\"2d\").drawImage(image, 0, 0);\n\treturn canvas;\n}\n```\n<!--more-->\n#### 用JavaScript将画布保持成图片格式\n```javascript\nfunction convertCanvasToImage(canvas) {\n\tvar image = new Image();\n    //这里的image后面可以写png，jpeg，但是不能写jpg，写了不会转换的\n\timage.src = canvas.toDataURL(\"image/jpeg\");\n\treturn image;\n}\n```\n#### 调用函数实现转换\n&emsp;&emsp;函数convertImageToCanvas需要传入一个image对象，这个对象需要我们手动去获取，例如，可以在html页面中写入img标签并引入图片，然后利用js获取img对象，将img对象传入该函数，即可获得返回的canvas对象，再将该canvas对象传入函数convertCanvasToImage即可获得返回的image，<font color=\"red\" size=2>但是，这里获得的是base64的编码的图片，本身绘制在canvas画布上的图片右键保存还是png图，所以，要想获得转换后的图片，可以利用a标签在href中写入base64编码获得，点击a标签可以跳转到转换后的图片。</font>关于如将base64编码的图片解码成图片，因为今天下午事儿多，没顾上研究，有时间，研究一下。\n实现代码如下：\n```javascript\nvar img=document.getElementById('img');\nvar body=document.getElementById('body');\nvar canvas=convertImageToCanvas(img);\nconvertCanvasToImage(canvas);\nvar link=document.createElement('a');\nbody.appendChild(link);\nlink.innerHTML('跳转图片');\n```\n&emsp;&emsp;以上代码可以在点击link链接后得到转换后的图片，今天就研究到这些，以后有时间再继续研究完善。","source":"_posts/tec-2.md","raw":"---\ntitle: H5 Canvas实现图片格式的转换\ndate: 2016-03-22 23:46:18\ntags: canvas\ncomments: true\ncategories: \"Javascript\"\n---\n&emsp;&emsp;今天早上到公司，看到CTO要求调查关于前端如何实现图片格式转换，自己上网找了下关于canvas如何实现图片格式转换，其实还是蛮简单的，但是因为网上的教程着实写的简单，而且都一样，我也是醉了，所以写下这篇博客，以记录今天的调查结果。\n#### 使用Javasript将图片写入画布\n```javascript\nfunction convertImageToCanvas(image) {\n\tvar canvas = document.createElement(\"canvas\");\n\tcanvas.width = image.width;\n\tcanvas.height = image.height;\n\tcanvas.getContext(\"2d\").drawImage(image, 0, 0);\n\treturn canvas;\n}\n```\n<!--more-->\n#### 用JavaScript将画布保持成图片格式\n```javascript\nfunction convertCanvasToImage(canvas) {\n\tvar image = new Image();\n    //这里的image后面可以写png，jpeg，但是不能写jpg，写了不会转换的\n\timage.src = canvas.toDataURL(\"image/jpeg\");\n\treturn image;\n}\n```\n#### 调用函数实现转换\n&emsp;&emsp;函数convertImageToCanvas需要传入一个image对象，这个对象需要我们手动去获取，例如，可以在html页面中写入img标签并引入图片，然后利用js获取img对象，将img对象传入该函数，即可获得返回的canvas对象，再将该canvas对象传入函数convertCanvasToImage即可获得返回的image，<font color=\"red\" size=2>但是，这里获得的是base64的编码的图片，本身绘制在canvas画布上的图片右键保存还是png图，所以，要想获得转换后的图片，可以利用a标签在href中写入base64编码获得，点击a标签可以跳转到转换后的图片。</font>关于如将base64编码的图片解码成图片，因为今天下午事儿多，没顾上研究，有时间，研究一下。\n实现代码如下：\n```javascript\nvar img=document.getElementById('img');\nvar body=document.getElementById('body');\nvar canvas=convertImageToCanvas(img);\nconvertCanvasToImage(canvas);\nvar link=document.createElement('a');\nbody.appendChild(link);\nlink.innerHTML('跳转图片');\n```\n&emsp;&emsp;以上代码可以在点击link链接后得到转换后的图片，今天就研究到这些，以后有时间再继续研究完善。","slug":"tec-2","published":1,"updated":"2016-08-02T08:39:18.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoc3003dzrv47kljsll7","content":"<p>&emsp;&emsp;今天早上到公司，看到CTO要求调查关于前端如何实现图片格式转换，自己上网找了下关于canvas如何实现图片格式转换，其实还是蛮简单的，但是因为网上的教程着实写的简单，而且都一样，我也是醉了，所以写下这篇博客，以记录今天的调查结果。</p>\n<h4 id=\"使用Javasript将图片写入画布\"><a href=\"#使用Javasript将图片写入画布\" class=\"headerlink\" title=\"使用Javasript将图片写入画布\"></a>使用Javasript将图片写入画布</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertImageToCanvas</span>(<span class=\"params\">image</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">\tcanvas.width = image.width;</span><br><span class=\"line\">\tcanvas.height = image.height;</span><br><span class=\"line\">\tcanvas.getContext(<span class=\"string\">\"2d\"</span>).drawImage(image, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> canvas;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"用JavaScript将画布保持成图片格式\"><a href=\"#用JavaScript将画布保持成图片格式\" class=\"headerlink\" title=\"用JavaScript将画布保持成图片格式\"></a>用JavaScript将画布保持成图片格式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertCanvasToImage</span>(<span class=\"params\">canvas</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    <span class=\"comment\">//这里的image后面可以写png，jpeg，但是不能写jpg，写了不会转换的</span></span><br><span class=\"line\">\timage.src = canvas.toDataURL(<span class=\"string\">\"image/jpeg\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"调用函数实现转换\"><a href=\"#调用函数实现转换\" class=\"headerlink\" title=\"调用函数实现转换\"></a>调用函数实现转换</h4><p>&emsp;&emsp;函数convertImageToCanvas需要传入一个image对象，这个对象需要我们手动去获取，例如，可以在html页面中写入img标签并引入图片，然后利用js获取img对象，将img对象传入该函数，即可获得返回的canvas对象，再将该canvas对象传入函数convertCanvasToImage即可获得返回的image，<font color=\"red\" size=\"2\">但是，这里获得的是base64的编码的图片，本身绘制在canvas画布上的图片右键保存还是png图，所以，要想获得转换后的图片，可以利用a标签在href中写入base64编码获得，点击a标签可以跳转到转换后的图片。</font>关于如将base64编码的图片解码成图片，因为今天下午事儿多，没顾上研究，有时间，研究一下。<br>实现代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> body=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'body'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> canvas=convertImageToCanvas(img);</span><br><span class=\"line\">convertCanvasToImage(canvas);</span><br><span class=\"line\"><span class=\"keyword\">var</span> link=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">body.appendChild(link);</span><br><span class=\"line\">link.innerHTML(<span class=\"string\">'跳转图片'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;以上代码可以在点击link链接后得到转换后的图片，今天就研究到这些，以后有时间再继续研究完善。</p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;今天早上到公司，看到CTO要求调查关于前端如何实现图片格式转换，自己上网找了下关于canvas如何实现图片格式转换，其实还是蛮简单的，但是因为网上的教程着实写的简单，而且都一样，我也是醉了，所以写下这篇博客，以记录今天的调查结果。</p>\n<h4 id=\"使用Javasript将图片写入画布\"><a href=\"#使用Javasript将图片写入画布\" class=\"headerlink\" title=\"使用Javasript将图片写入画布\"></a>使用Javasript将图片写入画布</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertImageToCanvas</span>(<span class=\"params\">image</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">\tcanvas.width = image.width;</span><br><span class=\"line\">\tcanvas.height = image.height;</span><br><span class=\"line\">\tcanvas.getContext(<span class=\"string\">\"2d\"</span>).drawImage(image, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> canvas;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"用JavaScript将画布保持成图片格式\"><a href=\"#用JavaScript将画布保持成图片格式\" class=\"headerlink\" title=\"用JavaScript将画布保持成图片格式\"></a>用JavaScript将画布保持成图片格式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertCanvasToImage</span>(<span class=\"params\">canvas</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    <span class=\"comment\">//这里的image后面可以写png，jpeg，但是不能写jpg，写了不会转换的</span></span><br><span class=\"line\">\timage.src = canvas.toDataURL(<span class=\"string\">\"image/jpeg\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"调用函数实现转换\"><a href=\"#调用函数实现转换\" class=\"headerlink\" title=\"调用函数实现转换\"></a>调用函数实现转换</h4><p>&emsp;&emsp;函数convertImageToCanvas需要传入一个image对象，这个对象需要我们手动去获取，例如，可以在html页面中写入img标签并引入图片，然后利用js获取img对象，将img对象传入该函数，即可获得返回的canvas对象，再将该canvas对象传入函数convertCanvasToImage即可获得返回的image，<font color=\"red\" size=\"2\">但是，这里获得的是base64的编码的图片，本身绘制在canvas画布上的图片右键保存还是png图，所以，要想获得转换后的图片，可以利用a标签在href中写入base64编码获得，点击a标签可以跳转到转换后的图片。</font>关于如将base64编码的图片解码成图片，因为今天下午事儿多，没顾上研究，有时间，研究一下。<br>实现代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'img'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> body=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'body'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> canvas=convertImageToCanvas(img);</span><br><span class=\"line\">convertCanvasToImage(canvas);</span><br><span class=\"line\"><span class=\"keyword\">var</span> link=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">body.appendChild(link);</span><br><span class=\"line\">link.innerHTML(<span class=\"string\">'跳转图片'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;以上代码可以在点击link链接后得到转换后的图片，今天就研究到这些，以后有时间再继续研究完善。</p>"},{"title":"text-algin:justify实现文本两端对齐","date":"2016-05-10T16:25:18.000Z","comments":1,"_content":"最近在写页面的时候遇到了一个问题---当行文本双端对齐，大家都知道CSS属性中有一个“text-align:justify”，但是这个属性使用的时候，要求还是挺多的，尤其是要实现单行文本双端对齐。关于两端对齐，大漠和张鑫旭的博客中都有文章讲，非常不错，推荐给大家：\n[display:inline-block/text-align:justify下列表的两端对齐布局](http://www.zhangxinxu.com/wordpress/2011/03/displayinline-blocktext-alignjustify%E4%B8%8B%E5%88%97%E8%A1%A8%E7%9A%84%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90%E5%B8%83%E5%B1%80/) \n[Text-align:Justify和RWD](http://www.w3cplus.com/css/text-align-justify-and-rwd.html) \n## text-align:justify与text-align-last:justify\n### 1.text-align\nMDN中这样介绍到：“text-align CSS属性定义行内内容（例如文字）如何相对它的块父元素对齐。text-align并不控制块元素自己的对齐，只控制它的行内内容的对齐。”从这里可以看出，控制文本居中对齐直接写text-align:justify就可以。但是这对于多行文本（即有文本换行）除了最后一行都可以实现两端对齐，最后一行依旧左对齐。所以就需要控制最后一行文本对齐方式的CSS属性：text-align-last。\n<!--more-->\n### 2.text-align-last\ntext-align-last 属性规定如何对齐文本的最后一行。但是这里注意一点<font color='red'>text-align-last 属性只有在 text-align 属性设置为 \"justify\" 时才起作用。</font>所以，利用这个属性就可以控制最后一行文本的对齐方式。我们可以想象，如果是单行文本，就可以当作最后一行文本处理，直接设置text-align-last:justify来实现当行文本两端对齐，可惜的是，这样的方法兼容性并不好。\n![icon](/img/text-algin-last.png)\n## 利用CSS实现兼容性较好的两端对齐\n从上面的分析可以知道，如果文本出现换行，则除最后一行的所有文本都会实现两端对齐。这时我们想到利用::after伪类，给元素最后设置一个看不见的内联元素，并设置宽度为100%，就可以让我们可以看到的单行文本让浏览器认为是多行文本，从而实现单行文本的两端对齐。具体实现代码如下：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n</head>\n<body>\n<div class=\"line\">\n  <div class=\"public\">啊啊</div>\n  <b>:</b>\n  <b>aaaaaa</b>\n</div>\n<div class=\"line\">\n  <div class=\"public\">啊啊啊啊啊</div>\n  <b>:</b>\n  <b>aaaaaa</b>\n</div>\n<div class=\"line\">\n  <div class=\"public\">啊啊啊啊</div>\n  <b>:</b>\n  <b>aaaaaa</b>\n</div>\n</body>\n</html>\n```\n```css\n.line{\n  width:100%;\n  height:15px;\n  margin:5px;\n  background-color: #ccc;\n}\n.public{\n  width:80px;\n  height:100%;\n  display:inline-block;\n  text-align: justify;\n  vertical-align:top;\n  background-color: #aaa;\n}\n.public::after{\n    content:\"\";\n    display: inline-block;\n    width:100%;\n    overflow:hidden;\n    height:0;\n}\n```\n运行结果：\n![icon](/img/result.jpg)","source":"_posts/text-algin.md","raw":"---\ntitle: text-algin:justify实现文本两端对齐\ndate: 2016-05-11 00:25:18\ntags: CSS\ncomments: true\ncategories: \"CSS\"\n---\n最近在写页面的时候遇到了一个问题---当行文本双端对齐，大家都知道CSS属性中有一个“text-align:justify”，但是这个属性使用的时候，要求还是挺多的，尤其是要实现单行文本双端对齐。关于两端对齐，大漠和张鑫旭的博客中都有文章讲，非常不错，推荐给大家：\n[display:inline-block/text-align:justify下列表的两端对齐布局](http://www.zhangxinxu.com/wordpress/2011/03/displayinline-blocktext-alignjustify%E4%B8%8B%E5%88%97%E8%A1%A8%E7%9A%84%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90%E5%B8%83%E5%B1%80/) \n[Text-align:Justify和RWD](http://www.w3cplus.com/css/text-align-justify-and-rwd.html) \n## text-align:justify与text-align-last:justify\n### 1.text-align\nMDN中这样介绍到：“text-align CSS属性定义行内内容（例如文字）如何相对它的块父元素对齐。text-align并不控制块元素自己的对齐，只控制它的行内内容的对齐。”从这里可以看出，控制文本居中对齐直接写text-align:justify就可以。但是这对于多行文本（即有文本换行）除了最后一行都可以实现两端对齐，最后一行依旧左对齐。所以就需要控制最后一行文本对齐方式的CSS属性：text-align-last。\n<!--more-->\n### 2.text-align-last\ntext-align-last 属性规定如何对齐文本的最后一行。但是这里注意一点<font color='red'>text-align-last 属性只有在 text-align 属性设置为 \"justify\" 时才起作用。</font>所以，利用这个属性就可以控制最后一行文本的对齐方式。我们可以想象，如果是单行文本，就可以当作最后一行文本处理，直接设置text-align-last:justify来实现当行文本两端对齐，可惜的是，这样的方法兼容性并不好。\n![icon](/img/text-algin-last.png)\n## 利用CSS实现兼容性较好的两端对齐\n从上面的分析可以知道，如果文本出现换行，则除最后一行的所有文本都会实现两端对齐。这时我们想到利用::after伪类，给元素最后设置一个看不见的内联元素，并设置宽度为100%，就可以让我们可以看到的单行文本让浏览器认为是多行文本，从而实现单行文本的两端对齐。具体实现代码如下：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n</head>\n<body>\n<div class=\"line\">\n  <div class=\"public\">啊啊</div>\n  <b>:</b>\n  <b>aaaaaa</b>\n</div>\n<div class=\"line\">\n  <div class=\"public\">啊啊啊啊啊</div>\n  <b>:</b>\n  <b>aaaaaa</b>\n</div>\n<div class=\"line\">\n  <div class=\"public\">啊啊啊啊</div>\n  <b>:</b>\n  <b>aaaaaa</b>\n</div>\n</body>\n</html>\n```\n```css\n.line{\n  width:100%;\n  height:15px;\n  margin:5px;\n  background-color: #ccc;\n}\n.public{\n  width:80px;\n  height:100%;\n  display:inline-block;\n  text-align: justify;\n  vertical-align:top;\n  background-color: #aaa;\n}\n.public::after{\n    content:\"\";\n    display: inline-block;\n    width:100%;\n    overflow:hidden;\n    height:0;\n}\n```\n运行结果：\n![icon](/img/result.jpg)","slug":"text-algin","published":1,"updated":"2016-08-02T08:36:36.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoc5003izrv4mawukx8p","content":"<p>最近在写页面的时候遇到了一个问题—当行文本双端对齐，大家都知道CSS属性中有一个“text-align:justify”，但是这个属性使用的时候，要求还是挺多的，尤其是要实现单行文本双端对齐。关于两端对齐，大漠和张鑫旭的博客中都有文章讲，非常不错，推荐给大家：<br><a href=\"http://www.zhangxinxu.com/wordpress/2011/03/displayinline-blocktext-alignjustify%E4%B8%8B%E5%88%97%E8%A1%A8%E7%9A%84%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90%E5%B8%83%E5%B1%80/\" target=\"_blank\" rel=\"noopener\">display:inline-block/text-align:justify下列表的两端对齐布局</a><br><a href=\"http://www.w3cplus.com/css/text-align-justify-and-rwd.html\" target=\"_blank\" rel=\"noopener\">Text-align:Justify和RWD</a> </p>\n<h2 id=\"text-align-justify与text-align-last-justify\"><a href=\"#text-align-justify与text-align-last-justify\" class=\"headerlink\" title=\"text-align:justify与text-align-last:justify\"></a>text-align:justify与text-align-last:justify</h2><h3 id=\"1-text-align\"><a href=\"#1-text-align\" class=\"headerlink\" title=\"1.text-align\"></a>1.text-align</h3><p>MDN中这样介绍到：“text-align CSS属性定义行内内容（例如文字）如何相对它的块父元素对齐。text-align并不控制块元素自己的对齐，只控制它的行内内容的对齐。”从这里可以看出，控制文本居中对齐直接写text-align:justify就可以。但是这对于多行文本（即有文本换行）除了最后一行都可以实现两端对齐，最后一行依旧左对齐。所以就需要控制最后一行文本对齐方式的CSS属性：text-align-last。<br><a id=\"more\"></a></p>\n<h3 id=\"2-text-align-last\"><a href=\"#2-text-align-last\" class=\"headerlink\" title=\"2.text-align-last\"></a>2.text-align-last</h3><p>text-align-last 属性规定如何对齐文本的最后一行。但是这里注意一点<font color=\"red\">text-align-last 属性只有在 text-align 属性设置为 “justify” 时才起作用。</font>所以，利用这个属性就可以控制最后一行文本的对齐方式。我们可以想象，如果是单行文本，就可以当作最后一行文本处理，直接设置text-align-last:justify来实现当行文本两端对齐，可惜的是，这样的方法兼容性并不好。<br><img src=\"/img/text-algin-last.png\" alt=\"icon\"></p>\n<h2 id=\"利用CSS实现兼容性较好的两端对齐\"><a href=\"#利用CSS实现兼容性较好的两端对齐\" class=\"headerlink\" title=\"利用CSS实现兼容性较好的两端对齐\"></a>利用CSS实现兼容性较好的两端对齐</h2><p>从上面的分析可以知道，如果文本出现换行，则除最后一行的所有文本都会实现两端对齐。这时我们想到利用::after伪类，给元素最后设置一个看不见的内联元素，并设置宽度为100%，就可以让我们可以看到的单行文本让浏览器认为是多行文本，从而实现单行文本的两端对齐。具体实现代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"line\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"public\"</span>&gt;</span>啊啊<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>:<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>aaaaaa<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"line\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"public\"</span>&gt;</span>啊啊啊啊啊<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>:<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>aaaaaa<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"line\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"public\"</span>&gt;</span>啊啊啊啊<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>:<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>aaaaaa<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.line</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.public</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">80px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:top;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.public</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br><img src=\"/img/result.jpg\" alt=\"icon\"></p>\n","site":{"data":{}},"excerpt":"<p>最近在写页面的时候遇到了一个问题—当行文本双端对齐，大家都知道CSS属性中有一个“text-align:justify”，但是这个属性使用的时候，要求还是挺多的，尤其是要实现单行文本双端对齐。关于两端对齐，大漠和张鑫旭的博客中都有文章讲，非常不错，推荐给大家：<br><a href=\"http://www.zhangxinxu.com/wordpress/2011/03/displayinline-blocktext-alignjustify%E4%B8%8B%E5%88%97%E8%A1%A8%E7%9A%84%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90%E5%B8%83%E5%B1%80/\" target=\"_blank\" rel=\"noopener\">display:inline-block/text-align:justify下列表的两端对齐布局</a><br><a href=\"http://www.w3cplus.com/css/text-align-justify-and-rwd.html\" target=\"_blank\" rel=\"noopener\">Text-align:Justify和RWD</a> </p>\n<h2 id=\"text-align-justify与text-align-last-justify\"><a href=\"#text-align-justify与text-align-last-justify\" class=\"headerlink\" title=\"text-align:justify与text-align-last:justify\"></a>text-align:justify与text-align-last:justify</h2><h3 id=\"1-text-align\"><a href=\"#1-text-align\" class=\"headerlink\" title=\"1.text-align\"></a>1.text-align</h3><p>MDN中这样介绍到：“text-align CSS属性定义行内内容（例如文字）如何相对它的块父元素对齐。text-align并不控制块元素自己的对齐，只控制它的行内内容的对齐。”从这里可以看出，控制文本居中对齐直接写text-align:justify就可以。但是这对于多行文本（即有文本换行）除了最后一行都可以实现两端对齐，最后一行依旧左对齐。所以就需要控制最后一行文本对齐方式的CSS属性：text-align-last。<br>","more":"</p>\n<h3 id=\"2-text-align-last\"><a href=\"#2-text-align-last\" class=\"headerlink\" title=\"2.text-align-last\"></a>2.text-align-last</h3><p>text-align-last 属性规定如何对齐文本的最后一行。但是这里注意一点<font color=\"red\">text-align-last 属性只有在 text-align 属性设置为 “justify” 时才起作用。</font>所以，利用这个属性就可以控制最后一行文本的对齐方式。我们可以想象，如果是单行文本，就可以当作最后一行文本处理，直接设置text-align-last:justify来实现当行文本两端对齐，可惜的是，这样的方法兼容性并不好。<br><img src=\"/img/text-algin-last.png\" alt=\"icon\"></p>\n<h2 id=\"利用CSS实现兼容性较好的两端对齐\"><a href=\"#利用CSS实现兼容性较好的两端对齐\" class=\"headerlink\" title=\"利用CSS实现兼容性较好的两端对齐\"></a>利用CSS实现兼容性较好的两端对齐</h2><p>从上面的分析可以知道，如果文本出现换行，则除最后一行的所有文本都会实现两端对齐。这时我们想到利用::after伪类，给元素最后设置一个看不见的内联元素，并设置宽度为100%，就可以让我们可以看到的单行文本让浏览器认为是多行文本，从而实现单行文本的两端对齐。具体实现代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"line\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"public\"</span>&gt;</span>啊啊<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>:<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>aaaaaa<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"line\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"public\"</span>&gt;</span>啊啊啊啊啊<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>:<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>aaaaaa<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"line\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"public\"</span>&gt;</span>啊啊啊啊<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>:<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>aaaaaa<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.line</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.public</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">80px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:top;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.public</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br><img src=\"/img/result.jpg\" alt=\"icon\"></p>"},{"title":"北京的这一年，写在离开的这一天","date":"2016-09-24T01:41:09.000Z","comments":1,"_content":"> 2016年9月23日，对于我来说是一个特殊的日子，我离开了我工作一年多的公司，这是我第一家公司，我的职业之路起于这里，这里是我起飞的地方。\n\n<!--more-->\n\n## 初到北京求职\n\n&emsp;&emsp;2015年9月，我离开家乡，和同学一起踏上从太原去往北京的火车。对于北京，我并不陌生，之前来过几次玩儿，但是这次与以往不同，这次我要去梦想之地去实现自身的价值，所以心里还是蛮激动的，对于以后在北京的生活也充满了期待。三个小时后，我们到达了北京，九月初的北京温度还没有降下来，下车后，那种熟悉的感觉迎面而来，我又回到了我熟悉的地方—北京。\n\n&emsp;&emsp;到达北京后的第一件事是找住的地方，因为每个人并不知道要去哪儿工作，所以我们需要先找个临时住所，那时候我在北京认识的人很少，幸亏有同学认识人，帮我们找了一个比较便宜的住的地方，我记得那时候在去住的地方的路上越走越懵逼，给我的感觉是我们刚到北京就要出北京市，经过几次换乘公交车，我们到达了我们要住的地方—老牛湾，熟悉北京的朋友应该知道那里是什么情况，当时到达那个地方后的第一反应是，这里是北京么？？这…我姥姥村都比这个强啊，后来想想北京的房价很高，而我们又是临时住，这里对于我们来说，是最合适的。\n\n&emsp;&emsp;安顿好的第二天，我们各自开始踏上求职之路，因为之前在太原就投过很多公司，所以面试也不少，来到北京后直接可以找公司面试了。因为我们住的地方离北京市确实远，所以我们每天早晨7点起来开始各自准备准备出发，先坐公交到昌平线，然后再做地铁进入北京市。第一次在昌平线坐车的时候吓死我了，人多到爆，上车时候都不用自己动，人流会把你推上去的，这让我第一次见识到北京上班的高峰期！\n\n&emsp;&emsp;可能是初生牛犊不怕虎吧（其实本身也没什么），第一次面试，我去了58同城，见识到了真正的前端面试，至今让我记忆尤新。我到了地方，坐着58的班车，到达曾经在互联网上见过无数次的公司，经过一番面试，面试官给了我一句话：“不好意思，我们需要的是一个能独揽一条产品线的人，你并不合适。”其实这句话并没有打击到我，因为于我来讲，我知道自己的水平在哪儿，来学习一些面试的东西也是值得的，所以也觉得无所谓。在之后的面试中，去的都是一些创业公司，面试的问的东西也是各式各样，因为有58同城的参考，所以时至今日，我都觉得他们的那些面试真的很不专业。从周一开始找工作，找到周五，别的同学都有了相应的offer，但是我自己却一个没有，那时候确实自己有点儿慌了，感觉压力也越来越大。在这五天内，我听到最多的，也是至今最烦的一句话：“等通知吧”…直到周五下午。\n\n&emsp;&emsp;周五的下午，我来到我接下来供职一年多的公司面试，其实那时候我并没有投，是hr主动联系我让我去面试，那时候想，既然让去那就去吧。可能是一个offer都没有吧，很失望，所以那时候去公司面试并没有报太大希望，当时到了公司后，给我的感觉是，这个公司似乎很沉闷（事实上我后来发现我完全错了）。进去之后首先是填了张表，然后就开始面试，我老大并没有问我太多的前端的问题，只是简单的聊了聊，就把我要了（后来他说那时候觉得我比较踏实，所以就要了。），然后hr进来跟我聊了聊薪资什么的，最后走的时候送我一瓶饮料，嘿嘿。这次面试之后，我决定直接在这里入职了，不再面了，因为每天面试成本太高了。\n\n## 职业生涯的开始\n\n&emsp;&emsp;2015年9月16日，我来到公司报到，开始了自己人生新的篇章。那时候我们还在老牛湾住，而公司在北京的南边，所以我每天上班先坐公交后坐地铁，每天上班两小时，下班两小时，现在想想也是相当可以了，哈哈。差不多我在公司上班一周后，我们开始找自己各自的住处，一部分在北京的北边，另一部分来到了南边。安顿好住处后，我开始了属于自己的职场生活。\n\n&emsp;&emsp;刚去公司每天就是学习一些东西，后来开始做一些项目。记得刚去的时候我开始做的是整个公司网站的一个改版，大部分都更改，这算是一个比较大的工程吧，因为刚开始工作吧，对于团队协作什么的仅仅停留在概念上，所以在合作的时候时不时的出一些问题，有几次犯的错比较都被创始人说了，幸运的是我遇到一个好的老大，有什么事儿都帮我说话，所以我并没有什么事儿。记得有一次因为更改了php文件中的几个参数导致推广页面无法使用，连累我老大被CEO说，具体怎么说他的我不清楚，他只是跟我说：“没事儿，谁都会犯错，我那时候工作也犯过错误，改正就好。”从那时起我下定决心一定要把工作做好，要对得起我老大。\n\n&emsp;&emsp;在忙碌的工作中，我度过了2015年，这半年，公司的人数涨了很多，同时在大家的共同努力下，公司从天使轮走到了A轮。不知不觉中，来到公司的年会，年会上，很多人喝的很嗨，因为自己并不爱喝酒，所以并没有喝趴下，哈哈。年会上，CEO总结了一下公司这一年来的发展，并说在明年年会上，公司的人数要翻一番。那时候开始觉得公司是非常有前途。但是在第二年的开春开始上班的时候，我发现和我一批来的就剩下我和我哥们儿了，大部分都离开了公司（包括招我进来的hr），至于什么原因就不说了，直到现在有时候还会怀念他们，如果不是公司的hr，我也没机会来这里上班。\n\n## 失望，离开\n\n&emsp;&emsp;由于在公司工作并不是很忙，所以我有机会可以学习一些新的东西，这让我自己的技术在这一年中有了一定的提高，这一点上我非常感激公司。但是后来我发现我学到这些东西后，我不知道我该怎么用到公司的项目中，其实我自己在后来有跟公司提过，同时公司还让我分享过一些我自己学到的东西，曾经想过试着凭借自己学到的东西帮助公司在前端开发方面效率提上去，但是后来我发现，仅限于此，自己提出的一些东西公司领导会考虑一下，然后…就没有然后了…\n\n&emsp;&emsp;在公司经历了一年，渐渐的发现，也许自己并不适合这里，所以经过一些面试后，自己找到了自己合适的工作，在2016年9月19日，我在QQ上跟我老大说我想离职，我老大并没有说什么，只是问我找到工作了么，我告诉他我找到了，之后问了一些关于手续的事儿，就这样，我在9月23日下午，我办完所有的交接，拿着离职证明，离开了我工作一年的公司。\n\n&emsp;&emsp;对于离开这里，我并没有不舍，因为我深知自己并不适合这里，只是有时候觉得对不起我老大，虽然他在前端技术方面不是很让我折服，但是这一年来，他对我的照顾我还是非常感激的，最后跟他说我要离职，他问我找好下家了么的时候我知道，其实他早知道我要走了，可能就在等我这句话吧。我记得有一次我有点儿不舒服，请假回家，他还非常关心的问我怎么回事儿，不行就去医院看看，买点儿药，公司可以报销。真的非常感激他，虽然我们之间的对话大部分都是关于工作的事儿…\n\n&emsp;&emsp;对于我自己来说，我其实并不喜欢经常跳槽，因为在一个公司待久了会有自己熟悉的人，有自己喜欢干的事儿，会对自己的公司产生一种感情，但是这些都是建立在工作非常开心，融入公司的环境的情况下。在公司的时间长了，渐渐的明白，公司的文化如同一个漏斗，会筛选出一批相似的人。\n\n## 写在最后\n\n&emsp;&emsp;虽然我离开了，但是我一直都觉得公司很有前途，在我走的时候，公司已经从我当初刚去的20多人发展成70多人了，我感到很欣慰。同时，希望公司可以招到更好的前端，可以在未来发展的更好。\n\n\n","source":"_posts/thoughts.md","raw":"---\ntitle: 北京的这一年，写在离开的这一天\ndate: 2016-09-24 09:41:09\ntags: 感想\ncomments: true\ncategories: \"感想\"\n---\n> 2016年9月23日，对于我来说是一个特殊的日子，我离开了我工作一年多的公司，这是我第一家公司，我的职业之路起于这里，这里是我起飞的地方。\n\n<!--more-->\n\n## 初到北京求职\n\n&emsp;&emsp;2015年9月，我离开家乡，和同学一起踏上从太原去往北京的火车。对于北京，我并不陌生，之前来过几次玩儿，但是这次与以往不同，这次我要去梦想之地去实现自身的价值，所以心里还是蛮激动的，对于以后在北京的生活也充满了期待。三个小时后，我们到达了北京，九月初的北京温度还没有降下来，下车后，那种熟悉的感觉迎面而来，我又回到了我熟悉的地方—北京。\n\n&emsp;&emsp;到达北京后的第一件事是找住的地方，因为每个人并不知道要去哪儿工作，所以我们需要先找个临时住所，那时候我在北京认识的人很少，幸亏有同学认识人，帮我们找了一个比较便宜的住的地方，我记得那时候在去住的地方的路上越走越懵逼，给我的感觉是我们刚到北京就要出北京市，经过几次换乘公交车，我们到达了我们要住的地方—老牛湾，熟悉北京的朋友应该知道那里是什么情况，当时到达那个地方后的第一反应是，这里是北京么？？这…我姥姥村都比这个强啊，后来想想北京的房价很高，而我们又是临时住，这里对于我们来说，是最合适的。\n\n&emsp;&emsp;安顿好的第二天，我们各自开始踏上求职之路，因为之前在太原就投过很多公司，所以面试也不少，来到北京后直接可以找公司面试了。因为我们住的地方离北京市确实远，所以我们每天早晨7点起来开始各自准备准备出发，先坐公交到昌平线，然后再做地铁进入北京市。第一次在昌平线坐车的时候吓死我了，人多到爆，上车时候都不用自己动，人流会把你推上去的，这让我第一次见识到北京上班的高峰期！\n\n&emsp;&emsp;可能是初生牛犊不怕虎吧（其实本身也没什么），第一次面试，我去了58同城，见识到了真正的前端面试，至今让我记忆尤新。我到了地方，坐着58的班车，到达曾经在互联网上见过无数次的公司，经过一番面试，面试官给了我一句话：“不好意思，我们需要的是一个能独揽一条产品线的人，你并不合适。”其实这句话并没有打击到我，因为于我来讲，我知道自己的水平在哪儿，来学习一些面试的东西也是值得的，所以也觉得无所谓。在之后的面试中，去的都是一些创业公司，面试的问的东西也是各式各样，因为有58同城的参考，所以时至今日，我都觉得他们的那些面试真的很不专业。从周一开始找工作，找到周五，别的同学都有了相应的offer，但是我自己却一个没有，那时候确实自己有点儿慌了，感觉压力也越来越大。在这五天内，我听到最多的，也是至今最烦的一句话：“等通知吧”…直到周五下午。\n\n&emsp;&emsp;周五的下午，我来到我接下来供职一年多的公司面试，其实那时候我并没有投，是hr主动联系我让我去面试，那时候想，既然让去那就去吧。可能是一个offer都没有吧，很失望，所以那时候去公司面试并没有报太大希望，当时到了公司后，给我的感觉是，这个公司似乎很沉闷（事实上我后来发现我完全错了）。进去之后首先是填了张表，然后就开始面试，我老大并没有问我太多的前端的问题，只是简单的聊了聊，就把我要了（后来他说那时候觉得我比较踏实，所以就要了。），然后hr进来跟我聊了聊薪资什么的，最后走的时候送我一瓶饮料，嘿嘿。这次面试之后，我决定直接在这里入职了，不再面了，因为每天面试成本太高了。\n\n## 职业生涯的开始\n\n&emsp;&emsp;2015年9月16日，我来到公司报到，开始了自己人生新的篇章。那时候我们还在老牛湾住，而公司在北京的南边，所以我每天上班先坐公交后坐地铁，每天上班两小时，下班两小时，现在想想也是相当可以了，哈哈。差不多我在公司上班一周后，我们开始找自己各自的住处，一部分在北京的北边，另一部分来到了南边。安顿好住处后，我开始了属于自己的职场生活。\n\n&emsp;&emsp;刚去公司每天就是学习一些东西，后来开始做一些项目。记得刚去的时候我开始做的是整个公司网站的一个改版，大部分都更改，这算是一个比较大的工程吧，因为刚开始工作吧，对于团队协作什么的仅仅停留在概念上，所以在合作的时候时不时的出一些问题，有几次犯的错比较都被创始人说了，幸运的是我遇到一个好的老大，有什么事儿都帮我说话，所以我并没有什么事儿。记得有一次因为更改了php文件中的几个参数导致推广页面无法使用，连累我老大被CEO说，具体怎么说他的我不清楚，他只是跟我说：“没事儿，谁都会犯错，我那时候工作也犯过错误，改正就好。”从那时起我下定决心一定要把工作做好，要对得起我老大。\n\n&emsp;&emsp;在忙碌的工作中，我度过了2015年，这半年，公司的人数涨了很多，同时在大家的共同努力下，公司从天使轮走到了A轮。不知不觉中，来到公司的年会，年会上，很多人喝的很嗨，因为自己并不爱喝酒，所以并没有喝趴下，哈哈。年会上，CEO总结了一下公司这一年来的发展，并说在明年年会上，公司的人数要翻一番。那时候开始觉得公司是非常有前途。但是在第二年的开春开始上班的时候，我发现和我一批来的就剩下我和我哥们儿了，大部分都离开了公司（包括招我进来的hr），至于什么原因就不说了，直到现在有时候还会怀念他们，如果不是公司的hr，我也没机会来这里上班。\n\n## 失望，离开\n\n&emsp;&emsp;由于在公司工作并不是很忙，所以我有机会可以学习一些新的东西，这让我自己的技术在这一年中有了一定的提高，这一点上我非常感激公司。但是后来我发现我学到这些东西后，我不知道我该怎么用到公司的项目中，其实我自己在后来有跟公司提过，同时公司还让我分享过一些我自己学到的东西，曾经想过试着凭借自己学到的东西帮助公司在前端开发方面效率提上去，但是后来我发现，仅限于此，自己提出的一些东西公司领导会考虑一下，然后…就没有然后了…\n\n&emsp;&emsp;在公司经历了一年，渐渐的发现，也许自己并不适合这里，所以经过一些面试后，自己找到了自己合适的工作，在2016年9月19日，我在QQ上跟我老大说我想离职，我老大并没有说什么，只是问我找到工作了么，我告诉他我找到了，之后问了一些关于手续的事儿，就这样，我在9月23日下午，我办完所有的交接，拿着离职证明，离开了我工作一年的公司。\n\n&emsp;&emsp;对于离开这里，我并没有不舍，因为我深知自己并不适合这里，只是有时候觉得对不起我老大，虽然他在前端技术方面不是很让我折服，但是这一年来，他对我的照顾我还是非常感激的，最后跟他说我要离职，他问我找好下家了么的时候我知道，其实他早知道我要走了，可能就在等我这句话吧。我记得有一次我有点儿不舒服，请假回家，他还非常关心的问我怎么回事儿，不行就去医院看看，买点儿药，公司可以报销。真的非常感激他，虽然我们之间的对话大部分都是关于工作的事儿…\n\n&emsp;&emsp;对于我自己来说，我其实并不喜欢经常跳槽，因为在一个公司待久了会有自己熟悉的人，有自己喜欢干的事儿，会对自己的公司产生一种感情，但是这些都是建立在工作非常开心，融入公司的环境的情况下。在公司的时间长了，渐渐的明白，公司的文化如同一个漏斗，会筛选出一批相似的人。\n\n## 写在最后\n\n&emsp;&emsp;虽然我离开了，但是我一直都觉得公司很有前途，在我走的时候，公司已经从我当初刚去的20多人发展成70多人了，我感到很欣慰。同时，希望公司可以招到更好的前端，可以在未来发展的更好。\n\n\n","slug":"thoughts","published":1,"updated":"2016-10-01T18:21:44.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoc7003lzrv423y390t3","content":"<blockquote>\n<p>2016年9月23日，对于我来说是一个特殊的日子，我离开了我工作一年多的公司，这是我第一家公司，我的职业之路起于这里，这里是我起飞的地方。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"初到北京求职\"><a href=\"#初到北京求职\" class=\"headerlink\" title=\"初到北京求职\"></a>初到北京求职</h2><p>&emsp;&emsp;2015年9月，我离开家乡，和同学一起踏上从太原去往北京的火车。对于北京，我并不陌生，之前来过几次玩儿，但是这次与以往不同，这次我要去梦想之地去实现自身的价值，所以心里还是蛮激动的，对于以后在北京的生活也充满了期待。三个小时后，我们到达了北京，九月初的北京温度还没有降下来，下车后，那种熟悉的感觉迎面而来，我又回到了我熟悉的地方—北京。</p>\n<p>&emsp;&emsp;到达北京后的第一件事是找住的地方，因为每个人并不知道要去哪儿工作，所以我们需要先找个临时住所，那时候我在北京认识的人很少，幸亏有同学认识人，帮我们找了一个比较便宜的住的地方，我记得那时候在去住的地方的路上越走越懵逼，给我的感觉是我们刚到北京就要出北京市，经过几次换乘公交车，我们到达了我们要住的地方—老牛湾，熟悉北京的朋友应该知道那里是什么情况，当时到达那个地方后的第一反应是，这里是北京么？？这…我姥姥村都比这个强啊，后来想想北京的房价很高，而我们又是临时住，这里对于我们来说，是最合适的。</p>\n<p>&emsp;&emsp;安顿好的第二天，我们各自开始踏上求职之路，因为之前在太原就投过很多公司，所以面试也不少，来到北京后直接可以找公司面试了。因为我们住的地方离北京市确实远，所以我们每天早晨7点起来开始各自准备准备出发，先坐公交到昌平线，然后再做地铁进入北京市。第一次在昌平线坐车的时候吓死我了，人多到爆，上车时候都不用自己动，人流会把你推上去的，这让我第一次见识到北京上班的高峰期！</p>\n<p>&emsp;&emsp;可能是初生牛犊不怕虎吧（其实本身也没什么），第一次面试，我去了58同城，见识到了真正的前端面试，至今让我记忆尤新。我到了地方，坐着58的班车，到达曾经在互联网上见过无数次的公司，经过一番面试，面试官给了我一句话：“不好意思，我们需要的是一个能独揽一条产品线的人，你并不合适。”其实这句话并没有打击到我，因为于我来讲，我知道自己的水平在哪儿，来学习一些面试的东西也是值得的，所以也觉得无所谓。在之后的面试中，去的都是一些创业公司，面试的问的东西也是各式各样，因为有58同城的参考，所以时至今日，我都觉得他们的那些面试真的很不专业。从周一开始找工作，找到周五，别的同学都有了相应的offer，但是我自己却一个没有，那时候确实自己有点儿慌了，感觉压力也越来越大。在这五天内，我听到最多的，也是至今最烦的一句话：“等通知吧”…直到周五下午。</p>\n<p>&emsp;&emsp;周五的下午，我来到我接下来供职一年多的公司面试，其实那时候我并没有投，是hr主动联系我让我去面试，那时候想，既然让去那就去吧。可能是一个offer都没有吧，很失望，所以那时候去公司面试并没有报太大希望，当时到了公司后，给我的感觉是，这个公司似乎很沉闷（事实上我后来发现我完全错了）。进去之后首先是填了张表，然后就开始面试，我老大并没有问我太多的前端的问题，只是简单的聊了聊，就把我要了（后来他说那时候觉得我比较踏实，所以就要了。），然后hr进来跟我聊了聊薪资什么的，最后走的时候送我一瓶饮料，嘿嘿。这次面试之后，我决定直接在这里入职了，不再面了，因为每天面试成本太高了。</p>\n<h2 id=\"职业生涯的开始\"><a href=\"#职业生涯的开始\" class=\"headerlink\" title=\"职业生涯的开始\"></a>职业生涯的开始</h2><p>&emsp;&emsp;2015年9月16日，我来到公司报到，开始了自己人生新的篇章。那时候我们还在老牛湾住，而公司在北京的南边，所以我每天上班先坐公交后坐地铁，每天上班两小时，下班两小时，现在想想也是相当可以了，哈哈。差不多我在公司上班一周后，我们开始找自己各自的住处，一部分在北京的北边，另一部分来到了南边。安顿好住处后，我开始了属于自己的职场生活。</p>\n<p>&emsp;&emsp;刚去公司每天就是学习一些东西，后来开始做一些项目。记得刚去的时候我开始做的是整个公司网站的一个改版，大部分都更改，这算是一个比较大的工程吧，因为刚开始工作吧，对于团队协作什么的仅仅停留在概念上，所以在合作的时候时不时的出一些问题，有几次犯的错比较都被创始人说了，幸运的是我遇到一个好的老大，有什么事儿都帮我说话，所以我并没有什么事儿。记得有一次因为更改了php文件中的几个参数导致推广页面无法使用，连累我老大被CEO说，具体怎么说他的我不清楚，他只是跟我说：“没事儿，谁都会犯错，我那时候工作也犯过错误，改正就好。”从那时起我下定决心一定要把工作做好，要对得起我老大。</p>\n<p>&emsp;&emsp;在忙碌的工作中，我度过了2015年，这半年，公司的人数涨了很多，同时在大家的共同努力下，公司从天使轮走到了A轮。不知不觉中，来到公司的年会，年会上，很多人喝的很嗨，因为自己并不爱喝酒，所以并没有喝趴下，哈哈。年会上，CEO总结了一下公司这一年来的发展，并说在明年年会上，公司的人数要翻一番。那时候开始觉得公司是非常有前途。但是在第二年的开春开始上班的时候，我发现和我一批来的就剩下我和我哥们儿了，大部分都离开了公司（包括招我进来的hr），至于什么原因就不说了，直到现在有时候还会怀念他们，如果不是公司的hr，我也没机会来这里上班。</p>\n<h2 id=\"失望，离开\"><a href=\"#失望，离开\" class=\"headerlink\" title=\"失望，离开\"></a>失望，离开</h2><p>&emsp;&emsp;由于在公司工作并不是很忙，所以我有机会可以学习一些新的东西，这让我自己的技术在这一年中有了一定的提高，这一点上我非常感激公司。但是后来我发现我学到这些东西后，我不知道我该怎么用到公司的项目中，其实我自己在后来有跟公司提过，同时公司还让我分享过一些我自己学到的东西，曾经想过试着凭借自己学到的东西帮助公司在前端开发方面效率提上去，但是后来我发现，仅限于此，自己提出的一些东西公司领导会考虑一下，然后…就没有然后了…</p>\n<p>&emsp;&emsp;在公司经历了一年，渐渐的发现，也许自己并不适合这里，所以经过一些面试后，自己找到了自己合适的工作，在2016年9月19日，我在QQ上跟我老大说我想离职，我老大并没有说什么，只是问我找到工作了么，我告诉他我找到了，之后问了一些关于手续的事儿，就这样，我在9月23日下午，我办完所有的交接，拿着离职证明，离开了我工作一年的公司。</p>\n<p>&emsp;&emsp;对于离开这里，我并没有不舍，因为我深知自己并不适合这里，只是有时候觉得对不起我老大，虽然他在前端技术方面不是很让我折服，但是这一年来，他对我的照顾我还是非常感激的，最后跟他说我要离职，他问我找好下家了么的时候我知道，其实他早知道我要走了，可能就在等我这句话吧。我记得有一次我有点儿不舒服，请假回家，他还非常关心的问我怎么回事儿，不行就去医院看看，买点儿药，公司可以报销。真的非常感激他，虽然我们之间的对话大部分都是关于工作的事儿…</p>\n<p>&emsp;&emsp;对于我自己来说，我其实并不喜欢经常跳槽，因为在一个公司待久了会有自己熟悉的人，有自己喜欢干的事儿，会对自己的公司产生一种感情，但是这些都是建立在工作非常开心，融入公司的环境的情况下。在公司的时间长了，渐渐的明白，公司的文化如同一个漏斗，会筛选出一批相似的人。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>&emsp;&emsp;虽然我离开了，但是我一直都觉得公司很有前途，在我走的时候，公司已经从我当初刚去的20多人发展成70多人了，我感到很欣慰。同时，希望公司可以招到更好的前端，可以在未来发展的更好。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>2016年9月23日，对于我来说是一个特殊的日子，我离开了我工作一年多的公司，这是我第一家公司，我的职业之路起于这里，这里是我起飞的地方。</p>\n</blockquote>","more":"<h2 id=\"初到北京求职\"><a href=\"#初到北京求职\" class=\"headerlink\" title=\"初到北京求职\"></a>初到北京求职</h2><p>&emsp;&emsp;2015年9月，我离开家乡，和同学一起踏上从太原去往北京的火车。对于北京，我并不陌生，之前来过几次玩儿，但是这次与以往不同，这次我要去梦想之地去实现自身的价值，所以心里还是蛮激动的，对于以后在北京的生活也充满了期待。三个小时后，我们到达了北京，九月初的北京温度还没有降下来，下车后，那种熟悉的感觉迎面而来，我又回到了我熟悉的地方—北京。</p>\n<p>&emsp;&emsp;到达北京后的第一件事是找住的地方，因为每个人并不知道要去哪儿工作，所以我们需要先找个临时住所，那时候我在北京认识的人很少，幸亏有同学认识人，帮我们找了一个比较便宜的住的地方，我记得那时候在去住的地方的路上越走越懵逼，给我的感觉是我们刚到北京就要出北京市，经过几次换乘公交车，我们到达了我们要住的地方—老牛湾，熟悉北京的朋友应该知道那里是什么情况，当时到达那个地方后的第一反应是，这里是北京么？？这…我姥姥村都比这个强啊，后来想想北京的房价很高，而我们又是临时住，这里对于我们来说，是最合适的。</p>\n<p>&emsp;&emsp;安顿好的第二天，我们各自开始踏上求职之路，因为之前在太原就投过很多公司，所以面试也不少，来到北京后直接可以找公司面试了。因为我们住的地方离北京市确实远，所以我们每天早晨7点起来开始各自准备准备出发，先坐公交到昌平线，然后再做地铁进入北京市。第一次在昌平线坐车的时候吓死我了，人多到爆，上车时候都不用自己动，人流会把你推上去的，这让我第一次见识到北京上班的高峰期！</p>\n<p>&emsp;&emsp;可能是初生牛犊不怕虎吧（其实本身也没什么），第一次面试，我去了58同城，见识到了真正的前端面试，至今让我记忆尤新。我到了地方，坐着58的班车，到达曾经在互联网上见过无数次的公司，经过一番面试，面试官给了我一句话：“不好意思，我们需要的是一个能独揽一条产品线的人，你并不合适。”其实这句话并没有打击到我，因为于我来讲，我知道自己的水平在哪儿，来学习一些面试的东西也是值得的，所以也觉得无所谓。在之后的面试中，去的都是一些创业公司，面试的问的东西也是各式各样，因为有58同城的参考，所以时至今日，我都觉得他们的那些面试真的很不专业。从周一开始找工作，找到周五，别的同学都有了相应的offer，但是我自己却一个没有，那时候确实自己有点儿慌了，感觉压力也越来越大。在这五天内，我听到最多的，也是至今最烦的一句话：“等通知吧”…直到周五下午。</p>\n<p>&emsp;&emsp;周五的下午，我来到我接下来供职一年多的公司面试，其实那时候我并没有投，是hr主动联系我让我去面试，那时候想，既然让去那就去吧。可能是一个offer都没有吧，很失望，所以那时候去公司面试并没有报太大希望，当时到了公司后，给我的感觉是，这个公司似乎很沉闷（事实上我后来发现我完全错了）。进去之后首先是填了张表，然后就开始面试，我老大并没有问我太多的前端的问题，只是简单的聊了聊，就把我要了（后来他说那时候觉得我比较踏实，所以就要了。），然后hr进来跟我聊了聊薪资什么的，最后走的时候送我一瓶饮料，嘿嘿。这次面试之后，我决定直接在这里入职了，不再面了，因为每天面试成本太高了。</p>\n<h2 id=\"职业生涯的开始\"><a href=\"#职业生涯的开始\" class=\"headerlink\" title=\"职业生涯的开始\"></a>职业生涯的开始</h2><p>&emsp;&emsp;2015年9月16日，我来到公司报到，开始了自己人生新的篇章。那时候我们还在老牛湾住，而公司在北京的南边，所以我每天上班先坐公交后坐地铁，每天上班两小时，下班两小时，现在想想也是相当可以了，哈哈。差不多我在公司上班一周后，我们开始找自己各自的住处，一部分在北京的北边，另一部分来到了南边。安顿好住处后，我开始了属于自己的职场生活。</p>\n<p>&emsp;&emsp;刚去公司每天就是学习一些东西，后来开始做一些项目。记得刚去的时候我开始做的是整个公司网站的一个改版，大部分都更改，这算是一个比较大的工程吧，因为刚开始工作吧，对于团队协作什么的仅仅停留在概念上，所以在合作的时候时不时的出一些问题，有几次犯的错比较都被创始人说了，幸运的是我遇到一个好的老大，有什么事儿都帮我说话，所以我并没有什么事儿。记得有一次因为更改了php文件中的几个参数导致推广页面无法使用，连累我老大被CEO说，具体怎么说他的我不清楚，他只是跟我说：“没事儿，谁都会犯错，我那时候工作也犯过错误，改正就好。”从那时起我下定决心一定要把工作做好，要对得起我老大。</p>\n<p>&emsp;&emsp;在忙碌的工作中，我度过了2015年，这半年，公司的人数涨了很多，同时在大家的共同努力下，公司从天使轮走到了A轮。不知不觉中，来到公司的年会，年会上，很多人喝的很嗨，因为自己并不爱喝酒，所以并没有喝趴下，哈哈。年会上，CEO总结了一下公司这一年来的发展，并说在明年年会上，公司的人数要翻一番。那时候开始觉得公司是非常有前途。但是在第二年的开春开始上班的时候，我发现和我一批来的就剩下我和我哥们儿了，大部分都离开了公司（包括招我进来的hr），至于什么原因就不说了，直到现在有时候还会怀念他们，如果不是公司的hr，我也没机会来这里上班。</p>\n<h2 id=\"失望，离开\"><a href=\"#失望，离开\" class=\"headerlink\" title=\"失望，离开\"></a>失望，离开</h2><p>&emsp;&emsp;由于在公司工作并不是很忙，所以我有机会可以学习一些新的东西，这让我自己的技术在这一年中有了一定的提高，这一点上我非常感激公司。但是后来我发现我学到这些东西后，我不知道我该怎么用到公司的项目中，其实我自己在后来有跟公司提过，同时公司还让我分享过一些我自己学到的东西，曾经想过试着凭借自己学到的东西帮助公司在前端开发方面效率提上去，但是后来我发现，仅限于此，自己提出的一些东西公司领导会考虑一下，然后…就没有然后了…</p>\n<p>&emsp;&emsp;在公司经历了一年，渐渐的发现，也许自己并不适合这里，所以经过一些面试后，自己找到了自己合适的工作，在2016年9月19日，我在QQ上跟我老大说我想离职，我老大并没有说什么，只是问我找到工作了么，我告诉他我找到了，之后问了一些关于手续的事儿，就这样，我在9月23日下午，我办完所有的交接，拿着离职证明，离开了我工作一年的公司。</p>\n<p>&emsp;&emsp;对于离开这里，我并没有不舍，因为我深知自己并不适合这里，只是有时候觉得对不起我老大，虽然他在前端技术方面不是很让我折服，但是这一年来，他对我的照顾我还是非常感激的，最后跟他说我要离职，他问我找好下家了么的时候我知道，其实他早知道我要走了，可能就在等我这句话吧。我记得有一次我有点儿不舒服，请假回家，他还非常关心的问我怎么回事儿，不行就去医院看看，买点儿药，公司可以报销。真的非常感激他，虽然我们之间的对话大部分都是关于工作的事儿…</p>\n<p>&emsp;&emsp;对于我自己来说，我其实并不喜欢经常跳槽，因为在一个公司待久了会有自己熟悉的人，有自己喜欢干的事儿，会对自己的公司产生一种感情，但是这些都是建立在工作非常开心，融入公司的环境的情况下。在公司的时间长了，渐渐的明白，公司的文化如同一个漏斗，会筛选出一批相似的人。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>&emsp;&emsp;虽然我离开了，但是我一直都觉得公司很有前途，在我走的时候，公司已经从我当初刚去的20多人发展成70多人了，我感到很欣慰。同时，希望公司可以招到更好的前端，可以在未来发展的更好。</p>"},{"title":"慕课网---深入理解vertical-align总结","date":"2016-05-23T15:07:35.000Z","comments":1,"_content":"看了张鑫旭在慕课网关于vertical-align的讲解，感觉讲的挺深，所以总结了一下\nvertical-align的百分比值相对于line-height计算\nIE6/7下line-height不支持小数\n## vertical-align起作用的前提\n该属性应用于inline水平或者table-cell元素\n#### inline水平\ninline:img,span,strong,em等\ninline-block:input,button（ie8+，ie6/7会把inline-block当作inline）\n#### table-cell元素\ntd\n所以<font color='red'>默认情况下</font>支持vertical-align的有：图片，按钮，文字，单元格\n<!--more-->\n### 抛出一个问题\n想实现图片的垂直居中\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n</head>\n<body>\n<p>\n  <img src=\"http://www.insgeek.com/public/insgeek2.0/img/indexpec/enleft.jpg\" width='100' alt=\"\">\n</p>\n</body>\n</html>\n```\n```css\np{\n  width:100%;\n  height:200px;\n  background-color: #ccc;\n}\nimg{\n  vertical-align:middle;\n}\n```\n利用vertical-align：middle实现垂直居中，但是这里并没有按照我们想要的去做，解决办法：\n#### 1.给父元素<p>添加line-height的值为<p>的高度（ie7+都可以实现）\n```css\np{\n    line-height:200px;\n}\n```\n#### 2.给父元素<p>添加display:table-cell\ntable-cell元素的vertical-align只会作用于自身，里面的子元素设置不起作用\n```css\np{\n    display:table-cell;\n    /*把img的去掉*/\n     vertical-align:middle;\n}\n```\n## vertical-align与line-height\n利用text-align:justify任意数目列表两端对齐效果\n```css\n.justify-fix{display:inline-block;width:250px}\np{\n    background:#666;\n}\n```\n```html\n <p style=\"text-align: justify\">\n\t<img src=\"img/mm1.jpg\" width=\"250\" alt=\"\">\n\t<img src=\"img/mm1.jpg\" width=\"250\" alt=\"\">\n\t<img src=\"img/mm1.jpg\" width=\"250\" alt=\"\">\n\t<img src=\"img/mm1.jpg\" width=\"250\" alt=\"\">\n\t<i class=\"justify-fix\"></i>\n\t<i class=\"justify-fix\"></i>\n\t<i class=\"justify-fix\"></i>\n  </p>\n```\n![icon](/img/vertical-align/3.png)\n运行后红色虚线表示i标签的位置\n设置容器，p的行高为0\n```css\np{\n    line-height:0;\n}\n```\n则出现如下情况：\n![icon](/img/vertical-align/4.png)\n#### 为什么会出现这样的现象？\n首先看一个东西\n从CSS2的可视化格式模型文档中看到：\n‘inline-block’的基线是正常流中最后一个line box的基线，除非，这个line box里面既没有line boxes或者本身‘overflow’属性的计算值而不是‘visible’，这种情况下基线是margin第边缘\n举例说明：\n```html\n<style>\n\t.dib-baseline{\n\t\tdisplay: inline-block;\n\t\twidth: 150px;\n\t\theight: 150px;\n\t\tborder: 1px solid #cad5eb;\n\t\tbackground-color: #f0f3f9;\n\t\tmargin-top: 20px;\n\t}\n</style>\n<span class=\"dib-baseline\"></span>\n<span class=\"dib-baseline\">dib-baseline</span>\n```\n图1\n![icon](/img/vertical-align/2.png)\n文档解释了该现象，因为前面的盒子没有任何字符，此时它的基线就是它的底边缘，后面的盒子有文字，所以该盒子的基线就是文字的基线，二者基线对齐，现成如此效果。\n如果把第二个盒子line-height:0，此时文字基线的位置，就是文字的垂直中心，所以：\n图2\n![icon](/img/vertical-align/5.png)\n所以，以上情况下面那些空白，是由于本身后面两个图片是没有的，所以可以当作是空白字符（空格），即后面两个`<i>`是有字符的，而第一个`<i>`是没有字符的，所以和上面的那个例子一样，默认基线对齐，所以，会导致出现小的空隙（其本质和图2一样），要消除这个空隙，需要给i都添加空白字符（&nbsp;或者直接改变对齐方式，vertical-align：top / bottom）即可，而这个line-height：0可以不添加。\n\n要消除需要给p标签（容器）设置：\n```css\np{\n    line-height:0;\n}\n.justify-fix{\n    vertical-align: bottom / top;\n}\n```\n之后运行结果：\n![icon](/img/vertical-align/1.png)\n## vertical-align线性属性值\n### 1.vertical-align:bottom（top与之差不多）\n#### 定义\n1. inline / inline-block元素：元素底部和整行底部对齐。\n2. table-cell元素：单元格底padding边缘和表格行的底部对齐\n\n### 2.vertical-align:middle\n#### 定义\n1. inline / inline-block元素：元素的垂直中心点和父元素基线上1/2 x-height处对齐\n2. table - cell元素：单元格填充盒子相对于外卖的表格行居中对齐\n\n#### 利用vertical-align：middle所实现的是<font color=\"red\">近似</font>垂直居中\n为什么是近似呢？答案就在于： inline / inline-block元素：元素的垂直中心点和父元素基线上1/2 x-height处对齐\n父元素基线上1/2 x-height处其实就是用line-height撑开后字符水平中心\n字符所在的水平中心线和经过line-height撑开后的水平中心线（vertical-algin：middle的水平中心线）不是一个中心线（具体演示看[4-1 vertical-align线性属性值]http://www.imooc.com/video/10403）因为字符，本身有个下沉的特性\n#### 那么如何实现完全垂直居中？\n给父元素设置\n```css\np{font-size:0}\n```\n这样元素的垂直中心点和父元素基线上1/2 x-height处就完全重合了\n但是这样会出现问题，如果我们在父级元素中有文字，那么设置`font-size：0`会导致文字无法显示，实现完全垂直居中的另一种方法是给图片（img）后面添加一个span,span设置为vertical-align：middle\n```css\np { line-height:250px; }\nimg { veritcal-align:middle; }\nimg+span { veritcal-align:middle; } \n```\n## vertical-align文本类属性值\n### 定义：\n1. vertical-align :text-top\n盒子的顶部和父级content area的顶部对齐\n2. vertical-align：text-bottom\n\n盒子的底部和父级content area的底部对齐\n### 解释：\ncontent area就是只与父级font-size的大小有关，与行高，以及后面是否有inline-block元素的没有任何关系，但是vertical-align：middle / top / bottom都会被后面的inline-block水平元素影响。\n### 用处：\n一般用于表情图片（或原始尺寸背景图标）与文字的对齐效果\n## 输入理解vertical-align上标下标类---sub / super\nHTML中有原生的上下标标签，分别为：`<sup>` ,`<sub>`。利用原生的HTML获得的上下标文字大小是父元素75%左右。\n### 定义：\n1.vertical-align：super\n提高盒子的基线到父级合适的上标基线位置。\n2.vertical-align：sub\n降低盒子的基线到父级合适的下标基线位置。\n这里的‘合适的上（下）标基线位置’，哪里合适，说不清\n## vertical-align前后不一的作用机制与示例\n vertical-align所有的表现只当前元素和父级有关，前后并没有直接影响\n1.实现小图标和文字的对齐\n使用vertical-align负值，虽然图片文字对齐可以使用浮动实现的，但是尽量少用浮动，因为会破坏布局，使用vertical-align负值可以实现居中\n2.不定尺寸图片或多行文字的<font color='red'>垂直居中</font>,具体实现步骤如下：\na.大小不固定的图片垂直居中\n- 主体元素inline-block化；\n- 0宽度100%高度辅助元素；\n- vertical-align:middle；\n```html\n<p><img width=\"30%\" src=\"./111.jpg\"><i></i></p>\n```\n```css\np{\n     width: 500px;\n     height: 200px;\n     background-color: yellowgreen;\n}\n/*主体元素inline-block化img本身是inline，\n但是里面的content为inline-block*/\nimg{\n    width: 40%; \n    vertical-align:middle;         \n}\n/*宽度为0，高度100%的辅助元素*/\ni {\n     display: inline-block;\n     height: 100%;\n     vertical-align:middle;\n}\n/*给以上 img 和 i 元素添加 vertical-align:middle;  */\n```\n实现垂直居中，效果如下：\n![icon](/img/vertical-align/center.png)\nb.大小不固定的文字垂直居中：\n```html\n<p>\n        <span>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中</span>\n        <i></i>\n </p>\n```\n```css\np{\n     width: 500px;\n     height: 200px;\n     background-color: yellowgreen;\n}\nspan{\n     display: inline-block;\n     vertical-align:middle;         \n}\ni{\n     display: inline-block;\n     height: 100%;\n     vertical-align:middle;\n}\n```\n","source":"_posts/vertical-align-1.md","raw":"---\ntitle: 慕课网---深入理解vertical-align总结\ndate: 2016-05-23 23:07:35\ntags: CSS\ncomments: true\ncategories: \"CSS\"\n---\n看了张鑫旭在慕课网关于vertical-align的讲解，感觉讲的挺深，所以总结了一下\nvertical-align的百分比值相对于line-height计算\nIE6/7下line-height不支持小数\n## vertical-align起作用的前提\n该属性应用于inline水平或者table-cell元素\n#### inline水平\ninline:img,span,strong,em等\ninline-block:input,button（ie8+，ie6/7会把inline-block当作inline）\n#### table-cell元素\ntd\n所以<font color='red'>默认情况下</font>支持vertical-align的有：图片，按钮，文字，单元格\n<!--more-->\n### 抛出一个问题\n想实现图片的垂直居中\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n</head>\n<body>\n<p>\n  <img src=\"http://www.insgeek.com/public/insgeek2.0/img/indexpec/enleft.jpg\" width='100' alt=\"\">\n</p>\n</body>\n</html>\n```\n```css\np{\n  width:100%;\n  height:200px;\n  background-color: #ccc;\n}\nimg{\n  vertical-align:middle;\n}\n```\n利用vertical-align：middle实现垂直居中，但是这里并没有按照我们想要的去做，解决办法：\n#### 1.给父元素<p>添加line-height的值为<p>的高度（ie7+都可以实现）\n```css\np{\n    line-height:200px;\n}\n```\n#### 2.给父元素<p>添加display:table-cell\ntable-cell元素的vertical-align只会作用于自身，里面的子元素设置不起作用\n```css\np{\n    display:table-cell;\n    /*把img的去掉*/\n     vertical-align:middle;\n}\n```\n## vertical-align与line-height\n利用text-align:justify任意数目列表两端对齐效果\n```css\n.justify-fix{display:inline-block;width:250px}\np{\n    background:#666;\n}\n```\n```html\n <p style=\"text-align: justify\">\n\t<img src=\"img/mm1.jpg\" width=\"250\" alt=\"\">\n\t<img src=\"img/mm1.jpg\" width=\"250\" alt=\"\">\n\t<img src=\"img/mm1.jpg\" width=\"250\" alt=\"\">\n\t<img src=\"img/mm1.jpg\" width=\"250\" alt=\"\">\n\t<i class=\"justify-fix\"></i>\n\t<i class=\"justify-fix\"></i>\n\t<i class=\"justify-fix\"></i>\n  </p>\n```\n![icon](/img/vertical-align/3.png)\n运行后红色虚线表示i标签的位置\n设置容器，p的行高为0\n```css\np{\n    line-height:0;\n}\n```\n则出现如下情况：\n![icon](/img/vertical-align/4.png)\n#### 为什么会出现这样的现象？\n首先看一个东西\n从CSS2的可视化格式模型文档中看到：\n‘inline-block’的基线是正常流中最后一个line box的基线，除非，这个line box里面既没有line boxes或者本身‘overflow’属性的计算值而不是‘visible’，这种情况下基线是margin第边缘\n举例说明：\n```html\n<style>\n\t.dib-baseline{\n\t\tdisplay: inline-block;\n\t\twidth: 150px;\n\t\theight: 150px;\n\t\tborder: 1px solid #cad5eb;\n\t\tbackground-color: #f0f3f9;\n\t\tmargin-top: 20px;\n\t}\n</style>\n<span class=\"dib-baseline\"></span>\n<span class=\"dib-baseline\">dib-baseline</span>\n```\n图1\n![icon](/img/vertical-align/2.png)\n文档解释了该现象，因为前面的盒子没有任何字符，此时它的基线就是它的底边缘，后面的盒子有文字，所以该盒子的基线就是文字的基线，二者基线对齐，现成如此效果。\n如果把第二个盒子line-height:0，此时文字基线的位置，就是文字的垂直中心，所以：\n图2\n![icon](/img/vertical-align/5.png)\n所以，以上情况下面那些空白，是由于本身后面两个图片是没有的，所以可以当作是空白字符（空格），即后面两个`<i>`是有字符的，而第一个`<i>`是没有字符的，所以和上面的那个例子一样，默认基线对齐，所以，会导致出现小的空隙（其本质和图2一样），要消除这个空隙，需要给i都添加空白字符（&nbsp;或者直接改变对齐方式，vertical-align：top / bottom）即可，而这个line-height：0可以不添加。\n\n要消除需要给p标签（容器）设置：\n```css\np{\n    line-height:0;\n}\n.justify-fix{\n    vertical-align: bottom / top;\n}\n```\n之后运行结果：\n![icon](/img/vertical-align/1.png)\n## vertical-align线性属性值\n### 1.vertical-align:bottom（top与之差不多）\n#### 定义\n1. inline / inline-block元素：元素底部和整行底部对齐。\n2. table-cell元素：单元格底padding边缘和表格行的底部对齐\n\n### 2.vertical-align:middle\n#### 定义\n1. inline / inline-block元素：元素的垂直中心点和父元素基线上1/2 x-height处对齐\n2. table - cell元素：单元格填充盒子相对于外卖的表格行居中对齐\n\n#### 利用vertical-align：middle所实现的是<font color=\"red\">近似</font>垂直居中\n为什么是近似呢？答案就在于： inline / inline-block元素：元素的垂直中心点和父元素基线上1/2 x-height处对齐\n父元素基线上1/2 x-height处其实就是用line-height撑开后字符水平中心\n字符所在的水平中心线和经过line-height撑开后的水平中心线（vertical-algin：middle的水平中心线）不是一个中心线（具体演示看[4-1 vertical-align线性属性值]http://www.imooc.com/video/10403）因为字符，本身有个下沉的特性\n#### 那么如何实现完全垂直居中？\n给父元素设置\n```css\np{font-size:0}\n```\n这样元素的垂直中心点和父元素基线上1/2 x-height处就完全重合了\n但是这样会出现问题，如果我们在父级元素中有文字，那么设置`font-size：0`会导致文字无法显示，实现完全垂直居中的另一种方法是给图片（img）后面添加一个span,span设置为vertical-align：middle\n```css\np { line-height:250px; }\nimg { veritcal-align:middle; }\nimg+span { veritcal-align:middle; } \n```\n## vertical-align文本类属性值\n### 定义：\n1. vertical-align :text-top\n盒子的顶部和父级content area的顶部对齐\n2. vertical-align：text-bottom\n\n盒子的底部和父级content area的底部对齐\n### 解释：\ncontent area就是只与父级font-size的大小有关，与行高，以及后面是否有inline-block元素的没有任何关系，但是vertical-align：middle / top / bottom都会被后面的inline-block水平元素影响。\n### 用处：\n一般用于表情图片（或原始尺寸背景图标）与文字的对齐效果\n## 输入理解vertical-align上标下标类---sub / super\nHTML中有原生的上下标标签，分别为：`<sup>` ,`<sub>`。利用原生的HTML获得的上下标文字大小是父元素75%左右。\n### 定义：\n1.vertical-align：super\n提高盒子的基线到父级合适的上标基线位置。\n2.vertical-align：sub\n降低盒子的基线到父级合适的下标基线位置。\n这里的‘合适的上（下）标基线位置’，哪里合适，说不清\n## vertical-align前后不一的作用机制与示例\n vertical-align所有的表现只当前元素和父级有关，前后并没有直接影响\n1.实现小图标和文字的对齐\n使用vertical-align负值，虽然图片文字对齐可以使用浮动实现的，但是尽量少用浮动，因为会破坏布局，使用vertical-align负值可以实现居中\n2.不定尺寸图片或多行文字的<font color='red'>垂直居中</font>,具体实现步骤如下：\na.大小不固定的图片垂直居中\n- 主体元素inline-block化；\n- 0宽度100%高度辅助元素；\n- vertical-align:middle；\n```html\n<p><img width=\"30%\" src=\"./111.jpg\"><i></i></p>\n```\n```css\np{\n     width: 500px;\n     height: 200px;\n     background-color: yellowgreen;\n}\n/*主体元素inline-block化img本身是inline，\n但是里面的content为inline-block*/\nimg{\n    width: 40%; \n    vertical-align:middle;         \n}\n/*宽度为0，高度100%的辅助元素*/\ni {\n     display: inline-block;\n     height: 100%;\n     vertical-align:middle;\n}\n/*给以上 img 和 i 元素添加 vertical-align:middle;  */\n```\n实现垂直居中，效果如下：\n![icon](/img/vertical-align/center.png)\nb.大小不固定的文字垂直居中：\n```html\n<p>\n        <span>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中<br/>测试文字垂直居中</span>\n        <i></i>\n </p>\n```\n```css\np{\n     width: 500px;\n     height: 200px;\n     background-color: yellowgreen;\n}\nspan{\n     display: inline-block;\n     vertical-align:middle;         \n}\ni{\n     display: inline-block;\n     height: 100%;\n     vertical-align:middle;\n}\n```\n","slug":"vertical-align-1","published":1,"updated":"2016-08-02T08:34:52.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoc8003pzrv425lozpuw","content":"<p>看了张鑫旭在慕课网关于vertical-align的讲解，感觉讲的挺深，所以总结了一下<br>vertical-align的百分比值相对于line-height计算<br>IE6/7下line-height不支持小数</p>\n<h2 id=\"vertical-align起作用的前提\"><a href=\"#vertical-align起作用的前提\" class=\"headerlink\" title=\"vertical-align起作用的前提\"></a>vertical-align起作用的前提</h2><p>该属性应用于inline水平或者table-cell元素</p>\n<h4 id=\"inline水平\"><a href=\"#inline水平\" class=\"headerlink\" title=\"inline水平\"></a>inline水平</h4><p>inline:img,span,strong,em等<br>inline-block:input,button（ie8+，ie6/7会把inline-block当作inline）</p>\n<h4 id=\"table-cell元素\"><a href=\"#table-cell元素\" class=\"headerlink\" title=\"table-cell元素\"></a>table-cell元素</h4><p>td<br>所以<font color=\"red\">默认情况下</font>支持vertical-align的有：图片，按钮，文字，单元格<br><a id=\"more\"></a></p>\n<h3 id=\"抛出一个问题\"><a href=\"#抛出一个问题\" class=\"headerlink\" title=\"抛出一个问题\"></a>抛出一个问题</h3><p>想实现图片的垂直居中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.insgeek.com/public/insgeek2.0/img/indexpec/enleft.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">'100'</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用vertical-align：middle实现垂直居中，但是这里并没有按照我们想要的去做，解决办法：</p>\n<h4 id=\"1-给父元素添加line-height的值为的高度（ie7-都可以实现）\"><a href=\"#1-给父元素添加line-height的值为的高度（ie7-都可以实现）\" class=\"headerlink\" title=\"1.给父元素添加line-height的值为的高度（ie7+都可以实现）\"></a>1.给父元素<p>添加line-height的值为</p><p>的高度（ie7+都可以实现）</p></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-给父元素添加display-table-cell\"><a href=\"#2-给父元素添加display-table-cell\" class=\"headerlink\" title=\"2.给父元素添加display:table-cell\"></a>2.给父元素<p>添加display:table-cell</p></h4><p>table-cell元素的vertical-align只会作用于自身，里面的子元素设置不起作用<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:table-cell;</span><br><span class=\"line\">    <span class=\"comment\">/*把img的去掉*/</span></span><br><span class=\"line\">     <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"vertical-align与line-height\"><a href=\"#vertical-align与line-height\" class=\"headerlink\" title=\"vertical-align与line-height\"></a>vertical-align与line-height</h2><p>利用text-align:justify任意数目列表两端对齐效果<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.justify-fix</span>&#123;<span class=\"attribute\">display</span>:inline-block;<span class=\"attribute\">width</span>:<span class=\"number\">250px</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#666</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: justify\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/mm1.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"250\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/mm1.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"250\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/mm1.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"250\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/mm1.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"250\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"justify-fix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"justify-fix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"justify-fix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/vertical-align/3.png\" alt=\"icon\"><br>运行后红色虚线表示i标签的位置<br>设置容器，p的行高为0<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>则出现如下情况：<br><img src=\"/img/vertical-align/4.png\" alt=\"icon\"></p>\n<h4 id=\"为什么会出现这样的现象？\"><a href=\"#为什么会出现这样的现象？\" class=\"headerlink\" title=\"为什么会出现这样的现象？\"></a>为什么会出现这样的现象？</h4><p>首先看一个东西<br>从CSS2的可视化格式模型文档中看到：<br>‘inline-block’的基线是正常流中最后一个line box的基线，除非，这个line box里面既没有line boxes或者本身‘overflow’属性的计算值而不是‘visible’，这种情况下基线是margin第边缘<br>举例说明：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.dib-baseline</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdisplay: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\twidth: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\theight: 150px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#cad5eb</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#f0f3f9</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmargin-top: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dib-baseline\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dib-baseline\"</span>&gt;</span>dib-baseline<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>图1<br><img src=\"/img/vertical-align/2.png\" alt=\"icon\"><br>文档解释了该现象，因为前面的盒子没有任何字符，此时它的基线就是它的底边缘，后面的盒子有文字，所以该盒子的基线就是文字的基线，二者基线对齐，现成如此效果。<br>如果把第二个盒子line-height:0，此时文字基线的位置，就是文字的垂直中心，所以：<br>图2<br><img src=\"/img/vertical-align/5.png\" alt=\"icon\"><br>所以，以上情况下面那些空白，是由于本身后面两个图片是没有的，所以可以当作是空白字符（空格），即后面两个<code>&lt;i&gt;</code>是有字符的，而第一个<code>&lt;i&gt;</code>是没有字符的，所以和上面的那个例子一样，默认基线对齐，所以，会导致出现小的空隙（其本质和图2一样），要消除这个空隙，需要给i都添加空白字符（&nbsp;或者直接改变对齐方式，vertical-align：top / bottom）即可，而这个line-height：0可以不添加。</p>\n<p>要消除需要给p标签（容器）设置：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.justify-fix</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: bottom / top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>之后运行结果：<br><img src=\"/img/vertical-align/1.png\" alt=\"icon\"></p>\n<h2 id=\"vertical-align线性属性值\"><a href=\"#vertical-align线性属性值\" class=\"headerlink\" title=\"vertical-align线性属性值\"></a>vertical-align线性属性值</h2><h3 id=\"1-vertical-align-bottom（top与之差不多）\"><a href=\"#1-vertical-align-bottom（top与之差不多）\" class=\"headerlink\" title=\"1.vertical-align:bottom（top与之差不多）\"></a>1.vertical-align:bottom（top与之差不多）</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ol>\n<li>inline / inline-block元素：元素底部和整行底部对齐。</li>\n<li>table-cell元素：单元格底padding边缘和表格行的底部对齐</li>\n</ol>\n<h3 id=\"2-vertical-align-middle\"><a href=\"#2-vertical-align-middle\" class=\"headerlink\" title=\"2.vertical-align:middle\"></a>2.vertical-align:middle</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ol>\n<li>inline / inline-block元素：元素的垂直中心点和父元素基线上1/2 x-height处对齐</li>\n<li>table - cell元素：单元格填充盒子相对于外卖的表格行居中对齐</li>\n</ol>\n<h4 id=\"利用vertical-align：middle所实现的是近似垂直居中\"><a href=\"#利用vertical-align：middle所实现的是近似垂直居中\" class=\"headerlink\" title=\"利用vertical-align：middle所实现的是近似垂直居中\"></a>利用vertical-align：middle所实现的是<font color=\"red\">近似</font>垂直居中</h4><p>为什么是近似呢？答案就在于： inline / inline-block元素：元素的垂直中心点和父元素基线上1/2 x-height处对齐<br>父元素基线上1/2 x-height处其实就是用line-height撑开后字符水平中心<br>字符所在的水平中心线和经过line-height撑开后的水平中心线（vertical-algin：middle的水平中心线）不是一个中心线（具体演示看[4-1 vertical-align线性属性值]<a href=\"http://www.imooc.com/video/10403）因为字符，本身有个下沉的特性\" target=\"_blank\" rel=\"noopener\">http://www.imooc.com/video/10403）因为字符，本身有个下沉的特性</a></p>\n<h4 id=\"那么如何实现完全垂直居中？\"><a href=\"#那么如何实现完全垂直居中？\" class=\"headerlink\" title=\"那么如何实现完全垂直居中？\"></a>那么如何实现完全垂直居中？</h4><p>给父元素设置<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">0</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样元素的垂直中心点和父元素基线上1/2 x-height处就完全重合了<br>但是这样会出现问题，如果我们在父级元素中有文字，那么设置<code>font-size：0</code>会导致文字无法显示，实现完全垂直居中的另一种方法是给图片（img）后面添加一个span,span设置为vertical-align：middle<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">line-height</span>:<span class=\"number\">250px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">veritcal-align</span>:middle; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span>+<span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">veritcal-align</span>:middle; &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"vertical-align文本类属性值\"><a href=\"#vertical-align文本类属性值\" class=\"headerlink\" title=\"vertical-align文本类属性值\"></a>vertical-align文本类属性值</h2><h3 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a>定义：</h3><ol>\n<li>vertical-align :text-top<br>盒子的顶部和父级content area的顶部对齐</li>\n<li>vertical-align：text-bottom</li>\n</ol>\n<p>盒子的底部和父级content area的底部对齐</p>\n<h3 id=\"解释：\"><a href=\"#解释：\" class=\"headerlink\" title=\"解释：\"></a>解释：</h3><p>content area就是只与父级font-size的大小有关，与行高，以及后面是否有inline-block元素的没有任何关系，但是vertical-align：middle / top / bottom都会被后面的inline-block水平元素影响。</p>\n<h3 id=\"用处：\"><a href=\"#用处：\" class=\"headerlink\" title=\"用处：\"></a>用处：</h3><p>一般用于表情图片（或原始尺寸背景图标）与文字的对齐效果</p>\n<h2 id=\"输入理解vertical-align上标下标类—sub-super\"><a href=\"#输入理解vertical-align上标下标类—sub-super\" class=\"headerlink\" title=\"输入理解vertical-align上标下标类—sub / super\"></a>输入理解vertical-align上标下标类—sub / super</h2><p>HTML中有原生的上下标标签，分别为：<code>&lt;sup&gt;</code> ,<code>&lt;sub&gt;</code>。利用原生的HTML获得的上下标文字大小是父元素75%左右。</p>\n<h3 id=\"定义：-1\"><a href=\"#定义：-1\" class=\"headerlink\" title=\"定义：\"></a>定义：</h3><p>1.vertical-align：super<br>提高盒子的基线到父级合适的上标基线位置。<br>2.vertical-align：sub<br>降低盒子的基线到父级合适的下标基线位置。<br>这里的‘合适的上（下）标基线位置’，哪里合适，说不清</p>\n<h2 id=\"vertical-align前后不一的作用机制与示例\"><a href=\"#vertical-align前后不一的作用机制与示例\" class=\"headerlink\" title=\"vertical-align前后不一的作用机制与示例\"></a>vertical-align前后不一的作用机制与示例</h2><p> vertical-align所有的表现只当前元素和父级有关，前后并没有直接影响<br>1.实现小图标和文字的对齐<br>使用vertical-align负值，虽然图片文字对齐可以使用浮动实现的，但是尽量少用浮动，因为会破坏布局，使用vertical-align负值可以实现居中<br>2.不定尺寸图片或多行文字的<font color=\"red\">垂直居中</font>,具体实现步骤如下：<br>a.大小不固定的图片垂直居中</p>\n<ul>\n<li>主体元素inline-block化；</li>\n<li>0宽度100%高度辅助元素；</li>\n<li>vertical-align:middle；<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"30%\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./111.jpg\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*主体元素inline-block化img本身是inline，</span></span><br><span class=\"line\"><span class=\"comment\">但是里面的content为inline-block*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40%</span>; </span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:middle;         </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*宽度为0，高度100%的辅助元素*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">i</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*给以上 img 和 i 元素添加 vertical-align:middle;  */</span></span><br></pre></td></tr></table></figure>\n<p>实现垂直居中，效果如下：<br><img src=\"/img/vertical-align/center.png\" alt=\"icon\"><br>b.大小不固定的文字垂直居中：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">     <span class=\"attribute\">vertical-align</span>:middle;         </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">i</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>看了张鑫旭在慕课网关于vertical-align的讲解，感觉讲的挺深，所以总结了一下<br>vertical-align的百分比值相对于line-height计算<br>IE6/7下line-height不支持小数</p>\n<h2 id=\"vertical-align起作用的前提\"><a href=\"#vertical-align起作用的前提\" class=\"headerlink\" title=\"vertical-align起作用的前提\"></a>vertical-align起作用的前提</h2><p>该属性应用于inline水平或者table-cell元素</p>\n<h4 id=\"inline水平\"><a href=\"#inline水平\" class=\"headerlink\" title=\"inline水平\"></a>inline水平</h4><p>inline:img,span,strong,em等<br>inline-block:input,button（ie8+，ie6/7会把inline-block当作inline）</p>\n<h4 id=\"table-cell元素\"><a href=\"#table-cell元素\" class=\"headerlink\" title=\"table-cell元素\"></a>table-cell元素</h4><p>td<br>所以<font color=\"red\">默认情况下</font>支持vertical-align的有：图片，按钮，文字，单元格<br>","more":"</p>\n<h3 id=\"抛出一个问题\"><a href=\"#抛出一个问题\" class=\"headerlink\" title=\"抛出一个问题\"></a>抛出一个问题</h3><p>想实现图片的垂直居中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.insgeek.com/public/insgeek2.0/img/indexpec/enleft.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">'100'</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用vertical-align：middle实现垂直居中，但是这里并没有按照我们想要的去做，解决办法：</p>\n<h4 id=\"1-给父元素添加line-height的值为的高度（ie7-都可以实现）\"><a href=\"#1-给父元素添加line-height的值为的高度（ie7-都可以实现）\" class=\"headerlink\" title=\"1.给父元素添加line-height的值为的高度（ie7+都可以实现）\"></a>1.给父元素<p>添加line-height的值为</p><p>的高度（ie7+都可以实现）</p></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-给父元素添加display-table-cell\"><a href=\"#2-给父元素添加display-table-cell\" class=\"headerlink\" title=\"2.给父元素添加display:table-cell\"></a>2.给父元素<p>添加display:table-cell</p></h4><p>table-cell元素的vertical-align只会作用于自身，里面的子元素设置不起作用<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:table-cell;</span><br><span class=\"line\">    <span class=\"comment\">/*把img的去掉*/</span></span><br><span class=\"line\">     <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"vertical-align与line-height\"><a href=\"#vertical-align与line-height\" class=\"headerlink\" title=\"vertical-align与line-height\"></a>vertical-align与line-height</h2><p>利用text-align:justify任意数目列表两端对齐效果<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.justify-fix</span>&#123;<span class=\"attribute\">display</span>:inline-block;<span class=\"attribute\">width</span>:<span class=\"number\">250px</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#666</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: justify\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/mm1.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"250\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/mm1.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"250\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/mm1.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"250\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/mm1.jpg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"250\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"justify-fix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"justify-fix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"justify-fix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/vertical-align/3.png\" alt=\"icon\"><br>运行后红色虚线表示i标签的位置<br>设置容器，p的行高为0<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>则出现如下情况：<br><img src=\"/img/vertical-align/4.png\" alt=\"icon\"></p>\n<h4 id=\"为什么会出现这样的现象？\"><a href=\"#为什么会出现这样的现象？\" class=\"headerlink\" title=\"为什么会出现这样的现象？\"></a>为什么会出现这样的现象？</h4><p>首先看一个东西<br>从CSS2的可视化格式模型文档中看到：<br>‘inline-block’的基线是正常流中最后一个line box的基线，除非，这个line box里面既没有line boxes或者本身‘overflow’属性的计算值而不是‘visible’，这种情况下基线是margin第边缘<br>举例说明：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.dib-baseline</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdisplay: inline-block;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\twidth: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\theight: 150px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#cad5eb</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#f0f3f9</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tmargin-top: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dib-baseline\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dib-baseline\"</span>&gt;</span>dib-baseline<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>图1<br><img src=\"/img/vertical-align/2.png\" alt=\"icon\"><br>文档解释了该现象，因为前面的盒子没有任何字符，此时它的基线就是它的底边缘，后面的盒子有文字，所以该盒子的基线就是文字的基线，二者基线对齐，现成如此效果。<br>如果把第二个盒子line-height:0，此时文字基线的位置，就是文字的垂直中心，所以：<br>图2<br><img src=\"/img/vertical-align/5.png\" alt=\"icon\"><br>所以，以上情况下面那些空白，是由于本身后面两个图片是没有的，所以可以当作是空白字符（空格），即后面两个<code>&lt;i&gt;</code>是有字符的，而第一个<code>&lt;i&gt;</code>是没有字符的，所以和上面的那个例子一样，默认基线对齐，所以，会导致出现小的空隙（其本质和图2一样），要消除这个空隙，需要给i都添加空白字符（&nbsp;或者直接改变对齐方式，vertical-align：top / bottom）即可，而这个line-height：0可以不添加。</p>\n<p>要消除需要给p标签（容器）设置：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.justify-fix</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: bottom / top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>之后运行结果：<br><img src=\"/img/vertical-align/1.png\" alt=\"icon\"></p>\n<h2 id=\"vertical-align线性属性值\"><a href=\"#vertical-align线性属性值\" class=\"headerlink\" title=\"vertical-align线性属性值\"></a>vertical-align线性属性值</h2><h3 id=\"1-vertical-align-bottom（top与之差不多）\"><a href=\"#1-vertical-align-bottom（top与之差不多）\" class=\"headerlink\" title=\"1.vertical-align:bottom（top与之差不多）\"></a>1.vertical-align:bottom（top与之差不多）</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ol>\n<li>inline / inline-block元素：元素底部和整行底部对齐。</li>\n<li>table-cell元素：单元格底padding边缘和表格行的底部对齐</li>\n</ol>\n<h3 id=\"2-vertical-align-middle\"><a href=\"#2-vertical-align-middle\" class=\"headerlink\" title=\"2.vertical-align:middle\"></a>2.vertical-align:middle</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ol>\n<li>inline / inline-block元素：元素的垂直中心点和父元素基线上1/2 x-height处对齐</li>\n<li>table - cell元素：单元格填充盒子相对于外卖的表格行居中对齐</li>\n</ol>\n<h4 id=\"利用vertical-align：middle所实现的是近似垂直居中\"><a href=\"#利用vertical-align：middle所实现的是近似垂直居中\" class=\"headerlink\" title=\"利用vertical-align：middle所实现的是近似垂直居中\"></a>利用vertical-align：middle所实现的是<font color=\"red\">近似</font>垂直居中</h4><p>为什么是近似呢？答案就在于： inline / inline-block元素：元素的垂直中心点和父元素基线上1/2 x-height处对齐<br>父元素基线上1/2 x-height处其实就是用line-height撑开后字符水平中心<br>字符所在的水平中心线和经过line-height撑开后的水平中心线（vertical-algin：middle的水平中心线）不是一个中心线（具体演示看[4-1 vertical-align线性属性值]<a href=\"http://www.imooc.com/video/10403）因为字符，本身有个下沉的特性\" target=\"_blank\" rel=\"noopener\">http://www.imooc.com/video/10403）因为字符，本身有个下沉的特性</a></p>\n<h4 id=\"那么如何实现完全垂直居中？\"><a href=\"#那么如何实现完全垂直居中？\" class=\"headerlink\" title=\"那么如何实现完全垂直居中？\"></a>那么如何实现完全垂直居中？</h4><p>给父元素设置<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">0</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样元素的垂直中心点和父元素基线上1/2 x-height处就完全重合了<br>但是这样会出现问题，如果我们在父级元素中有文字，那么设置<code>font-size：0</code>会导致文字无法显示，实现完全垂直居中的另一种方法是给图片（img）后面添加一个span,span设置为vertical-align：middle<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">line-height</span>:<span class=\"number\">250px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">veritcal-align</span>:middle; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span>+<span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">veritcal-align</span>:middle; &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"vertical-align文本类属性值\"><a href=\"#vertical-align文本类属性值\" class=\"headerlink\" title=\"vertical-align文本类属性值\"></a>vertical-align文本类属性值</h2><h3 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a>定义：</h3><ol>\n<li>vertical-align :text-top<br>盒子的顶部和父级content area的顶部对齐</li>\n<li>vertical-align：text-bottom</li>\n</ol>\n<p>盒子的底部和父级content area的底部对齐</p>\n<h3 id=\"解释：\"><a href=\"#解释：\" class=\"headerlink\" title=\"解释：\"></a>解释：</h3><p>content area就是只与父级font-size的大小有关，与行高，以及后面是否有inline-block元素的没有任何关系，但是vertical-align：middle / top / bottom都会被后面的inline-block水平元素影响。</p>\n<h3 id=\"用处：\"><a href=\"#用处：\" class=\"headerlink\" title=\"用处：\"></a>用处：</h3><p>一般用于表情图片（或原始尺寸背景图标）与文字的对齐效果</p>\n<h2 id=\"输入理解vertical-align上标下标类—sub-super\"><a href=\"#输入理解vertical-align上标下标类—sub-super\" class=\"headerlink\" title=\"输入理解vertical-align上标下标类—sub / super\"></a>输入理解vertical-align上标下标类—sub / super</h2><p>HTML中有原生的上下标标签，分别为：<code>&lt;sup&gt;</code> ,<code>&lt;sub&gt;</code>。利用原生的HTML获得的上下标文字大小是父元素75%左右。</p>\n<h3 id=\"定义：-1\"><a href=\"#定义：-1\" class=\"headerlink\" title=\"定义：\"></a>定义：</h3><p>1.vertical-align：super<br>提高盒子的基线到父级合适的上标基线位置。<br>2.vertical-align：sub<br>降低盒子的基线到父级合适的下标基线位置。<br>这里的‘合适的上（下）标基线位置’，哪里合适，说不清</p>\n<h2 id=\"vertical-align前后不一的作用机制与示例\"><a href=\"#vertical-align前后不一的作用机制与示例\" class=\"headerlink\" title=\"vertical-align前后不一的作用机制与示例\"></a>vertical-align前后不一的作用机制与示例</h2><p> vertical-align所有的表现只当前元素和父级有关，前后并没有直接影响<br>1.实现小图标和文字的对齐<br>使用vertical-align负值，虽然图片文字对齐可以使用浮动实现的，但是尽量少用浮动，因为会破坏布局，使用vertical-align负值可以实现居中<br>2.不定尺寸图片或多行文字的<font color=\"red\">垂直居中</font>,具体实现步骤如下：<br>a.大小不固定的图片垂直居中</p>\n<ul>\n<li>主体元素inline-block化；</li>\n<li>0宽度100%高度辅助元素；</li>\n<li>vertical-align:middle；<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">\"30%\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./111.jpg\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*主体元素inline-block化img本身是inline，</span></span><br><span class=\"line\"><span class=\"comment\">但是里面的content为inline-block*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40%</span>; </span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:middle;         </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*宽度为0，高度100%的辅助元素*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">i</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*给以上 img 和 i 元素添加 vertical-align:middle;  */</span></span><br></pre></td></tr></table></figure>\n<p>实现垂直居中，效果如下：<br><img src=\"/img/vertical-align/center.png\" alt=\"icon\"><br>b.大小不固定的文字垂直居中：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span>测试文字垂直居中<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">     <span class=\"attribute\">vertical-align</span>:middle;         </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">i</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"vim之基础使用篇幅","date":"2017-11-05T01:37:29.000Z","comments":1,"_content":">最近由于升级macOS High Sierra导致vscode总是崩溃（在即将到来的稳定版中已解决），在用了sublime和webstrom之后，实在是不喜欢，所以想起了之前配置好但是一直不怎么用的vim（因为实在是用不习惯），硬着头皮用了几次之后，给我的第一个感觉是YouCompleteMe选择代码太爽了，所以开始慢慢研究，觉得缺什么就加什么，一步步改进，这篇文章主要总结一下vim的一个基础用法不涉及插件。\n\n<!--more-->\n\n## 1. vim的模式\n\nvim有四个模式，分别为：\n\n* 正常模式 (Normal-mode) ：按ESC进入，大部分快捷键都在这里使用\n* 插入模式 (Insert-mode)：按a,i,o进入\n* 命令模式 (Command-mode)：按`:`进入\n* 可视模式 (Visual-mode)：按v进入，该模式下所有的快捷导航按键都可以用\n\n使用vim经常需要在这些模式下来回切换\n\n## 2. 插入字符（正常模式进入插入模式）\n\na：after 当前字符之后键入字符\ni：insert 当前字符之前键入字符\no：open linel 另起一行键入字符\n\n## 3. 快速导航（正常模式和可视模式）\n\nh：光标往后走一个位置\nj：光标跳到下一行\nk：光标跳到上一行\nl：光标往前走一个位置\nw（world）：让光标一个单词一个单词的往后跳\nb（backup）： 让光标一个单词一个单词的往前跳\ne：到每个单词的末尾\n0：跳到当前行行首\n$：跳到当前行行尾\n\n*跳到指定行\n\n跳行有三种方式\n\n* 在**正常模式**下直接输入'12j'表示**相对于**当前行向下走12行\n* 在**正常模式**下键入'12G'可以跳转到第12行\n* 在**命令模式**下输入`:12`可以跳转到第12行\n\n#### 3.1 对指定行做标记\n\n在vim中对制定行做标记方便快速切换\n\n在**正常模式**下直接键入`m+标记`，例如直接键入`ma`就可以将当前行标记为a，如果想要跳到指定标记，键入`'+标记`，例如`'a`即可快速跳到a标记的所在行\n\n## 4. 文件搜索\n\n在**正常模式**下\n\n键入`/+关键字`，按下`n`开始**从前往后**搜索，按下`N`则反向搜索\n键入`?+关键字`，按下`n`开始**从后往前**搜索，按下`N`则反向搜索\n在当前光标所在单词直接键入*可以搜索光标所在的单词，按n可以跳转\n\n如果想要让搜索结果高亮，可以在`.vimrc`中配置\n\n```sh\nset hlsearch\n```\n\n这样在vim中搜索出结果就会高亮，但是这个高亮不会消失，想要让搜索的高亮消失，要进入命令模式输入`noh`，即`:noh`\n\n## 5. 快速编辑（可视模式）\n\n在正常模式 (Normal-mode) 下按`v`即可进入可视模式 (Visual-mode) ，在该模式下所有的快捷导航快捷键都可以用，可以进行快速编辑\n\nv：选中\n\n* V：选中一行\n* ctrl+v：进入`v-block`，可以使用`hjkl`进行选择\n\ny：复制\n\n* yy直接复制一行\n\nd：删除（剪切）\n\n* `dd`删除一行\n* `v`选中使用`d`删除相当于直接用`x`删除\n\nr：替换\n\n* 直接替换单词\n\np：粘贴\n\n#### 备注：\n\n* 所有的快速导航和快速编辑都可以在前面加数字进行操作\n* `.`可以重复上一次操作\n\n## 6. 撤销与恢复撤销（正常模式）\n\nu：撤销\nctrl+r：恢复上一步被撤销的操作\n\n## 7. 粘贴与移动（命令模式）\n\n之前有提到过在正常模式下使用`y`进行复制，但是这个方法有一个缺点，即必须要让光标处于当前行。如果想要不依靠光标进行复制，移动就需要使用`:copy`和`:move`\n\n#### 7.1 copy\n\n命令格式：`:[range]copy{address}`，`range`表示拷贝范围，`address`表示目标地址\n\n简写：`:co或者:t`\n\n示例：\n\n* `:3t.`：拷贝第三行到当前光标的下一行 （.表示当前行）\n\n* `:t3`：拷贝当前行到第三行的下一行\n\n* `:t.`：拷贝当前行到光标的一下行，相当于Yp和yyp\n\n* `:t$`：拷贝当前行到最后一行\n\n* `:'<,'>t0`：拷贝所选区域到文本的开头处，这里的操作步骤是：现在visual 模式下选中文本，然后输入:，接着t0\n\n#### 7.2 move\n\n简写：`:mo或者:m`\n\n用法与`copy`相同\n\n## 8. 代码折叠\n\n设置代码折叠\n\n```sh\n\" 打开折叠\nset foldable\n\" 设置使用语法折叠\nset foldmethod=syntax\n```\n\n这样设置后发现打开文件默认是折叠的，如果想打开文件默认不折叠可以设置\n\n```sh\nset foldlevelstart=99\n```\n\n配置完成后可以使用快捷键进行代码折叠打开操作\n\nzc：关闭折叠\nzo：打开折叠\nza：打开/关闭折叠互相切换\n\nzR：打开全部折叠\nzM：把所有折叠起来\nzO：打开当前折叠快下的所有方法\n\n## 9. 缩进\n\n往前缩进`<<`\n往后缩进`>>`\n多行缩进可以使用`v`进入可视模式，选中然后缩进\n\n## 10. 分屏\n\n#### 10.1. 水平分屏\n\n命令模式下使用`:sv`\n快捷键：ctrl+w v\n\n#### 10.2. 垂直分屏\n\n命令模式下使用`:vs`\n快捷键：ctrl+w s\n\n#### 10.3. 移动光标\n\n把光标移到右边的屏中：ctrl+w l\n把光标移到左边的屏中：ctrl+w h\n把光标移到上边的屏中：ctrl+w k\n把光标移到下边的屏中：ctrl+w j\n\n把光标移到下一个屏中：ctrl+w w\n把光标移到上一个屏中：ctrl+w p\n\n#### 10.4. 移动分屏\n\n向右移动：ctrl+w L\n向左移动：ctrl+w H\n向上移动：ctrl+w K\n向下移动：ctrl+w J\n向下旋转窗口：ctrl+w r\n向上旋转窗口：ctrl+w R\n当前窗口与下一个窗口对调：ctrl+w x\n\n#### 10.5. 关闭分屏\n\n1.关闭除当前分屏外的其他分屏\n\n命令模式下输入`:only`\n快捷操作:ctrl+w o(最后一个分屏不能用此快捷键关闭)\n\n2.关闭当前分屏\n\n快捷操作:ctrl+w c (最后一个分屏不能用此快捷键关闭)\n\n3.关闭当前分屏\n\n快捷操作为:ctrl+w q (可用来关闭最后一个分屏)\n\n4.关闭所有分屏\n\n命令模式下输入`:qa`\n\n## 附\n\n我的vim配置（不断改进中）\n\nhttps://github.com/MrZhang123/Config/blob/master/vim/vimrc.txt","source":"_posts/vim-base.md","raw":"---\ntitle: vim之基础使用篇幅\ndate: 2017-11-05 09:37:29\ntags: vim\ncomments: true\ncategories: \"vim\"\n---\n>最近由于升级macOS High Sierra导致vscode总是崩溃（在即将到来的稳定版中已解决），在用了sublime和webstrom之后，实在是不喜欢，所以想起了之前配置好但是一直不怎么用的vim（因为实在是用不习惯），硬着头皮用了几次之后，给我的第一个感觉是YouCompleteMe选择代码太爽了，所以开始慢慢研究，觉得缺什么就加什么，一步步改进，这篇文章主要总结一下vim的一个基础用法不涉及插件。\n\n<!--more-->\n\n## 1. vim的模式\n\nvim有四个模式，分别为：\n\n* 正常模式 (Normal-mode) ：按ESC进入，大部分快捷键都在这里使用\n* 插入模式 (Insert-mode)：按a,i,o进入\n* 命令模式 (Command-mode)：按`:`进入\n* 可视模式 (Visual-mode)：按v进入，该模式下所有的快捷导航按键都可以用\n\n使用vim经常需要在这些模式下来回切换\n\n## 2. 插入字符（正常模式进入插入模式）\n\na：after 当前字符之后键入字符\ni：insert 当前字符之前键入字符\no：open linel 另起一行键入字符\n\n## 3. 快速导航（正常模式和可视模式）\n\nh：光标往后走一个位置\nj：光标跳到下一行\nk：光标跳到上一行\nl：光标往前走一个位置\nw（world）：让光标一个单词一个单词的往后跳\nb（backup）： 让光标一个单词一个单词的往前跳\ne：到每个单词的末尾\n0：跳到当前行行首\n$：跳到当前行行尾\n\n*跳到指定行\n\n跳行有三种方式\n\n* 在**正常模式**下直接输入'12j'表示**相对于**当前行向下走12行\n* 在**正常模式**下键入'12G'可以跳转到第12行\n* 在**命令模式**下输入`:12`可以跳转到第12行\n\n#### 3.1 对指定行做标记\n\n在vim中对制定行做标记方便快速切换\n\n在**正常模式**下直接键入`m+标记`，例如直接键入`ma`就可以将当前行标记为a，如果想要跳到指定标记，键入`'+标记`，例如`'a`即可快速跳到a标记的所在行\n\n## 4. 文件搜索\n\n在**正常模式**下\n\n键入`/+关键字`，按下`n`开始**从前往后**搜索，按下`N`则反向搜索\n键入`?+关键字`，按下`n`开始**从后往前**搜索，按下`N`则反向搜索\n在当前光标所在单词直接键入*可以搜索光标所在的单词，按n可以跳转\n\n如果想要让搜索结果高亮，可以在`.vimrc`中配置\n\n```sh\nset hlsearch\n```\n\n这样在vim中搜索出结果就会高亮，但是这个高亮不会消失，想要让搜索的高亮消失，要进入命令模式输入`noh`，即`:noh`\n\n## 5. 快速编辑（可视模式）\n\n在正常模式 (Normal-mode) 下按`v`即可进入可视模式 (Visual-mode) ，在该模式下所有的快捷导航快捷键都可以用，可以进行快速编辑\n\nv：选中\n\n* V：选中一行\n* ctrl+v：进入`v-block`，可以使用`hjkl`进行选择\n\ny：复制\n\n* yy直接复制一行\n\nd：删除（剪切）\n\n* `dd`删除一行\n* `v`选中使用`d`删除相当于直接用`x`删除\n\nr：替换\n\n* 直接替换单词\n\np：粘贴\n\n#### 备注：\n\n* 所有的快速导航和快速编辑都可以在前面加数字进行操作\n* `.`可以重复上一次操作\n\n## 6. 撤销与恢复撤销（正常模式）\n\nu：撤销\nctrl+r：恢复上一步被撤销的操作\n\n## 7. 粘贴与移动（命令模式）\n\n之前有提到过在正常模式下使用`y`进行复制，但是这个方法有一个缺点，即必须要让光标处于当前行。如果想要不依靠光标进行复制，移动就需要使用`:copy`和`:move`\n\n#### 7.1 copy\n\n命令格式：`:[range]copy{address}`，`range`表示拷贝范围，`address`表示目标地址\n\n简写：`:co或者:t`\n\n示例：\n\n* `:3t.`：拷贝第三行到当前光标的下一行 （.表示当前行）\n\n* `:t3`：拷贝当前行到第三行的下一行\n\n* `:t.`：拷贝当前行到光标的一下行，相当于Yp和yyp\n\n* `:t$`：拷贝当前行到最后一行\n\n* `:'<,'>t0`：拷贝所选区域到文本的开头处，这里的操作步骤是：现在visual 模式下选中文本，然后输入:，接着t0\n\n#### 7.2 move\n\n简写：`:mo或者:m`\n\n用法与`copy`相同\n\n## 8. 代码折叠\n\n设置代码折叠\n\n```sh\n\" 打开折叠\nset foldable\n\" 设置使用语法折叠\nset foldmethod=syntax\n```\n\n这样设置后发现打开文件默认是折叠的，如果想打开文件默认不折叠可以设置\n\n```sh\nset foldlevelstart=99\n```\n\n配置完成后可以使用快捷键进行代码折叠打开操作\n\nzc：关闭折叠\nzo：打开折叠\nza：打开/关闭折叠互相切换\n\nzR：打开全部折叠\nzM：把所有折叠起来\nzO：打开当前折叠快下的所有方法\n\n## 9. 缩进\n\n往前缩进`<<`\n往后缩进`>>`\n多行缩进可以使用`v`进入可视模式，选中然后缩进\n\n## 10. 分屏\n\n#### 10.1. 水平分屏\n\n命令模式下使用`:sv`\n快捷键：ctrl+w v\n\n#### 10.2. 垂直分屏\n\n命令模式下使用`:vs`\n快捷键：ctrl+w s\n\n#### 10.3. 移动光标\n\n把光标移到右边的屏中：ctrl+w l\n把光标移到左边的屏中：ctrl+w h\n把光标移到上边的屏中：ctrl+w k\n把光标移到下边的屏中：ctrl+w j\n\n把光标移到下一个屏中：ctrl+w w\n把光标移到上一个屏中：ctrl+w p\n\n#### 10.4. 移动分屏\n\n向右移动：ctrl+w L\n向左移动：ctrl+w H\n向上移动：ctrl+w K\n向下移动：ctrl+w J\n向下旋转窗口：ctrl+w r\n向上旋转窗口：ctrl+w R\n当前窗口与下一个窗口对调：ctrl+w x\n\n#### 10.5. 关闭分屏\n\n1.关闭除当前分屏外的其他分屏\n\n命令模式下输入`:only`\n快捷操作:ctrl+w o(最后一个分屏不能用此快捷键关闭)\n\n2.关闭当前分屏\n\n快捷操作:ctrl+w c (最后一个分屏不能用此快捷键关闭)\n\n3.关闭当前分屏\n\n快捷操作为:ctrl+w q (可用来关闭最后一个分屏)\n\n4.关闭所有分屏\n\n命令模式下输入`:qa`\n\n## 附\n\n我的vim配置（不断改进中）\n\nhttps://github.com/MrZhang123/Config/blob/master/vim/vimrc.txt","slug":"vim-base","published":1,"updated":"2017-11-14T10:15:44.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoca003tzrv4rwlywmn7","content":"<blockquote>\n<p>最近由于升级macOS High Sierra导致vscode总是崩溃（在即将到来的稳定版中已解决），在用了sublime和webstrom之后，实在是不喜欢，所以想起了之前配置好但是一直不怎么用的vim（因为实在是用不习惯），硬着头皮用了几次之后，给我的第一个感觉是YouCompleteMe选择代码太爽了，所以开始慢慢研究，觉得缺什么就加什么，一步步改进，这篇文章主要总结一下vim的一个基础用法不涉及插件。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"1-vim的模式\"><a href=\"#1-vim的模式\" class=\"headerlink\" title=\"1. vim的模式\"></a>1. vim的模式</h2><p>vim有四个模式，分别为：</p>\n<ul>\n<li>正常模式 (Normal-mode) ：按ESC进入，大部分快捷键都在这里使用</li>\n<li>插入模式 (Insert-mode)：按a,i,o进入</li>\n<li>命令模式 (Command-mode)：按<code>:</code>进入</li>\n<li>可视模式 (Visual-mode)：按v进入，该模式下所有的快捷导航按键都可以用</li>\n</ul>\n<p>使用vim经常需要在这些模式下来回切换</p>\n<h2 id=\"2-插入字符（正常模式进入插入模式）\"><a href=\"#2-插入字符（正常模式进入插入模式）\" class=\"headerlink\" title=\"2. 插入字符（正常模式进入插入模式）\"></a>2. 插入字符（正常模式进入插入模式）</h2><p>a：after 当前字符之后键入字符<br>i：insert 当前字符之前键入字符<br>o：open linel 另起一行键入字符</p>\n<h2 id=\"3-快速导航（正常模式和可视模式）\"><a href=\"#3-快速导航（正常模式和可视模式）\" class=\"headerlink\" title=\"3. 快速导航（正常模式和可视模式）\"></a>3. 快速导航（正常模式和可视模式）</h2><p>h：光标往后走一个位置<br>j：光标跳到下一行<br>k：光标跳到上一行<br>l：光标往前走一个位置<br>w（world）：让光标一个单词一个单词的往后跳<br>b（backup）： 让光标一个单词一个单词的往前跳<br>e：到每个单词的末尾<br>0：跳到当前行行首<br>$：跳到当前行行尾</p>\n<p>*跳到指定行</p>\n<p>跳行有三种方式</p>\n<ul>\n<li>在<strong>正常模式</strong>下直接输入’12j’表示<strong>相对于</strong>当前行向下走12行</li>\n<li>在<strong>正常模式</strong>下键入’12G’可以跳转到第12行</li>\n<li>在<strong>命令模式</strong>下输入<code>:12</code>可以跳转到第12行</li>\n</ul>\n<h4 id=\"3-1-对指定行做标记\"><a href=\"#3-1-对指定行做标记\" class=\"headerlink\" title=\"3.1 对指定行做标记\"></a>3.1 对指定行做标记</h4><p>在vim中对制定行做标记方便快速切换</p>\n<p>在<strong>正常模式</strong>下直接键入<code>m+标记</code>，例如直接键入<code>ma</code>就可以将当前行标记为a，如果想要跳到指定标记，键入<code>&#39;+标记</code>，例如<code>&#39;a</code>即可快速跳到a标记的所在行</p>\n<h2 id=\"4-文件搜索\"><a href=\"#4-文件搜索\" class=\"headerlink\" title=\"4. 文件搜索\"></a>4. 文件搜索</h2><p>在<strong>正常模式</strong>下</p>\n<p>键入<code>/+关键字</code>，按下<code>n</code>开始<strong>从前往后</strong>搜索，按下<code>N</code>则反向搜索<br>键入<code>?+关键字</code>，按下<code>n</code>开始<strong>从后往前</strong>搜索，按下<code>N</code>则反向搜索<br>在当前光标所在单词直接键入*可以搜索光标所在的单词，按n可以跳转</p>\n<p>如果想要让搜索结果高亮，可以在<code>.vimrc</code>中配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> hlsearch</span><br></pre></td></tr></table></figure>\n<p>这样在vim中搜索出结果就会高亮，但是这个高亮不会消失，想要让搜索的高亮消失，要进入命令模式输入<code>noh</code>，即<code>:noh</code></p>\n<h2 id=\"5-快速编辑（可视模式）\"><a href=\"#5-快速编辑（可视模式）\" class=\"headerlink\" title=\"5. 快速编辑（可视模式）\"></a>5. 快速编辑（可视模式）</h2><p>在正常模式 (Normal-mode) 下按<code>v</code>即可进入可视模式 (Visual-mode) ，在该模式下所有的快捷导航快捷键都可以用，可以进行快速编辑</p>\n<p>v：选中</p>\n<ul>\n<li>V：选中一行</li>\n<li>ctrl+v：进入<code>v-block</code>，可以使用<code>hjkl</code>进行选择</li>\n</ul>\n<p>y：复制</p>\n<ul>\n<li>yy直接复制一行</li>\n</ul>\n<p>d：删除（剪切）</p>\n<ul>\n<li><code>dd</code>删除一行</li>\n<li><code>v</code>选中使用<code>d</code>删除相当于直接用<code>x</code>删除</li>\n</ul>\n<p>r：替换</p>\n<ul>\n<li>直接替换单词</li>\n</ul>\n<p>p：粘贴</p>\n<h4 id=\"备注：\"><a href=\"#备注：\" class=\"headerlink\" title=\"备注：\"></a>备注：</h4><ul>\n<li>所有的快速导航和快速编辑都可以在前面加数字进行操作</li>\n<li><code>.</code>可以重复上一次操作</li>\n</ul>\n<h2 id=\"6-撤销与恢复撤销（正常模式）\"><a href=\"#6-撤销与恢复撤销（正常模式）\" class=\"headerlink\" title=\"6. 撤销与恢复撤销（正常模式）\"></a>6. 撤销与恢复撤销（正常模式）</h2><p>u：撤销<br>ctrl+r：恢复上一步被撤销的操作</p>\n<h2 id=\"7-粘贴与移动（命令模式）\"><a href=\"#7-粘贴与移动（命令模式）\" class=\"headerlink\" title=\"7. 粘贴与移动（命令模式）\"></a>7. 粘贴与移动（命令模式）</h2><p>之前有提到过在正常模式下使用<code>y</code>进行复制，但是这个方法有一个缺点，即必须要让光标处于当前行。如果想要不依靠光标进行复制，移动就需要使用<code>:copy</code>和<code>:move</code></p>\n<h4 id=\"7-1-copy\"><a href=\"#7-1-copy\" class=\"headerlink\" title=\"7.1 copy\"></a>7.1 copy</h4><p>命令格式：<code>:[range]copy{address}</code>，<code>range</code>表示拷贝范围，<code>address</code>表示目标地址</p>\n<p>简写：<code>:co或者:t</code></p>\n<p>示例：</p>\n<ul>\n<li><p><code>:3t.</code>：拷贝第三行到当前光标的下一行 （.表示当前行）</p>\n</li>\n<li><p><code>:t3</code>：拷贝当前行到第三行的下一行</p>\n</li>\n<li><p><code>:t.</code>：拷贝当前行到光标的一下行，相当于Yp和yyp</p>\n</li>\n<li><p><code>:t$</code>：拷贝当前行到最后一行</p>\n</li>\n<li><p><code>:&#39;&lt;,&#39;&gt;t0</code>：拷贝所选区域到文本的开头处，这里的操作步骤是：现在visual 模式下选中文本，然后输入:，接着t0</p>\n</li>\n</ul>\n<h4 id=\"7-2-move\"><a href=\"#7-2-move\" class=\"headerlink\" title=\"7.2 move\"></a>7.2 move</h4><p>简写：<code>:mo或者:m</code></p>\n<p>用法与<code>copy</code>相同</p>\n<h2 id=\"8-代码折叠\"><a href=\"#8-代码折叠\" class=\"headerlink\" title=\"8. 代码折叠\"></a>8. 代码折叠</h2><p>设置代码折叠</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" 打开折叠</span></span><br><span class=\"line\"><span class=\"string\">set foldable</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 设置使用语法折叠</span><br><span class=\"line\"><span class=\"built_in\">set</span> foldmethod=syntax</span><br></pre></td></tr></table></figure>\n<p>这样设置后发现打开文件默认是折叠的，如果想打开文件默认不折叠可以设置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> foldlevelstart=99</span><br></pre></td></tr></table></figure>\n<p>配置完成后可以使用快捷键进行代码折叠打开操作</p>\n<p>zc：关闭折叠<br>zo：打开折叠<br>za：打开/关闭折叠互相切换</p>\n<p>zR：打开全部折叠<br>zM：把所有折叠起来<br>zO：打开当前折叠快下的所有方法</p>\n<h2 id=\"9-缩进\"><a href=\"#9-缩进\" class=\"headerlink\" title=\"9. 缩进\"></a>9. 缩进</h2><p>往前缩进<code>&lt;&lt;</code><br>往后缩进<code>&gt;&gt;</code><br>多行缩进可以使用<code>v</code>进入可视模式，选中然后缩进</p>\n<h2 id=\"10-分屏\"><a href=\"#10-分屏\" class=\"headerlink\" title=\"10. 分屏\"></a>10. 分屏</h2><h4 id=\"10-1-水平分屏\"><a href=\"#10-1-水平分屏\" class=\"headerlink\" title=\"10.1. 水平分屏\"></a>10.1. 水平分屏</h4><p>命令模式下使用<code>:sv</code><br>快捷键：ctrl+w v</p>\n<h4 id=\"10-2-垂直分屏\"><a href=\"#10-2-垂直分屏\" class=\"headerlink\" title=\"10.2. 垂直分屏\"></a>10.2. 垂直分屏</h4><p>命令模式下使用<code>:vs</code><br>快捷键：ctrl+w s</p>\n<h4 id=\"10-3-移动光标\"><a href=\"#10-3-移动光标\" class=\"headerlink\" title=\"10.3. 移动光标\"></a>10.3. 移动光标</h4><p>把光标移到右边的屏中：ctrl+w l<br>把光标移到左边的屏中：ctrl+w h<br>把光标移到上边的屏中：ctrl+w k<br>把光标移到下边的屏中：ctrl+w j</p>\n<p>把光标移到下一个屏中：ctrl+w w<br>把光标移到上一个屏中：ctrl+w p</p>\n<h4 id=\"10-4-移动分屏\"><a href=\"#10-4-移动分屏\" class=\"headerlink\" title=\"10.4. 移动分屏\"></a>10.4. 移动分屏</h4><p>向右移动：ctrl+w L<br>向左移动：ctrl+w H<br>向上移动：ctrl+w K<br>向下移动：ctrl+w J<br>向下旋转窗口：ctrl+w r<br>向上旋转窗口：ctrl+w R<br>当前窗口与下一个窗口对调：ctrl+w x</p>\n<h4 id=\"10-5-关闭分屏\"><a href=\"#10-5-关闭分屏\" class=\"headerlink\" title=\"10.5. 关闭分屏\"></a>10.5. 关闭分屏</h4><p>1.关闭除当前分屏外的其他分屏</p>\n<p>命令模式下输入<code>:only</code><br>快捷操作:ctrl+w o(最后一个分屏不能用此快捷键关闭)</p>\n<p>2.关闭当前分屏</p>\n<p>快捷操作:ctrl+w c (最后一个分屏不能用此快捷键关闭)</p>\n<p>3.关闭当前分屏</p>\n<p>快捷操作为:ctrl+w q (可用来关闭最后一个分屏)</p>\n<p>4.关闭所有分屏</p>\n<p>命令模式下输入<code>:qa</code></p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>我的vim配置（不断改进中）</p>\n<p><a href=\"https://github.com/MrZhang123/Config/blob/master/vim/vimrc.txt\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/Config/blob/master/vim/vimrc.txt</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近由于升级macOS High Sierra导致vscode总是崩溃（在即将到来的稳定版中已解决），在用了sublime和webstrom之后，实在是不喜欢，所以想起了之前配置好但是一直不怎么用的vim（因为实在是用不习惯），硬着头皮用了几次之后，给我的第一个感觉是YouCompleteMe选择代码太爽了，所以开始慢慢研究，觉得缺什么就加什么，一步步改进，这篇文章主要总结一下vim的一个基础用法不涉及插件。</p>\n</blockquote>","more":"<h2 id=\"1-vim的模式\"><a href=\"#1-vim的模式\" class=\"headerlink\" title=\"1. vim的模式\"></a>1. vim的模式</h2><p>vim有四个模式，分别为：</p>\n<ul>\n<li>正常模式 (Normal-mode) ：按ESC进入，大部分快捷键都在这里使用</li>\n<li>插入模式 (Insert-mode)：按a,i,o进入</li>\n<li>命令模式 (Command-mode)：按<code>:</code>进入</li>\n<li>可视模式 (Visual-mode)：按v进入，该模式下所有的快捷导航按键都可以用</li>\n</ul>\n<p>使用vim经常需要在这些模式下来回切换</p>\n<h2 id=\"2-插入字符（正常模式进入插入模式）\"><a href=\"#2-插入字符（正常模式进入插入模式）\" class=\"headerlink\" title=\"2. 插入字符（正常模式进入插入模式）\"></a>2. 插入字符（正常模式进入插入模式）</h2><p>a：after 当前字符之后键入字符<br>i：insert 当前字符之前键入字符<br>o：open linel 另起一行键入字符</p>\n<h2 id=\"3-快速导航（正常模式和可视模式）\"><a href=\"#3-快速导航（正常模式和可视模式）\" class=\"headerlink\" title=\"3. 快速导航（正常模式和可视模式）\"></a>3. 快速导航（正常模式和可视模式）</h2><p>h：光标往后走一个位置<br>j：光标跳到下一行<br>k：光标跳到上一行<br>l：光标往前走一个位置<br>w（world）：让光标一个单词一个单词的往后跳<br>b（backup）： 让光标一个单词一个单词的往前跳<br>e：到每个单词的末尾<br>0：跳到当前行行首<br>$：跳到当前行行尾</p>\n<p>*跳到指定行</p>\n<p>跳行有三种方式</p>\n<ul>\n<li>在<strong>正常模式</strong>下直接输入’12j’表示<strong>相对于</strong>当前行向下走12行</li>\n<li>在<strong>正常模式</strong>下键入’12G’可以跳转到第12行</li>\n<li>在<strong>命令模式</strong>下输入<code>:12</code>可以跳转到第12行</li>\n</ul>\n<h4 id=\"3-1-对指定行做标记\"><a href=\"#3-1-对指定行做标记\" class=\"headerlink\" title=\"3.1 对指定行做标记\"></a>3.1 对指定行做标记</h4><p>在vim中对制定行做标记方便快速切换</p>\n<p>在<strong>正常模式</strong>下直接键入<code>m+标记</code>，例如直接键入<code>ma</code>就可以将当前行标记为a，如果想要跳到指定标记，键入<code>&#39;+标记</code>，例如<code>&#39;a</code>即可快速跳到a标记的所在行</p>\n<h2 id=\"4-文件搜索\"><a href=\"#4-文件搜索\" class=\"headerlink\" title=\"4. 文件搜索\"></a>4. 文件搜索</h2><p>在<strong>正常模式</strong>下</p>\n<p>键入<code>/+关键字</code>，按下<code>n</code>开始<strong>从前往后</strong>搜索，按下<code>N</code>则反向搜索<br>键入<code>?+关键字</code>，按下<code>n</code>开始<strong>从后往前</strong>搜索，按下<code>N</code>则反向搜索<br>在当前光标所在单词直接键入*可以搜索光标所在的单词，按n可以跳转</p>\n<p>如果想要让搜索结果高亮，可以在<code>.vimrc</code>中配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> hlsearch</span><br></pre></td></tr></table></figure>\n<p>这样在vim中搜索出结果就会高亮，但是这个高亮不会消失，想要让搜索的高亮消失，要进入命令模式输入<code>noh</code>，即<code>:noh</code></p>\n<h2 id=\"5-快速编辑（可视模式）\"><a href=\"#5-快速编辑（可视模式）\" class=\"headerlink\" title=\"5. 快速编辑（可视模式）\"></a>5. 快速编辑（可视模式）</h2><p>在正常模式 (Normal-mode) 下按<code>v</code>即可进入可视模式 (Visual-mode) ，在该模式下所有的快捷导航快捷键都可以用，可以进行快速编辑</p>\n<p>v：选中</p>\n<ul>\n<li>V：选中一行</li>\n<li>ctrl+v：进入<code>v-block</code>，可以使用<code>hjkl</code>进行选择</li>\n</ul>\n<p>y：复制</p>\n<ul>\n<li>yy直接复制一行</li>\n</ul>\n<p>d：删除（剪切）</p>\n<ul>\n<li><code>dd</code>删除一行</li>\n<li><code>v</code>选中使用<code>d</code>删除相当于直接用<code>x</code>删除</li>\n</ul>\n<p>r：替换</p>\n<ul>\n<li>直接替换单词</li>\n</ul>\n<p>p：粘贴</p>\n<h4 id=\"备注：\"><a href=\"#备注：\" class=\"headerlink\" title=\"备注：\"></a>备注：</h4><ul>\n<li>所有的快速导航和快速编辑都可以在前面加数字进行操作</li>\n<li><code>.</code>可以重复上一次操作</li>\n</ul>\n<h2 id=\"6-撤销与恢复撤销（正常模式）\"><a href=\"#6-撤销与恢复撤销（正常模式）\" class=\"headerlink\" title=\"6. 撤销与恢复撤销（正常模式）\"></a>6. 撤销与恢复撤销（正常模式）</h2><p>u：撤销<br>ctrl+r：恢复上一步被撤销的操作</p>\n<h2 id=\"7-粘贴与移动（命令模式）\"><a href=\"#7-粘贴与移动（命令模式）\" class=\"headerlink\" title=\"7. 粘贴与移动（命令模式）\"></a>7. 粘贴与移动（命令模式）</h2><p>之前有提到过在正常模式下使用<code>y</code>进行复制，但是这个方法有一个缺点，即必须要让光标处于当前行。如果想要不依靠光标进行复制，移动就需要使用<code>:copy</code>和<code>:move</code></p>\n<h4 id=\"7-1-copy\"><a href=\"#7-1-copy\" class=\"headerlink\" title=\"7.1 copy\"></a>7.1 copy</h4><p>命令格式：<code>:[range]copy{address}</code>，<code>range</code>表示拷贝范围，<code>address</code>表示目标地址</p>\n<p>简写：<code>:co或者:t</code></p>\n<p>示例：</p>\n<ul>\n<li><p><code>:3t.</code>：拷贝第三行到当前光标的下一行 （.表示当前行）</p>\n</li>\n<li><p><code>:t3</code>：拷贝当前行到第三行的下一行</p>\n</li>\n<li><p><code>:t.</code>：拷贝当前行到光标的一下行，相当于Yp和yyp</p>\n</li>\n<li><p><code>:t$</code>：拷贝当前行到最后一行</p>\n</li>\n<li><p><code>:&#39;&lt;,&#39;&gt;t0</code>：拷贝所选区域到文本的开头处，这里的操作步骤是：现在visual 模式下选中文本，然后输入:，接着t0</p>\n</li>\n</ul>\n<h4 id=\"7-2-move\"><a href=\"#7-2-move\" class=\"headerlink\" title=\"7.2 move\"></a>7.2 move</h4><p>简写：<code>:mo或者:m</code></p>\n<p>用法与<code>copy</code>相同</p>\n<h2 id=\"8-代码折叠\"><a href=\"#8-代码折叠\" class=\"headerlink\" title=\"8. 代码折叠\"></a>8. 代码折叠</h2><p>设置代码折叠</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\" 打开折叠</span></span><br><span class=\"line\"><span class=\"string\">set foldable</span></span><br><span class=\"line\"><span class=\"string\">\"</span> 设置使用语法折叠</span><br><span class=\"line\"><span class=\"built_in\">set</span> foldmethod=syntax</span><br></pre></td></tr></table></figure>\n<p>这样设置后发现打开文件默认是折叠的，如果想打开文件默认不折叠可以设置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> foldlevelstart=99</span><br></pre></td></tr></table></figure>\n<p>配置完成后可以使用快捷键进行代码折叠打开操作</p>\n<p>zc：关闭折叠<br>zo：打开折叠<br>za：打开/关闭折叠互相切换</p>\n<p>zR：打开全部折叠<br>zM：把所有折叠起来<br>zO：打开当前折叠快下的所有方法</p>\n<h2 id=\"9-缩进\"><a href=\"#9-缩进\" class=\"headerlink\" title=\"9. 缩进\"></a>9. 缩进</h2><p>往前缩进<code>&lt;&lt;</code><br>往后缩进<code>&gt;&gt;</code><br>多行缩进可以使用<code>v</code>进入可视模式，选中然后缩进</p>\n<h2 id=\"10-分屏\"><a href=\"#10-分屏\" class=\"headerlink\" title=\"10. 分屏\"></a>10. 分屏</h2><h4 id=\"10-1-水平分屏\"><a href=\"#10-1-水平分屏\" class=\"headerlink\" title=\"10.1. 水平分屏\"></a>10.1. 水平分屏</h4><p>命令模式下使用<code>:sv</code><br>快捷键：ctrl+w v</p>\n<h4 id=\"10-2-垂直分屏\"><a href=\"#10-2-垂直分屏\" class=\"headerlink\" title=\"10.2. 垂直分屏\"></a>10.2. 垂直分屏</h4><p>命令模式下使用<code>:vs</code><br>快捷键：ctrl+w s</p>\n<h4 id=\"10-3-移动光标\"><a href=\"#10-3-移动光标\" class=\"headerlink\" title=\"10.3. 移动光标\"></a>10.3. 移动光标</h4><p>把光标移到右边的屏中：ctrl+w l<br>把光标移到左边的屏中：ctrl+w h<br>把光标移到上边的屏中：ctrl+w k<br>把光标移到下边的屏中：ctrl+w j</p>\n<p>把光标移到下一个屏中：ctrl+w w<br>把光标移到上一个屏中：ctrl+w p</p>\n<h4 id=\"10-4-移动分屏\"><a href=\"#10-4-移动分屏\" class=\"headerlink\" title=\"10.4. 移动分屏\"></a>10.4. 移动分屏</h4><p>向右移动：ctrl+w L<br>向左移动：ctrl+w H<br>向上移动：ctrl+w K<br>向下移动：ctrl+w J<br>向下旋转窗口：ctrl+w r<br>向上旋转窗口：ctrl+w R<br>当前窗口与下一个窗口对调：ctrl+w x</p>\n<h4 id=\"10-5-关闭分屏\"><a href=\"#10-5-关闭分屏\" class=\"headerlink\" title=\"10.5. 关闭分屏\"></a>10.5. 关闭分屏</h4><p>1.关闭除当前分屏外的其他分屏</p>\n<p>命令模式下输入<code>:only</code><br>快捷操作:ctrl+w o(最后一个分屏不能用此快捷键关闭)</p>\n<p>2.关闭当前分屏</p>\n<p>快捷操作:ctrl+w c (最后一个分屏不能用此快捷键关闭)</p>\n<p>3.关闭当前分屏</p>\n<p>快捷操作为:ctrl+w q (可用来关闭最后一个分屏)</p>\n<p>4.关闭所有分屏</p>\n<p>命令模式下输入<code>:qa</code></p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>我的vim配置（不断改进中）</p>\n<p><a href=\"https://github.com/MrZhang123/Config/blob/master/vim/vimrc.txt\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/Config/blob/master/vim/vimrc.txt</a></p>"},{"title":"基于Vue的简单的单页面应用","date":"2016-06-07T17:14:39.000Z","comments":1,"_content":"## 基于Vue的简单的单页面应用\n在对Vue和webpack有了一定了解后，我们就可以开始利用所了解的东西做一个简单的webapp了，不了解的同学可以看下我的前两篇关于vue和webpack的基本应用：\n[webpack+vue起步](https://segmentfault.com/a/1190000005614864)\n[利用webpack和vue实现组件化](https://segmentfault.com/a/1190000005616974)\n<!--more-->\n## 构建项目\n首先创建各个组件，我的目录结构如下：\n```js\n//没有后缀名的都是文件夹\n|-wechat\n    |-dist\n    |-src\n    |  |-components         //存放vue组件\n    |  |    |-tab           //存放home.vue中的tab，动态切换的模板\n    |  |    |    |-tab_1.vue\n    |  |    |    |-tab_2.vue\n    |  |    |-home.vue      //app的首页\n    |  |    |-list.vue      //点击home中的链接跳转到\n    |  |    |-detail.vue    //点击list中的链接跳转到\n    |  |-app.vue            //主要的vue文件(用于将各个组件的挂载)\n    |  |-main.js            //主要的js(用于配置路由)    \n    |-static                //存放静态资源\n    |-index.html\n```\n## 配置路由\n首先在我们的项目中安装vue-router\n```js\nnpm install vue-router\n```\n引入各个组件并配置路由：\n```js\n//main.js\n\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n//引入组件\nimport App from './app.vue';\nimport home from './components/home.vue';\nimport list from './components/list.vue';\nimport detail from './components/detail.vue';\n\nVue.use(VueRouter);\n\nvar app=Vue.extend(App);\n\nvar router=new VueRouter();\n\n//配置路由\nrouter.map({\n  '/home': {\n    component: home\n  },\n  '/list': {\n    component: list    \n  },\n  '/detail': {\n    component: detail\n  }\n});\n//设置默认情况下打开的页面\nrouter.redirect({\n  '/':'home'\n});\nrouter.start(app,'#app');\n//暴露路由接口调试\nwindow.router = router;\n```\n关于vue-router的介绍，官方文档介绍很清楚，地址：[http://router.vuejs.org/zh-cn/index.html](http://router.vuejs.org/zh-cn/index.html)。\n配置好路由后，需要将匹配好的组件正确的渲染到页面中，此时用到`<router-view></router-view>`，它基于Vue的动态组件系统，所以它会继承一个正常动态组件的很多特性。在这里我们用到两个：\n- `v-transition`和`transition-mode`的完整支持，为了切换效果能正常工作，路由组件必须不是一个[片段实例](http://vuejs.org/guide/components.html#Fragment_Instance)。\n- 在路由的0.7.2+中支持`keep-alive`（[关于keep-alive](https://vuejs.org.cn/guide/components.html#keep-alive)）\n\n所以在app.vue写入：\n```html\n<template>\n\t<div class=\"main\">\n\t\t<router-view\n\t      keep-alive\n\t      transition=\"fade\"\n\t      transition-mode='out-in'></router-view>\n\t</div>\n</template>\n```\n打开命令行启动webpack-dev-server：\n```js\n$ webpack-dev-server --inline --hot\n```\n此时我们在页面中看到的页面就是home.vue\n## 在home.vue中实现tab切换\ntab切换作为一个常见的效果，出现的频率很高，那么如何用vuejs写一个tab切换效果呢？\n利用当前被点击的tab是第几个，从而动态的切换相应的动态组件是vuejs实现切换的一种方式。动态组件的介绍如下：[https://vuejs.org.cn/guide/components.html#动态组件](https://vuejs.org.cn/guide/components.html#动态组件)。所以实现代码如下：\n```html\n<template>\n<div class=\"home\">\n    <div class=\"bd\" style=\"height: 100%;\">\n        <div class=\"weui_tab\">\n            <ul class=\"weui_navbar\">\n                <li class=\"weui_navbar_item\"\n                    v-for=\"tab in tabs\"\n                    :class=\"{'weui_bar_item_on':$index===selected}\"\n                    @click=\"choose($index)\">{{tab.tabName}}</li>\n            </ul>\n            <div class=\"weui_tab_bd\">\n                <component :is=\"currentView\" transition=\"fade\" transition-mode=\"out-in\"></component>\n            </div>\n        </div>\n    </div>      \n</div>\n</template>\n<script>\nimport  tab_1 from './tab/tab_1.vue';\nimport  tab_2 from './tab/tab_2.vue';\nexport default{\n    data(){\n        return{\n            tabs:[\n                {tabName:'Vuejs'},\n                {tabName:'VueTab'}\n            ],\n            selected:0,\n            currentView:'view_0'\n        }\n    },\n    components:{\n        'view_0':tab_1,\n        'view_1':tab_2\n    },\n    methods:{\n        choose(index) {\n            this.selected=index;\n            this.currentView='view_'+index;\n        }\n    }\n}\n</script>\n```\n两个动态组件为tab_1.vue和tab_2.vue。引入这两个模块，对外输出对组件的操作`export default{}`，在`template`模板中将动态组件加载进去，使用保留的`<component>`元素，动态地绑定它的`is`特性，从而根据不同的值动态的切换组件，在需要点击的tab导航上，需要`v-for`循环出两个导航，然后动态绑定class，根据当前点击的tab导航`$index`动态的切换class名`:class=\"{'weui_bar_item_on':$index===selected}\"`，然后给`li`绑定click事件，从而让其在被点击时执行事件`@click=\"choose($index)\"`。\n由于默认情况下显示第一个组件且第一个`tab`变灰，所以在`data`设置默认值。为了切换有过渡，添加了`transition=\"fade\" transition-mode=\"out-in\"`并在css中设置动画的执行过程：\n```css\n/*切换动画*/\n.fade-transition {\n    transition: opacity 0.3s ease;\n}\n.fade-enter,\n.fade-leave {\n    opacity: 0;\n}\n```\n## 利用`v-link`实现路由链接\n在组件中，用到了路由，在给`a`写路由链接时候要使用`v-link`而不是`href`。在带有`v-link`指令的元素，如果`v-link`对应的URL匹配当前路径，则该元素会被添加一个特定的class，默认为`.v-link-active`，这个默认值，我们可以通过在创建路由时指定`linkActiveClass`全局选项来自定义，也可以通过`activeClass`内联选项来单独制定：\n```html\n<a v-link=\"{path:'/a',activeClass:'active'}\">test</a>\n```\n## 遇到的一些问题\n### 1.`v-for`循环插入图片\n在写循环插入图片的时候，写的代码如下：\n```html\n<div class=\"bio-slide\" v-for=\"item in items\">   \n    <img src=\"{{item.image}}\">\n</div>\n```\n此时在控制台会出现警告\n`[Vue Warn]: src=\"{{item.image}}\": interpolation in \"src\" attribute will cause a 404 request. Use v-bind:src instead.`\n这里意思是`在src属性插值将导致404请求。使用v-绑定：src代替。`\n所以替换成如下：\n```html\n<div class=\"bio-slide\" v-for=\"item in items\">   \n    <img v-bind:src=\"item.image\">\n</div>\n```\n这里需要主要，v-bind在写的时候不建议再用双花括号，根据官方的说法：\n```html\n<a v-bind:href=\"url\"></a>\n```\n这里` href `是参数，它告诉 `v-bind `指令将元素的 `href `特性跟表达式 url 的值绑定。可能你已注意到可以用特性插值` href=\"{{url}}\"` 获得同样的结果：这样没错，并且实际上在内部特性插值会转为` v-bind` 绑定。\n### 2.`v-model`的使用\n`v-model`用于在表单上创建双向绑定，只能用于`<input>`、`<select>`、`<textarea>`，如果用在其他元素中，则会在产生警告。\n### 3.如何让组件的CSS样式只在组件中起作用\n在每一个vue组件中都可以定义各自的css，js，如果想写的css只对当前组件起作用，则在`style`中写入`scoped`，即：\n```css\n<style scoped></style>\n```\n这样就完成了一个简单的基于Vue+webpack+vue-router的单页面应用，具体实现代码见github:[vue_spa_demo](https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo)。","source":"_posts/vue-demo-1.md","raw":"---\ntitle: 基于Vue的简单的单页面应用\ndate: 2016-06-08 01:14:39\ntags: vue\ncomments: true\ncategories: \"Vue\"\n---\n## 基于Vue的简单的单页面应用\n在对Vue和webpack有了一定了解后，我们就可以开始利用所了解的东西做一个简单的webapp了，不了解的同学可以看下我的前两篇关于vue和webpack的基本应用：\n[webpack+vue起步](https://segmentfault.com/a/1190000005614864)\n[利用webpack和vue实现组件化](https://segmentfault.com/a/1190000005616974)\n<!--more-->\n## 构建项目\n首先创建各个组件，我的目录结构如下：\n```js\n//没有后缀名的都是文件夹\n|-wechat\n    |-dist\n    |-src\n    |  |-components         //存放vue组件\n    |  |    |-tab           //存放home.vue中的tab，动态切换的模板\n    |  |    |    |-tab_1.vue\n    |  |    |    |-tab_2.vue\n    |  |    |-home.vue      //app的首页\n    |  |    |-list.vue      //点击home中的链接跳转到\n    |  |    |-detail.vue    //点击list中的链接跳转到\n    |  |-app.vue            //主要的vue文件(用于将各个组件的挂载)\n    |  |-main.js            //主要的js(用于配置路由)    \n    |-static                //存放静态资源\n    |-index.html\n```\n## 配置路由\n首先在我们的项目中安装vue-router\n```js\nnpm install vue-router\n```\n引入各个组件并配置路由：\n```js\n//main.js\n\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\n//引入组件\nimport App from './app.vue';\nimport home from './components/home.vue';\nimport list from './components/list.vue';\nimport detail from './components/detail.vue';\n\nVue.use(VueRouter);\n\nvar app=Vue.extend(App);\n\nvar router=new VueRouter();\n\n//配置路由\nrouter.map({\n  '/home': {\n    component: home\n  },\n  '/list': {\n    component: list    \n  },\n  '/detail': {\n    component: detail\n  }\n});\n//设置默认情况下打开的页面\nrouter.redirect({\n  '/':'home'\n});\nrouter.start(app,'#app');\n//暴露路由接口调试\nwindow.router = router;\n```\n关于vue-router的介绍，官方文档介绍很清楚，地址：[http://router.vuejs.org/zh-cn/index.html](http://router.vuejs.org/zh-cn/index.html)。\n配置好路由后，需要将匹配好的组件正确的渲染到页面中，此时用到`<router-view></router-view>`，它基于Vue的动态组件系统，所以它会继承一个正常动态组件的很多特性。在这里我们用到两个：\n- `v-transition`和`transition-mode`的完整支持，为了切换效果能正常工作，路由组件必须不是一个[片段实例](http://vuejs.org/guide/components.html#Fragment_Instance)。\n- 在路由的0.7.2+中支持`keep-alive`（[关于keep-alive](https://vuejs.org.cn/guide/components.html#keep-alive)）\n\n所以在app.vue写入：\n```html\n<template>\n\t<div class=\"main\">\n\t\t<router-view\n\t      keep-alive\n\t      transition=\"fade\"\n\t      transition-mode='out-in'></router-view>\n\t</div>\n</template>\n```\n打开命令行启动webpack-dev-server：\n```js\n$ webpack-dev-server --inline --hot\n```\n此时我们在页面中看到的页面就是home.vue\n## 在home.vue中实现tab切换\ntab切换作为一个常见的效果，出现的频率很高，那么如何用vuejs写一个tab切换效果呢？\n利用当前被点击的tab是第几个，从而动态的切换相应的动态组件是vuejs实现切换的一种方式。动态组件的介绍如下：[https://vuejs.org.cn/guide/components.html#动态组件](https://vuejs.org.cn/guide/components.html#动态组件)。所以实现代码如下：\n```html\n<template>\n<div class=\"home\">\n    <div class=\"bd\" style=\"height: 100%;\">\n        <div class=\"weui_tab\">\n            <ul class=\"weui_navbar\">\n                <li class=\"weui_navbar_item\"\n                    v-for=\"tab in tabs\"\n                    :class=\"{'weui_bar_item_on':$index===selected}\"\n                    @click=\"choose($index)\">{{tab.tabName}}</li>\n            </ul>\n            <div class=\"weui_tab_bd\">\n                <component :is=\"currentView\" transition=\"fade\" transition-mode=\"out-in\"></component>\n            </div>\n        </div>\n    </div>      \n</div>\n</template>\n<script>\nimport  tab_1 from './tab/tab_1.vue';\nimport  tab_2 from './tab/tab_2.vue';\nexport default{\n    data(){\n        return{\n            tabs:[\n                {tabName:'Vuejs'},\n                {tabName:'VueTab'}\n            ],\n            selected:0,\n            currentView:'view_0'\n        }\n    },\n    components:{\n        'view_0':tab_1,\n        'view_1':tab_2\n    },\n    methods:{\n        choose(index) {\n            this.selected=index;\n            this.currentView='view_'+index;\n        }\n    }\n}\n</script>\n```\n两个动态组件为tab_1.vue和tab_2.vue。引入这两个模块，对外输出对组件的操作`export default{}`，在`template`模板中将动态组件加载进去，使用保留的`<component>`元素，动态地绑定它的`is`特性，从而根据不同的值动态的切换组件，在需要点击的tab导航上，需要`v-for`循环出两个导航，然后动态绑定class，根据当前点击的tab导航`$index`动态的切换class名`:class=\"{'weui_bar_item_on':$index===selected}\"`，然后给`li`绑定click事件，从而让其在被点击时执行事件`@click=\"choose($index)\"`。\n由于默认情况下显示第一个组件且第一个`tab`变灰，所以在`data`设置默认值。为了切换有过渡，添加了`transition=\"fade\" transition-mode=\"out-in\"`并在css中设置动画的执行过程：\n```css\n/*切换动画*/\n.fade-transition {\n    transition: opacity 0.3s ease;\n}\n.fade-enter,\n.fade-leave {\n    opacity: 0;\n}\n```\n## 利用`v-link`实现路由链接\n在组件中，用到了路由，在给`a`写路由链接时候要使用`v-link`而不是`href`。在带有`v-link`指令的元素，如果`v-link`对应的URL匹配当前路径，则该元素会被添加一个特定的class，默认为`.v-link-active`，这个默认值，我们可以通过在创建路由时指定`linkActiveClass`全局选项来自定义，也可以通过`activeClass`内联选项来单独制定：\n```html\n<a v-link=\"{path:'/a',activeClass:'active'}\">test</a>\n```\n## 遇到的一些问题\n### 1.`v-for`循环插入图片\n在写循环插入图片的时候，写的代码如下：\n```html\n<div class=\"bio-slide\" v-for=\"item in items\">   \n    <img src=\"{{item.image}}\">\n</div>\n```\n此时在控制台会出现警告\n`[Vue Warn]: src=\"{{item.image}}\": interpolation in \"src\" attribute will cause a 404 request. Use v-bind:src instead.`\n这里意思是`在src属性插值将导致404请求。使用v-绑定：src代替。`\n所以替换成如下：\n```html\n<div class=\"bio-slide\" v-for=\"item in items\">   \n    <img v-bind:src=\"item.image\">\n</div>\n```\n这里需要主要，v-bind在写的时候不建议再用双花括号，根据官方的说法：\n```html\n<a v-bind:href=\"url\"></a>\n```\n这里` href `是参数，它告诉 `v-bind `指令将元素的 `href `特性跟表达式 url 的值绑定。可能你已注意到可以用特性插值` href=\"{{url}}\"` 获得同样的结果：这样没错，并且实际上在内部特性插值会转为` v-bind` 绑定。\n### 2.`v-model`的使用\n`v-model`用于在表单上创建双向绑定，只能用于`<input>`、`<select>`、`<textarea>`，如果用在其他元素中，则会在产生警告。\n### 3.如何让组件的CSS样式只在组件中起作用\n在每一个vue组件中都可以定义各自的css，js，如果想写的css只对当前组件起作用，则在`style`中写入`scoped`，即：\n```css\n<style scoped></style>\n```\n这样就完成了一个简单的基于Vue+webpack+vue-router的单页面应用，具体实现代码见github:[vue_spa_demo](https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo)。","slug":"vue-demo-1","published":1,"updated":"2016-07-13T20:07:22.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktocb003xzrv4il5gn676","content":"<h2 id=\"基于Vue的简单的单页面应用\"><a href=\"#基于Vue的简单的单页面应用\" class=\"headerlink\" title=\"基于Vue的简单的单页面应用\"></a>基于Vue的简单的单页面应用</h2><p>在对Vue和webpack有了一定了解后，我们就可以开始利用所了解的东西做一个简单的webapp了，不了解的同学可以看下我的前两篇关于vue和webpack的基本应用：<br><a href=\"https://segmentfault.com/a/1190000005614864\" target=\"_blank\" rel=\"noopener\">webpack+vue起步</a><br><a href=\"https://segmentfault.com/a/1190000005616974\" target=\"_blank\" rel=\"noopener\">利用webpack和vue实现组件化</a><br><a id=\"more\"></a></p>\n<h2 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h2><p>首先创建各个组件，我的目录结构如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//没有后缀名的都是文件夹</span></span><br><span class=\"line\">|-wechat</span><br><span class=\"line\">    |-dist</span><br><span class=\"line\">    |-src</span><br><span class=\"line\">    |  |-components         <span class=\"comment\">//存放vue组件</span></span><br><span class=\"line\">    |  |    |-tab           <span class=\"comment\">//存放home.vue中的tab，动态切换的模板</span></span><br><span class=\"line\">    |  |    |    |-tab_1.vue</span><br><span class=\"line\">    |  |    |    |-tab_2.vue</span><br><span class=\"line\">    |  |    |-home.vue      <span class=\"comment\">//app的首页</span></span><br><span class=\"line\">    |  |    |-list.vue      <span class=\"comment\">//点击home中的链接跳转到</span></span><br><span class=\"line\">    |  |    |-detail.vue    <span class=\"comment\">//点击list中的链接跳转到</span></span><br><span class=\"line\">    |  |-app.vue            <span class=\"comment\">//主要的vue文件(用于将各个组件的挂载)</span></span><br><span class=\"line\">    |  |-main.js            <span class=\"comment\">//主要的js(用于配置路由)    </span></span><br><span class=\"line\">    |-<span class=\"keyword\">static</span>                <span class=\"comment\">//存放静态资源</span></span><br><span class=\"line\">    |-index.html</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h2><p>首先在我们的项目中安装vue-router<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-router</span><br></pre></td></tr></table></figure></p>\n<p>引入各个组件并配置路由：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span>;</span><br><span class=\"line\"><span class=\"comment\">//引入组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./app.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> home <span class=\"keyword\">from</span> <span class=\"string\">'./components/home.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> list <span class=\"keyword\">from</span> <span class=\"string\">'./components/list.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> detail <span class=\"keyword\">from</span> <span class=\"string\">'./components/detail.vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app=Vue.extend(App);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"keyword\">new</span> VueRouter();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置路由</span></span><br><span class=\"line\">router.map(&#123;</span><br><span class=\"line\">  <span class=\"string\">'/home'</span>: &#123;</span><br><span class=\"line\">    component: home</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/list'</span>: &#123;</span><br><span class=\"line\">    component: list    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/detail'</span>: &#123;</span><br><span class=\"line\">    component: detail</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//设置默认情况下打开的页面</span></span><br><span class=\"line\">router.redirect(&#123;</span><br><span class=\"line\">  <span class=\"string\">'/'</span>:<span class=\"string\">'home'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">router.start(app,<span class=\"string\">'#app'</span>);</span><br><span class=\"line\"><span class=\"comment\">//暴露路由接口调试</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.router = router;</span><br></pre></td></tr></table></figure></p>\n<p>关于vue-router的介绍，官方文档介绍很清楚，地址：<a href=\"http://router.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">http://router.vuejs.org/zh-cn/index.html</a>。<br>配置好路由后，需要将匹配好的组件正确的渲染到页面中，此时用到<code>&lt;router-view&gt;&lt;/router-view&gt;</code>，它基于Vue的动态组件系统，所以它会继承一个正常动态组件的很多特性。在这里我们用到两个：</p>\n<ul>\n<li><code>v-transition</code>和<code>transition-mode</code>的完整支持，为了切换效果能正常工作，路由组件必须不是一个<a href=\"http://vuejs.org/guide/components.html#Fragment_Instance\" target=\"_blank\" rel=\"noopener\">片段实例</a>。</li>\n<li>在路由的0.7.2+中支持<code>keep-alive</code>（<a href=\"https://vuejs.org.cn/guide/components.html#keep-alive\" target=\"_blank\" rel=\"noopener\">关于keep-alive</a>）</li>\n</ul>\n<p>所以在app.vue写入：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span></span></span><br><span class=\"line\"><span class=\"tag\">\t      <span class=\"attr\">keep-alive</span></span></span><br><span class=\"line\"><span class=\"tag\">\t      <span class=\"attr\">transition</span>=<span class=\"string\">\"fade\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t      <span class=\"attr\">transition-mode</span>=<span class=\"string\">'out-in'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>打开命令行启动webpack-dev-server：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack-dev-server --inline --hot</span><br></pre></td></tr></table></figure></p>\n<p>此时我们在页面中看到的页面就是home.vue</p>\n<h2 id=\"在home-vue中实现tab切换\"><a href=\"#在home-vue中实现tab切换\" class=\"headerlink\" title=\"在home.vue中实现tab切换\"></a>在home.vue中实现tab切换</h2><p>tab切换作为一个常见的效果，出现的频率很高，那么如何用vuejs写一个tab切换效果呢？<br>利用当前被点击的tab是第几个，从而动态的切换相应的动态组件是vuejs实现切换的一种方式。动态组件的介绍如下：<a href=\"https://vuejs.org.cn/guide/components.html#动态组件\" target=\"_blank\" rel=\"noopener\">https://vuejs.org.cn/guide/components.html#动态组件</a>。所以实现代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"home\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100%;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"weui_tab\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"weui_navbar\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"weui_navbar_item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">v-for</span>=<span class=\"string\">\"tab in tabs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'weui_bar_item_on':$index===selected&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    @<span class=\"attr\">click</span>=<span class=\"string\">\"choose($index)\"</span>&gt;</span>&#123;&#123;tab.tabName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"weui_tab_bd\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"currentView\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"fade\"</span> <span class=\"attr\">transition-mode</span>=<span class=\"string\">\"out-in\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>      </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span>  tab_1 <span class=\"keyword\">from</span> <span class=\"string\">'./tab/tab_1.vue'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span>  tab_2 <span class=\"keyword\">from</span> <span class=\"string\">'./tab/tab_2.vue'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data()&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            tabs:[</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">tabName</span>:<span class=\"string\">'Vuejs'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">tabName</span>:<span class=\"string\">'VueTab'</span>&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            ],</span></span><br><span class=\"line\"><span class=\"undefined\">            selected:0,</span></span><br><span class=\"line\"><span class=\"javascript\">            currentView:<span class=\"string\">'view_0'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    components:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'view_0'</span>:tab_1,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'view_1'</span>:tab_2</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods:&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        choose(index) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.selected=index;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.currentView=<span class=\"string\">'view_'</span>+index;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>两个动态组件为tab_1.vue和tab_2.vue。引入这两个模块，对外输出对组件的操作<code>export default{}</code>，在<code>template</code>模板中将动态组件加载进去，使用保留的<code>&lt;component&gt;</code>元素，动态地绑定它的<code>is</code>特性，从而根据不同的值动态的切换组件，在需要点击的tab导航上，需要<code>v-for</code>循环出两个导航，然后动态绑定class，根据当前点击的tab导航<code>$index</code>动态的切换class名<code>:class=&quot;{&#39;weui_bar_item_on&#39;:$index===selected}&quot;</code>，然后给<code>li</code>绑定click事件，从而让其在被点击时执行事件<code>@click=&quot;choose($index)&quot;</code>。<br>由于默认情况下显示第一个组件且第一个<code>tab</code>变灰，所以在<code>data</code>设置默认值。为了切换有过渡，添加了<code>transition=&quot;fade&quot; transition-mode=&quot;out-in&quot;</code>并在css中设置动画的执行过程：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*切换动画*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.fade-transition</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: opacity <span class=\"number\">0.3s</span> ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.fade-leave</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"利用v-link实现路由链接\"><a href=\"#利用v-link实现路由链接\" class=\"headerlink\" title=\"利用v-link实现路由链接\"></a>利用<code>v-link</code>实现路由链接</h2><p>在组件中，用到了路由，在给<code>a</code>写路由链接时候要使用<code>v-link</code>而不是<code>href</code>。在带有<code>v-link</code>指令的元素，如果<code>v-link</code>对应的URL匹配当前路径，则该元素会被添加一个特定的class，默认为<code>.v-link-active</code>，这个默认值，我们可以通过在创建路由时指定<code>linkActiveClass</code>全局选项来自定义，也可以通过<code>activeClass</code>内联选项来单独制定：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123;path:'/a',activeClass:'active'&#125;\"</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"遇到的一些问题\"><a href=\"#遇到的一些问题\" class=\"headerlink\" title=\"遇到的一些问题\"></a>遇到的一些问题</h2><h3 id=\"1-v-for循环插入图片\"><a href=\"#1-v-for循环插入图片\" class=\"headerlink\" title=\"1.v-for循环插入图片\"></a>1.<code>v-for</code>循环插入图片</h3><p>在写循环插入图片的时候，写的代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bio-slide\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;item.image&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>此时在控制台会出现警告<br><code>[Vue Warn]: src=&quot;&quot;: interpolation in &quot;src&quot; attribute will cause a 404 request. Use v-bind:src instead.</code><br>这里意思是<code>在src属性插值将导致404请求。使用v-绑定：src代替。</code><br>所以替换成如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bio-slide\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"item.image\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里需要主要，v-bind在写的时候不建议再用双花括号，根据官方的说法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里<code>href</code>是参数，它告诉 <code>v-bind</code>指令将元素的 <code>href</code>特性跟表达式 url 的值绑定。可能你已注意到可以用特性插值<code>href=&quot;&quot;</code> 获得同样的结果：这样没错，并且实际上在内部特性插值会转为<code>v-bind</code> 绑定。</p>\n<h3 id=\"2-v-model的使用\"><a href=\"#2-v-model的使用\" class=\"headerlink\" title=\"2.v-model的使用\"></a>2.<code>v-model</code>的使用</h3><p><code>v-model</code>用于在表单上创建双向绑定，只能用于<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>，如果用在其他元素中，则会在产生警告。</p>\n<h3 id=\"3-如何让组件的CSS样式只在组件中起作用\"><a href=\"#3-如何让组件的CSS样式只在组件中起作用\" class=\"headerlink\" title=\"3.如何让组件的CSS样式只在组件中起作用\"></a>3.如何让组件的CSS样式只在组件中起作用</h3><p>在每一个vue组件中都可以定义各自的css，js，如果想写的css只对当前组件起作用，则在<code>style</code>中写入<code>scoped</code>，即：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样就完成了一个简单的基于Vue+webpack+vue-router的单页面应用，具体实现代码见github:<a href=\"https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo\" target=\"_blank\" rel=\"noopener\">vue_spa_demo</a>。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"基于Vue的简单的单页面应用\"><a href=\"#基于Vue的简单的单页面应用\" class=\"headerlink\" title=\"基于Vue的简单的单页面应用\"></a>基于Vue的简单的单页面应用</h2><p>在对Vue和webpack有了一定了解后，我们就可以开始利用所了解的东西做一个简单的webapp了，不了解的同学可以看下我的前两篇关于vue和webpack的基本应用：<br><a href=\"https://segmentfault.com/a/1190000005614864\" target=\"_blank\" rel=\"noopener\">webpack+vue起步</a><br><a href=\"https://segmentfault.com/a/1190000005616974\" target=\"_blank\" rel=\"noopener\">利用webpack和vue实现组件化</a><br>","more":"</p>\n<h2 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h2><p>首先创建各个组件，我的目录结构如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//没有后缀名的都是文件夹</span></span><br><span class=\"line\">|-wechat</span><br><span class=\"line\">    |-dist</span><br><span class=\"line\">    |-src</span><br><span class=\"line\">    |  |-components         <span class=\"comment\">//存放vue组件</span></span><br><span class=\"line\">    |  |    |-tab           <span class=\"comment\">//存放home.vue中的tab，动态切换的模板</span></span><br><span class=\"line\">    |  |    |    |-tab_1.vue</span><br><span class=\"line\">    |  |    |    |-tab_2.vue</span><br><span class=\"line\">    |  |    |-home.vue      <span class=\"comment\">//app的首页</span></span><br><span class=\"line\">    |  |    |-list.vue      <span class=\"comment\">//点击home中的链接跳转到</span></span><br><span class=\"line\">    |  |    |-detail.vue    <span class=\"comment\">//点击list中的链接跳转到</span></span><br><span class=\"line\">    |  |-app.vue            <span class=\"comment\">//主要的vue文件(用于将各个组件的挂载)</span></span><br><span class=\"line\">    |  |-main.js            <span class=\"comment\">//主要的js(用于配置路由)    </span></span><br><span class=\"line\">    |-<span class=\"keyword\">static</span>                <span class=\"comment\">//存放静态资源</span></span><br><span class=\"line\">    |-index.html</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h2><p>首先在我们的项目中安装vue-router<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-router</span><br></pre></td></tr></table></figure></p>\n<p>引入各个组件并配置路由：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span>;</span><br><span class=\"line\"><span class=\"comment\">//引入组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./app.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> home <span class=\"keyword\">from</span> <span class=\"string\">'./components/home.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> list <span class=\"keyword\">from</span> <span class=\"string\">'./components/list.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> detail <span class=\"keyword\">from</span> <span class=\"string\">'./components/detail.vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app=Vue.extend(App);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> router=<span class=\"keyword\">new</span> VueRouter();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置路由</span></span><br><span class=\"line\">router.map(&#123;</span><br><span class=\"line\">  <span class=\"string\">'/home'</span>: &#123;</span><br><span class=\"line\">    component: home</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/list'</span>: &#123;</span><br><span class=\"line\">    component: list    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">'/detail'</span>: &#123;</span><br><span class=\"line\">    component: detail</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//设置默认情况下打开的页面</span></span><br><span class=\"line\">router.redirect(&#123;</span><br><span class=\"line\">  <span class=\"string\">'/'</span>:<span class=\"string\">'home'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">router.start(app,<span class=\"string\">'#app'</span>);</span><br><span class=\"line\"><span class=\"comment\">//暴露路由接口调试</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.router = router;</span><br></pre></td></tr></table></figure></p>\n<p>关于vue-router的介绍，官方文档介绍很清楚，地址：<a href=\"http://router.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">http://router.vuejs.org/zh-cn/index.html</a>。<br>配置好路由后，需要将匹配好的组件正确的渲染到页面中，此时用到<code>&lt;router-view&gt;&lt;/router-view&gt;</code>，它基于Vue的动态组件系统，所以它会继承一个正常动态组件的很多特性。在这里我们用到两个：</p>\n<ul>\n<li><code>v-transition</code>和<code>transition-mode</code>的完整支持，为了切换效果能正常工作，路由组件必须不是一个<a href=\"http://vuejs.org/guide/components.html#Fragment_Instance\" target=\"_blank\" rel=\"noopener\">片段实例</a>。</li>\n<li>在路由的0.7.2+中支持<code>keep-alive</code>（<a href=\"https://vuejs.org.cn/guide/components.html#keep-alive\" target=\"_blank\" rel=\"noopener\">关于keep-alive</a>）</li>\n</ul>\n<p>所以在app.vue写入：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">router-view</span></span></span><br><span class=\"line\"><span class=\"tag\">\t      <span class=\"attr\">keep-alive</span></span></span><br><span class=\"line\"><span class=\"tag\">\t      <span class=\"attr\">transition</span>=<span class=\"string\">\"fade\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t      <span class=\"attr\">transition-mode</span>=<span class=\"string\">'out-in'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>打开命令行启动webpack-dev-server：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack-dev-server --inline --hot</span><br></pre></td></tr></table></figure></p>\n<p>此时我们在页面中看到的页面就是home.vue</p>\n<h2 id=\"在home-vue中实现tab切换\"><a href=\"#在home-vue中实现tab切换\" class=\"headerlink\" title=\"在home.vue中实现tab切换\"></a>在home.vue中实现tab切换</h2><p>tab切换作为一个常见的效果，出现的频率很高，那么如何用vuejs写一个tab切换效果呢？<br>利用当前被点击的tab是第几个，从而动态的切换相应的动态组件是vuejs实现切换的一种方式。动态组件的介绍如下：<a href=\"https://vuejs.org.cn/guide/components.html#动态组件\" target=\"_blank\" rel=\"noopener\">https://vuejs.org.cn/guide/components.html#动态组件</a>。所以实现代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"home\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 100%;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"weui_tab\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"weui_navbar\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"weui_navbar_item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">v-for</span>=<span class=\"string\">\"tab in tabs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'weui_bar_item_on':$index===selected&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    @<span class=\"attr\">click</span>=<span class=\"string\">\"choose($index)\"</span>&gt;</span>&#123;&#123;tab.tabName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"weui_tab_bd\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"currentView\"</span> <span class=\"attr\">transition</span>=<span class=\"string\">\"fade\"</span> <span class=\"attr\">transition-mode</span>=<span class=\"string\">\"out-in\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>      </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span>  tab_1 <span class=\"keyword\">from</span> <span class=\"string\">'./tab/tab_1.vue'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span>  tab_2 <span class=\"keyword\">from</span> <span class=\"string\">'./tab/tab_2.vue'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data()&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            tabs:[</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">tabName</span>:<span class=\"string\">'Vuejs'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">tabName</span>:<span class=\"string\">'VueTab'</span>&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            ],</span></span><br><span class=\"line\"><span class=\"undefined\">            selected:0,</span></span><br><span class=\"line\"><span class=\"javascript\">            currentView:<span class=\"string\">'view_0'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    components:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'view_0'</span>:tab_1,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'view_1'</span>:tab_2</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods:&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        choose(index) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.selected=index;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.currentView=<span class=\"string\">'view_'</span>+index;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>两个动态组件为tab_1.vue和tab_2.vue。引入这两个模块，对外输出对组件的操作<code>export default{}</code>，在<code>template</code>模板中将动态组件加载进去，使用保留的<code>&lt;component&gt;</code>元素，动态地绑定它的<code>is</code>特性，从而根据不同的值动态的切换组件，在需要点击的tab导航上，需要<code>v-for</code>循环出两个导航，然后动态绑定class，根据当前点击的tab导航<code>$index</code>动态的切换class名<code>:class=&quot;{&#39;weui_bar_item_on&#39;:$index===selected}&quot;</code>，然后给<code>li</code>绑定click事件，从而让其在被点击时执行事件<code>@click=&quot;choose($index)&quot;</code>。<br>由于默认情况下显示第一个组件且第一个<code>tab</code>变灰，所以在<code>data</code>设置默认值。为了切换有过渡，添加了<code>transition=&quot;fade&quot; transition-mode=&quot;out-in&quot;</code>并在css中设置动画的执行过程：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*切换动画*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.fade-transition</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: opacity <span class=\"number\">0.3s</span> ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.fade-leave</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"利用v-link实现路由链接\"><a href=\"#利用v-link实现路由链接\" class=\"headerlink\" title=\"利用v-link实现路由链接\"></a>利用<code>v-link</code>实现路由链接</h2><p>在组件中，用到了路由，在给<code>a</code>写路由链接时候要使用<code>v-link</code>而不是<code>href</code>。在带有<code>v-link</code>指令的元素，如果<code>v-link</code>对应的URL匹配当前路径，则该元素会被添加一个特定的class，默认为<code>.v-link-active</code>，这个默认值，我们可以通过在创建路由时指定<code>linkActiveClass</code>全局选项来自定义，也可以通过<code>activeClass</code>内联选项来单独制定：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link</span>=<span class=\"string\">\"&#123;path:'/a',activeClass:'active'&#125;\"</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"遇到的一些问题\"><a href=\"#遇到的一些问题\" class=\"headerlink\" title=\"遇到的一些问题\"></a>遇到的一些问题</h2><h3 id=\"1-v-for循环插入图片\"><a href=\"#1-v-for循环插入图片\" class=\"headerlink\" title=\"1.v-for循环插入图片\"></a>1.<code>v-for</code>循环插入图片</h3><p>在写循环插入图片的时候，写的代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bio-slide\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;item.image&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>此时在控制台会出现警告<br><code>[Vue Warn]: src=&quot;&quot;: interpolation in &quot;src&quot; attribute will cause a 404 request. Use v-bind:src instead.</code><br>这里意思是<code>在src属性插值将导致404请求。使用v-绑定：src代替。</code><br>所以替换成如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bio-slide\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"item.image\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里需要主要，v-bind在写的时候不建议再用双花括号，根据官方的说法：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里<code>href</code>是参数，它告诉 <code>v-bind</code>指令将元素的 <code>href</code>特性跟表达式 url 的值绑定。可能你已注意到可以用特性插值<code>href=&quot;&quot;</code> 获得同样的结果：这样没错，并且实际上在内部特性插值会转为<code>v-bind</code> 绑定。</p>\n<h3 id=\"2-v-model的使用\"><a href=\"#2-v-model的使用\" class=\"headerlink\" title=\"2.v-model的使用\"></a>2.<code>v-model</code>的使用</h3><p><code>v-model</code>用于在表单上创建双向绑定，只能用于<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>，如果用在其他元素中，则会在产生警告。</p>\n<h3 id=\"3-如何让组件的CSS样式只在组件中起作用\"><a href=\"#3-如何让组件的CSS样式只在组件中起作用\" class=\"headerlink\" title=\"3.如何让组件的CSS样式只在组件中起作用\"></a>3.如何让组件的CSS样式只在组件中起作用</h3><p>在每一个vue组件中都可以定义各自的css，js，如果想写的css只对当前组件起作用，则在<code>style</code>中写入<code>scoped</code>，即：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这样就完成了一个简单的基于Vue+webpack+vue-router的单页面应用，具体实现代码见github:<a href=\"https://github.com/MrZhang123/Vue_project/tree/master/vue_spa_demo\" target=\"_blank\" rel=\"noopener\">vue_spa_demo</a>。</p>"},{"title":"Webpack初探","date":"2016-05-31T13:02:20.000Z","comments":1,"_content":"> 很早就听说webpack包管理工具，但是一直没有机会学习，这次又看到[掘金](http://gold.xitu.io/#/)上面有关于vue+webpack的初级文章，而且最近公司没什么事儿做，决定搞一下。在搞的过程中，虽然按照文章中写的去做，但是还是有很多问题，所以写下本文，总结下我遇到的问题以及解决办法。\n\n### 包管理工具---webpack\nWebpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 `loader`的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。\n<!--more-->\n![webpack官方解释图](/img/webpack/what-is-webpack.jpg)\n[官网：http://webpack.github.io/](http://webpack.github.io/)\n对应各种不同文件类型的资源, Webpack 有对应的模块 loader比如 CoffeeScript 用的是coffee-loader, 其他还有很多:[http://webpack.github.io/docs/list-of-loaders.html](http://webpack.github.io/docs/list-of-loaders.html)\n## 安装\n> webpack的安装其实其实Google一搜一大把，但是为了完整性，还是写写吧。\n\nwebpack同样基于nodejs，所以我们需要先安装nodejs，然后再利用npm安装，webpack需要nodejs v0.6以上支持，建议使用最新的nodejs。\n首先全局安装webpack：\n```js\n$ npm install webpack -g\n```\n或者将webpack安装到项目依赖中:\n```js\n# 进入项目目录\n# 确定已有package.json，没有就通过npm init创建\n# 安装webpack依赖\n$ npm install webpack --save-dev\n```\n## 使用\n首先创建一个静态页面index.html和一个JS入口文件entry.js：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"bundle.js\"></script>\n</body>\n</html>\n```\n```js\n//entry.js\ndocument.write('It works.');\n```\n然后编译entry.js并打包到bundle.js：\n```js\n$ webpack entry.js bundle.js\n```\n然后用浏览器打开`index.html`就可以看到`It works.`\n接下来添加一个模块module.js并修改入口entry.js：\n```js\n//module.js\nmodule.exports='It work from module.js.';\n//entry.js\ndocument.write('It works.');\ndocument.write(require('./module.js'));//添加模块\n```\n重新运行打包命令后就可以看到`It work from module.js.`\n这里我们用到了commonjs的模块写法：`exports`，`require`；前面已经说过，webpack作为打包工具，可以为commonjs，AMD，ES6模块打包。\nWebpack\t会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到bundle.js\t。Webpack会给每个模块分配一个唯一的id并通过这个id索引和访问模块。在页面启动时，会先执行entry.js中的代码，其它模块会在运行require的时候再执行。\n这就是最基本的webpack的用法，当我第一次看到这个功能的时候，终于解决了曾经我对在页面中引用JS的一个困惑，即js文件a如何引用js文件b中的东西，webpack非常方便让我们做到了这一点。下一节，会结合Vuejs进行模块化开发，那时会用到更多的webpack的东西，并且会讲到关于ES6模块儿化的一些东西，加油！\n","source":"_posts/webpack-1.md","raw":"---\ntitle: Webpack初探\ndate: 2016-05-31 21:02:20\ntags: vue\ncomments: true\ncategories: \"Vue\"\n---\n> 很早就听说webpack包管理工具，但是一直没有机会学习，这次又看到[掘金](http://gold.xitu.io/#/)上面有关于vue+webpack的初级文章，而且最近公司没什么事儿做，决定搞一下。在搞的过程中，虽然按照文章中写的去做，但是还是有很多问题，所以写下本文，总结下我遇到的问题以及解决办法。\n\n### 包管理工具---webpack\nWebpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 `loader`的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。\n<!--more-->\n![webpack官方解释图](/img/webpack/what-is-webpack.jpg)\n[官网：http://webpack.github.io/](http://webpack.github.io/)\n对应各种不同文件类型的资源, Webpack 有对应的模块 loader比如 CoffeeScript 用的是coffee-loader, 其他还有很多:[http://webpack.github.io/docs/list-of-loaders.html](http://webpack.github.io/docs/list-of-loaders.html)\n## 安装\n> webpack的安装其实其实Google一搜一大把，但是为了完整性，还是写写吧。\n\nwebpack同样基于nodejs，所以我们需要先安装nodejs，然后再利用npm安装，webpack需要nodejs v0.6以上支持，建议使用最新的nodejs。\n首先全局安装webpack：\n```js\n$ npm install webpack -g\n```\n或者将webpack安装到项目依赖中:\n```js\n# 进入项目目录\n# 确定已有package.json，没有就通过npm init创建\n# 安装webpack依赖\n$ npm install webpack --save-dev\n```\n## 使用\n首先创建一个静态页面index.html和一个JS入口文件entry.js：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"bundle.js\"></script>\n</body>\n</html>\n```\n```js\n//entry.js\ndocument.write('It works.');\n```\n然后编译entry.js并打包到bundle.js：\n```js\n$ webpack entry.js bundle.js\n```\n然后用浏览器打开`index.html`就可以看到`It works.`\n接下来添加一个模块module.js并修改入口entry.js：\n```js\n//module.js\nmodule.exports='It work from module.js.';\n//entry.js\ndocument.write('It works.');\ndocument.write(require('./module.js'));//添加模块\n```\n重新运行打包命令后就可以看到`It work from module.js.`\n这里我们用到了commonjs的模块写法：`exports`，`require`；前面已经说过，webpack作为打包工具，可以为commonjs，AMD，ES6模块打包。\nWebpack\t会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到bundle.js\t。Webpack会给每个模块分配一个唯一的id并通过这个id索引和访问模块。在页面启动时，会先执行entry.js中的代码，其它模块会在运行require的时候再执行。\n这就是最基本的webpack的用法，当我第一次看到这个功能的时候，终于解决了曾经我对在页面中引用JS的一个困惑，即js文件a如何引用js文件b中的东西，webpack非常方便让我们做到了这一点。下一节，会结合Vuejs进行模块化开发，那时会用到更多的webpack的东西，并且会讲到关于ES6模块儿化的一些东西，加油！\n","slug":"webpack-1","published":1,"updated":"2016-06-07T09:17:02.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktocd0040zrv4r9fs2drw","content":"<blockquote>\n<p>很早就听说webpack包管理工具，但是一直没有机会学习，这次又看到<a href=\"http://gold.xitu.io/#/\" target=\"_blank\" rel=\"noopener\">掘金</a>上面有关于vue+webpack的初级文章，而且最近公司没什么事儿做，决定搞一下。在搞的过程中，虽然按照文章中写的去做，但是还是有很多问题，所以写下本文，总结下我遇到的问题以及解决办法。</p>\n</blockquote>\n<h3 id=\"包管理工具—webpack\"><a href=\"#包管理工具—webpack\" class=\"headerlink\" title=\"包管理工具—webpack\"></a>包管理工具—webpack</h3><p>Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 <code>loader</code>的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。<br><a id=\"more\"></a><br><img src=\"/img/webpack/what-is-webpack.jpg\" alt=\"webpack官方解释图\"><br><a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"noopener\">官网：http://webpack.github.io/</a><br>对应各种不同文件类型的资源, Webpack 有对应的模块 loader比如 CoffeeScript 用的是coffee-loader, 其他还有很多:<a href=\"http://webpack.github.io/docs/list-of-loaders.html\" target=\"_blank\" rel=\"noopener\">http://webpack.github.io/docs/list-of-loaders.html</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>webpack的安装其实其实Google一搜一大把，但是为了完整性，还是写写吧。</p>\n</blockquote>\n<p>webpack同样基于nodejs，所以我们需要先安装nodejs，然后再利用npm安装，webpack需要nodejs v0.6以上支持，建议使用最新的nodejs。<br>首先全局安装webpack：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install webpack -g</span><br></pre></td></tr></table></figure></p>\n<p>或者将webpack安装到项目依赖中:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 进入项目目录</span><br><span class=\"line\"># 确定已有package.json，没有就通过npm init创建</span><br><span class=\"line\"># 安装webpack依赖</span><br><span class=\"line\">$ npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>首先创建一个静态页面index.html和一个JS入口文件entry.js：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//entry.js</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'It works.'</span>);</span><br></pre></td></tr></table></figure>\n<p>然后编译entry.js并打包到bundle.js：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack entry.js bundle.js</span><br></pre></td></tr></table></figure></p>\n<p>然后用浏览器打开<code>index.html</code>就可以看到<code>It works.</code><br>接下来添加一个模块module.js并修改入口entry.js：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//module.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=<span class=\"string\">'It work from module.js.'</span>;</span><br><span class=\"line\"><span class=\"comment\">//entry.js</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'It works.'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"built_in\">require</span>(<span class=\"string\">'./module.js'</span>));<span class=\"comment\">//添加模块</span></span><br></pre></td></tr></table></figure></p>\n<p>重新运行打包命令后就可以看到<code>It work from module.js.</code><br>这里我们用到了commonjs的模块写法：<code>exports</code>，<code>require</code>；前面已经说过，webpack作为打包工具，可以为commonjs，AMD，ES6模块打包。<br>Webpack    会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到bundle.js    。Webpack会给每个模块分配一个唯一的id并通过这个id索引和访问模块。在页面启动时，会先执行entry.js中的代码，其它模块会在运行require的时候再执行。<br>这就是最基本的webpack的用法，当我第一次看到这个功能的时候，终于解决了曾经我对在页面中引用JS的一个困惑，即js文件a如何引用js文件b中的东西，webpack非常方便让我们做到了这一点。下一节，会结合Vuejs进行模块化开发，那时会用到更多的webpack的东西，并且会讲到关于ES6模块儿化的一些东西，加油！</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>很早就听说webpack包管理工具，但是一直没有机会学习，这次又看到<a href=\"http://gold.xitu.io/#/\" target=\"_blank\" rel=\"noopener\">掘金</a>上面有关于vue+webpack的初级文章，而且最近公司没什么事儿做，决定搞一下。在搞的过程中，虽然按照文章中写的去做，但是还是有很多问题，所以写下本文，总结下我遇到的问题以及解决办法。</p>\n</blockquote>\n<h3 id=\"包管理工具—webpack\"><a href=\"#包管理工具—webpack\" class=\"headerlink\" title=\"包管理工具—webpack\"></a>包管理工具—webpack</h3><p>Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 <code>loader</code>的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。<br>","more":"<br><img src=\"/img/webpack/what-is-webpack.jpg\" alt=\"webpack官方解释图\"><br><a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"noopener\">官网：http://webpack.github.io/</a><br>对应各种不同文件类型的资源, Webpack 有对应的模块 loader比如 CoffeeScript 用的是coffee-loader, 其他还有很多:<a href=\"http://webpack.github.io/docs/list-of-loaders.html\" target=\"_blank\" rel=\"noopener\">http://webpack.github.io/docs/list-of-loaders.html</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>webpack的安装其实其实Google一搜一大把，但是为了完整性，还是写写吧。</p>\n</blockquote>\n<p>webpack同样基于nodejs，所以我们需要先安装nodejs，然后再利用npm安装，webpack需要nodejs v0.6以上支持，建议使用最新的nodejs。<br>首先全局安装webpack：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install webpack -g</span><br></pre></td></tr></table></figure></p>\n<p>或者将webpack安装到项目依赖中:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 进入项目目录</span><br><span class=\"line\"># 确定已有package.json，没有就通过npm init创建</span><br><span class=\"line\"># 安装webpack依赖</span><br><span class=\"line\">$ npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>首先创建一个静态页面index.html和一个JS入口文件entry.js：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//entry.js</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'It works.'</span>);</span><br></pre></td></tr></table></figure>\n<p>然后编译entry.js并打包到bundle.js：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack entry.js bundle.js</span><br></pre></td></tr></table></figure></p>\n<p>然后用浏览器打开<code>index.html</code>就可以看到<code>It works.</code><br>接下来添加一个模块module.js并修改入口entry.js：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//module.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=<span class=\"string\">'It work from module.js.'</span>;</span><br><span class=\"line\"><span class=\"comment\">//entry.js</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">'It works.'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"built_in\">require</span>(<span class=\"string\">'./module.js'</span>));<span class=\"comment\">//添加模块</span></span><br></pre></td></tr></table></figure></p>\n<p>重新运行打包命令后就可以看到<code>It work from module.js.</code><br>这里我们用到了commonjs的模块写法：<code>exports</code>，<code>require</code>；前面已经说过，webpack作为打包工具，可以为commonjs，AMD，ES6模块打包。<br>Webpack    会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到bundle.js    。Webpack会给每个模块分配一个唯一的id并通过这个id索引和访问模块。在页面启动时，会先执行entry.js中的代码，其它模块会在运行require的时候再执行。<br>这就是最基本的webpack的用法，当我第一次看到这个功能的时候，终于解决了曾经我对在页面中引用JS的一个困惑，即js文件a如何引用js文件b中的东西，webpack非常方便让我们做到了这一点。下一节，会结合Vuejs进行模块化开发，那时会用到更多的webpack的东西，并且会讲到关于ES6模块儿化的一些东西，加油！</p>"},{"title":"Vue2.x踩坑与总结","date":"2017-02-07T13:41:02.000Z","comments":1,"_content":"![](/img/vue2.jpg)\n> 年前就打算学习并总结一下vue2.x，但是因为年前工作比较多，所以进展十分缓慢，现在终于学了一大部分，而且自己在学习开发中也踩了不少坑也总结了不少，所以将自己踩过的坑总结一下分享出来。因为在项目中使用了webpack2.x，所以对于webpack2.x也有一个踩坑总结，[点击链接](http://mrzhang123.github.io/2017/02/07/webpack2/)。\n\n<!--more-->\n\n项目地址：[https://github.com/MrZhang123/Vue_project/tree/master/vue2.x](https://github.com/MrZhang123/Vue_project/tree/master/vue2.x)\n\n# vue2.x\n\n## 1.独立构建vs运行时构建\n\n在按照vue1.0的配置配置好webpack后，会出现`Failed to mount component: template or render function not defined. (found in root instance) `的错误，这里涉及到vue2.0与vue1.0的第一个不同的地方。具体区别[独立构建 vs 运行时构建](https://vuefe.cn/v2/guide/installation.html#独立构建-vs-运行时构建)。解决方法为在webpack配置文件中添加如下配置项：\n\n```js\nresolve: {\n  alias: {\n    'vue$': 'vue/dist/vue.common.js'\n  }\n}\n```\n\n## 2.挂载点的选择\n\n在原来的vue1.0的项目中我使用`body`元素作为挂载点，但是在vue2.0中，如果使用`body`或者`html`作为挂载点，则会报以下警告：`Do not mount Vue to <html> or <body> - mount to normal elements instead.`\n\n<font color='red'>在vue1.0中允许开发者以`body`或者`html`作为根实体的挂载点，但是到了2.0后，只能通过**独立的节点挂载**，例如：div等，否则报警告</font>\n\n## 3.动态组件渲染（跟1.x类似）\n\n多个组件可以使用同一个挂载点，然后动态地在它们之间切换。**使用保留的 <component> 元素**，动态地绑定到它的 is 特性：\n\n```html\n<!-- 动态组件由 vm 实例的属性值 `componentId` 控制 -->\n<component :is=\"componentId\"></component>\n<!-- 也能够渲染注册过的组件或 prop 传入的组件 -->\n<component :is=\"$options.components.child\"></component>\n```\n\n### `keep-alive`\n\n如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 `keep-alive` 指令参数：\n\n```html\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- 非活动组件将被缓存！ -->\n  </component>\n</keep-alive>\n```\n\n## 4.ref\n\n有时候需要直接在父组件中访问子组件实例，或者直接操作DOM元素，此时需要使用`ref`。\n\n`ref`被用来给元素或子元素注册引用信息。引用信息会根据父组件的`$refs`对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素，如果用在子组件上，引用信息就是组件实例。\n\n```html\n<!-- vm.$refs.p will be the DOM node -->\n<p ref=\"p\">hello</p>\n<!-- vm.$refs.child will be the child comp instance -->\n<child-comp ref=\"child\"></child-comp>\n```\n\n当 `v-for` 用于元素或组件的时候，引用信息将是包含DOM节点或组件实例数组。\n\n关于ref注册时间的重要说明: 因为ref本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！**`$refs` 也不是响应式的**，因此你不应该试图用它在模版中做数据绑定。\n\n## 5.自定义事件\n\n在vue自定义事件使用`$on`与`$emit`，前者用于触发监听，后者用于触发，监听可以有两种方式\n\n```html\n<!--使用v-on在html中监听-->\n<my-component v-on:test=\"callbackFun\"></my-component>\n<script>\n  //直接用$on监听\n  vm.$on('text',function(){})\n</script>\n```\n\n## 6.组件命名的约定\n\n当注册组件（或者 props）时，可以使用 kebab-case ，camelCase ，或 TitleCase \n\n```js\n// 在组件定义中\ncomponents: {\n  // 使用 kebab-case 形式注册\n  'kebab-cased-component': { /* ... */ },\n  // register using camelCase\n  'camelCasedComponent': { /* ... */ },\n  // register using TitleCase\n  'TitleCasedComponent': { /* ... */ }\n}\n```\n\n在 HTML 模版中，只能使用 kebab-case 形式：\n\n```html\n<!-- 在HTML模版中始终使用 kebab-case -->\n<kebab-cased-component></kebab-cased-component>\n<camel-cased-component></camel-cased-component>\n<title-cased-component></title-cased-component>\n```\n\n当使用**字符串模式**时可以使用 camelCase 、 TitleCase 或者 kebab-case 来引用：\n\n```html\n<!-- 在字符串模版中可以用任何你喜欢的方式! -->\n<my-component></my-component>\n<myComponent></myComponent>\n<MyComponent></MyComponent>\n```\n\n## 7.子组件中使用`this`\n\n有时候子组件简单，可以在父组件中直接注册，此时在子组件内使用`this`就是子组件实例并不是父组件，例如：\n\n```js\nexport default{\n    data(){\n        return{\n            parentMsg:'hello!'\n        }\n    },\n    components:{\n        child:{\n            props:['inputMessage'],\n            template:'<span>{{inputMessage}}</span>'\n        },\n        'child-secound':{\n            props:['inputMessage'],\n            template:'<span>{{upperCase}}</span>',\n            computed:{\n                upperCase(){\n                    return this.inputMessage.toUpperCase();\n                }\n            }    \n        }\n    }\n}\n```\n\n## 8.`key`的使用\n\n一般情况下，vue在渲染完成后，如果数据发生变化，只会重新渲染数据，不会重新渲染整个元素，但是有时候我们需要元素被重新渲染，此时就需要使用`key`关键字，使用`v-bind`绑定`key`关键字，可以实现在数据发生变化时候重新渲染整个元素。**注：**同一父级元素下所有子元素如果都要在数据变化后重新渲染元素，则需要被绑定的`key`\n\n## 9.`v-move`的使用\n\n在使用`<transition-group>`时候，不仅可以定义进入离开动画，还可以使用新增的`v-move`特性，与过渡一样，默认为`v-move`，可以用`name`进行自定义前缀，也可以用`move-class`属性手动设定。用了这个之后就可以实现移动过程中的动画。\n\n## 10.跳过css检测\n\n对于只使用js过度的元素使用`v-bind:css=\"false\"`跳过vue对css的检测。\n\n## render函数的使用\n\ncreateElement接受三个参数：\n\n- {String | Object | Function}即一个HTML标签 | 组件选项 | 一个函数，必须返回上述其中一个\n\n- {Object}一个对应HTML标签属性的数据对象（可选）\n\n- {String | Array}子节点（VNode）（可选）\n\n⚠️ 关于第三个参数的说明\n\n- createElement第三个参数，如果是String，则类似于innerHTML，如果是Array，则可以写入一个执行函数，这个函数用于创建另一个DOM结构（而且这里如果想写入一个执行函数，必须是数组！！）\n- 每个createElement只能创建一个元素，所以如果是创建多个元素相互嵌套，需要多个createElement函数相互嵌套，最后再render，这个跟原生js创建DOM元素类似\n- 如果需要同时渲染多个元素，则需要在第三个参数的数组中，分别写入需要渲染的元素，此时Vue会按照数组中**顺序**进行渲染\n\n完整数据对象：\n\n```js\n{\n  // 和`v-bind:class`一样的 API\n  'class': {\n    foo: true,\n    bar: false\n  },\n  // 和`v-bind:style`一样的 API\n  style: {\n    color: 'red',\n    fontSize: '14px'\n  },\n  // 正常的 HTML 特性\n  attrs: {\n    id: 'foo'\n  },\n  // 组件 props\n  props: {\n    myProp: 'bar'\n  },\n  // DOM 属性\n  domProps: {\n    innerHTML: 'baz'\n  },\n  // 事件监听器基于 \"on\"\n  // 所以不再支持如 v-on:keyup.enter 修饰器\n  // 需要手动匹配 keyCode。\n  on: {\n    click: this.clickHandler\n  },\n  // 仅对于组件，用于监听原生事件，而不是组件使用 vm.$emit 触发的事件。\n  nativeOn: {\n    click: this.nativeClickHandler\n  },\n  // 自定义指令. 注意事项：不能对绑定的旧值设值\n  // Vue 会为您持续追踨\n  directives: [\n    {\n      name: 'my-custom-directive',\n      value: '2'\n      expression: '1 + 1',\n      arg: 'foo',\n      modifiers: {\n        bar: true\n      }\n    }\n  ],\n  // Scoped slots in the form of\n  // { name: props => VNode | Array<VNode> }\n  scopedSlots: {\n    default: props => h('span', props.text)\n  },\n  // 如果子组件有定义 slot 的名称\n  slot: 'name-of-slot'\n  // 其他特殊顶层属性\n  key: 'myKey',\n  ref: 'myRef'\n}\n```\n\n# vue-router2.x\n\n## 1.router-view\n\n在vue-router2中`<router-view>`是最顶层的出口，渲染最高级路由匹配到组件。同样地，一个被渲染组件同样可以包含自己的嵌套`<router-view>`。\n\n## 2.挂载\n\n在router1.0中，挂载节点的方式为`router.start()`而在router2.0中使用vue自己的`$mount`手动挂载\n\n## 3.给link添加事件\n\n在vue-router1中使用`v-link`写入路由，但是在vue-router2中要使用`router-link`写入路由，在浏览器渲染的时候会把`router-link`渲染成`a`。\n\n有时候需要为`router-link`注册事件，对于一般的html元素，直接使用`@click=\"eventFun\"`即可，但是对于`router-link`，像普通html元素那样注册事件后并不管用，**需要添加`.native`才会成功注册**。\n\n事实上给**组件绑定原生事件**就需要`.native`修饰`v-on`，否则无法注册成功。\n\n```html\n<my-component v-on:click.native=\"doTheThing\"></my-component>\n```\n\n## 4.利用vue-router做导航\n\n在利用vue-router做导航的时候，需要用到`redirect`关键字的重定向功能，具体写法如下：\n\n```js\nconst router = new VueRouter({\n    routes : [\n        {path:'/',redirect:'/ZY'},\n        {path:'/ZY',component:ZY}\n    ]\n});\n```\n\n## 5.路由嵌套\n\nvue-router的路由嵌套指的是**子组件会在父组件中渲染出来**，必须是子组件的父组件，祖先不可以实现，例如：\n\n```shell\n/user/foo/profile                     /user/foo/posts\n+------------------+                  +-----------------+\n| User             |                  | User            |\n| +--------------+ |                  | +-------------+ |\n| | Profile      | |  +------------>  | | Posts       | |\n| |              | |                  | |             | |\n| +--------------+ |                  | +-------------+ |\n+------------------+                  +-----------------+\n```\n\n# 参考：\n\n[Vue.js官方文档](https://cn.vuejs.org/v2/guide/)\n\n[vue-router 2官方文档](http://router.vuejs.org/zh-cn/index.html)","source":"_posts/vue2.md","raw":"---\ntitle: Vue2.x踩坑与总结\ndate: 2017-02-07 21:41:02\ntags: vue\ncomments: true\ncategories: \"Vue\"\n---\n![](/img/vue2.jpg)\n> 年前就打算学习并总结一下vue2.x，但是因为年前工作比较多，所以进展十分缓慢，现在终于学了一大部分，而且自己在学习开发中也踩了不少坑也总结了不少，所以将自己踩过的坑总结一下分享出来。因为在项目中使用了webpack2.x，所以对于webpack2.x也有一个踩坑总结，[点击链接](http://mrzhang123.github.io/2017/02/07/webpack2/)。\n\n<!--more-->\n\n项目地址：[https://github.com/MrZhang123/Vue_project/tree/master/vue2.x](https://github.com/MrZhang123/Vue_project/tree/master/vue2.x)\n\n# vue2.x\n\n## 1.独立构建vs运行时构建\n\n在按照vue1.0的配置配置好webpack后，会出现`Failed to mount component: template or render function not defined. (found in root instance) `的错误，这里涉及到vue2.0与vue1.0的第一个不同的地方。具体区别[独立构建 vs 运行时构建](https://vuefe.cn/v2/guide/installation.html#独立构建-vs-运行时构建)。解决方法为在webpack配置文件中添加如下配置项：\n\n```js\nresolve: {\n  alias: {\n    'vue$': 'vue/dist/vue.common.js'\n  }\n}\n```\n\n## 2.挂载点的选择\n\n在原来的vue1.0的项目中我使用`body`元素作为挂载点，但是在vue2.0中，如果使用`body`或者`html`作为挂载点，则会报以下警告：`Do not mount Vue to <html> or <body> - mount to normal elements instead.`\n\n<font color='red'>在vue1.0中允许开发者以`body`或者`html`作为根实体的挂载点，但是到了2.0后，只能通过**独立的节点挂载**，例如：div等，否则报警告</font>\n\n## 3.动态组件渲染（跟1.x类似）\n\n多个组件可以使用同一个挂载点，然后动态地在它们之间切换。**使用保留的 <component> 元素**，动态地绑定到它的 is 特性：\n\n```html\n<!-- 动态组件由 vm 实例的属性值 `componentId` 控制 -->\n<component :is=\"componentId\"></component>\n<!-- 也能够渲染注册过的组件或 prop 传入的组件 -->\n<component :is=\"$options.components.child\"></component>\n```\n\n### `keep-alive`\n\n如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 `keep-alive` 指令参数：\n\n```html\n<keep-alive>\n  <component :is=\"currentView\">\n    <!-- 非活动组件将被缓存！ -->\n  </component>\n</keep-alive>\n```\n\n## 4.ref\n\n有时候需要直接在父组件中访问子组件实例，或者直接操作DOM元素，此时需要使用`ref`。\n\n`ref`被用来给元素或子元素注册引用信息。引用信息会根据父组件的`$refs`对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素，如果用在子组件上，引用信息就是组件实例。\n\n```html\n<!-- vm.$refs.p will be the DOM node -->\n<p ref=\"p\">hello</p>\n<!-- vm.$refs.child will be the child comp instance -->\n<child-comp ref=\"child\"></child-comp>\n```\n\n当 `v-for` 用于元素或组件的时候，引用信息将是包含DOM节点或组件实例数组。\n\n关于ref注册时间的重要说明: 因为ref本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！**`$refs` 也不是响应式的**，因此你不应该试图用它在模版中做数据绑定。\n\n## 5.自定义事件\n\n在vue自定义事件使用`$on`与`$emit`，前者用于触发监听，后者用于触发，监听可以有两种方式\n\n```html\n<!--使用v-on在html中监听-->\n<my-component v-on:test=\"callbackFun\"></my-component>\n<script>\n  //直接用$on监听\n  vm.$on('text',function(){})\n</script>\n```\n\n## 6.组件命名的约定\n\n当注册组件（或者 props）时，可以使用 kebab-case ，camelCase ，或 TitleCase \n\n```js\n// 在组件定义中\ncomponents: {\n  // 使用 kebab-case 形式注册\n  'kebab-cased-component': { /* ... */ },\n  // register using camelCase\n  'camelCasedComponent': { /* ... */ },\n  // register using TitleCase\n  'TitleCasedComponent': { /* ... */ }\n}\n```\n\n在 HTML 模版中，只能使用 kebab-case 形式：\n\n```html\n<!-- 在HTML模版中始终使用 kebab-case -->\n<kebab-cased-component></kebab-cased-component>\n<camel-cased-component></camel-cased-component>\n<title-cased-component></title-cased-component>\n```\n\n当使用**字符串模式**时可以使用 camelCase 、 TitleCase 或者 kebab-case 来引用：\n\n```html\n<!-- 在字符串模版中可以用任何你喜欢的方式! -->\n<my-component></my-component>\n<myComponent></myComponent>\n<MyComponent></MyComponent>\n```\n\n## 7.子组件中使用`this`\n\n有时候子组件简单，可以在父组件中直接注册，此时在子组件内使用`this`就是子组件实例并不是父组件，例如：\n\n```js\nexport default{\n    data(){\n        return{\n            parentMsg:'hello!'\n        }\n    },\n    components:{\n        child:{\n            props:['inputMessage'],\n            template:'<span>{{inputMessage}}</span>'\n        },\n        'child-secound':{\n            props:['inputMessage'],\n            template:'<span>{{upperCase}}</span>',\n            computed:{\n                upperCase(){\n                    return this.inputMessage.toUpperCase();\n                }\n            }    \n        }\n    }\n}\n```\n\n## 8.`key`的使用\n\n一般情况下，vue在渲染完成后，如果数据发生变化，只会重新渲染数据，不会重新渲染整个元素，但是有时候我们需要元素被重新渲染，此时就需要使用`key`关键字，使用`v-bind`绑定`key`关键字，可以实现在数据发生变化时候重新渲染整个元素。**注：**同一父级元素下所有子元素如果都要在数据变化后重新渲染元素，则需要被绑定的`key`\n\n## 9.`v-move`的使用\n\n在使用`<transition-group>`时候，不仅可以定义进入离开动画，还可以使用新增的`v-move`特性，与过渡一样，默认为`v-move`，可以用`name`进行自定义前缀，也可以用`move-class`属性手动设定。用了这个之后就可以实现移动过程中的动画。\n\n## 10.跳过css检测\n\n对于只使用js过度的元素使用`v-bind:css=\"false\"`跳过vue对css的检测。\n\n## render函数的使用\n\ncreateElement接受三个参数：\n\n- {String | Object | Function}即一个HTML标签 | 组件选项 | 一个函数，必须返回上述其中一个\n\n- {Object}一个对应HTML标签属性的数据对象（可选）\n\n- {String | Array}子节点（VNode）（可选）\n\n⚠️ 关于第三个参数的说明\n\n- createElement第三个参数，如果是String，则类似于innerHTML，如果是Array，则可以写入一个执行函数，这个函数用于创建另一个DOM结构（而且这里如果想写入一个执行函数，必须是数组！！）\n- 每个createElement只能创建一个元素，所以如果是创建多个元素相互嵌套，需要多个createElement函数相互嵌套，最后再render，这个跟原生js创建DOM元素类似\n- 如果需要同时渲染多个元素，则需要在第三个参数的数组中，分别写入需要渲染的元素，此时Vue会按照数组中**顺序**进行渲染\n\n完整数据对象：\n\n```js\n{\n  // 和`v-bind:class`一样的 API\n  'class': {\n    foo: true,\n    bar: false\n  },\n  // 和`v-bind:style`一样的 API\n  style: {\n    color: 'red',\n    fontSize: '14px'\n  },\n  // 正常的 HTML 特性\n  attrs: {\n    id: 'foo'\n  },\n  // 组件 props\n  props: {\n    myProp: 'bar'\n  },\n  // DOM 属性\n  domProps: {\n    innerHTML: 'baz'\n  },\n  // 事件监听器基于 \"on\"\n  // 所以不再支持如 v-on:keyup.enter 修饰器\n  // 需要手动匹配 keyCode。\n  on: {\n    click: this.clickHandler\n  },\n  // 仅对于组件，用于监听原生事件，而不是组件使用 vm.$emit 触发的事件。\n  nativeOn: {\n    click: this.nativeClickHandler\n  },\n  // 自定义指令. 注意事项：不能对绑定的旧值设值\n  // Vue 会为您持续追踨\n  directives: [\n    {\n      name: 'my-custom-directive',\n      value: '2'\n      expression: '1 + 1',\n      arg: 'foo',\n      modifiers: {\n        bar: true\n      }\n    }\n  ],\n  // Scoped slots in the form of\n  // { name: props => VNode | Array<VNode> }\n  scopedSlots: {\n    default: props => h('span', props.text)\n  },\n  // 如果子组件有定义 slot 的名称\n  slot: 'name-of-slot'\n  // 其他特殊顶层属性\n  key: 'myKey',\n  ref: 'myRef'\n}\n```\n\n# vue-router2.x\n\n## 1.router-view\n\n在vue-router2中`<router-view>`是最顶层的出口，渲染最高级路由匹配到组件。同样地，一个被渲染组件同样可以包含自己的嵌套`<router-view>`。\n\n## 2.挂载\n\n在router1.0中，挂载节点的方式为`router.start()`而在router2.0中使用vue自己的`$mount`手动挂载\n\n## 3.给link添加事件\n\n在vue-router1中使用`v-link`写入路由，但是在vue-router2中要使用`router-link`写入路由，在浏览器渲染的时候会把`router-link`渲染成`a`。\n\n有时候需要为`router-link`注册事件，对于一般的html元素，直接使用`@click=\"eventFun\"`即可，但是对于`router-link`，像普通html元素那样注册事件后并不管用，**需要添加`.native`才会成功注册**。\n\n事实上给**组件绑定原生事件**就需要`.native`修饰`v-on`，否则无法注册成功。\n\n```html\n<my-component v-on:click.native=\"doTheThing\"></my-component>\n```\n\n## 4.利用vue-router做导航\n\n在利用vue-router做导航的时候，需要用到`redirect`关键字的重定向功能，具体写法如下：\n\n```js\nconst router = new VueRouter({\n    routes : [\n        {path:'/',redirect:'/ZY'},\n        {path:'/ZY',component:ZY}\n    ]\n});\n```\n\n## 5.路由嵌套\n\nvue-router的路由嵌套指的是**子组件会在父组件中渲染出来**，必须是子组件的父组件，祖先不可以实现，例如：\n\n```shell\n/user/foo/profile                     /user/foo/posts\n+------------------+                  +-----------------+\n| User             |                  | User            |\n| +--------------+ |                  | +-------------+ |\n| | Profile      | |  +------------>  | | Posts       | |\n| |              | |                  | |             | |\n| +--------------+ |                  | +-------------+ |\n+------------------+                  +-----------------+\n```\n\n# 参考：\n\n[Vue.js官方文档](https://cn.vuejs.org/v2/guide/)\n\n[vue-router 2官方文档](http://router.vuejs.org/zh-cn/index.html)","slug":"vue2","published":1,"updated":"2017-02-07T14:17:10.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoce0043zrv4pjnpcork","content":"<p><img src=\"/img/vue2.jpg\" alt=\"\"></p>\n<blockquote>\n<p>年前就打算学习并总结一下vue2.x，但是因为年前工作比较多，所以进展十分缓慢，现在终于学了一大部分，而且自己在学习开发中也踩了不少坑也总结了不少，所以将自己踩过的坑总结一下分享出来。因为在项目中使用了webpack2.x，所以对于webpack2.x也有一个踩坑总结，<a href=\"http://mrzhang123.github.io/2017/02/07/webpack2/\">点击链接</a>。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>项目地址：<a href=\"https://github.com/MrZhang123/Vue_project/tree/master/vue2.x\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/Vue_project/tree/master/vue2.x</a></p>\n<h1 id=\"vue2-x\"><a href=\"#vue2-x\" class=\"headerlink\" title=\"vue2.x\"></a>vue2.x</h1><h2 id=\"1-独立构建vs运行时构建\"><a href=\"#1-独立构建vs运行时构建\" class=\"headerlink\" title=\"1.独立构建vs运行时构建\"></a>1.独立构建vs运行时构建</h2><p>在按照vue1.0的配置配置好webpack后，会出现<code>Failed to mount component: template or render function not defined. (found in root instance)</code>的错误，这里涉及到vue2.0与vue1.0的第一个不同的地方。具体区别<a href=\"https://vuefe.cn/v2/guide/installation.html#独立构建-vs-运行时构建\" target=\"_blank\" rel=\"noopener\">独立构建 vs 运行时构建</a>。解决方法为在webpack配置文件中添加如下配置项：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.common.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-挂载点的选择\"><a href=\"#2-挂载点的选择\" class=\"headerlink\" title=\"2.挂载点的选择\"></a>2.挂载点的选择</h2><p>在原来的vue1.0的项目中我使用<code>body</code>元素作为挂载点，但是在vue2.0中，如果使用<code>body</code>或者<code>html</code>作为挂载点，则会报以下警告：<code>Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.</code></p>\n<font color=\"red\">在vue1.0中允许开发者以<code>body</code>或者<code>html</code>作为根实体的挂载点，但是到了2.0后，只能通过<strong>独立的节点挂载</strong>，例如：div等，否则报警告</font>\n\n<h2 id=\"3-动态组件渲染（跟1-x类似）\"><a href=\"#3-动态组件渲染（跟1-x类似）\" class=\"headerlink\" title=\"3.动态组件渲染（跟1.x类似）\"></a>3.动态组件渲染（跟1.x类似）</h2><p>多个组件可以使用同一个挂载点，然后动态地在它们之间切换。<strong>使用保留的 <component> 元素</component></strong>，动态地绑定到它的 is 特性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 动态组件由 vm 实例的属性值 `componentId` 控制 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"componentId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 也能够渲染注册过的组件或 prop 传入的组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"$options.components.child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a><code>keep-alive</code></h3><p>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 <code>keep-alive</code> 指令参数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 非活动组件将被缓存！ --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-ref\"><a href=\"#4-ref\" class=\"headerlink\" title=\"4.ref\"></a>4.ref</h2><p>有时候需要直接在父组件中访问子组件实例，或者直接操作DOM元素，此时需要使用<code>ref</code>。</p>\n<p><code>ref</code>被用来给元素或子元素注册引用信息。引用信息会根据父组件的<code>$refs</code>对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素，如果用在子组件上，引用信息就是组件实例。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will be the DOM node --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child comp instance --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-comp</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-comp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当 <code>v-for</code> 用于元素或组件的时候，引用信息将是包含DOM节点或组件实例数组。</p>\n<p>关于ref注册时间的重要说明: 因为ref本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！<strong><code>$refs</code> 也不是响应式的</strong>，因此你不应该试图用它在模版中做数据绑定。</p>\n<h2 id=\"5-自定义事件\"><a href=\"#5-自定义事件\" class=\"headerlink\" title=\"5.自定义事件\"></a>5.自定义事件</h2><p>在vue自定义事件使用<code>$on</code>与<code>$emit</code>，前者用于触发监听，后者用于触发，监听可以有两种方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--使用v-on在html中监听--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:test</span>=<span class=\"string\">\"callbackFun\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//直接用$on监听</span></span></span><br><span class=\"line\"><span class=\"javascript\">  vm.$on(<span class=\"string\">'text'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-组件命名的约定\"><a href=\"#6-组件命名的约定\" class=\"headerlink\" title=\"6.组件命名的约定\"></a>6.组件命名的约定</h2><p>当注册组件（或者 props）时，可以使用 kebab-case ，camelCase ，或 TitleCase </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件定义中</span></span><br><span class=\"line\">components: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 kebab-case 形式注册</span></span><br><span class=\"line\">  <span class=\"string\">'kebab-cased-component'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// register using camelCase</span></span><br><span class=\"line\">  <span class=\"string\">'camelCasedComponent'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// register using TitleCase</span></span><br><span class=\"line\">  <span class=\"string\">'TitleCasedComponent'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 HTML 模版中，只能使用 kebab-case 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在HTML模版中始终使用 kebab-case --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">kebab-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">kebab-cased-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">camel-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">camel-cased-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title-cased-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当使用<strong>字符串模式</strong>时可以使用 camelCase 、 TitleCase 或者 kebab-case 来引用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在字符串模版中可以用任何你喜欢的方式! --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">myComponent</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-子组件中使用this\"><a href=\"#7-子组件中使用this\" class=\"headerlink\" title=\"7.子组件中使用this\"></a>7.子组件中使用<code>this</code></h2><p>有时候子组件简单，可以在父组件中直接注册，此时在子组件内使用<code>this</code>就是子组件实例并不是父组件，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            parentMsg:<span class=\"string\">'hello!'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">        child:&#123;</span><br><span class=\"line\">            props:[<span class=\"string\">'inputMessage'</span>],</span><br><span class=\"line\">            template:<span class=\"string\">'&lt;span&gt;&#123;&#123;inputMessage&#125;&#125;&lt;/span&gt;'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'child-secound'</span>:&#123;</span><br><span class=\"line\">            props:[<span class=\"string\">'inputMessage'</span>],</span><br><span class=\"line\">            template:<span class=\"string\">'&lt;span&gt;&#123;&#123;upperCase&#125;&#125;&lt;/span&gt;'</span>,</span><br><span class=\"line\">            computed:&#123;</span><br><span class=\"line\">                upperCase()&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inputMessage.toUpperCase();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-key的使用\"><a href=\"#8-key的使用\" class=\"headerlink\" title=\"8.key的使用\"></a>8.<code>key</code>的使用</h2><p>一般情况下，vue在渲染完成后，如果数据发生变化，只会重新渲染数据，不会重新渲染整个元素，但是有时候我们需要元素被重新渲染，此时就需要使用<code>key</code>关键字，使用<code>v-bind</code>绑定<code>key</code>关键字，可以实现在数据发生变化时候重新渲染整个元素。<strong>注：</strong>同一父级元素下所有子元素如果都要在数据变化后重新渲染元素，则需要被绑定的<code>key</code></p>\n<h2 id=\"9-v-move的使用\"><a href=\"#9-v-move的使用\" class=\"headerlink\" title=\"9.v-move的使用\"></a>9.<code>v-move</code>的使用</h2><p>在使用<code>&lt;transition-group&gt;</code>时候，不仅可以定义进入离开动画，还可以使用新增的<code>v-move</code>特性，与过渡一样，默认为<code>v-move</code>，可以用<code>name</code>进行自定义前缀，也可以用<code>move-class</code>属性手动设定。用了这个之后就可以实现移动过程中的动画。</p>\n<h2 id=\"10-跳过css检测\"><a href=\"#10-跳过css检测\" class=\"headerlink\" title=\"10.跳过css检测\"></a>10.跳过css检测</h2><p>对于只使用js过度的元素使用<code>v-bind:css=&quot;false&quot;</code>跳过vue对css的检测。</p>\n<h2 id=\"render函数的使用\"><a href=\"#render函数的使用\" class=\"headerlink\" title=\"render函数的使用\"></a>render函数的使用</h2><p>createElement接受三个参数：</p>\n<ul>\n<li><p>{String | Object | Function}即一个HTML标签 | 组件选项 | 一个函数，必须返回上述其中一个</p>\n</li>\n<li><p>{Object}一个对应HTML标签属性的数据对象（可选）</p>\n</li>\n<li><p>{String | Array}子节点（VNode）（可选）</p>\n</li>\n</ul>\n<p>⚠️ 关于第三个参数的说明</p>\n<ul>\n<li>createElement第三个参数，如果是String，则类似于innerHTML，如果是Array，则可以写入一个执行函数，这个函数用于创建另一个DOM结构（而且这里如果想写入一个执行函数，必须是数组！！）</li>\n<li>每个createElement只能创建一个元素，所以如果是创建多个元素相互嵌套，需要多个createElement函数相互嵌套，最后再render，这个跟原生js创建DOM元素类似</li>\n<li>如果需要同时渲染多个元素，则需要在第三个参数的数组中，分别写入需要渲染的元素，此时Vue会按照数组中<strong>顺序</strong>进行渲染</li>\n</ul>\n<p>完整数据对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 和`v-bind:class`一样的 API</span></span><br><span class=\"line\">  <span class=\"string\">'class'</span>: &#123;</span><br><span class=\"line\">    foo: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    bar: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 和`v-bind:style`一样的 API</span></span><br><span class=\"line\">  style: &#123;</span><br><span class=\"line\">    color: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">    fontSize: <span class=\"string\">'14px'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 正常的 HTML 特性</span></span><br><span class=\"line\">  attrs: &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'foo'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 组件 props</span></span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    myProp: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// DOM 属性</span></span><br><span class=\"line\">  domProps: &#123;</span><br><span class=\"line\">    innerHTML: <span class=\"string\">'baz'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 事件监听器基于 \"on\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以不再支持如 v-on:keyup.enter 修饰器</span></span><br><span class=\"line\">  <span class=\"comment\">// 需要手动匹配 keyCode。</span></span><br><span class=\"line\">  on: &#123;</span><br><span class=\"line\">    click: <span class=\"keyword\">this</span>.clickHandler</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 仅对于组件，用于监听原生事件，而不是组件使用 vm.$emit 触发的事件。</span></span><br><span class=\"line\">  nativeOn: &#123;</span><br><span class=\"line\">    click: <span class=\"keyword\">this</span>.nativeClickHandler</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 自定义指令. 注意事项：不能对绑定的旧值设值</span></span><br><span class=\"line\">  <span class=\"comment\">// Vue 会为您持续追踨</span></span><br><span class=\"line\">  directives: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'my-custom-directive'</span>,</span><br><span class=\"line\">      value: <span class=\"string\">'2'</span></span><br><span class=\"line\">      expression: <span class=\"string\">'1 + 1'</span>,</span><br><span class=\"line\">      arg: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">      modifiers: &#123;</span><br><span class=\"line\">        bar: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">// Scoped slots in the form of</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class=\"line\">  scopedSlots: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> h(<span class=\"string\">'span'</span>, props.text)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 如果子组件有定义 slot 的名称</span></span><br><span class=\"line\">  slot: <span class=\"string\">'name-of-slot'</span></span><br><span class=\"line\">  <span class=\"comment\">// 其他特殊顶层属性</span></span><br><span class=\"line\">  key: <span class=\"string\">'myKey'</span>,</span><br><span class=\"line\">  ref: <span class=\"string\">'myRef'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue-router2-x\"><a href=\"#vue-router2-x\" class=\"headerlink\" title=\"vue-router2.x\"></a>vue-router2.x</h1><h2 id=\"1-router-view\"><a href=\"#1-router-view\" class=\"headerlink\" title=\"1.router-view\"></a>1.router-view</h2><p>在vue-router2中<code>&lt;router-view&gt;</code>是最顶层的出口，渲染最高级路由匹配到组件。同样地，一个被渲染组件同样可以包含自己的嵌套<code>&lt;router-view&gt;</code>。</p>\n<h2 id=\"2-挂载\"><a href=\"#2-挂载\" class=\"headerlink\" title=\"2.挂载\"></a>2.挂载</h2><p>在router1.0中，挂载节点的方式为<code>router.start()</code>而在router2.0中使用vue自己的<code>$mount</code>手动挂载</p>\n<h2 id=\"3-给link添加事件\"><a href=\"#3-给link添加事件\" class=\"headerlink\" title=\"3.给link添加事件\"></a>3.给link添加事件</h2><p>在vue-router1中使用<code>v-link</code>写入路由，但是在vue-router2中要使用<code>router-link</code>写入路由，在浏览器渲染的时候会把<code>router-link</code>渲染成<code>a</code>。</p>\n<p>有时候需要为<code>router-link</code>注册事件，对于一般的html元素，直接使用<code>@click=&quot;eventFun&quot;</code>即可，但是对于<code>router-link</code>，像普通html元素那样注册事件后并不管用，<strong>需要添加<code>.native</code>才会成功注册</strong>。</p>\n<p>事实上给<strong>组件绑定原生事件</strong>就需要<code>.native</code>修饰<code>v-on</code>，否则无法注册成功。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:click.native</span>=<span class=\"string\">\"doTheThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-利用vue-router做导航\"><a href=\"#4-利用vue-router做导航\" class=\"headerlink\" title=\"4.利用vue-router做导航\"></a>4.利用vue-router做导航</h2><p>在利用vue-router做导航的时候，需要用到<code>redirect</code>关键字的重定向功能，具体写法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes : [</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/'</span>,<span class=\"attr\">redirect</span>:<span class=\"string\">'/ZY'</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/ZY'</span>,<span class=\"attr\">component</span>:ZY&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-路由嵌套\"><a href=\"#5-路由嵌套\" class=\"headerlink\" title=\"5.路由嵌套\"></a>5.路由嵌套</h2><p>vue-router的路由嵌套指的是<strong>子组件会在父组件中渲染出来</strong>，必须是子组件的父组件，祖先不可以实现，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/user/foo/profile                     /user/foo/posts</span><br><span class=\"line\">+------------------+                  +-----------------+</span><br><span class=\"line\">| User             |                  | User            |</span><br><span class=\"line\">| +--------------+ |                  | +-------------+ |</span><br><span class=\"line\">| | Profile      | |  +------------&gt;  | | Posts       | |</span><br><span class=\"line\">| |              | |                  | |             | |</span><br><span class=\"line\">| +--------------+ |                  | +-------------+ |</span><br><span class=\"line\">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"https://cn.vuejs.org/v2/guide/\" target=\"_blank\" rel=\"noopener\">Vue.js官方文档</a></p>\n<p><a href=\"http://router.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">vue-router 2官方文档</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/vue2.jpg\" alt=\"\"></p>\n<blockquote>\n<p>年前就打算学习并总结一下vue2.x，但是因为年前工作比较多，所以进展十分缓慢，现在终于学了一大部分，而且自己在学习开发中也踩了不少坑也总结了不少，所以将自己踩过的坑总结一下分享出来。因为在项目中使用了webpack2.x，所以对于webpack2.x也有一个踩坑总结，<a href=\"http://mrzhang123.github.io/2017/02/07/webpack2/\">点击链接</a>。</p>\n</blockquote>","more":"<p>项目地址：<a href=\"https://github.com/MrZhang123/Vue_project/tree/master/vue2.x\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/Vue_project/tree/master/vue2.x</a></p>\n<h1 id=\"vue2-x\"><a href=\"#vue2-x\" class=\"headerlink\" title=\"vue2.x\"></a>vue2.x</h1><h2 id=\"1-独立构建vs运行时构建\"><a href=\"#1-独立构建vs运行时构建\" class=\"headerlink\" title=\"1.独立构建vs运行时构建\"></a>1.独立构建vs运行时构建</h2><p>在按照vue1.0的配置配置好webpack后，会出现<code>Failed to mount component: template or render function not defined. (found in root instance)</code>的错误，这里涉及到vue2.0与vue1.0的第一个不同的地方。具体区别<a href=\"https://vuefe.cn/v2/guide/installation.html#独立构建-vs-运行时构建\" target=\"_blank\" rel=\"noopener\">独立构建 vs 运行时构建</a>。解决方法为在webpack配置文件中添加如下配置项：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.common.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-挂载点的选择\"><a href=\"#2-挂载点的选择\" class=\"headerlink\" title=\"2.挂载点的选择\"></a>2.挂载点的选择</h2><p>在原来的vue1.0的项目中我使用<code>body</code>元素作为挂载点，但是在vue2.0中，如果使用<code>body</code>或者<code>html</code>作为挂载点，则会报以下警告：<code>Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.</code></p>\n<font color=\"red\">在vue1.0中允许开发者以<code>body</code>或者<code>html</code>作为根实体的挂载点，但是到了2.0后，只能通过<strong>独立的节点挂载</strong>，例如：div等，否则报警告</font>\n\n<h2 id=\"3-动态组件渲染（跟1-x类似）\"><a href=\"#3-动态组件渲染（跟1-x类似）\" class=\"headerlink\" title=\"3.动态组件渲染（跟1.x类似）\"></a>3.动态组件渲染（跟1.x类似）</h2><p>多个组件可以使用同一个挂载点，然后动态地在它们之间切换。<strong>使用保留的 <component> 元素</component></strong>，动态地绑定到它的 is 特性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 动态组件由 vm 实例的属性值 `componentId` 控制 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"componentId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 也能够渲染注册过的组件或 prop 传入的组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"$options.components.child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a><code>keep-alive</code></h3><p>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 <code>keep-alive</code> 指令参数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">\"currentView\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 非活动组件将被缓存！ --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-ref\"><a href=\"#4-ref\" class=\"headerlink\" title=\"4.ref\"></a>4.ref</h2><p>有时候需要直接在父组件中访问子组件实例，或者直接操作DOM元素，此时需要使用<code>ref</code>。</p>\n<p><code>ref</code>被用来给元素或子元素注册引用信息。引用信息会根据父组件的<code>$refs</code>对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素，如果用在子组件上，引用信息就是组件实例。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.p will be the DOM node --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"p\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- vm.$refs.child will be the child comp instance --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child-comp</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-comp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当 <code>v-for</code> 用于元素或组件的时候，引用信息将是包含DOM节点或组件实例数组。</p>\n<p>关于ref注册时间的重要说明: 因为ref本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！<strong><code>$refs</code> 也不是响应式的</strong>，因此你不应该试图用它在模版中做数据绑定。</p>\n<h2 id=\"5-自定义事件\"><a href=\"#5-自定义事件\" class=\"headerlink\" title=\"5.自定义事件\"></a>5.自定义事件</h2><p>在vue自定义事件使用<code>$on</code>与<code>$emit</code>，前者用于触发监听，后者用于触发，监听可以有两种方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--使用v-on在html中监听--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:test</span>=<span class=\"string\">\"callbackFun\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//直接用$on监听</span></span></span><br><span class=\"line\"><span class=\"javascript\">  vm.$on(<span class=\"string\">'text'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-组件命名的约定\"><a href=\"#6-组件命名的约定\" class=\"headerlink\" title=\"6.组件命名的约定\"></a>6.组件命名的约定</h2><p>当注册组件（或者 props）时，可以使用 kebab-case ，camelCase ，或 TitleCase </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件定义中</span></span><br><span class=\"line\">components: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 kebab-case 形式注册</span></span><br><span class=\"line\">  <span class=\"string\">'kebab-cased-component'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// register using camelCase</span></span><br><span class=\"line\">  <span class=\"string\">'camelCasedComponent'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// register using TitleCase</span></span><br><span class=\"line\">  <span class=\"string\">'TitleCasedComponent'</span>: &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 HTML 模版中，只能使用 kebab-case 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在HTML模版中始终使用 kebab-case --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">kebab-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">kebab-cased-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">camel-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">camel-cased-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title-cased-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title-cased-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当使用<strong>字符串模式</strong>时可以使用 camelCase 、 TitleCase 或者 kebab-case 来引用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在字符串模版中可以用任何你喜欢的方式! --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">myComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">myComponent</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-子组件中使用this\"><a href=\"#7-子组件中使用this\" class=\"headerlink\" title=\"7.子组件中使用this\"></a>7.子组件中使用<code>this</code></h2><p>有时候子组件简单，可以在父组件中直接注册，此时在子组件内使用<code>this</code>就是子组件实例并不是父组件，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            parentMsg:<span class=\"string\">'hello!'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">        child:&#123;</span><br><span class=\"line\">            props:[<span class=\"string\">'inputMessage'</span>],</span><br><span class=\"line\">            template:<span class=\"string\">'&lt;span&gt;&#123;&#123;inputMessage&#125;&#125;&lt;/span&gt;'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'child-secound'</span>:&#123;</span><br><span class=\"line\">            props:[<span class=\"string\">'inputMessage'</span>],</span><br><span class=\"line\">            template:<span class=\"string\">'&lt;span&gt;&#123;&#123;upperCase&#125;&#125;&lt;/span&gt;'</span>,</span><br><span class=\"line\">            computed:&#123;</span><br><span class=\"line\">                upperCase()&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inputMessage.toUpperCase();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-key的使用\"><a href=\"#8-key的使用\" class=\"headerlink\" title=\"8.key的使用\"></a>8.<code>key</code>的使用</h2><p>一般情况下，vue在渲染完成后，如果数据发生变化，只会重新渲染数据，不会重新渲染整个元素，但是有时候我们需要元素被重新渲染，此时就需要使用<code>key</code>关键字，使用<code>v-bind</code>绑定<code>key</code>关键字，可以实现在数据发生变化时候重新渲染整个元素。<strong>注：</strong>同一父级元素下所有子元素如果都要在数据变化后重新渲染元素，则需要被绑定的<code>key</code></p>\n<h2 id=\"9-v-move的使用\"><a href=\"#9-v-move的使用\" class=\"headerlink\" title=\"9.v-move的使用\"></a>9.<code>v-move</code>的使用</h2><p>在使用<code>&lt;transition-group&gt;</code>时候，不仅可以定义进入离开动画，还可以使用新增的<code>v-move</code>特性，与过渡一样，默认为<code>v-move</code>，可以用<code>name</code>进行自定义前缀，也可以用<code>move-class</code>属性手动设定。用了这个之后就可以实现移动过程中的动画。</p>\n<h2 id=\"10-跳过css检测\"><a href=\"#10-跳过css检测\" class=\"headerlink\" title=\"10.跳过css检测\"></a>10.跳过css检测</h2><p>对于只使用js过度的元素使用<code>v-bind:css=&quot;false&quot;</code>跳过vue对css的检测。</p>\n<h2 id=\"render函数的使用\"><a href=\"#render函数的使用\" class=\"headerlink\" title=\"render函数的使用\"></a>render函数的使用</h2><p>createElement接受三个参数：</p>\n<ul>\n<li><p>{String | Object | Function}即一个HTML标签 | 组件选项 | 一个函数，必须返回上述其中一个</p>\n</li>\n<li><p>{Object}一个对应HTML标签属性的数据对象（可选）</p>\n</li>\n<li><p>{String | Array}子节点（VNode）（可选）</p>\n</li>\n</ul>\n<p>⚠️ 关于第三个参数的说明</p>\n<ul>\n<li>createElement第三个参数，如果是String，则类似于innerHTML，如果是Array，则可以写入一个执行函数，这个函数用于创建另一个DOM结构（而且这里如果想写入一个执行函数，必须是数组！！）</li>\n<li>每个createElement只能创建一个元素，所以如果是创建多个元素相互嵌套，需要多个createElement函数相互嵌套，最后再render，这个跟原生js创建DOM元素类似</li>\n<li>如果需要同时渲染多个元素，则需要在第三个参数的数组中，分别写入需要渲染的元素，此时Vue会按照数组中<strong>顺序</strong>进行渲染</li>\n</ul>\n<p>完整数据对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 和`v-bind:class`一样的 API</span></span><br><span class=\"line\">  <span class=\"string\">'class'</span>: &#123;</span><br><span class=\"line\">    foo: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    bar: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 和`v-bind:style`一样的 API</span></span><br><span class=\"line\">  style: &#123;</span><br><span class=\"line\">    color: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">    fontSize: <span class=\"string\">'14px'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 正常的 HTML 特性</span></span><br><span class=\"line\">  attrs: &#123;</span><br><span class=\"line\">    id: <span class=\"string\">'foo'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 组件 props</span></span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    myProp: <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// DOM 属性</span></span><br><span class=\"line\">  domProps: &#123;</span><br><span class=\"line\">    innerHTML: <span class=\"string\">'baz'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 事件监听器基于 \"on\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以不再支持如 v-on:keyup.enter 修饰器</span></span><br><span class=\"line\">  <span class=\"comment\">// 需要手动匹配 keyCode。</span></span><br><span class=\"line\">  on: &#123;</span><br><span class=\"line\">    click: <span class=\"keyword\">this</span>.clickHandler</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 仅对于组件，用于监听原生事件，而不是组件使用 vm.$emit 触发的事件。</span></span><br><span class=\"line\">  nativeOn: &#123;</span><br><span class=\"line\">    click: <span class=\"keyword\">this</span>.nativeClickHandler</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 自定义指令. 注意事项：不能对绑定的旧值设值</span></span><br><span class=\"line\">  <span class=\"comment\">// Vue 会为您持续追踨</span></span><br><span class=\"line\">  directives: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'my-custom-directive'</span>,</span><br><span class=\"line\">      value: <span class=\"string\">'2'</span></span><br><span class=\"line\">      expression: <span class=\"string\">'1 + 1'</span>,</span><br><span class=\"line\">      arg: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">      modifiers: &#123;</span><br><span class=\"line\">        bar: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">// Scoped slots in the form of</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class=\"line\">  scopedSlots: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> h(<span class=\"string\">'span'</span>, props.text)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 如果子组件有定义 slot 的名称</span></span><br><span class=\"line\">  slot: <span class=\"string\">'name-of-slot'</span></span><br><span class=\"line\">  <span class=\"comment\">// 其他特殊顶层属性</span></span><br><span class=\"line\">  key: <span class=\"string\">'myKey'</span>,</span><br><span class=\"line\">  ref: <span class=\"string\">'myRef'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue-router2-x\"><a href=\"#vue-router2-x\" class=\"headerlink\" title=\"vue-router2.x\"></a>vue-router2.x</h1><h2 id=\"1-router-view\"><a href=\"#1-router-view\" class=\"headerlink\" title=\"1.router-view\"></a>1.router-view</h2><p>在vue-router2中<code>&lt;router-view&gt;</code>是最顶层的出口，渲染最高级路由匹配到组件。同样地，一个被渲染组件同样可以包含自己的嵌套<code>&lt;router-view&gt;</code>。</p>\n<h2 id=\"2-挂载\"><a href=\"#2-挂载\" class=\"headerlink\" title=\"2.挂载\"></a>2.挂载</h2><p>在router1.0中，挂载节点的方式为<code>router.start()</code>而在router2.0中使用vue自己的<code>$mount</code>手动挂载</p>\n<h2 id=\"3-给link添加事件\"><a href=\"#3-给link添加事件\" class=\"headerlink\" title=\"3.给link添加事件\"></a>3.给link添加事件</h2><p>在vue-router1中使用<code>v-link</code>写入路由，但是在vue-router2中要使用<code>router-link</code>写入路由，在浏览器渲染的时候会把<code>router-link</code>渲染成<code>a</code>。</p>\n<p>有时候需要为<code>router-link</code>注册事件，对于一般的html元素，直接使用<code>@click=&quot;eventFun&quot;</code>即可，但是对于<code>router-link</code>，像普通html元素那样注册事件后并不管用，<strong>需要添加<code>.native</code>才会成功注册</strong>。</p>\n<p>事实上给<strong>组件绑定原生事件</strong>就需要<code>.native</code>修饰<code>v-on</code>，否则无法注册成功。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-on:click.native</span>=<span class=\"string\">\"doTheThing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-利用vue-router做导航\"><a href=\"#4-利用vue-router做导航\" class=\"headerlink\" title=\"4.利用vue-router做导航\"></a>4.利用vue-router做导航</h2><p>在利用vue-router做导航的时候，需要用到<code>redirect</code>关键字的重定向功能，具体写法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes : [</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/'</span>,<span class=\"attr\">redirect</span>:<span class=\"string\">'/ZY'</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/ZY'</span>,<span class=\"attr\">component</span>:ZY&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-路由嵌套\"><a href=\"#5-路由嵌套\" class=\"headerlink\" title=\"5.路由嵌套\"></a>5.路由嵌套</h2><p>vue-router的路由嵌套指的是<strong>子组件会在父组件中渲染出来</strong>，必须是子组件的父组件，祖先不可以实现，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/user/foo/profile                     /user/foo/posts</span><br><span class=\"line\">+------------------+                  +-----------------+</span><br><span class=\"line\">| User             |                  | User            |</span><br><span class=\"line\">| +--------------+ |                  | +-------------+ |</span><br><span class=\"line\">| | Profile      | |  +------------&gt;  | | Posts       | |</span><br><span class=\"line\">| |              | |                  | |             | |</span><br><span class=\"line\">| +--------------+ |                  | +-------------+ |</span><br><span class=\"line\">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"https://cn.vuejs.org/v2/guide/\" target=\"_blank\" rel=\"noopener\">Vue.js官方文档</a></p>\n<p><a href=\"http://router.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">vue-router 2官方文档</a></p>"},{"title":"webpack与vue起步","date":"2016-05-31T13:37:08.000Z","comments":1,"_content":"> 记得第一次知道Vue.js是在勾三股四大大的微博，那时候他开始翻译vue的文档，从那时候开始到现在，看了几次vue的教程，每次都有更深的理解，因为之前并没有研究过angular等框架，所以对MVVM并不是很了解，但是经过这段时间对vuejs的一些研究，越来越懂了，这篇文章，只是对vuejs和webpack配合的非常基础的文章，我想随着我对vue的深入理解，会对组件化，模块化，MVVM有更深入的理解。\n\n## 项目的创建\n1.新建项目文件夹，并在其中建立`package.json`\n```js\n$ mkdir [project name]\n$ cd [project name]\n$ npm init\n```\n<!--more-->\n2.在项目目录下新建`index.html`\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Vue example</title>\n</head>\n<body>\n    <div>{{message}}</div>\n    <script src=\"dist/build.js\"></script>\n</body>\n</html>\n```\nsrc文件夹，并在该文件夹下建立`main.js`\n```javascript\nimport Vue from 'vue'\nnew Vue({\n    el:'body',\n    data:{\n        message:'test success!'\n    }\n});\n```\n## 设置webpack\n### 1.安装webpack，webpack-dev-server以及相关的loaders\n```php\n# 全局安装webpack，webpack-dev-server\n$ npm install -g webpack\n$ npm install -g webpack-dev-server\n# 为项目安装其他依赖\n$ npm i webpack-merge css-loader style-loader file-loader url-loader babel-core babel-loader babel-plugin-transform-runtime babel-preset-es2015 babel-preset-stage-0 babel-runtime vue vue-loader vue-html-loader vue-style-loader vue-hot-reload-api -D\n```\nwebpack-merge：开发环境和生产环节的webpaak配置文件的配置合并<br/>\ncss-loader：编译写入css<br/>\nstyle-loader：把编译后的css整合进html<br/>\nfile-loader：编译写入文件，默认情况下生成文件的文件名是文件名与MD5哈希值的组合<br/>\nvue：vue主程序<br/>\nvue-laoder：编译写入.vue文件<br/>\nvue-html-loader：编译vue的template部分<br/>\nvue-style-loader：编译vue的样式部分<br/>\nvue-hot-reload-api：webpack对vue实现热替换<br/>\nbabel-core：ES2015编译核心<br/>\nbabel-loader：编译写入ES2015文档<br/>\nbabel-preset-es2015：ES2015语法<br/>\nbabel-preset-stage-0：开启测试功能<br/>\nbabel-runtime：babel执行环境<br/>\n#### url-loader\n这里介绍下url-loader，这个loader实际上是对file-loader的封装[https://github.com/webpack/url-loader](https://github.com/webpack/url-loader)\n比如CSS文件中有时候会这么写：\n```css\n.demo{\n    background-image: url('a.png');\n}\n```\n```javascript\nmodule:{\n    loaders:[\n        {test:/\\.(png|jpg)$/,loader:'url-loader?limit=8192'}\n    ]\n}\n```\n经过以上配置，当a.png小于8K就会自动将图片转换成base64编码，如果不小于，则不会转换。\n**这里顺便提一句，在module配置的时候，loader的写法：**\n```javascript\nmodule:{\n    loaders:[\n        {test:/\\.jade$/,loader:'jade'}\n        //这里配置了让webpack识别jade的loader，其他类似，比如.vue\n        //用于css文件的loader有两种写法\n        {test:/\\.css$/,loader:'style!css'}\n        {test:/\\.css$/,loaders:['style','css']}\n    ]\n}\n```\n### 2.配置`webpack.config.js`\n在根目录下建立webpack.config.js，配置如下：\n```js\nvar path = require('path');\nmodule.exports = {\n  entry: './src/main.js',\n  //定义webpack输出的文件，我们在这里设置了\n  让打包后生成的文件放在dist文件夹下的build.js文件中\n  output: {\n    path: './dist',\n    publicPath:'dist/',\n    filename: 'build.js'\n  },\n  module: {\n    loaders: [\n      //转化ES6语法\n      {\n        test: /\\.js$/,\n        loader: 'babel',\n        exclude: /node_modules/\n      },\n      //图片转化，小于8K自动转化为base64的编码\n      {\n        test: /\\.(png|jpg|gif)$/,\n        loader:'url-loader?limit=8192'\n      }\n    ]\n  },\n  //这里用于安装babel，如果在根目录下的.babelrc配置了，这里就不写了\n  babel: {\n     presets: ['es2015','stage-0'],\n     plugins: ['transform-runtime']\n  }\n}\n```\n**特别说明**\n如果要在.babelrc下配置babel，则需要在根目录下新建该文件，windows环境下，不能新建该txt文件然后改后缀，需要通过dos命令建立：\n```php\necho>.babelrc\n```\n通过该命令就可以建立babelde配置文件，用编辑器打开，修改里面的内容为：\n```js\n{\n  \"presets\": [\"es2015\", \"stage-0\"],\n  \"plugins\": [\"transform-runtime\"]\n}\n```\n完成该配置我们在命令中运行\n```js\n$ webpack\n```\n打开`index.html`就可以看到浏览器中看到我们刚刚写的文字\n至此我们实现了最基本的利用webpack打包vue，下一篇将讲解[如何利用webpack+vue真正实现组件化](https://segmentfault.com/a/1190000005616974)。\n\n","source":"_posts/webpack-vue-2.md","raw":"---\ntitle: webpack与vue起步\ndate: 2016-05-31 21:37:08\ntags: vue\ncomments: true\ncategories: \"Vue\"\n---\n> 记得第一次知道Vue.js是在勾三股四大大的微博，那时候他开始翻译vue的文档，从那时候开始到现在，看了几次vue的教程，每次都有更深的理解，因为之前并没有研究过angular等框架，所以对MVVM并不是很了解，但是经过这段时间对vuejs的一些研究，越来越懂了，这篇文章，只是对vuejs和webpack配合的非常基础的文章，我想随着我对vue的深入理解，会对组件化，模块化，MVVM有更深入的理解。\n\n## 项目的创建\n1.新建项目文件夹，并在其中建立`package.json`\n```js\n$ mkdir [project name]\n$ cd [project name]\n$ npm init\n```\n<!--more-->\n2.在项目目录下新建`index.html`\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Vue example</title>\n</head>\n<body>\n    <div>{{message}}</div>\n    <script src=\"dist/build.js\"></script>\n</body>\n</html>\n```\nsrc文件夹，并在该文件夹下建立`main.js`\n```javascript\nimport Vue from 'vue'\nnew Vue({\n    el:'body',\n    data:{\n        message:'test success!'\n    }\n});\n```\n## 设置webpack\n### 1.安装webpack，webpack-dev-server以及相关的loaders\n```php\n# 全局安装webpack，webpack-dev-server\n$ npm install -g webpack\n$ npm install -g webpack-dev-server\n# 为项目安装其他依赖\n$ npm i webpack-merge css-loader style-loader file-loader url-loader babel-core babel-loader babel-plugin-transform-runtime babel-preset-es2015 babel-preset-stage-0 babel-runtime vue vue-loader vue-html-loader vue-style-loader vue-hot-reload-api -D\n```\nwebpack-merge：开发环境和生产环节的webpaak配置文件的配置合并<br/>\ncss-loader：编译写入css<br/>\nstyle-loader：把编译后的css整合进html<br/>\nfile-loader：编译写入文件，默认情况下生成文件的文件名是文件名与MD5哈希值的组合<br/>\nvue：vue主程序<br/>\nvue-laoder：编译写入.vue文件<br/>\nvue-html-loader：编译vue的template部分<br/>\nvue-style-loader：编译vue的样式部分<br/>\nvue-hot-reload-api：webpack对vue实现热替换<br/>\nbabel-core：ES2015编译核心<br/>\nbabel-loader：编译写入ES2015文档<br/>\nbabel-preset-es2015：ES2015语法<br/>\nbabel-preset-stage-0：开启测试功能<br/>\nbabel-runtime：babel执行环境<br/>\n#### url-loader\n这里介绍下url-loader，这个loader实际上是对file-loader的封装[https://github.com/webpack/url-loader](https://github.com/webpack/url-loader)\n比如CSS文件中有时候会这么写：\n```css\n.demo{\n    background-image: url('a.png');\n}\n```\n```javascript\nmodule:{\n    loaders:[\n        {test:/\\.(png|jpg)$/,loader:'url-loader?limit=8192'}\n    ]\n}\n```\n经过以上配置，当a.png小于8K就会自动将图片转换成base64编码，如果不小于，则不会转换。\n**这里顺便提一句，在module配置的时候，loader的写法：**\n```javascript\nmodule:{\n    loaders:[\n        {test:/\\.jade$/,loader:'jade'}\n        //这里配置了让webpack识别jade的loader，其他类似，比如.vue\n        //用于css文件的loader有两种写法\n        {test:/\\.css$/,loader:'style!css'}\n        {test:/\\.css$/,loaders:['style','css']}\n    ]\n}\n```\n### 2.配置`webpack.config.js`\n在根目录下建立webpack.config.js，配置如下：\n```js\nvar path = require('path');\nmodule.exports = {\n  entry: './src/main.js',\n  //定义webpack输出的文件，我们在这里设置了\n  让打包后生成的文件放在dist文件夹下的build.js文件中\n  output: {\n    path: './dist',\n    publicPath:'dist/',\n    filename: 'build.js'\n  },\n  module: {\n    loaders: [\n      //转化ES6语法\n      {\n        test: /\\.js$/,\n        loader: 'babel',\n        exclude: /node_modules/\n      },\n      //图片转化，小于8K自动转化为base64的编码\n      {\n        test: /\\.(png|jpg|gif)$/,\n        loader:'url-loader?limit=8192'\n      }\n    ]\n  },\n  //这里用于安装babel，如果在根目录下的.babelrc配置了，这里就不写了\n  babel: {\n     presets: ['es2015','stage-0'],\n     plugins: ['transform-runtime']\n  }\n}\n```\n**特别说明**\n如果要在.babelrc下配置babel，则需要在根目录下新建该文件，windows环境下，不能新建该txt文件然后改后缀，需要通过dos命令建立：\n```php\necho>.babelrc\n```\n通过该命令就可以建立babelde配置文件，用编辑器打开，修改里面的内容为：\n```js\n{\n  \"presets\": [\"es2015\", \"stage-0\"],\n  \"plugins\": [\"transform-runtime\"]\n}\n```\n完成该配置我们在命令中运行\n```js\n$ webpack\n```\n打开`index.html`就可以看到浏览器中看到我们刚刚写的文字\n至此我们实现了最基本的利用webpack打包vue，下一篇将讲解[如何利用webpack+vue真正实现组件化](https://segmentfault.com/a/1190000005616974)。\n\n","slug":"webpack-vue-2","published":1,"updated":"2016-07-13T20:06:42.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktocg0047zrv4hr1sv2s7","content":"<blockquote>\n<p>记得第一次知道Vue.js是在勾三股四大大的微博，那时候他开始翻译vue的文档，从那时候开始到现在，看了几次vue的教程，每次都有更深的理解，因为之前并没有研究过angular等框架，所以对MVVM并不是很了解，但是经过这段时间对vuejs的一些研究，越来越懂了，这篇文章，只是对vuejs和webpack配合的非常基础的文章，我想随着我对vue的深入理解，会对组件化，模块化，MVVM有更深入的理解。</p>\n</blockquote>\n<h2 id=\"项目的创建\"><a href=\"#项目的创建\" class=\"headerlink\" title=\"项目的创建\"></a>项目的创建</h2><p>1.新建项目文件夹，并在其中建立<code>package.json</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir [project name]</span><br><span class=\"line\">$ cd [project name]</span><br><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.在项目目录下新建<code>index.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>src文件夹，并在该文件夹下建立<code>main.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'body'</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        message:<span class=\"string\">'test success!'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"设置webpack\"><a href=\"#设置webpack\" class=\"headerlink\" title=\"设置webpack\"></a>设置webpack</h2><h3 id=\"1-安装webpack，webpack-dev-server以及相关的loaders\"><a href=\"#1-安装webpack，webpack-dev-server以及相关的loaders\" class=\"headerlink\" title=\"1.安装webpack，webpack-dev-server以及相关的loaders\"></a>1.安装webpack，webpack-dev-server以及相关的loaders</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装webpack，webpack-dev-server</span></span><br><span class=\"line\">$ npm install -g webpack</span><br><span class=\"line\">$ npm install -g webpack-dev-server</span><br><span class=\"line\"><span class=\"comment\"># 为项目安装其他依赖</span></span><br><span class=\"line\">$ npm i webpack-merge css-loader style-loader file-loader url-loader babel-core babel-loader babel-plugin-transform-runtime babel-preset-es2015 babel-preset-stage<span class=\"number\">-0</span> babel-runtime vue vue-loader vue-html-loader vue-style-loader vue-hot-reload-api -D</span><br></pre></td></tr></table></figure>\n<p>webpack-merge：开发环境和生产环节的webpaak配置文件的配置合并<br><br>css-loader：编译写入css<br><br>style-loader：把编译后的css整合进html<br><br>file-loader：编译写入文件，默认情况下生成文件的文件名是文件名与MD5哈希值的组合<br><br>vue：vue主程序<br><br>vue-laoder：编译写入.vue文件<br><br>vue-html-loader：编译vue的template部分<br><br>vue-style-loader：编译vue的样式部分<br><br>vue-hot-reload-api：webpack对vue实现热替换<br><br>babel-core：ES2015编译核心<br><br>babel-loader：编译写入ES2015文档<br><br>babel-preset-es2015：ES2015语法<br><br>babel-preset-stage-0：开启测试功能<br><br>babel-runtime：babel执行环境<br></p>\n<h4 id=\"url-loader\"><a href=\"#url-loader\" class=\"headerlink\" title=\"url-loader\"></a>url-loader</h4><p>这里介绍下url-loader，这个loader实际上是对file-loader的封装<a href=\"https://github.com/webpack/url-loader\" target=\"_blank\" rel=\"noopener\">https://github.com/webpack/url-loader</a><br>比如CSS文件中有时候会这么写：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'a.png'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    loaders:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg)$/</span>,<span class=\"attr\">loader</span>:<span class=\"string\">'url-loader?limit=8192'</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过以上配置，当a.png小于8K就会自动将图片转换成base64编码，如果不小于，则不会转换。<br><strong>这里顺便提一句，在module配置的时候，loader的写法：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    loaders:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">test</span>:<span class=\"regexp\">/\\.jade$/</span>,<span class=\"attr\">loader</span>:<span class=\"string\">'jade'</span>&#125;</span><br><span class=\"line\">        <span class=\"comment\">//这里配置了让webpack识别jade的loader，其他类似，比如.vue</span></span><br><span class=\"line\">        <span class=\"comment\">//用于css文件的loader有两种写法</span></span><br><span class=\"line\">        &#123;<span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,<span class=\"attr\">loader</span>:<span class=\"string\">'style!css'</span>&#125;</span><br><span class=\"line\">        &#123;<span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,<span class=\"attr\">loaders</span>:[<span class=\"string\">'style'</span>,<span class=\"string\">'css'</span>]&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置webpack-config-js\"><a href=\"#2-配置webpack-config-js\" class=\"headerlink\" title=\"2.配置webpack.config.js\"></a>2.配置<code>webpack.config.js</code></h3><p>在根目录下建立webpack.config.js，配置如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">  <span class=\"comment\">//定义webpack输出的文件，我们在这里设置了</span></span><br><span class=\"line\">  让打包后生成的文件放在dist文件夹下的build.js文件中</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">    publicPath:<span class=\"string\">'dist/'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      <span class=\"comment\">//转化ES6语法</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//图片转化，小于8K自动转化为base64的编码</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>,</span><br><span class=\"line\">        loader:<span class=\"string\">'url-loader?limit=8192'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//这里用于安装babel，如果在根目录下的.babelrc配置了，这里就不写了</span></span><br><span class=\"line\">  babel: &#123;</span><br><span class=\"line\">     presets: [<span class=\"string\">'es2015'</span>,<span class=\"string\">'stage-0'</span>],</span><br><span class=\"line\">     plugins: [<span class=\"string\">'transform-runtime'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>特别说明</strong><br>如果要在.babelrc下配置babel，则需要在根目录下新建该文件，windows环境下，不能新建该txt文件然后改后缀，需要通过dos命令建立：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span>&gt;.babelrc</span><br></pre></td></tr></table></figure></p>\n<p>通过该命令就可以建立babelde配置文件，用编辑器打开，修改里面的内容为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"stage-0\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"transform-runtime\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>完成该配置我们在命令中运行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack</span><br></pre></td></tr></table></figure></p>\n<p>打开<code>index.html</code>就可以看到浏览器中看到我们刚刚写的文字<br>至此我们实现了最基本的利用webpack打包vue，下一篇将讲解<a href=\"https://segmentfault.com/a/1190000005616974\" target=\"_blank\" rel=\"noopener\">如何利用webpack+vue真正实现组件化</a>。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>记得第一次知道Vue.js是在勾三股四大大的微博，那时候他开始翻译vue的文档，从那时候开始到现在，看了几次vue的教程，每次都有更深的理解，因为之前并没有研究过angular等框架，所以对MVVM并不是很了解，但是经过这段时间对vuejs的一些研究，越来越懂了，这篇文章，只是对vuejs和webpack配合的非常基础的文章，我想随着我对vue的深入理解，会对组件化，模块化，MVVM有更深入的理解。</p>\n</blockquote>\n<h2 id=\"项目的创建\"><a href=\"#项目的创建\" class=\"headerlink\" title=\"项目的创建\"></a>项目的创建</h2><p>1.新建项目文件夹，并在其中建立<code>package.json</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir [project name]</span><br><span class=\"line\">$ cd [project name]</span><br><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure></p>","more":"<p>2.在项目目录下新建<code>index.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>src文件夹，并在该文件夹下建立<code>main.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'body'</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        message:<span class=\"string\">'test success!'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"设置webpack\"><a href=\"#设置webpack\" class=\"headerlink\" title=\"设置webpack\"></a>设置webpack</h2><h3 id=\"1-安装webpack，webpack-dev-server以及相关的loaders\"><a href=\"#1-安装webpack，webpack-dev-server以及相关的loaders\" class=\"headerlink\" title=\"1.安装webpack，webpack-dev-server以及相关的loaders\"></a>1.安装webpack，webpack-dev-server以及相关的loaders</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装webpack，webpack-dev-server</span></span><br><span class=\"line\">$ npm install -g webpack</span><br><span class=\"line\">$ npm install -g webpack-dev-server</span><br><span class=\"line\"><span class=\"comment\"># 为项目安装其他依赖</span></span><br><span class=\"line\">$ npm i webpack-merge css-loader style-loader file-loader url-loader babel-core babel-loader babel-plugin-transform-runtime babel-preset-es2015 babel-preset-stage<span class=\"number\">-0</span> babel-runtime vue vue-loader vue-html-loader vue-style-loader vue-hot-reload-api -D</span><br></pre></td></tr></table></figure>\n<p>webpack-merge：开发环境和生产环节的webpaak配置文件的配置合并<br><br>css-loader：编译写入css<br><br>style-loader：把编译后的css整合进html<br><br>file-loader：编译写入文件，默认情况下生成文件的文件名是文件名与MD5哈希值的组合<br><br>vue：vue主程序<br><br>vue-laoder：编译写入.vue文件<br><br>vue-html-loader：编译vue的template部分<br><br>vue-style-loader：编译vue的样式部分<br><br>vue-hot-reload-api：webpack对vue实现热替换<br><br>babel-core：ES2015编译核心<br><br>babel-loader：编译写入ES2015文档<br><br>babel-preset-es2015：ES2015语法<br><br>babel-preset-stage-0：开启测试功能<br><br>babel-runtime：babel执行环境<br></p>\n<h4 id=\"url-loader\"><a href=\"#url-loader\" class=\"headerlink\" title=\"url-loader\"></a>url-loader</h4><p>这里介绍下url-loader，这个loader实际上是对file-loader的封装<a href=\"https://github.com/webpack/url-loader\" target=\"_blank\" rel=\"noopener\">https://github.com/webpack/url-loader</a><br>比如CSS文件中有时候会这么写：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'a.png'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    loaders:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">test</span>:<span class=\"regexp\">/\\.(png|jpg)$/</span>,<span class=\"attr\">loader</span>:<span class=\"string\">'url-loader?limit=8192'</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过以上配置，当a.png小于8K就会自动将图片转换成base64编码，如果不小于，则不会转换。<br><strong>这里顺便提一句，在module配置的时候，loader的写法：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    loaders:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">test</span>:<span class=\"regexp\">/\\.jade$/</span>,<span class=\"attr\">loader</span>:<span class=\"string\">'jade'</span>&#125;</span><br><span class=\"line\">        <span class=\"comment\">//这里配置了让webpack识别jade的loader，其他类似，比如.vue</span></span><br><span class=\"line\">        <span class=\"comment\">//用于css文件的loader有两种写法</span></span><br><span class=\"line\">        &#123;<span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,<span class=\"attr\">loader</span>:<span class=\"string\">'style!css'</span>&#125;</span><br><span class=\"line\">        &#123;<span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,<span class=\"attr\">loaders</span>:[<span class=\"string\">'style'</span>,<span class=\"string\">'css'</span>]&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置webpack-config-js\"><a href=\"#2-配置webpack-config-js\" class=\"headerlink\" title=\"2.配置webpack.config.js\"></a>2.配置<code>webpack.config.js</code></h3><p>在根目录下建立webpack.config.js，配置如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">  <span class=\"comment\">//定义webpack输出的文件，我们在这里设置了</span></span><br><span class=\"line\">  让打包后生成的文件放在dist文件夹下的build.js文件中</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">    publicPath:<span class=\"string\">'dist/'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      <span class=\"comment\">//转化ES6语法</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//图片转化，小于8K自动转化为base64的编码</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>,</span><br><span class=\"line\">        loader:<span class=\"string\">'url-loader?limit=8192'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//这里用于安装babel，如果在根目录下的.babelrc配置了，这里就不写了</span></span><br><span class=\"line\">  babel: &#123;</span><br><span class=\"line\">     presets: [<span class=\"string\">'es2015'</span>,<span class=\"string\">'stage-0'</span>],</span><br><span class=\"line\">     plugins: [<span class=\"string\">'transform-runtime'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>特别说明</strong><br>如果要在.babelrc下配置babel，则需要在根目录下新建该文件，windows环境下，不能新建该txt文件然后改后缀，需要通过dos命令建立：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span>&gt;.babelrc</span><br></pre></td></tr></table></figure></p>\n<p>通过该命令就可以建立babelde配置文件，用编辑器打开，修改里面的内容为：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"stage-0\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"transform-runtime\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>完成该配置我们在命令中运行<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack</span><br></pre></td></tr></table></figure></p>\n<p>打开<code>index.html</code>就可以看到浏览器中看到我们刚刚写的文字<br>至此我们实现了最基本的利用webpack打包vue，下一篇将讲解<a href=\"https://segmentfault.com/a/1190000005616974\" target=\"_blank\" rel=\"noopener\">如何利用webpack+vue真正实现组件化</a>。</p>"},{"title":"利用webpack和vue实现组件化","date":"2016-06-01T16:48:31.000Z","comments":1,"_content":"> 上一篇[webpack+vue起步](https://segmentfault.com/a/1190000005614864)我们实现了用webpack打包vue的最基本用法，这篇我们将利用webpack+vue实现组件化\n\n在vue中实现组件化用到了vue特有的文件格式.vue，在每一个.vue文件就是一个组件，在组件中我们将html，css，js全部写入，然后在webpack中配置vue-loader就可以了。\n<!--more-->\n## 建立vue组件\n在src目录下建立`components`文件夹，并在其中建立app.vue文件，这样我们项目的目录结构如下：\n```js\n|--dist             //webpack打包后生成的文件夹\n|   |--build.js\n|--node_modules     //项目的依赖所在的文件夹\n|--src              //文件入口\n|   |--components   //组件存放文件夹\n|       |--app.vue  //组件\n|   |--main.js      //主js文件\n|--index.html       //主html文件\n|--package.json\n|--webpack.config.js //webpack配置文件       \n```\n首先在index.hmtl中写入代码：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Vue example</title>\n</head>\n<body>\n    <app></app>\n    <script src=\"dist/build.js\"></script>\n</body>\n</html>\n```\n在编辑器中打开app.vue文件，写入如下代码：\n```html\n<template>\n<div class=\"message\">{{msg}}</div>    \n</template>\n<script>\nexport default {\n  data () {\n    return {\n      msg: 'Hello from vue-loader'\n    }\n  }\n}\n</script>\n<style>\n.message{\n    color:red;\n    font-size:36px;\n    font-weight:blod;\n}\n</style>\n```\n在main.js中写入：\n```js\nimport Vue from 'vue'\nimport App from './components/app.vue'\n\nnew Vue({\n  el: 'body',\n  components:{App}\n});\n\n```\n这样运行命令webpack就可以看到效果了\n这里用到了ES6的模块儿---`import`，`export`\n#### `export`命令\n`export`命令用于规定模块的对外接口。一个模块就是一个独立文件。该文件内的所有变量外部都无法获取。如果希望外部能够读取模块内部的某个变量，就必须使用`export`关键字对外暴露出该变量。例如：\n```js\n//export.js\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n```\n这样就可以对外输出三个变量。\n#### `import`命令\n使用`export`对外暴露了接口后，其他js文件通过`import`命令加载这个模块文件。上面暴露的三个变量在另一个js文件中引入如下：\n```js\n//import.js\nimport {firstName,lastName,year} from './export';\nfunction setName(element){\n    element.textContent = firstName + ' ' + lastName;\n}\n```\n\n\n\n## webpack的hot-reload\n前端自动刷新现在已经很常见了，即改变页面后，浏览器自动刷新，但是这个功能在我们做单页面应用时候会很不好用，所以，webpack支持hot-reload(热替换)，当我们修改模块时候不会页面不会刷新，会直接在页面中生效。\n### hot-reload的基础---webpack-dev-server\nwebpack-dev-server支持两种模式的自动刷新页面：\n- iframe模式（页面嵌入一个iframe并在其中呈现页面的变化）\n- inline模式（一个小型的webpack-dev-server客户端会作为入口文件打包，这个客户端会在后端代码改变的时候刷新页面）\n\n#### iframe模式\n使用iframe模式无需额外的配置，在dos下输入命令\n```php\n$ webpack-dev-server\n```\n在浏览器中输入 [http://loacalhost:8080/webpack-dev-server/index.html](http://loacalhost:8080/webpack-dev-server/index.html)\n#### inline模式\n在dos下输入命令\n```php\n$ webpack-dev-server --inline --hot\n```\n启动服务器，在浏览器中打开 [http://loacalhost:8080](http://loacalhost:8080) 就可以看到我们的页面，此时修改app.vue中的css，以及html中的文字，都可以看到在浏览器中立马呈现。\n关于webpack-dev-server的详细说明，可以参考[官方文档](https://webpack.github.io/docs/webpack-dev-server.html)或者[博客WEBPACK DEV SERVER](http://www.jianshu.com/p/941bfaf13be1)。\n### **这里有一个问题需要说明下**\n在很多文章中都说，修改app.vue文件中`script`标签中的msg文字，会在浏览器中立即呈现效果，但是事实上我在做demo的时候并没有出现这个效果，Google了很多，找到了答案，尤大说：“data是初始值，但热更新的时候会保留当前状态”，[原问题及答案链接](https://forum.vuejs.org/topic/915/vue-webpack%E7%83%AD%E4%BB%A3%E7%A0%81%E6%9B%BF%E6%8D%A2%E4%BF%AE%E6%94%B9script%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%83%BD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/5)。\n\n至此，关于webpack+vue的基本结束，虽然简单，但是由于在这个过程中也遇到一些坑，所以总结下，关于对vue的研究，这才只是个开始...\n\n## 附：\n我的webpack配置文件：\n```js\nvar path = require('path');\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: './dist',\n    publicPath:'dist/',\n    filename: 'build.js'\n  },\n  //配置自动刷新,如果打开会使浏览器刷新而不是热替换\n  /*devServer: {\n    historyApiFallback: true,\n    hot: false,\n    inline: true,\n    grogress: true\n  },*/\n  module: {\n    loaders: [\n      //转化ES6语法\n      {\n        test: /\\.js$/,\n        loader: 'babel',\n        exclude: /node_modules/\n      },\n      //解析.vue文件\n      {\n        test:/\\.vue$/,\n        loader:'vue'\n      },\n      //图片转化，小于8K自动转化为base64的编码\n      {\n        test: /\\.(png|jpg|gif)$/,\n        loader:'url-loader?limit=8192'\n      }\n    ]\n  },\n  vue:{\n    loaders:{\n      js:'babel'\n    }\n  },\n  resolve: {\n        // require时省略的扩展名，如：require('app') 不需要app.js\n        extensions: ['', '.js', '.vue'],\n        // 别名，可以直接使用别名来代表设定的路径以及其他\n        alias: {\n            filter: path.join(__dirname, './src/filters'),\n            components: path.join(__dirname, './src/components')\n        }\n    }    \n}\n```\npackage.json文件：\n```json\n{\n  \"name\": \"webpackvue\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"vue.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.9.1\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-plugin-transform-runtime\": \"^6.9.0\",\n    \"babel-preset-es2015\": \"^6.9.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"babel-runtime\": \"^6.9.2\",\n    \"css-loader\": \"^0.23.1\",\n    \"file-loader\": \"^0.8.5\",\n    \"style-loader\": \"^0.13.1\",\n    \"url-loader\": \"^0.5.7\",\n    \"vue\":\"^1.0.24\",\n    \"vue-router\":\"^0.7.13\",\n    \"vue-hot-reload-api\": \"^1.3.2\",\n    \"vue-html-loader\": \"^1.2.2\",\n    \"vue-loader\": \"^8.5.2\",\n    \"vue-style-loader\": \"^1.0.0\",\n    \"webpack\": \"^1.13.1\",\n    \"webpack-dev-server\": \"^1.14.1\",\n    \"webpack-merge\": \"^0.13.0\"\n  }\n}\n\n```","source":"_posts/webpack-vue-3.md","raw":"---\ntitle: 利用webpack和vue实现组件化\ndate: 2016-06-02 00:48:31\ntags: vue\ncomments: true\ncategories: \"Vue\"\n---\n> 上一篇[webpack+vue起步](https://segmentfault.com/a/1190000005614864)我们实现了用webpack打包vue的最基本用法，这篇我们将利用webpack+vue实现组件化\n\n在vue中实现组件化用到了vue特有的文件格式.vue，在每一个.vue文件就是一个组件，在组件中我们将html，css，js全部写入，然后在webpack中配置vue-loader就可以了。\n<!--more-->\n## 建立vue组件\n在src目录下建立`components`文件夹，并在其中建立app.vue文件，这样我们项目的目录结构如下：\n```js\n|--dist             //webpack打包后生成的文件夹\n|   |--build.js\n|--node_modules     //项目的依赖所在的文件夹\n|--src              //文件入口\n|   |--components   //组件存放文件夹\n|       |--app.vue  //组件\n|   |--main.js      //主js文件\n|--index.html       //主html文件\n|--package.json\n|--webpack.config.js //webpack配置文件       \n```\n首先在index.hmtl中写入代码：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Vue example</title>\n</head>\n<body>\n    <app></app>\n    <script src=\"dist/build.js\"></script>\n</body>\n</html>\n```\n在编辑器中打开app.vue文件，写入如下代码：\n```html\n<template>\n<div class=\"message\">{{msg}}</div>    \n</template>\n<script>\nexport default {\n  data () {\n    return {\n      msg: 'Hello from vue-loader'\n    }\n  }\n}\n</script>\n<style>\n.message{\n    color:red;\n    font-size:36px;\n    font-weight:blod;\n}\n</style>\n```\n在main.js中写入：\n```js\nimport Vue from 'vue'\nimport App from './components/app.vue'\n\nnew Vue({\n  el: 'body',\n  components:{App}\n});\n\n```\n这样运行命令webpack就可以看到效果了\n这里用到了ES6的模块儿---`import`，`export`\n#### `export`命令\n`export`命令用于规定模块的对外接口。一个模块就是一个独立文件。该文件内的所有变量外部都无法获取。如果希望外部能够读取模块内部的某个变量，就必须使用`export`关键字对外暴露出该变量。例如：\n```js\n//export.js\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n```\n这样就可以对外输出三个变量。\n#### `import`命令\n使用`export`对外暴露了接口后，其他js文件通过`import`命令加载这个模块文件。上面暴露的三个变量在另一个js文件中引入如下：\n```js\n//import.js\nimport {firstName,lastName,year} from './export';\nfunction setName(element){\n    element.textContent = firstName + ' ' + lastName;\n}\n```\n\n\n\n## webpack的hot-reload\n前端自动刷新现在已经很常见了，即改变页面后，浏览器自动刷新，但是这个功能在我们做单页面应用时候会很不好用，所以，webpack支持hot-reload(热替换)，当我们修改模块时候不会页面不会刷新，会直接在页面中生效。\n### hot-reload的基础---webpack-dev-server\nwebpack-dev-server支持两种模式的自动刷新页面：\n- iframe模式（页面嵌入一个iframe并在其中呈现页面的变化）\n- inline模式（一个小型的webpack-dev-server客户端会作为入口文件打包，这个客户端会在后端代码改变的时候刷新页面）\n\n#### iframe模式\n使用iframe模式无需额外的配置，在dos下输入命令\n```php\n$ webpack-dev-server\n```\n在浏览器中输入 [http://loacalhost:8080/webpack-dev-server/index.html](http://loacalhost:8080/webpack-dev-server/index.html)\n#### inline模式\n在dos下输入命令\n```php\n$ webpack-dev-server --inline --hot\n```\n启动服务器，在浏览器中打开 [http://loacalhost:8080](http://loacalhost:8080) 就可以看到我们的页面，此时修改app.vue中的css，以及html中的文字，都可以看到在浏览器中立马呈现。\n关于webpack-dev-server的详细说明，可以参考[官方文档](https://webpack.github.io/docs/webpack-dev-server.html)或者[博客WEBPACK DEV SERVER](http://www.jianshu.com/p/941bfaf13be1)。\n### **这里有一个问题需要说明下**\n在很多文章中都说，修改app.vue文件中`script`标签中的msg文字，会在浏览器中立即呈现效果，但是事实上我在做demo的时候并没有出现这个效果，Google了很多，找到了答案，尤大说：“data是初始值，但热更新的时候会保留当前状态”，[原问题及答案链接](https://forum.vuejs.org/topic/915/vue-webpack%E7%83%AD%E4%BB%A3%E7%A0%81%E6%9B%BF%E6%8D%A2%E4%BF%AE%E6%94%B9script%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%83%BD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/5)。\n\n至此，关于webpack+vue的基本结束，虽然简单，但是由于在这个过程中也遇到一些坑，所以总结下，关于对vue的研究，这才只是个开始...\n\n## 附：\n我的webpack配置文件：\n```js\nvar path = require('path');\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: './dist',\n    publicPath:'dist/',\n    filename: 'build.js'\n  },\n  //配置自动刷新,如果打开会使浏览器刷新而不是热替换\n  /*devServer: {\n    historyApiFallback: true,\n    hot: false,\n    inline: true,\n    grogress: true\n  },*/\n  module: {\n    loaders: [\n      //转化ES6语法\n      {\n        test: /\\.js$/,\n        loader: 'babel',\n        exclude: /node_modules/\n      },\n      //解析.vue文件\n      {\n        test:/\\.vue$/,\n        loader:'vue'\n      },\n      //图片转化，小于8K自动转化为base64的编码\n      {\n        test: /\\.(png|jpg|gif)$/,\n        loader:'url-loader?limit=8192'\n      }\n    ]\n  },\n  vue:{\n    loaders:{\n      js:'babel'\n    }\n  },\n  resolve: {\n        // require时省略的扩展名，如：require('app') 不需要app.js\n        extensions: ['', '.js', '.vue'],\n        // 别名，可以直接使用别名来代表设定的路径以及其他\n        alias: {\n            filter: path.join(__dirname, './src/filters'),\n            components: path.join(__dirname, './src/components')\n        }\n    }    \n}\n```\npackage.json文件：\n```json\n{\n  \"name\": \"webpackvue\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"vue.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.9.1\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-plugin-transform-runtime\": \"^6.9.0\",\n    \"babel-preset-es2015\": \"^6.9.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"babel-runtime\": \"^6.9.2\",\n    \"css-loader\": \"^0.23.1\",\n    \"file-loader\": \"^0.8.5\",\n    \"style-loader\": \"^0.13.1\",\n    \"url-loader\": \"^0.5.7\",\n    \"vue\":\"^1.0.24\",\n    \"vue-router\":\"^0.7.13\",\n    \"vue-hot-reload-api\": \"^1.3.2\",\n    \"vue-html-loader\": \"^1.2.2\",\n    \"vue-loader\": \"^8.5.2\",\n    \"vue-style-loader\": \"^1.0.0\",\n    \"webpack\": \"^1.13.1\",\n    \"webpack-dev-server\": \"^1.14.1\",\n    \"webpack-merge\": \"^0.13.0\"\n  }\n}\n\n```","slug":"webpack-vue-3","published":1,"updated":"2016-07-13T20:06:56.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktoch0049zrv4j5fvqrsp","content":"<blockquote>\n<p>上一篇<a href=\"https://segmentfault.com/a/1190000005614864\" target=\"_blank\" rel=\"noopener\">webpack+vue起步</a>我们实现了用webpack打包vue的最基本用法，这篇我们将利用webpack+vue实现组件化</p>\n</blockquote>\n<p>在vue中实现组件化用到了vue特有的文件格式.vue，在每一个.vue文件就是一个组件，在组件中我们将html，css，js全部写入，然后在webpack中配置vue-loader就可以了。<br><a id=\"more\"></a></p>\n<h2 id=\"建立vue组件\"><a href=\"#建立vue组件\" class=\"headerlink\" title=\"建立vue组件\"></a>建立vue组件</h2><p>在src目录下建立<code>components</code>文件夹，并在其中建立app.vue文件，这样我们项目的目录结构如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--dist             <span class=\"comment\">//webpack打包后生成的文件夹</span></span><br><span class=\"line\">|   |--build.js</span><br><span class=\"line\">|--node_modules     <span class=\"comment\">//项目的依赖所在的文件夹</span></span><br><span class=\"line\">|--src              <span class=\"comment\">//文件入口</span></span><br><span class=\"line\">|   |--components   <span class=\"comment\">//组件存放文件夹</span></span><br><span class=\"line\">|       |--app.vue  <span class=\"comment\">//组件</span></span><br><span class=\"line\">|   |--main.js      <span class=\"comment\">//主js文件</span></span><br><span class=\"line\">|--index.html       <span class=\"comment\">//主html文件</span></span><br><span class=\"line\">|--package.json</span><br><span class=\"line\">|--webpack.config.js <span class=\"comment\">//webpack配置文件</span></span><br></pre></td></tr></table></figure></p>\n<p>首先在index.hmtl中写入代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在编辑器中打开app.vue文件，写入如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      msg: <span class=\"string\">'Hello from vue-loader'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.message</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span><span class=\"selector-pseudo\">:red</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-size</span><span class=\"selector-pseudo\">:36px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-weight</span><span class=\"selector-pseudo\">:blod</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在main.js中写入：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./components/app.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">  components:&#123;App&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这样运行命令webpack就可以看到效果了<br>这里用到了ES6的模块儿—<code>import</code>，<code>export</code></p>\n<h4 id=\"export命令\"><a href=\"#export命令\" class=\"headerlink\" title=\"export命令\"></a><code>export</code>命令</h4><p><code>export</code>命令用于规定模块的对外接口。一个模块就是一个独立文件。该文件内的所有变量外部都无法获取。如果希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字对外暴露出该变量。例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//export.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">'Michael'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">'Jackson'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以对外输出三个变量。</p>\n<h4 id=\"import命令\"><a href=\"#import命令\" class=\"headerlink\" title=\"import命令\"></a><code>import</code>命令</h4><p>使用<code>export</code>对外暴露了接口后，其他js文件通过<code>import</code>命令加载这个模块文件。上面暴露的三个变量在另一个js文件中引入如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//import.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;firstName,lastName,year&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./export'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">element</span>)</span>&#123;</span><br><span class=\"line\">    element.textContent = firstName + <span class=\"string\">' '</span> + lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"webpack的hot-reload\"><a href=\"#webpack的hot-reload\" class=\"headerlink\" title=\"webpack的hot-reload\"></a>webpack的hot-reload</h2><p>前端自动刷新现在已经很常见了，即改变页面后，浏览器自动刷新，但是这个功能在我们做单页面应用时候会很不好用，所以，webpack支持hot-reload(热替换)，当我们修改模块时候不会页面不会刷新，会直接在页面中生效。</p>\n<h3 id=\"hot-reload的基础—webpack-dev-server\"><a href=\"#hot-reload的基础—webpack-dev-server\" class=\"headerlink\" title=\"hot-reload的基础—webpack-dev-server\"></a>hot-reload的基础—webpack-dev-server</h3><p>webpack-dev-server支持两种模式的自动刷新页面：</p>\n<ul>\n<li>iframe模式（页面嵌入一个iframe并在其中呈现页面的变化）</li>\n<li>inline模式（一个小型的webpack-dev-server客户端会作为入口文件打包，这个客户端会在后端代码改变的时候刷新页面）</li>\n</ul>\n<h4 id=\"iframe模式\"><a href=\"#iframe模式\" class=\"headerlink\" title=\"iframe模式\"></a>iframe模式</h4><p>使用iframe模式无需额外的配置，在dos下输入命令<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack-dev-server</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中输入 <a href=\"http://loacalhost:8080/webpack-dev-server/index.html\" target=\"_blank\" rel=\"noopener\">http://loacalhost:8080/webpack-dev-server/index.html</a></p>\n<h4 id=\"inline模式\"><a href=\"#inline模式\" class=\"headerlink\" title=\"inline模式\"></a>inline模式</h4><p>在dos下输入命令<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack-dev-server --inline --hot</span><br></pre></td></tr></table></figure></p>\n<p>启动服务器，在浏览器中打开 <a href=\"http://loacalhost:8080\" target=\"_blank\" rel=\"noopener\">http://loacalhost:8080</a> 就可以看到我们的页面，此时修改app.vue中的css，以及html中的文字，都可以看到在浏览器中立马呈现。<br>关于webpack-dev-server的详细说明，可以参考<a href=\"https://webpack.github.io/docs/webpack-dev-server.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>或者<a href=\"http://www.jianshu.com/p/941bfaf13be1\" target=\"_blank\" rel=\"noopener\">博客WEBPACK DEV SERVER</a>。</p>\n<h3 id=\"这里有一个问题需要说明下\"><a href=\"#这里有一个问题需要说明下\" class=\"headerlink\" title=\"这里有一个问题需要说明下\"></a><strong>这里有一个问题需要说明下</strong></h3><p>在很多文章中都说，修改app.vue文件中<code>script</code>标签中的msg文字，会在浏览器中立即呈现效果，但是事实上我在做demo的时候并没有出现这个效果，Google了很多，找到了答案，尤大说：“data是初始值，但热更新的时候会保留当前状态”，<a href=\"https://forum.vuejs.org/topic/915/vue-webpack%E7%83%AD%E4%BB%A3%E7%A0%81%E6%9B%BF%E6%8D%A2%E4%BF%AE%E6%94%B9script%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%83%BD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/5\" target=\"_blank\" rel=\"noopener\">原问题及答案链接</a>。</p>\n<p>至此，关于webpack+vue的基本结束，虽然简单，但是由于在这个过程中也遇到一些坑，所以总结下，关于对vue的研究，这才只是个开始…</p>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p>我的webpack配置文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">    publicPath:<span class=\"string\">'dist/'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//配置自动刷新,如果打开会使浏览器刷新而不是热替换</span></span><br><span class=\"line\">  <span class=\"comment\">/*devServer: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    historyApiFallback: true,</span></span><br><span class=\"line\"><span class=\"comment\">    hot: false,</span></span><br><span class=\"line\"><span class=\"comment\">    inline: true,</span></span><br><span class=\"line\"><span class=\"comment\">    grogress: true</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;,*/</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      <span class=\"comment\">//转化ES6语法</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//解析.vue文件</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader:<span class=\"string\">'vue'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//图片转化，小于8K自动转化为base64的编码</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>,</span><br><span class=\"line\">        loader:<span class=\"string\">'url-loader?limit=8192'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  vue:&#123;</span><br><span class=\"line\">    loaders:&#123;</span><br><span class=\"line\">      js:<span class=\"string\">'babel'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// require时省略的扩展名，如：require('app') 不需要app.js</span></span><br><span class=\"line\">        extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 别名，可以直接使用别名来代表设定的路径以及其他</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            filter: path.join(__dirname, <span class=\"string\">'./src/filters'</span>),</span><br><span class=\"line\">            components: path.join(__dirname, <span class=\"string\">'./src/components'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>package.json文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpackvue\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"vue.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.9.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-plugin-transform-runtime\"</span>: <span class=\"string\">\"^6.9.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.9.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-stage-0\"</span>: <span class=\"string\">\"^6.5.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-runtime\"</span>: <span class=\"string\">\"^6.9.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.23.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"file-loader\"</span>: <span class=\"string\">\"^0.8.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"url-loader\"</span>: <span class=\"string\">\"^0.5.7\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue\"</span>:<span class=\"string\">\"^1.0.24\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-router\"</span>:<span class=\"string\">\"^0.7.13\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-hot-reload-api\"</span>: <span class=\"string\">\"^1.3.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-html-loader\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-loader\"</span>: <span class=\"string\">\"^8.5.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-style-loader\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.13.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.14.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-merge\"</span>: <span class=\"string\">\"^0.13.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>上一篇<a href=\"https://segmentfault.com/a/1190000005614864\" target=\"_blank\" rel=\"noopener\">webpack+vue起步</a>我们实现了用webpack打包vue的最基本用法，这篇我们将利用webpack+vue实现组件化</p>\n</blockquote>\n<p>在vue中实现组件化用到了vue特有的文件格式.vue，在每一个.vue文件就是一个组件，在组件中我们将html，css，js全部写入，然后在webpack中配置vue-loader就可以了。<br>","more":"</p>\n<h2 id=\"建立vue组件\"><a href=\"#建立vue组件\" class=\"headerlink\" title=\"建立vue组件\"></a>建立vue组件</h2><p>在src目录下建立<code>components</code>文件夹，并在其中建立app.vue文件，这样我们项目的目录结构如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--dist             <span class=\"comment\">//webpack打包后生成的文件夹</span></span><br><span class=\"line\">|   |--build.js</span><br><span class=\"line\">|--node_modules     <span class=\"comment\">//项目的依赖所在的文件夹</span></span><br><span class=\"line\">|--src              <span class=\"comment\">//文件入口</span></span><br><span class=\"line\">|   |--components   <span class=\"comment\">//组件存放文件夹</span></span><br><span class=\"line\">|       |--app.vue  <span class=\"comment\">//组件</span></span><br><span class=\"line\">|   |--main.js      <span class=\"comment\">//主js文件</span></span><br><span class=\"line\">|--index.html       <span class=\"comment\">//主html文件</span></span><br><span class=\"line\">|--package.json</span><br><span class=\"line\">|--webpack.config.js <span class=\"comment\">//webpack配置文件</span></span><br></pre></td></tr></table></figure></p>\n<p>首先在index.hmtl中写入代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在编辑器中打开app.vue文件，写入如下代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"message\"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      msg: <span class=\"string\">'Hello from vue-loader'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.message</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span><span class=\"selector-pseudo\">:red</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-size</span><span class=\"selector-pseudo\">:36px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-weight</span><span class=\"selector-pseudo\">:blod</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在main.js中写入：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./components/app.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">  components:&#123;App&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这样运行命令webpack就可以看到效果了<br>这里用到了ES6的模块儿—<code>import</code>，<code>export</code></p>\n<h4 id=\"export命令\"><a href=\"#export命令\" class=\"headerlink\" title=\"export命令\"></a><code>export</code>命令</h4><p><code>export</code>命令用于规定模块的对外接口。一个模块就是一个独立文件。该文件内的所有变量外部都无法获取。如果希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字对外暴露出该变量。例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//export.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> firstName = <span class=\"string\">'Michael'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastName = <span class=\"string\">'Jackson'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> year = <span class=\"number\">1958</span>;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以对外输出三个变量。</p>\n<h4 id=\"import命令\"><a href=\"#import命令\" class=\"headerlink\" title=\"import命令\"></a><code>import</code>命令</h4><p>使用<code>export</code>对外暴露了接口后，其他js文件通过<code>import</code>命令加载这个模块文件。上面暴露的三个变量在另一个js文件中引入如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//import.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;firstName,lastName,year&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./export'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">element</span>)</span>&#123;</span><br><span class=\"line\">    element.textContent = firstName + <span class=\"string\">' '</span> + lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"webpack的hot-reload\"><a href=\"#webpack的hot-reload\" class=\"headerlink\" title=\"webpack的hot-reload\"></a>webpack的hot-reload</h2><p>前端自动刷新现在已经很常见了，即改变页面后，浏览器自动刷新，但是这个功能在我们做单页面应用时候会很不好用，所以，webpack支持hot-reload(热替换)，当我们修改模块时候不会页面不会刷新，会直接在页面中生效。</p>\n<h3 id=\"hot-reload的基础—webpack-dev-server\"><a href=\"#hot-reload的基础—webpack-dev-server\" class=\"headerlink\" title=\"hot-reload的基础—webpack-dev-server\"></a>hot-reload的基础—webpack-dev-server</h3><p>webpack-dev-server支持两种模式的自动刷新页面：</p>\n<ul>\n<li>iframe模式（页面嵌入一个iframe并在其中呈现页面的变化）</li>\n<li>inline模式（一个小型的webpack-dev-server客户端会作为入口文件打包，这个客户端会在后端代码改变的时候刷新页面）</li>\n</ul>\n<h4 id=\"iframe模式\"><a href=\"#iframe模式\" class=\"headerlink\" title=\"iframe模式\"></a>iframe模式</h4><p>使用iframe模式无需额外的配置，在dos下输入命令<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack-dev-server</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中输入 <a href=\"http://loacalhost:8080/webpack-dev-server/index.html\" target=\"_blank\" rel=\"noopener\">http://loacalhost:8080/webpack-dev-server/index.html</a></p>\n<h4 id=\"inline模式\"><a href=\"#inline模式\" class=\"headerlink\" title=\"inline模式\"></a>inline模式</h4><p>在dos下输入命令<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack-dev-server --inline --hot</span><br></pre></td></tr></table></figure></p>\n<p>启动服务器，在浏览器中打开 <a href=\"http://loacalhost:8080\" target=\"_blank\" rel=\"noopener\">http://loacalhost:8080</a> 就可以看到我们的页面，此时修改app.vue中的css，以及html中的文字，都可以看到在浏览器中立马呈现。<br>关于webpack-dev-server的详细说明，可以参考<a href=\"https://webpack.github.io/docs/webpack-dev-server.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>或者<a href=\"http://www.jianshu.com/p/941bfaf13be1\" target=\"_blank\" rel=\"noopener\">博客WEBPACK DEV SERVER</a>。</p>\n<h3 id=\"这里有一个问题需要说明下\"><a href=\"#这里有一个问题需要说明下\" class=\"headerlink\" title=\"这里有一个问题需要说明下\"></a><strong>这里有一个问题需要说明下</strong></h3><p>在很多文章中都说，修改app.vue文件中<code>script</code>标签中的msg文字，会在浏览器中立即呈现效果，但是事实上我在做demo的时候并没有出现这个效果，Google了很多，找到了答案，尤大说：“data是初始值，但热更新的时候会保留当前状态”，<a href=\"https://forum.vuejs.org/topic/915/vue-webpack%E7%83%AD%E4%BB%A3%E7%A0%81%E6%9B%BF%E6%8D%A2%E4%BF%AE%E6%94%B9script%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%E9%A1%B5%E9%9D%A2%E4%B8%8D%E8%83%BD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/5\" target=\"_blank\" rel=\"noopener\">原问题及答案链接</a>。</p>\n<p>至此，关于webpack+vue的基本结束，虽然简单，但是由于在这个过程中也遇到一些坑，所以总结下，关于对vue的研究，这才只是个开始…</p>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><p>我的webpack配置文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">    publicPath:<span class=\"string\">'dist/'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//配置自动刷新,如果打开会使浏览器刷新而不是热替换</span></span><br><span class=\"line\">  <span class=\"comment\">/*devServer: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    historyApiFallback: true,</span></span><br><span class=\"line\"><span class=\"comment\">    hot: false,</span></span><br><span class=\"line\"><span class=\"comment\">    inline: true,</span></span><br><span class=\"line\"><span class=\"comment\">    grogress: true</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;,*/</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      <span class=\"comment\">//转化ES6语法</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//解析.vue文件</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader:<span class=\"string\">'vue'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//图片转化，小于8K自动转化为base64的编码</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>,</span><br><span class=\"line\">        loader:<span class=\"string\">'url-loader?limit=8192'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  vue:&#123;</span><br><span class=\"line\">    loaders:&#123;</span><br><span class=\"line\">      js:<span class=\"string\">'babel'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// require时省略的扩展名，如：require('app') 不需要app.js</span></span><br><span class=\"line\">        extensions: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 别名，可以直接使用别名来代表设定的路径以及其他</span></span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            filter: path.join(__dirname, <span class=\"string\">'./src/filters'</span>),</span><br><span class=\"line\">            components: path.join(__dirname, <span class=\"string\">'./src/components'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>package.json文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpackvue\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"vue.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.9.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^6.2.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-plugin-transform-runtime\"</span>: <span class=\"string\">\"^6.9.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.9.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-stage-0\"</span>: <span class=\"string\">\"^6.5.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-runtime\"</span>: <span class=\"string\">\"^6.9.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.23.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"file-loader\"</span>: <span class=\"string\">\"^0.8.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"url-loader\"</span>: <span class=\"string\">\"^0.5.7\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue\"</span>:<span class=\"string\">\"^1.0.24\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-router\"</span>:<span class=\"string\">\"^0.7.13\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-hot-reload-api\"</span>: <span class=\"string\">\"^1.3.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-html-loader\"</span>: <span class=\"string\">\"^1.2.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-loader\"</span>: <span class=\"string\">\"^8.5.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-style-loader\"</span>: <span class=\"string\">\"^1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.13.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.14.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-merge\"</span>: <span class=\"string\">\"^0.13.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Webpack2.x踩坑与总结","date":"2017-02-07T14:41:09.000Z","comments":1,"_content":"![](/img/webpack2.jpg)\n> 本篇为在学习Vue2.x的时候使用Webpack2.x的踩坑与总结，关于Vue2.x的踩坑与总结，[点击链接](http://mrzhang123.github.io/2017/02/07/vue2/)\n\n<!--more-->\n\n项目地址：[https://github.com/MrZhang123/Vue_project/tree/master/vue2.x](https://github.com/MrZhang123/Vue_project/tree/master/vue2.x)\n\n# 本地安装npm包后如何在命令行运行\n\n在npm安装包的时候，如果使用全局安装，即`npm install <packageName> -g`，则在安装完成后可以在终端运行作为命令去运行，但是如果是本地安装的包`npm install --save-dev <packageName>`，则无法这样直接运行。那么如何运行本地安装的包呢？首先进入项目目录（即package.json所在目录），然后使用以下命令即可运行：\n\n```shell\n\n$ node_modules/.bin/<packageName>\n\n```\n\n除了可以这样在命令行运行外，还可以在文件中运行\n\n```js\n\n//index.js\n\nlet webpack = require('webpack');\n\nwebpack();\n\n```\n\n```shell\n\n$ node index.js\n\n```\n\n# webpack1.x升级2.x\n\n## 1.`module.loaders`改成了`module.rules`\n\n旧的`loaders`被新的`rules`取代，后者允许配置`loader`以及其他更多项。\n\n```js\n  module: {\n-   loaders: [\n+   rules: [\n      {\n        test: /\\.css$/,\n-       loaders: [\n+       use: [\n          {\n            loader: \"style-loader\"\n          },\n          {\n            loader: \"css-loader\",\n-           query: {\n+           options: {\n              modules: true\n            }\n        ]\n      },\n      {\n        test: /\\.jsx$/,\n        loader: \"babel-loader\", // Do not use \"use\" here\n        options: {\n          // ...\n        }\n      }\n    ]\n  }\n```\n以上写法中，`Rule.loader`是`Rule.use: [ { loader } ]`的简写。\n\n## 2.链式调用loaders\n\n在webpack1.x中loaders可以链式调用，在2.x中依旧有该特性，使用`rule.use`配置项，`use`中设置一个loaders的数组而在1.x中使用`!`连接各个loader，旧版写法只有在使用旧的`module.loaders`时有效。\n\n```js\n  module: {\n-   loaders: {\n+   rules: {\n      test: /\\.less$/,\n-     loader: \"style-loader!css-loader!less-loader\"\n+     use: [\n+       \"style-loader\",\n+       \"css-loader\",\n+       \"less-loader\"\n+     ]\n    }\n  }\n```\n\n## 3.取消在模块中自动添加`-loader`后缀\n\nwebpack2.x中不再添加`-loader`\n\n```js\n  module: {\n    rules: [\n      {\n        use: [\n-         \"style\",\n+         \"style-loader\",\n-         \"css\",\n+         \"css-loader\",\n-         \"less\",\n+         \"less-loader\",\n        ]\n      }\n    ]\n  }\n```\n\n根据官方说法，做出这样更改的原因是省略`-loader`会对新手造成误解，所以去掉这个功能，如果想打开这个旧的功能，可以配置`resolveLoader.moduleExtensions`，但是并不推荐这么做，具体参阅[issues#2986](https://github.com/webpack/webpack/issues/2986)\n\n```js\n+ resolveLoader: {\n+   moduleExtensions: [\"-loader\"]\n+ }\n```\n\n## 4.使用options配置loader\n\n在webpack1.x中可以通过webpack.config.js的自定义属性来配置loader，这在webpack2.x中无法执行\n\n```js\nmodule.exports = { \n  ...\n  module: { \n    use: [{ \n      test: /\\.tsx?$/,\n      loader: 'ts-loader'\n    }]\n  },\n  // does not work with webpack 2\n  ts: { transpileOnly: false } \n}\n//webpack2 use options\nmodule.exports = { \n  ...\n  module: { \n    use: [{ \n      test: /\\.tsx?$/,\n      loader: 'ts-loader'\n      options:  { transpileOnly: false }\n    }]\n  }\n}\n```\n\n# webpack插件的使用\n\n## webpack-dev-server1.x升级2.x\n\n1.在CLI使用的时候，--inline默认开启，无需在输入命令时添加\n\n2.删除contentBase用proxy代替\n\n3.减少控制台无用输出，在1.x中，当我们停掉服务器后，控制台会一直输出错误信息，但是在2.x中只会输出`[WDS] Disconnected!`\n\n## extract-text-webpack-plugin\n\n在使用webpack将vue_spa打包后，并不会出现css，因为css被打包入build.js，如果从vue组件中抽离出css，需要安装插件**extract-text-webpack-plugin**，在使用的时候需要配合v2版本的才可以使用（如果使用了webpack2，则对应的插件版本都需要用v2版本）。具体配置如下：\n\n```js\nmodule:{\n  rules:[\n    {\n      test: /\\.vue$/,\n      loader: 'vue',\n      options: {\n        loaders:{\n          css: extractTextPlugin.extract({\n            loader: 'css-loader',\n            fallbackLoader: 'vue-style-loader'\n          })\n        }\n      }\n    }\n  ]\n},\nplugins: [\n  new webpack.HotModuleReplacementPlugin(),\n  new extractTextPlugin({\n    filename:'/style.css',\n    allChunks:true\n  })\n],\n```\n在options中：\n\noptions.loader: string | object | loader[]  (必填项) 这里的 loader(s) 用于将资源转换为css导出模块\n\noptions.fallbackLoader: string | object | loader[] 当css没有被导出的时候这里的 loader(s) 会被使用 （即当在plugins模块中设置allChunks:false的时候）\n\n在plugins中：\n\nfilename：可以设置被导出的css文件的路径以及名字\n\nallChunks：从所有附加块中提取（默认情况下，它只从初始块中提取）\n\n## html-webpack-plugin\n\n```js\nplugins: [\n  new htmlWwebpackPlugin({\n    filename: 'assets/admin.html'\n  }),\n]\n```\n\ntitle：用于生成文档的document\n\nfilename：要注入的html文件，默认为index.html。可以自定义（例如：assets/admin.html）\n\ninject：\ntrue | ‘head’ | ‘body’ | false \n将资源注入所给的template或templateContent，当设置为 true 或者 ‘body’，所有的资源会被注入到body底部。而head则会将js放到headelement\n\nfavicon: 在输出的html中添加favicon\n\nhash: true | false 如果为true，则将一个唯一的webpack编译散列附加到所有包含的脚本和CSS文件。这对缓存清除很有用。\n\ncache: true | false 如果为true（默认），尝试仅在更改后才发出文件。\n\n## 是否要更换preset？\n\nwebpack2.x默认支持es6的模块，所以在编译时候没有必要将它们先转换为CommonJS模块再处理，所以在github中出现了babel-preset-es2015-webpack，但是这个模块我在使用的时候出现了`Cannot remove 'babel-plugin-transform-es2015-modules-commonjs' from the plugin list.`的问题，根据babel-preset-es2015-webpack中的叙述以及[issues#14](https://github.com/gajus/babel-preset-es2015-webpack/issues/14)可知，babel-preset-es2015已经支持不转换模块中的`import`和`export`，只需要设置`.babelrc`\n\n```json\n{\n    \"presets\": [\n        [\n            \"es2015\",\n            {\n                \"modules\": false\n            }\n        ]\n    ]\n}\n```\n\n## 使用CommonsChunkPlugin将第三方库单独打包\n\n很多情况下我们会引入第三方库，但是默认情况下，webpack会将第三方库与我们自己写的js一起打包进生成文件中，为了让第三方库与我们自己写的js分开，webpack2.x内置一个插件CommonsChunkPlugin，它可以让webpack在打包的时候将我们自己写的js与第三方库分开，具体用法如下：\n\n```js\nentry:{\n  app: './src/main.js',\n  vendor: [\n    'lodash',\n    'axios',\n    'vue',\n    'vue-router'\n  ]\n},\noutput: {\n  path: path.resolve(__dirname + '/dist'),\n  publicPath: '/dist',\n  filename: '[name].js'\n},\nplugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      name:'vendor'\n    })\n]\n```\n这里需要注意一点，这里在在输出的时候需要使用`filename: '[name].js'`，否则会报错。\n\n# 参考：\n\n[从 webpack v1 迁移到 webpack v2](http://www.zcfy.cc/article/migrating-from-v1-to-v2-2378.html)\n\n[What’s new in webpack dev server 2.0](https://medium.com/webpack/whats-new-in-webpack-dev-server-2-0-a66848c3679#.b8ftvlujv)","source":"_posts/webpack2.md","raw":"---\ntitle: Webpack2.x踩坑与总结\ndate: 2017-02-07 22:41:09\ntags: webpack\ncomments: true\ncategories: \"webpack\"\n---\n![](/img/webpack2.jpg)\n> 本篇为在学习Vue2.x的时候使用Webpack2.x的踩坑与总结，关于Vue2.x的踩坑与总结，[点击链接](http://mrzhang123.github.io/2017/02/07/vue2/)\n\n<!--more-->\n\n项目地址：[https://github.com/MrZhang123/Vue_project/tree/master/vue2.x](https://github.com/MrZhang123/Vue_project/tree/master/vue2.x)\n\n# 本地安装npm包后如何在命令行运行\n\n在npm安装包的时候，如果使用全局安装，即`npm install <packageName> -g`，则在安装完成后可以在终端运行作为命令去运行，但是如果是本地安装的包`npm install --save-dev <packageName>`，则无法这样直接运行。那么如何运行本地安装的包呢？首先进入项目目录（即package.json所在目录），然后使用以下命令即可运行：\n\n```shell\n\n$ node_modules/.bin/<packageName>\n\n```\n\n除了可以这样在命令行运行外，还可以在文件中运行\n\n```js\n\n//index.js\n\nlet webpack = require('webpack');\n\nwebpack();\n\n```\n\n```shell\n\n$ node index.js\n\n```\n\n# webpack1.x升级2.x\n\n## 1.`module.loaders`改成了`module.rules`\n\n旧的`loaders`被新的`rules`取代，后者允许配置`loader`以及其他更多项。\n\n```js\n  module: {\n-   loaders: [\n+   rules: [\n      {\n        test: /\\.css$/,\n-       loaders: [\n+       use: [\n          {\n            loader: \"style-loader\"\n          },\n          {\n            loader: \"css-loader\",\n-           query: {\n+           options: {\n              modules: true\n            }\n        ]\n      },\n      {\n        test: /\\.jsx$/,\n        loader: \"babel-loader\", // Do not use \"use\" here\n        options: {\n          // ...\n        }\n      }\n    ]\n  }\n```\n以上写法中，`Rule.loader`是`Rule.use: [ { loader } ]`的简写。\n\n## 2.链式调用loaders\n\n在webpack1.x中loaders可以链式调用，在2.x中依旧有该特性，使用`rule.use`配置项，`use`中设置一个loaders的数组而在1.x中使用`!`连接各个loader，旧版写法只有在使用旧的`module.loaders`时有效。\n\n```js\n  module: {\n-   loaders: {\n+   rules: {\n      test: /\\.less$/,\n-     loader: \"style-loader!css-loader!less-loader\"\n+     use: [\n+       \"style-loader\",\n+       \"css-loader\",\n+       \"less-loader\"\n+     ]\n    }\n  }\n```\n\n## 3.取消在模块中自动添加`-loader`后缀\n\nwebpack2.x中不再添加`-loader`\n\n```js\n  module: {\n    rules: [\n      {\n        use: [\n-         \"style\",\n+         \"style-loader\",\n-         \"css\",\n+         \"css-loader\",\n-         \"less\",\n+         \"less-loader\",\n        ]\n      }\n    ]\n  }\n```\n\n根据官方说法，做出这样更改的原因是省略`-loader`会对新手造成误解，所以去掉这个功能，如果想打开这个旧的功能，可以配置`resolveLoader.moduleExtensions`，但是并不推荐这么做，具体参阅[issues#2986](https://github.com/webpack/webpack/issues/2986)\n\n```js\n+ resolveLoader: {\n+   moduleExtensions: [\"-loader\"]\n+ }\n```\n\n## 4.使用options配置loader\n\n在webpack1.x中可以通过webpack.config.js的自定义属性来配置loader，这在webpack2.x中无法执行\n\n```js\nmodule.exports = { \n  ...\n  module: { \n    use: [{ \n      test: /\\.tsx?$/,\n      loader: 'ts-loader'\n    }]\n  },\n  // does not work with webpack 2\n  ts: { transpileOnly: false } \n}\n//webpack2 use options\nmodule.exports = { \n  ...\n  module: { \n    use: [{ \n      test: /\\.tsx?$/,\n      loader: 'ts-loader'\n      options:  { transpileOnly: false }\n    }]\n  }\n}\n```\n\n# webpack插件的使用\n\n## webpack-dev-server1.x升级2.x\n\n1.在CLI使用的时候，--inline默认开启，无需在输入命令时添加\n\n2.删除contentBase用proxy代替\n\n3.减少控制台无用输出，在1.x中，当我们停掉服务器后，控制台会一直输出错误信息，但是在2.x中只会输出`[WDS] Disconnected!`\n\n## extract-text-webpack-plugin\n\n在使用webpack将vue_spa打包后，并不会出现css，因为css被打包入build.js，如果从vue组件中抽离出css，需要安装插件**extract-text-webpack-plugin**，在使用的时候需要配合v2版本的才可以使用（如果使用了webpack2，则对应的插件版本都需要用v2版本）。具体配置如下：\n\n```js\nmodule:{\n  rules:[\n    {\n      test: /\\.vue$/,\n      loader: 'vue',\n      options: {\n        loaders:{\n          css: extractTextPlugin.extract({\n            loader: 'css-loader',\n            fallbackLoader: 'vue-style-loader'\n          })\n        }\n      }\n    }\n  ]\n},\nplugins: [\n  new webpack.HotModuleReplacementPlugin(),\n  new extractTextPlugin({\n    filename:'/style.css',\n    allChunks:true\n  })\n],\n```\n在options中：\n\noptions.loader: string | object | loader[]  (必填项) 这里的 loader(s) 用于将资源转换为css导出模块\n\noptions.fallbackLoader: string | object | loader[] 当css没有被导出的时候这里的 loader(s) 会被使用 （即当在plugins模块中设置allChunks:false的时候）\n\n在plugins中：\n\nfilename：可以设置被导出的css文件的路径以及名字\n\nallChunks：从所有附加块中提取（默认情况下，它只从初始块中提取）\n\n## html-webpack-plugin\n\n```js\nplugins: [\n  new htmlWwebpackPlugin({\n    filename: 'assets/admin.html'\n  }),\n]\n```\n\ntitle：用于生成文档的document\n\nfilename：要注入的html文件，默认为index.html。可以自定义（例如：assets/admin.html）\n\ninject：\ntrue | ‘head’ | ‘body’ | false \n将资源注入所给的template或templateContent，当设置为 true 或者 ‘body’，所有的资源会被注入到body底部。而head则会将js放到headelement\n\nfavicon: 在输出的html中添加favicon\n\nhash: true | false 如果为true，则将一个唯一的webpack编译散列附加到所有包含的脚本和CSS文件。这对缓存清除很有用。\n\ncache: true | false 如果为true（默认），尝试仅在更改后才发出文件。\n\n## 是否要更换preset？\n\nwebpack2.x默认支持es6的模块，所以在编译时候没有必要将它们先转换为CommonJS模块再处理，所以在github中出现了babel-preset-es2015-webpack，但是这个模块我在使用的时候出现了`Cannot remove 'babel-plugin-transform-es2015-modules-commonjs' from the plugin list.`的问题，根据babel-preset-es2015-webpack中的叙述以及[issues#14](https://github.com/gajus/babel-preset-es2015-webpack/issues/14)可知，babel-preset-es2015已经支持不转换模块中的`import`和`export`，只需要设置`.babelrc`\n\n```json\n{\n    \"presets\": [\n        [\n            \"es2015\",\n            {\n                \"modules\": false\n            }\n        ]\n    ]\n}\n```\n\n## 使用CommonsChunkPlugin将第三方库单独打包\n\n很多情况下我们会引入第三方库，但是默认情况下，webpack会将第三方库与我们自己写的js一起打包进生成文件中，为了让第三方库与我们自己写的js分开，webpack2.x内置一个插件CommonsChunkPlugin，它可以让webpack在打包的时候将我们自己写的js与第三方库分开，具体用法如下：\n\n```js\nentry:{\n  app: './src/main.js',\n  vendor: [\n    'lodash',\n    'axios',\n    'vue',\n    'vue-router'\n  ]\n},\noutput: {\n  path: path.resolve(__dirname + '/dist'),\n  publicPath: '/dist',\n  filename: '[name].js'\n},\nplugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      name:'vendor'\n    })\n]\n```\n这里需要注意一点，这里在在输出的时候需要使用`filename: '[name].js'`，否则会报错。\n\n# 参考：\n\n[从 webpack v1 迁移到 webpack v2](http://www.zcfy.cc/article/migrating-from-v1-to-v2-2378.html)\n\n[What’s new in webpack dev server 2.0](https://medium.com/webpack/whats-new-in-webpack-dev-server-2-0-a66848c3679#.b8ftvlujv)","slug":"webpack2","published":1,"updated":"2017-03-04T11:41:14.000Z","layout":"post","photos":[],"link":"","_id":"cjfxktocj004dzrv4172925lw","content":"<p><img src=\"/img/webpack2.jpg\" alt=\"\"></p>\n<blockquote>\n<p>本篇为在学习Vue2.x的时候使用Webpack2.x的踩坑与总结，关于Vue2.x的踩坑与总结，<a href=\"http://mrzhang123.github.io/2017/02/07/vue2/\">点击链接</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>项目地址：<a href=\"https://github.com/MrZhang123/Vue_project/tree/master/vue2.x\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/Vue_project/tree/master/vue2.x</a></p>\n<h1 id=\"本地安装npm包后如何在命令行运行\"><a href=\"#本地安装npm包后如何在命令行运行\" class=\"headerlink\" title=\"本地安装npm包后如何在命令行运行\"></a>本地安装npm包后如何在命令行运行</h1><p>在npm安装包的时候，如果使用全局安装，即<code>npm install &lt;packageName&gt; -g</code>，则在安装完成后可以在终端运行作为命令去运行，但是如果是本地安装的包<code>npm install --save-dev &lt;packageName&gt;</code>，则无法这样直接运行。那么如何运行本地安装的包呢？首先进入项目目录（即package.json所在目录），然后使用以下命令即可运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node_modules/.bin/&lt;packageName&gt;</span></span><br></pre></td></tr></table></figure>\n<p>除了可以这样在命令行运行外，还可以在文件中运行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">webpack();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node index.js</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"webpack1-x升级2-x\"><a href=\"#webpack1-x升级2-x\" class=\"headerlink\" title=\"webpack1.x升级2.x\"></a>webpack1.x升级2.x</h1><h2 id=\"1-module-loaders改成了module-rules\"><a href=\"#1-module-loaders改成了module-rules\" class=\"headerlink\" title=\"1.module.loaders改成了module.rules\"></a>1.<code>module.loaders</code>改成了<code>module.rules</code></h2><p>旧的<code>loaders</code>被新的<code>rules</code>取代，后者允许配置<code>loader</code>以及其他更多项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">-   loaders: [</span><br><span class=\"line\">+   rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">-       loaders: [</span><br><span class=\"line\">+       use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">-           query: &#123;</span><br><span class=\"line\">+           options: &#123;</span><br><span class=\"line\">              modules: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jsx$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">\"babel-loader\"</span>, <span class=\"comment\">// Do not use \"use\" here</span></span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>以上写法中，<code>Rule.loader</code>是<code>Rule.use: [ { loader } ]</code>的简写。</p>\n<h2 id=\"2-链式调用loaders\"><a href=\"#2-链式调用loaders\" class=\"headerlink\" title=\"2.链式调用loaders\"></a>2.链式调用loaders</h2><p>在webpack1.x中loaders可以链式调用，在2.x中依旧有该特性，使用<code>rule.use</code>配置项，<code>use</code>中设置一个loaders的数组而在1.x中使用<code>!</code>连接各个loader，旧版写法只有在使用旧的<code>module.loaders</code>时有效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">-   loaders: &#123;</span><br><span class=\"line\">+   rules: &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">-     loader: <span class=\"string\">\"style-loader!css-loader!less-loader\"</span></span><br><span class=\"line\">+     use: [</span><br><span class=\"line\">+       <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">+       <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">+       <span class=\"string\">\"less-loader\"</span></span><br><span class=\"line\">+     ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-取消在模块中自动添加-loader后缀\"><a href=\"#3-取消在模块中自动添加-loader后缀\" class=\"headerlink\" title=\"3.取消在模块中自动添加-loader后缀\"></a>3.取消在模块中自动添加<code>-loader</code>后缀</h2><p>webpack2.x中不再添加<code>-loader</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">-         <span class=\"string\">\"style\"</span>,</span><br><span class=\"line\">+         <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">-         <span class=\"string\">\"css\"</span>,</span><br><span class=\"line\">+         <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">-         <span class=\"string\">\"less\"</span>,</span><br><span class=\"line\">+         <span class=\"string\">\"less-loader\"</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>根据官方说法，做出这样更改的原因是省略<code>-loader</code>会对新手造成误解，所以去掉这个功能，如果想打开这个旧的功能，可以配置<code>resolveLoader.moduleExtensions</code>，但是并不推荐这么做，具体参阅<a href=\"https://github.com/webpack/webpack/issues/2986\" target=\"_blank\" rel=\"noopener\">issues#2986</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ resolveLoader: &#123;</span><br><span class=\"line\">+   moduleExtensions: [<span class=\"string\">\"-loader\"</span>]</span><br><span class=\"line\">+ &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-使用options配置loader\"><a href=\"#4-使用options配置loader\" class=\"headerlink\" title=\"4.使用options配置loader\"></a>4.使用options配置loader</h2><p>在webpack1.x中可以通过webpack.config.js的自定义属性来配置loader，这在webpack2.x中无法执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123; </span><br><span class=\"line\">    use: [&#123; </span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'ts-loader'</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// does not work with webpack 2</span></span><br><span class=\"line\">  ts: &#123; <span class=\"attr\">transpileOnly</span>: <span class=\"literal\">false</span> &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//webpack2 use options</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123; </span><br><span class=\"line\">    use: [&#123; </span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'ts-loader'</span></span><br><span class=\"line\">      options:  &#123; <span class=\"attr\">transpileOnly</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"webpack插件的使用\"><a href=\"#webpack插件的使用\" class=\"headerlink\" title=\"webpack插件的使用\"></a>webpack插件的使用</h1><h2 id=\"webpack-dev-server1-x升级2-x\"><a href=\"#webpack-dev-server1-x升级2-x\" class=\"headerlink\" title=\"webpack-dev-server1.x升级2.x\"></a>webpack-dev-server1.x升级2.x</h2><p>1.在CLI使用的时候，–inline默认开启，无需在输入命令时添加</p>\n<p>2.删除contentBase用proxy代替</p>\n<p>3.减少控制台无用输出，在1.x中，当我们停掉服务器后，控制台会一直输出错误信息，但是在2.x中只会输出<code>[WDS] Disconnected!</code></p>\n<h2 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a>extract-text-webpack-plugin</h2><p>在使用webpack将vue_spa打包后，并不会出现css，因为css被打包入build.js，如果从vue组件中抽离出css，需要安装插件<strong>extract-text-webpack-plugin</strong>，在使用的时候需要配合v2版本的才可以使用（如果使用了webpack2，则对应的插件版本都需要用v2版本）。具体配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">  rules:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'vue'</span>,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        loaders:&#123;</span><br><span class=\"line\">          css: extractTextPlugin.extract(&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">            fallbackLoader: <span class=\"string\">'vue-style-loader'</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> extractTextPlugin(&#123;</span><br><span class=\"line\">    filename:<span class=\"string\">'/style.css'</span>,</span><br><span class=\"line\">    allChunks:<span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>在options中：</p>\n<p>options.loader: string | object | loader[]  (必填项) 这里的 loader(s) 用于将资源转换为css导出模块</p>\n<p>options.fallbackLoader: string | object | loader[] 当css没有被导出的时候这里的 loader(s) 会被使用 （即当在plugins模块中设置allChunks:false的时候）</p>\n<p>在plugins中：</p>\n<p>filename：可以设置被导出的css文件的路径以及名字</p>\n<p>allChunks：从所有附加块中提取（默认情况下，它只从初始块中提取）</p>\n<h2 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" class=\"headerlink\" title=\"html-webpack-plugin\"></a>html-webpack-plugin</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> htmlWwebpackPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'assets/admin.html'</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>title：用于生成文档的document</p>\n<p>filename：要注入的html文件，默认为index.html。可以自定义（例如：assets/admin.html）</p>\n<p>inject：<br>true | ‘head’ | ‘body’ | false<br>将资源注入所给的template或templateContent，当设置为 true 或者 ‘body’，所有的资源会被注入到body底部。而head则会将js放到headelement</p>\n<p>favicon: 在输出的html中添加favicon</p>\n<p>hash: true | false 如果为true，则将一个唯一的webpack编译散列附加到所有包含的脚本和CSS文件。这对缓存清除很有用。</p>\n<p>cache: true | false 如果为true（默认），尝试仅在更改后才发出文件。</p>\n<h2 id=\"是否要更换preset？\"><a href=\"#是否要更换preset？\" class=\"headerlink\" title=\"是否要更换preset？\"></a>是否要更换preset？</h2><p>webpack2.x默认支持es6的模块，所以在编译时候没有必要将它们先转换为CommonJS模块再处理，所以在github中出现了babel-preset-es2015-webpack，但是这个模块我在使用的时候出现了<code>Cannot remove &#39;babel-plugin-transform-es2015-modules-commonjs&#39; from the plugin list.</code>的问题，根据babel-preset-es2015-webpack中的叙述以及<a href=\"https://github.com/gajus/babel-preset-es2015-webpack/issues/14\" target=\"_blank\" rel=\"noopener\">issues#14</a>可知，babel-preset-es2015已经支持不转换模块中的<code>import</code>和<code>export</code>，只需要设置<code>.babelrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"modules\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用CommonsChunkPlugin将第三方库单独打包\"><a href=\"#使用CommonsChunkPlugin将第三方库单独打包\" class=\"headerlink\" title=\"使用CommonsChunkPlugin将第三方库单独打包\"></a>使用CommonsChunkPlugin将第三方库单独打包</h2><p>很多情况下我们会引入第三方库，但是默认情况下，webpack会将第三方库与我们自己写的js一起打包进生成文件中，为了让第三方库与我们自己写的js分开，webpack2.x内置一个插件CommonsChunkPlugin，它可以让webpack在打包的时候将我们自己写的js与第三方库分开，具体用法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry:&#123;</span><br><span class=\"line\">  app: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">  vendor: [</span><br><span class=\"line\">    <span class=\"string\">'lodash'</span>,</span><br><span class=\"line\">    <span class=\"string\">'axios'</span>,</span><br><span class=\"line\">    <span class=\"string\">'vue'</span>,</span><br><span class=\"line\">    <span class=\"string\">'vue-router'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">  path: path.resolve(__dirname + <span class=\"string\">'/dist'</span>),</span><br><span class=\"line\">  publicPath: <span class=\"string\">'/dist'</span>,</span><br><span class=\"line\">  filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name:<span class=\"string\">'vendor'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>这里需要注意一点，这里在在输出的时候需要使用<code>filename: &#39;[name].js&#39;</code>，否则会报错。</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"http://www.zcfy.cc/article/migrating-from-v1-to-v2-2378.html\" target=\"_blank\" rel=\"noopener\">从 webpack v1 迁移到 webpack v2</a></p>\n<p><a href=\"https://medium.com/webpack/whats-new-in-webpack-dev-server-2-0-a66848c3679#.b8ftvlujv\" target=\"_blank\" rel=\"noopener\">What’s new in webpack dev server 2.0</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/webpack2.jpg\" alt=\"\"></p>\n<blockquote>\n<p>本篇为在学习Vue2.x的时候使用Webpack2.x的踩坑与总结，关于Vue2.x的踩坑与总结，<a href=\"http://mrzhang123.github.io/2017/02/07/vue2/\">点击链接</a></p>\n</blockquote>","more":"<p>项目地址：<a href=\"https://github.com/MrZhang123/Vue_project/tree/master/vue2.x\" target=\"_blank\" rel=\"noopener\">https://github.com/MrZhang123/Vue_project/tree/master/vue2.x</a></p>\n<h1 id=\"本地安装npm包后如何在命令行运行\"><a href=\"#本地安装npm包后如何在命令行运行\" class=\"headerlink\" title=\"本地安装npm包后如何在命令行运行\"></a>本地安装npm包后如何在命令行运行</h1><p>在npm安装包的时候，如果使用全局安装，即<code>npm install &lt;packageName&gt; -g</code>，则在安装完成后可以在终端运行作为命令去运行，但是如果是本地安装的包<code>npm install --save-dev &lt;packageName&gt;</code>，则无法这样直接运行。那么如何运行本地安装的包呢？首先进入项目目录（即package.json所在目录），然后使用以下命令即可运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node_modules/.bin/&lt;packageName&gt;</span></span><br></pre></td></tr></table></figure>\n<p>除了可以这样在命令行运行外，还可以在文件中运行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">webpack();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node index.js</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"webpack1-x升级2-x\"><a href=\"#webpack1-x升级2-x\" class=\"headerlink\" title=\"webpack1.x升级2.x\"></a>webpack1.x升级2.x</h1><h2 id=\"1-module-loaders改成了module-rules\"><a href=\"#1-module-loaders改成了module-rules\" class=\"headerlink\" title=\"1.module.loaders改成了module.rules\"></a>1.<code>module.loaders</code>改成了<code>module.rules</code></h2><p>旧的<code>loaders</code>被新的<code>rules</code>取代，后者允许配置<code>loader</code>以及其他更多项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">-   loaders: [</span><br><span class=\"line\">+   rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">-       loaders: [</span><br><span class=\"line\">+       use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">-           query: &#123;</span><br><span class=\"line\">+           options: &#123;</span><br><span class=\"line\">              modules: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jsx$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">\"babel-loader\"</span>, <span class=\"comment\">// Do not use \"use\" here</span></span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>以上写法中，<code>Rule.loader</code>是<code>Rule.use: [ { loader } ]</code>的简写。</p>\n<h2 id=\"2-链式调用loaders\"><a href=\"#2-链式调用loaders\" class=\"headerlink\" title=\"2.链式调用loaders\"></a>2.链式调用loaders</h2><p>在webpack1.x中loaders可以链式调用，在2.x中依旧有该特性，使用<code>rule.use</code>配置项，<code>use</code>中设置一个loaders的数组而在1.x中使用<code>!</code>连接各个loader，旧版写法只有在使用旧的<code>module.loaders</code>时有效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">-   loaders: &#123;</span><br><span class=\"line\">+   rules: &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">-     loader: <span class=\"string\">\"style-loader!css-loader!less-loader\"</span></span><br><span class=\"line\">+     use: [</span><br><span class=\"line\">+       <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">+       <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">+       <span class=\"string\">\"less-loader\"</span></span><br><span class=\"line\">+     ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-取消在模块中自动添加-loader后缀\"><a href=\"#3-取消在模块中自动添加-loader后缀\" class=\"headerlink\" title=\"3.取消在模块中自动添加-loader后缀\"></a>3.取消在模块中自动添加<code>-loader</code>后缀</h2><p>webpack2.x中不再添加<code>-loader</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">-         <span class=\"string\">\"style\"</span>,</span><br><span class=\"line\">+         <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">-         <span class=\"string\">\"css\"</span>,</span><br><span class=\"line\">+         <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">-         <span class=\"string\">\"less\"</span>,</span><br><span class=\"line\">+         <span class=\"string\">\"less-loader\"</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>根据官方说法，做出这样更改的原因是省略<code>-loader</code>会对新手造成误解，所以去掉这个功能，如果想打开这个旧的功能，可以配置<code>resolveLoader.moduleExtensions</code>，但是并不推荐这么做，具体参阅<a href=\"https://github.com/webpack/webpack/issues/2986\" target=\"_blank\" rel=\"noopener\">issues#2986</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ resolveLoader: &#123;</span><br><span class=\"line\">+   moduleExtensions: [<span class=\"string\">\"-loader\"</span>]</span><br><span class=\"line\">+ &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-使用options配置loader\"><a href=\"#4-使用options配置loader\" class=\"headerlink\" title=\"4.使用options配置loader\"></a>4.使用options配置loader</h2><p>在webpack1.x中可以通过webpack.config.js的自定义属性来配置loader，这在webpack2.x中无法执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123; </span><br><span class=\"line\">    use: [&#123; </span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'ts-loader'</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// does not work with webpack 2</span></span><br><span class=\"line\">  ts: &#123; <span class=\"attr\">transpileOnly</span>: <span class=\"literal\">false</span> &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//webpack2 use options</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123; </span><br><span class=\"line\">    use: [&#123; </span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'ts-loader'</span></span><br><span class=\"line\">      options:  &#123; <span class=\"attr\">transpileOnly</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"webpack插件的使用\"><a href=\"#webpack插件的使用\" class=\"headerlink\" title=\"webpack插件的使用\"></a>webpack插件的使用</h1><h2 id=\"webpack-dev-server1-x升级2-x\"><a href=\"#webpack-dev-server1-x升级2-x\" class=\"headerlink\" title=\"webpack-dev-server1.x升级2.x\"></a>webpack-dev-server1.x升级2.x</h2><p>1.在CLI使用的时候，–inline默认开启，无需在输入命令时添加</p>\n<p>2.删除contentBase用proxy代替</p>\n<p>3.减少控制台无用输出，在1.x中，当我们停掉服务器后，控制台会一直输出错误信息，但是在2.x中只会输出<code>[WDS] Disconnected!</code></p>\n<h2 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a>extract-text-webpack-plugin</h2><p>在使用webpack将vue_spa打包后，并不会出现css，因为css被打包入build.js，如果从vue组件中抽离出css，需要安装插件<strong>extract-text-webpack-plugin</strong>，在使用的时候需要配合v2版本的才可以使用（如果使用了webpack2，则对应的插件版本都需要用v2版本）。具体配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">  rules:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">      loader: <span class=\"string\">'vue'</span>,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        loaders:&#123;</span><br><span class=\"line\">          css: extractTextPlugin.extract(&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">            fallbackLoader: <span class=\"string\">'vue-style-loader'</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> extractTextPlugin(&#123;</span><br><span class=\"line\">    filename:<span class=\"string\">'/style.css'</span>,</span><br><span class=\"line\">    allChunks:<span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>在options中：</p>\n<p>options.loader: string | object | loader[]  (必填项) 这里的 loader(s) 用于将资源转换为css导出模块</p>\n<p>options.fallbackLoader: string | object | loader[] 当css没有被导出的时候这里的 loader(s) 会被使用 （即当在plugins模块中设置allChunks:false的时候）</p>\n<p>在plugins中：</p>\n<p>filename：可以设置被导出的css文件的路径以及名字</p>\n<p>allChunks：从所有附加块中提取（默认情况下，它只从初始块中提取）</p>\n<h2 id=\"html-webpack-plugin\"><a href=\"#html-webpack-plugin\" class=\"headerlink\" title=\"html-webpack-plugin\"></a>html-webpack-plugin</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> htmlWwebpackPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'assets/admin.html'</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>title：用于生成文档的document</p>\n<p>filename：要注入的html文件，默认为index.html。可以自定义（例如：assets/admin.html）</p>\n<p>inject：<br>true | ‘head’ | ‘body’ | false<br>将资源注入所给的template或templateContent，当设置为 true 或者 ‘body’，所有的资源会被注入到body底部。而head则会将js放到headelement</p>\n<p>favicon: 在输出的html中添加favicon</p>\n<p>hash: true | false 如果为true，则将一个唯一的webpack编译散列附加到所有包含的脚本和CSS文件。这对缓存清除很有用。</p>\n<p>cache: true | false 如果为true（默认），尝试仅在更改后才发出文件。</p>\n<h2 id=\"是否要更换preset？\"><a href=\"#是否要更换preset？\" class=\"headerlink\" title=\"是否要更换preset？\"></a>是否要更换preset？</h2><p>webpack2.x默认支持es6的模块，所以在编译时候没有必要将它们先转换为CommonJS模块再处理，所以在github中出现了babel-preset-es2015-webpack，但是这个模块我在使用的时候出现了<code>Cannot remove &#39;babel-plugin-transform-es2015-modules-commonjs&#39; from the plugin list.</code>的问题，根据babel-preset-es2015-webpack中的叙述以及<a href=\"https://github.com/gajus/babel-preset-es2015-webpack/issues/14\" target=\"_blank\" rel=\"noopener\">issues#14</a>可知，babel-preset-es2015已经支持不转换模块中的<code>import</code>和<code>export</code>，只需要设置<code>.babelrc</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"modules\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用CommonsChunkPlugin将第三方库单独打包\"><a href=\"#使用CommonsChunkPlugin将第三方库单独打包\" class=\"headerlink\" title=\"使用CommonsChunkPlugin将第三方库单独打包\"></a>使用CommonsChunkPlugin将第三方库单独打包</h2><p>很多情况下我们会引入第三方库，但是默认情况下，webpack会将第三方库与我们自己写的js一起打包进生成文件中，为了让第三方库与我们自己写的js分开，webpack2.x内置一个插件CommonsChunkPlugin，它可以让webpack在打包的时候将我们自己写的js与第三方库分开，具体用法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry:&#123;</span><br><span class=\"line\">  app: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">  vendor: [</span><br><span class=\"line\">    <span class=\"string\">'lodash'</span>,</span><br><span class=\"line\">    <span class=\"string\">'axios'</span>,</span><br><span class=\"line\">    <span class=\"string\">'vue'</span>,</span><br><span class=\"line\">    <span class=\"string\">'vue-router'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">  path: path.resolve(__dirname + <span class=\"string\">'/dist'</span>),</span><br><span class=\"line\">  publicPath: <span class=\"string\">'/dist'</span>,</span><br><span class=\"line\">  filename: <span class=\"string\">'[name].js'</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name:<span class=\"string\">'vendor'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>这里需要注意一点，这里在在输出的时候需要使用<code>filename: &#39;[name].js&#39;</code>，否则会报错。</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"http://www.zcfy.cc/article/migrating-from-v1-to-v2-2378.html\" target=\"_blank\" rel=\"noopener\">从 webpack v1 迁移到 webpack v2</a></p>\n<p><a href=\"https://medium.com/webpack/whats-new-in-webpack-dev-server-2-0-a66848c3679#.b8ftvlujv\" target=\"_blank\" rel=\"noopener\">What’s new in webpack dev server 2.0</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfxktoab0000zrv4s7asthwd","category_id":"cjfxktoai0004zrv4huelzu1r","_id":"cjfxktoat000fzrv47h9c8rlo"},{"post_id":"cjfxktoag0002zrv4lizn9yzm","category_id":"cjfxktoai0004zrv4huelzu1r","_id":"cjfxktoax000kzrv4r1d6zh7y"},{"post_id":"cjfxktoak0006zrv43tcxysd4","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktob0000rzrv4zvd1j6gu"},{"post_id":"cjfxktoax000jzrv42z3k3vtg","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktob3000wzrv4gm2et6ou"},{"post_id":"cjfxktoay000nzrv441710j0p","category_id":"cjfxktoai0004zrv4huelzu1r","_id":"cjfxktob4000zzrv4dncn44wi"},{"post_id":"cjfxktoam0007zrv4bok3ijnv","category_id":"cjfxktoax000lzrv4zco1skmv","_id":"cjfxktob50013zrv4rfm9pt5i"},{"post_id":"cjfxktoaz000pzrv4fztdwtfk","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktob60016zrv4jxuf9gsd"},{"post_id":"cjfxktoan0008zrv4te37exsp","category_id":"cjfxktob0000szrv46y9fz271","_id":"cjfxktob9001azrv4pcl3xmnt"},{"post_id":"cjfxktoaq000czrv49i3424jo","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktobb001ezrv45neoqul8"},{"post_id":"cjfxktob60015zrv4wwpnmgl2","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktobd001izrv4czih26wi"},{"post_id":"cjfxktoas000dzrv4fwae7nlj","category_id":"cjfxktob70017zrv4tpfbgkej","_id":"cjfxktobf001nzrv4w7y1oi7g"},{"post_id":"cjfxktoau000izrv4c76j68vv","category_id":"cjfxktob70017zrv4tpfbgkej","_id":"cjfxktobh001szrv4bhgdmv7g"},{"post_id":"cjfxktobe001lzrv46ipw71z5","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktobj001xzrv4edj5wsz3"},{"post_id":"cjfxktobf001pzrv4npxdf5vk","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktobk0020zrv47fs94mja"},{"post_id":"cjfxktob2000uzrv4y8xw29wy","category_id":"cjfxktobe001mzrv4w31ey8fi","_id":"cjfxktobm0025zrv4qblmxxgw"},{"post_id":"cjfxktobg001rzrv4p4kxlhy7","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktobn0028zrv4qfetcdn1"},{"post_id":"cjfxktobi001wzrv4esbo5wh5","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktobp002dzrv4ta7i7wzt"},{"post_id":"cjfxktob3000xzrv48foaa2na","category_id":"cjfxktobe001mzrv4w31ey8fi","_id":"cjfxktobr002gzrv4brss6t3o"},{"post_id":"cjfxktob40012zrv4ixzik4nh","category_id":"cjfxktobl0021zrv4tdh7sygm","_id":"cjfxktobs002kzrv4rl0izt53"},{"post_id":"cjfxktob80018zrv4ybhlmyi4","category_id":"cjfxktobo0029zrv4gl2dqwvq","_id":"cjfxktobt002ozrv496usp2p9"},{"post_id":"cjfxktobq002fzrv4iodg23fn","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktobw002tzrv43jihqr6v"},{"post_id":"cjfxktobr002jzrv4rm3i041n","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktoby002wzrv4rg51utl4"},{"post_id":"cjfxktobs002mzrv4x2h8ltp4","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktoc00031zrv4h2douvz2"},{"post_id":"cjfxktoba001czrv400dx6e0m","category_id":"cjfxktobr002hzrv4nkmucs3k","_id":"cjfxktoc10034zrv4nkxa5pk8"},{"post_id":"cjfxktobb001fzrv4ajcbaerc","category_id":"cjfxktobv002qzrv4srbx0lux","_id":"cjfxktoc20039zrv4lf7jcbmq"},{"post_id":"cjfxktoby002xzrv4t4dnav4n","category_id":"cjfxktoax000lzrv4zco1skmv","_id":"cjfxktoc3003czrv42czmdrd7"},{"post_id":"cjfxktoc00032zrv47ju1yai3","category_id":"cjfxktob70017zrv4tpfbgkej","_id":"cjfxktoc4003gzrv475w485v9"},{"post_id":"cjfxktobd001jzrv4v1e08naw","category_id":"cjfxktobz002yzrv4ctbwurpi","_id":"cjfxktoc7003kzrv4g38sybhy"},{"post_id":"cjfxktobk001zzrv4l3kedorh","category_id":"cjfxktoc20036zrv4j0bluaz9","_id":"cjfxktoc8003ozrv4kjodam45"},{"post_id":"cjfxktoc3003dzrv47kljsll7","category_id":"cjfxktoas000ezrv4t99m0xcp","_id":"cjfxktoca003rzrv4hqkafo8c"},{"post_id":"cjfxktoc5003izrv4mawukx8p","category_id":"cjfxktoai0004zrv4huelzu1r","_id":"cjfxktocb003vzrv4nhybeu65"},{"post_id":"cjfxktobm0024zrv45c4v2jr5","category_id":"cjfxktobr002hzrv4nkmucs3k","_id":"cjfxktocd003zzrv4uo8nugtj"},{"post_id":"cjfxktoc8003pzrv425lozpuw","category_id":"cjfxktoai0004zrv4huelzu1r","_id":"cjfxktoce0042zrv44licd5cs"},{"post_id":"cjfxktobn0027zrv4cpdraxvh","category_id":"cjfxktobr002hzrv4nkmucs3k","_id":"cjfxktocg0046zrv4uc5ozjra"},{"post_id":"cjfxktobo002czrv4229m7pbm","category_id":"cjfxktocb003uzrv4mm2dtg23","_id":"cjfxktoci004azrv4qku5n5sh"},{"post_id":"cjfxktobu002pzrv46prae6rw","category_id":"cjfxktocf0044zrv4tcvmnk85","_id":"cjfxktock004gzrv4pkpyu5tz"},{"post_id":"cjfxktobw002uzrv4gl87p9xl","category_id":"cjfxktocf0044zrv4tcvmnk85","_id":"cjfxktock004jzrv4ci056051"},{"post_id":"cjfxktoc10035zrv417r25jbm","category_id":"cjfxktock004fzrv4mnpwcttf","_id":"cjfxktocm004nzrv4ako1ys6f"},{"post_id":"cjfxktoc2003azrv4w4sr632t","category_id":"cjfxktocl004kzrv4qioovmxd","_id":"cjfxktocn004rzrv42wrqgxm5"},{"post_id":"cjfxktoc7003lzrv423y390t3","category_id":"cjfxktocm004ozrv4mn8lr5nb","_id":"cjfxktocn004vzrv4vxzfca02"},{"post_id":"cjfxktoca003tzrv4rwlywmn7","category_id":"cjfxktocn004szrv4hlai2yv8","_id":"cjfxktoco0050zrv4cx8okkxn"},{"post_id":"cjfxktocb003xzrv4il5gn676","category_id":"cjfxktock004fzrv4mnpwcttf","_id":"cjfxktocp0054zrv4nofp2koy"},{"post_id":"cjfxktocd0040zrv4r9fs2drw","category_id":"cjfxktock004fzrv4mnpwcttf","_id":"cjfxktocq0058zrv4qb582ena"},{"post_id":"cjfxktoce0043zrv4pjnpcork","category_id":"cjfxktock004fzrv4mnpwcttf","_id":"cjfxktocr005czrv4ufkoohic"},{"post_id":"cjfxktocg0047zrv4hr1sv2s7","category_id":"cjfxktock004fzrv4mnpwcttf","_id":"cjfxktocs005gzrv4nku74cte"},{"post_id":"cjfxktoch0049zrv4j5fvqrsp","category_id":"cjfxktock004fzrv4mnpwcttf","_id":"cjfxktoct005jzrv4z7wxy8e6"},{"post_id":"cjfxktocj004dzrv4172925lw","category_id":"cjfxktocs005fzrv4ciat4a74","_id":"cjfxktocu005mzrv4w6mcgh0g"}],"PostTag":[{"post_id":"cjfxktoab0000zrv4s7asthwd","tag_id":"cjfxktoak0005zrv45pht2x2s","_id":"cjfxktoaq000bzrv4orobpz8p"},{"post_id":"cjfxktoag0002zrv4lizn9yzm","tag_id":"cjfxktoak0005zrv45pht2x2s","_id":"cjfxktoau000hzrv42asncpvp"},{"post_id":"cjfxktoak0006zrv43tcxysd4","tag_id":"cjfxktoat000gzrv4sua65hou","_id":"cjfxktoaz000ozrv4t079hv21"},{"post_id":"cjfxktoax000jzrv42z3k3vtg","tag_id":"cjfxktoat000gzrv4sua65hou","_id":"cjfxktob0000qzrv41plufl7b"},{"post_id":"cjfxktoay000nzrv441710j0p","tag_id":"cjfxktoak0005zrv45pht2x2s","_id":"cjfxktob2000vzrv4xyb71uek"},{"post_id":"cjfxktoam0007zrv4bok3ijnv","tag_id":"cjfxktoax000mzrv4vwdxphsp","_id":"cjfxktob4000yzrv4fcrdvoed"},{"post_id":"cjfxktoan0008zrv4te37exsp","tag_id":"cjfxktob1000tzrv4ei6sasjh","_id":"cjfxktob50014zrv4hqo4m2sh"},{"post_id":"cjfxktob60015zrv4wwpnmgl2","tag_id":"cjfxktoat000gzrv4sua65hou","_id":"cjfxktoba001bzrv4huxmaoky"},{"post_id":"cjfxktoaq000czrv49i3424jo","tag_id":"cjfxktob40011zrv4qcfcuf0b","_id":"cjfxktobb001dzrv4v8nbud1b"},{"post_id":"cjfxktoas000dzrv4fwae7nlj","tag_id":"cjfxktob90019zrv43s6awfo6","_id":"cjfxktobe001kzrv4vxkve80m"},{"post_id":"cjfxktoau000izrv4c76j68vv","tag_id":"cjfxktob90019zrv43s6awfo6","_id":"cjfxktobg001qzrv4cpy5tct4"},{"post_id":"cjfxktobf001pzrv4npxdf5vk","tag_id":"cjfxktoat000gzrv4sua65hou","_id":"cjfxktobi001vzrv43vhqmvdj"},{"post_id":"cjfxktoaz000pzrv4fztdwtfk","tag_id":"cjfxktob40011zrv4qcfcuf0b","_id":"cjfxktobk001yzrv4uau2ljwy"},{"post_id":"cjfxktobg001rzrv4p4kxlhy7","tag_id":"cjfxktoat000gzrv4sua65hou","_id":"cjfxktobl0023zrv4uphn8rei"},{"post_id":"cjfxktobi001wzrv4esbo5wh5","tag_id":"cjfxktoat000gzrv4sua65hou","_id":"cjfxktobn0026zrv4kgxzib9x"},{"post_id":"cjfxktob2000uzrv4y8xw29wy","tag_id":"cjfxktobi001uzrv48qcekn6d","_id":"cjfxktobo002bzrv4lp22wosa"},{"post_id":"cjfxktob3000xzrv48foaa2na","tag_id":"cjfxktobi001uzrv48qcekn6d","_id":"cjfxktobq002ezrv49qlqruzp"},{"post_id":"cjfxktob40012zrv4ixzik4nh","tag_id":"cjfxktobo002azrv4pnffhi8g","_id":"cjfxktobs002lzrv4bhqa5gbn"},{"post_id":"cjfxktobq002fzrv4iodg23fn","tag_id":"cjfxktoat000gzrv4sua65hou","_id":"cjfxktobt002nzrv4h9cneenc"},{"post_id":"cjfxktobr002jzrv4rm3i041n","tag_id":"cjfxktoat000gzrv4sua65hou","_id":"cjfxktobw002szrv415iuytd9"},{"post_id":"cjfxktobs002mzrv4x2h8ltp4","tag_id":"cjfxktoat000gzrv4sua65hou","_id":"cjfxktoby002vzrv4wubkgac1"},{"post_id":"cjfxktob80018zrv4ybhlmyi4","tag_id":"cjfxktobr002izrv4ydluzcb5","_id":"cjfxktobz0030zrv46r8hfwmb"},{"post_id":"cjfxktoba001czrv400dx6e0m","tag_id":"cjfxktobv002rzrv4g0l9k0y2","_id":"cjfxktoc10033zrv4m3a1tyko"},{"post_id":"cjfxktoby002xzrv4t4dnav4n","tag_id":"cjfxktoax000mzrv4vwdxphsp","_id":"cjfxktoc20038zrv4xzlxuwxe"},{"post_id":"cjfxktoc00032zrv47ju1yai3","tag_id":"cjfxktob90019zrv43s6awfo6","_id":"cjfxktoc3003bzrv4fgisrpko"},{"post_id":"cjfxktobb001fzrv4ajcbaerc","tag_id":"cjfxktobz002zzrv4s3hf4j4f","_id":"cjfxktoc4003ezrv4qy7dzfa9"},{"post_id":"cjfxktobd001jzrv4v1e08naw","tag_id":"cjfxktoc20037zrv4xms2m48a","_id":"cjfxktoc7003jzrv4jer0yr8t"},{"post_id":"cjfxktoc5003izrv4mawukx8p","tag_id":"cjfxktoak0005zrv45pht2x2s","_id":"cjfxktoc8003mzrv43crztlp0"},{"post_id":"cjfxktobe001lzrv46ipw71z5","tag_id":"cjfxktoc5003hzrv4r5zhuz65","_id":"cjfxktoca003szrv4y2l2hfsj"},{"post_id":"cjfxktoc8003pzrv425lozpuw","tag_id":"cjfxktoak0005zrv45pht2x2s","_id":"cjfxktocb003wzrv4t2durxgi"},{"post_id":"cjfxktobk001zzrv4l3kedorh","tag_id":"cjfxktoc9003qzrv4h2e95awh","_id":"cjfxktoce0041zrv4m2rewjux"},{"post_id":"cjfxktobm0024zrv45c4v2jr5","tag_id":"cjfxktocc003yzrv4n62tzfea","_id":"cjfxktoch0048zrv47ke8ruwe"},{"post_id":"cjfxktobn0027zrv4cpdraxvh","tag_id":"cjfxktobv002rzrv4g0l9k0y2","_id":"cjfxktocj004ezrv4xo0z3zvg"},{"post_id":"cjfxktobo002czrv4229m7pbm","tag_id":"cjfxktoci004czrv4nihhgtn8","_id":"cjfxktock004izrv45q7uyp1v"},{"post_id":"cjfxktobu002pzrv46prae6rw","tag_id":"cjfxktock004hzrv4823k2y14","_id":"cjfxktocm004mzrv4gej35jih"},{"post_id":"cjfxktobw002uzrv4gl87p9xl","tag_id":"cjfxktock004hzrv4823k2y14","_id":"cjfxktocn004qzrv4x65qi23c"},{"post_id":"cjfxktoc10035zrv417r25jbm","tag_id":"cjfxktocm004pzrv4ykiw920o","_id":"cjfxktocn004uzrv4hzo70mjg"},{"post_id":"cjfxktoc2003azrv4w4sr632t","tag_id":"cjfxktocn004tzrv45576khv2","_id":"cjfxktoco004yzrv4t4zrnp2l"},{"post_id":"cjfxktoc3003dzrv47kljsll7","tag_id":"cjfxktoco004xzrv4p9la0h54","_id":"cjfxktocp0052zrv48jrvjal9"},{"post_id":"cjfxktoc7003lzrv423y390t3","tag_id":"cjfxktocp0051zrv4j6i2szsp","_id":"cjfxktocq0056zrv4d2voqty0"},{"post_id":"cjfxktoca003tzrv4rwlywmn7","tag_id":"cjfxktocq0055zrv44ujpuj1g","_id":"cjfxktocr005azrv4oxw32ufx"},{"post_id":"cjfxktocb003xzrv4il5gn676","tag_id":"cjfxktocm004pzrv4ykiw920o","_id":"cjfxktocs005ezrv4rutsnvdl"},{"post_id":"cjfxktocd0040zrv4r9fs2drw","tag_id":"cjfxktocm004pzrv4ykiw920o","_id":"cjfxktoct005izrv4hil7phid"},{"post_id":"cjfxktoce0043zrv4pjnpcork","tag_id":"cjfxktocm004pzrv4ykiw920o","_id":"cjfxktocu005lzrv4j4dnil2k"},{"post_id":"cjfxktocg0047zrv4hr1sv2s7","tag_id":"cjfxktocm004pzrv4ykiw920o","_id":"cjfxktocv005ozrv4n3mzrbgz"},{"post_id":"cjfxktoch0049zrv4j5fvqrsp","tag_id":"cjfxktocm004pzrv4ykiw920o","_id":"cjfxktocw005qzrv4sutn0mda"},{"post_id":"cjfxktocj004dzrv4172925lw","tag_id":"cjfxktocv005pzrv439d2peyn","_id":"cjfxktocx005rzrv4i507p1nu"}],"Tag":[{"name":"CSS","_id":"cjfxktoak0005zrv45pht2x2s"},{"name":"Javascript","_id":"cjfxktoat000gzrv4sua65hou"},{"name":"React Native","_id":"cjfxktoax000mzrv4vwdxphsp"},{"name":"HTML5","_id":"cjfxktob1000tzrv4ei6sasjh"},{"name":"H5 file，canvas","_id":"cjfxktob40011zrv4qcfcuf0b"},{"name":"生活","_id":"cjfxktob90019zrv43s6awfo6"},{"name":"git&github","_id":"cjfxktobi001uzrv48qcekn6d"},{"name":"Git","_id":"cjfxktobo002azrv4pnffhi8g"},{"name":"gulp","_id":"cjfxktobr002izrv4ydluzcb5"},{"name":"年终总结","_id":"cjfxktobv002rzrv4g0l9k0y2"},{"name":"Javascript Gulp Nodejs","_id":"cjfxktobz002zzrv4s3hf4j4f"},{"name":"hexo","_id":"cjfxktoc20037zrv4xms2m48a"},{"name":"javascript,iframe,POST,form","_id":"cjfxktoc5003hzrv4r5zhuz65"},{"name":"linux","_id":"cjfxktoc9003qzrv4h2e95awh"},{"name":"项目总结","_id":"cjfxktocc003yzrv4n62tzfea"},{"name":"Node","_id":"cjfxktoci004czrv4nihhgtn8"},{"name":"React","_id":"cjfxktock004hzrv4823k2y14"},{"name":"vue","_id":"cjfxktocm004pzrv4ykiw920o"},{"name":"jQuery","_id":"cjfxktocn004tzrv45576khv2"},{"name":"canvas","_id":"cjfxktoco004xzrv4p9la0h54"},{"name":"感想","_id":"cjfxktocp0051zrv4j6i2szsp"},{"name":"vim","_id":"cjfxktocq0055zrv44ujpuj1g"},{"name":"webpack","_id":"cjfxktocv005pzrv439d2peyn"}]}}